// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import 'dart:convert';
import 'dart:typed_data';

import 'package:shared_aws_api/shared.dart' as _s;
import 'package:shared_aws_api/shared.dart'
    show Uint8ListConverter, Uint8ListListConverter;

export 'package:shared_aws_api/shared.dart' show AwsClientCredentials;

/// Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable
/// computing capacity in the AWS cloud. Using Amazon EC2 eliminates the need to
/// invest in hardware up front, so you can develop and deploy applications
/// faster.
class EC2 {
  /// Accepts the Convertible Reserved Instance exchange quote described in the
  /// <a>GetReservedInstancesExchangeQuote</a> call.
  ///
  /// Parameter [reservedInstanceIds] :
  /// The IDs of the Convertible Reserved Instances to exchange for another
  /// Convertible Reserved Instance of the same or higher value.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [targetConfigurations] :
  /// The configuration of the target Convertible Reserved Instance to exchange
  /// for your current Convertible Reserved Instances.
  Future<AcceptReservedInstancesExchangeQuoteResult>
      acceptReservedInstancesExchangeQuote({
    @_s.required List<String> reservedInstanceIds,
    bool dryRun,
    List<TargetConfigurationRequest> targetConfigurations,
  }) async {
    ArgumentError.checkNotNull(reservedInstanceIds, 'reservedInstanceIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accepts a transit gateway peering attachment request. The peering
  /// attachment must be in the <code>pendingAcceptance</code> state.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AcceptTransitGatewayPeeringAttachmentResult>
      acceptTransitGatewayPeeringAttachment({
    @_s.required String transitGatewayAttachmentId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accepts a request to attach a VPC to a transit gateway.
  ///
  /// The VPC attachment must be in the <code>pendingAcceptance</code> state.
  /// Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC
  /// attachment requests. Use <a>RejectTransitGatewayVpcAttachment</a> to
  /// reject a VPC attachment request.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AcceptTransitGatewayVpcAttachmentResult>
      acceptTransitGatewayVpcAttachment({
    @_s.required String transitGatewayAttachmentId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accepts one or more interface VPC endpoint connection requests to your VPC
  /// endpoint service.
  ///
  /// Parameter [serviceId] :
  /// The ID of the VPC endpoint service.
  ///
  /// Parameter [vpcEndpointIds] :
  /// The IDs of one or more interface VPC endpoints.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AcceptVpcEndpointConnectionsResult> acceptVpcEndpointConnections({
    @_s.required String serviceId,
    @_s.required List<String> vpcEndpointIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(serviceId, 'serviceId');
    ArgumentError.checkNotNull(vpcEndpointIds, 'vpcEndpointIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Accept a VPC peering connection request. To accept a request, the VPC
  /// peering connection must be in the <code>pending-acceptance</code> state,
  /// and you must be the owner of the peer VPC. Use
  /// <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC peering
  /// connection requests.
  ///
  /// For an inter-Region VPC peering connection request, you must accept the
  /// VPC peering connection in the Region of the accepter VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of the VPC peering connection. You must specify this parameter in
  /// the request.
  Future<AcceptVpcPeeringConnectionResult> acceptVpcPeeringConnection({
    bool dryRun,
    String vpcPeeringConnectionId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Advertises an IPv4 or IPv6 address range that is provisioned for use with
  /// your AWS resources through bring your own IP addresses (BYOIP).
  ///
  /// You can perform this operation at most once every 10 seconds, even if you
  /// specify different address ranges each time.
  ///
  /// We recommend that you stop advertising the BYOIP CIDR from other locations
  /// when you advertise it from AWS. To minimize down time, you can configure
  /// your AWS resources to use an address from a BYOIP CIDR before it is
  /// advertised, and then simultaneously stop advertising it from the current
  /// location and start advertising it through AWS.
  ///
  /// It can take a few minutes before traffic to the specified addresses starts
  /// routing to AWS because of BGP propagation delays.
  ///
  /// To stop advertising the BYOIP CIDR, use <a>WithdrawByoipCidr</a>.
  ///
  /// Parameter [cidr] :
  /// The address range, in CIDR notation. This must be the exact range that you
  /// provisioned. You can't advertise only a portion of the provisioned range.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AdvertiseByoipCidrResult> advertiseByoipCidr({
    @_s.required String cidr,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(cidr, 'cidr');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Allocates an Elastic IP address to your AWS account. After you allocate
  /// the Elastic IP address you can associate it with an instance or network
  /// interface. After you release an Elastic IP address, it is released to the
  /// IP address pool and can be allocated to a different AWS account.
  ///
  /// You can allocate an Elastic IP address from an address pool owned by AWS
  /// or from an address pool created from a public IPv4 address range that you
  /// have brought to AWS for use with your AWS resources using bring your own
  /// IP addresses (BYOIP). For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring
  /// Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// [EC2-VPC] If you release an Elastic IP address, you might be able to
  /// recover it. You cannot recover an Elastic IP address that you released
  /// after it is allocated to another AWS account. You cannot recover an
  /// Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP
  /// address that you released, specify it in this operation.
  ///
  /// An Elastic IP address is for use either in the EC2-Classic platform or in
  /// a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic
  /// per Region and 5 Elastic IP addresses for EC2-VPC per Region.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic
  /// IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [address] :
  /// [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an
  /// address pool.
  ///
  /// Parameter [customerOwnedIpv4Pool] :
  /// The ID of a customer-owned address pool. Use this parameter to let Amazon
  /// EC2 select an address from the address pool. Alternatively, specify a
  /// specific address from the address pool.
  ///
  /// Parameter [domain] :
  /// Set to <code>vpc</code> to allocate the address for use with instances in
  /// a VPC.
  ///
  /// Default: The address is for use with instances in EC2-Classic.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [networkBorderGroup] :
  /// The location from which the IP address is advertised. Use this parameter
  /// to limit the address to this location.
  ///
  /// A network border group is a unique set of Availability Zones or Local
  /// Zones from where AWS advertises IP addresses and limits the addresses to
  /// the group. IP addresses cannot move between network border groups.
  ///
  /// Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">DescribeAvailabilityZones</a>
  /// to view the network border groups.
  /// <note>
  /// You cannot use a network border group with EC2 Classic. If you attempt
  /// this operation on EC2 classic, you will receive an
  /// <code>InvalidParameterCombination</code> error. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
  /// Codes</a>.
  /// </note>
  ///
  /// Parameter [publicIpv4Pool] :
  /// The ID of an address pool that you own. Use this parameter to let Amazon
  /// EC2 select an address from the address pool. To specify a specific address
  /// from the address pool, use the <code>Address</code> parameter instead.
  Future<AllocateAddressResult> allocateAddress({
    String address,
    String customerOwnedIpv4Pool,
    DomainType domain,
    bool dryRun,
    String networkBorderGroup,
    String publicIpv4Pool,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Allocates a Dedicated Host to your account. At a minimum, specify the
  /// supported instance type or instance family, the Availability Zone in which
  /// to allocate the host, and the number of hosts to allocate.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone in which to allocate the Dedicated Host.
  ///
  /// Parameter [quantity] :
  /// The number of Dedicated Hosts to allocate to your account with these
  /// parameters.
  ///
  /// Parameter [autoPlacement] :
  /// Indicates whether the host accepts any untargeted instance launches that
  /// match its instance type configuration, or if it only accepts Host tenancy
  /// instance launches that specify its unique host ID. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-understanding">
  /// Understanding Instance Placement and Host Affinity</a> in the <i>Amazon
  /// EC2 User Guide for Linux Instances</i>.
  ///
  /// Default: <code>on</code>
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [hostRecovery] :
  /// Indicates whether to enable or disable host recovery for the Dedicated
  /// Host. Host recovery is disabled by default. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html">
  /// Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Default: <code>off</code>
  ///
  /// Parameter [instanceFamily] :
  /// Specifies the instance family to be supported by the Dedicated Hosts. If
  /// you specify an instance family, the Dedicated Hosts support multiple
  /// instance types within that instance family.
  ///
  /// If you want the Dedicated Hosts to support a specific instance type only,
  /// omit this parameter and specify <b>InstanceType</b> instead. You cannot
  /// specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same request.
  ///
  /// Parameter [instanceType] :
  /// Specifies the instance type to be supported by the Dedicated Hosts. If you
  /// specify an instance type, the Dedicated Hosts support instances of the
  /// specified instance type only.
  ///
  /// If you want the Dedicated Hosts to support multiple instance types in a
  /// specific instance family, omit this parameter and specify
  /// <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and
  /// <b>InstanceFamily</b> in the same request.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Dedicated Host during creation.
  Future<AllocateHostsResult> allocateHosts({
    @_s.required String availabilityZone,
    @_s.required int quantity,
    AutoPlacement autoPlacement,
    String clientToken,
    HostRecovery hostRecovery,
    String instanceFamily,
    String instanceType,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(availabilityZone, 'availabilityZone');
    ArgumentError.checkNotNull(quantity, 'quantity');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Applies a security group to the association between the target network and
  /// the Client VPN endpoint. This action replaces the existing security groups
  /// with the specified security groups.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [securityGroupIds] :
  /// The IDs of the security groups to apply to the associated target network.
  /// Up to 5 security groups can be applied to an associated target network.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC in which the associated target network is located.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ApplySecurityGroupsToClientVpnTargetNetworkResult>
      applySecurityGroupsToClientVpnTargetNetwork({
    @_s.required String clientVpnEndpointId,
    @_s.required List<String> securityGroupIds,
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    ArgumentError.checkNotNull(securityGroupIds, 'securityGroupIds');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Assigns one or more IPv6 addresses to the specified network interface. You
  /// can specify one or more specific IPv6 addresses, or you can specify the
  /// number of IPv6 addresses to be automatically assigned from within the
  /// subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a
  /// network interface as you can assign private IPv4 addresses, and the limit
  /// varies per instance type. For information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP
  /// Addresses Per Network Interface Per Instance Type</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// You must specify either the IPv6 addresses or the IPv6 address count in
  /// the request.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [ipv6AddressCount] :
  /// The number of IPv6 addresses to assign to the network interface. Amazon
  /// EC2 automatically selects the IPv6 addresses from the subnet range. You
  /// can't use this option if specifying specific IPv6 addresses.
  ///
  /// Parameter [ipv6Addresses] :
  /// One or more specific IPv6 addresses to be assigned to the network
  /// interface. You can't use this option if you're specifying a number of IPv6
  /// addresses.
  Future<AssignIpv6AddressesResult> assignIpv6Addresses({
    @_s.required String networkInterfaceId,
    int ipv6AddressCount,
    List<String> ipv6Addresses,
  }) async {
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Assigns one or more secondary private IP addresses to the specified
  /// network interface.
  ///
  /// You can specify one or more specific secondary IP addresses, or you can
  /// specify the number of secondary IP addresses to be automatically assigned
  /// within the subnet's CIDR block range. The number of secondary IP addresses
  /// that you can assign to an instance varies by instance type. For
  /// information about instance types, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more
  /// information about Elastic IP addresses, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic
  /// IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// When you move a secondary private IP address to another network interface,
  /// any Elastic IP address that is associated with the IP address is also
  /// moved.
  ///
  /// Remapping an IP address is an asynchronous operation. When you move an IP
  /// address from one network interface to another, check
  /// <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance
  /// metadata to confirm that the remapping is complete.
  ///
  /// You must specify either the IP addresses or the IP address count in the
  /// request.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [allowReassignment] :
  /// Indicates whether to allow an IP address that is already assigned to
  /// another network interface or instance to be reassigned to the specified
  /// network interface.
  ///
  /// Parameter [privateIpAddresses] :
  /// One or more IP addresses to be assigned as a secondary private IP address
  /// to the network interface. You can't specify this parameter when also
  /// specifying a number of secondary IP addresses.
  ///
  /// If you don't specify an IP address, Amazon EC2 automatically selects an IP
  /// address within the subnet range.
  ///
  /// Parameter [secondaryPrivateIpAddressCount] :
  /// The number of secondary IP addresses to assign to the network interface.
  /// You can't specify this parameter when also specifying private IP
  /// addresses.
  Future<AssignPrivateIpAddressesResult> assignPrivateIpAddresses({
    @_s.required String networkInterfaceId,
    bool allowReassignment,
    List<String> privateIpAddresses,
    int secondaryPrivateIpAddressCount,
  }) async {
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates an Elastic IP address with an instance or a network interface.
  /// Before you can use an Elastic IP address, you must allocate it to your
  /// account.
  ///
  /// An Elastic IP address is for use in either the EC2-Classic platform or in
  /// a VPC. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic
  /// IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// [EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is
  /// already associated with a different instance, it is disassociated from
  /// that instance and associated with the specified instance. If you associate
  /// an Elastic IP address with an instance that has an existing Elastic IP
  /// address, the existing address is disassociated from the instance, but
  /// remains allocated to your account.
  ///
  /// [VPC in an EC2-Classic account] If you don't specify a private IP address,
  /// the Elastic IP address is associated with the primary IP address. If the
  /// Elastic IP address is already associated with a different instance or a
  /// network interface, you get an error unless you allow reassociation. You
  /// cannot associate an Elastic IP address with an instance or network
  /// interface that has an existing Elastic IP address.
  ///
  /// You cannot associate an Elastic IP address with an interface in a
  /// different network border group.
  /// <important>
  /// This is an idempotent operation. If you perform the operation more than
  /// once, Amazon EC2 doesn't return an error, and you may be charged for each
  /// time the Elastic IP address is remapped to the same instance. For more
  /// information, see the <i>Elastic IP Addresses</i> section of <a
  /// href="http://aws.amazon.com/ec2/pricing/">Amazon EC2 Pricing</a>.
  /// </important>
  ///
  /// Parameter [allocationId] :
  /// [EC2-VPC] The allocation ID. This is required for EC2-VPC.
  ///
  /// Parameter [allowReassociation] :
  /// [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an
  /// Elastic IP address that is already associated with an instance or network
  /// interface to be reassociated with the specified instance or network
  /// interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only
  /// account, reassociation is automatic, therefore you can specify false to
  /// ensure the operation fails if the Elastic IP address is already associated
  /// with another resource.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you
  /// can specify either the instance ID or the network interface ID, but not
  /// both. The operation fails if you specify an instance ID unless exactly one
  /// network interface is attached.
  ///
  /// Parameter [networkInterfaceId] :
  /// [EC2-VPC] The ID of the network interface. If the instance has more than
  /// one network interface, you must specify a network interface ID.
  ///
  /// For EC2-VPC, you can specify either the instance ID or the network
  /// interface ID, but not both.
  ///
  /// Parameter [privateIpAddress] :
  /// [EC2-VPC] The primary or secondary private IP address to associate with
  /// the Elastic IP address. If no private IP address is specified, the Elastic
  /// IP address is associated with the primary private IP address.
  ///
  /// Parameter [publicIp] :
  /// The Elastic IP address to associate with the instance. This is required
  /// for EC2-Classic.
  Future<AssociateAddressResult> associateAddress({
    String allocationId,
    bool allowReassociation,
    bool dryRun,
    String instanceId,
    String networkInterfaceId,
    String privateIpAddress,
    String publicIp,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a target network with a Client VPN endpoint. A target network
  /// is a subnet in a VPC. You can associate multiple subnets from the same VPC
  /// with a Client VPN endpoint. You can associate only one subnet in each
  /// Availability Zone. We recommend that you associate at least two subnets to
  /// provide Availability Zone redundancy.
  ///
  /// If you specified a VPC when you created the Client VPN endpoint or if you
  /// have previous subnet associations, the specified subnet must be in the
  /// same VPC. To specify a subnet that's in a different VPC, you must first
  /// modify the Client VPN endpoint (<a>ModifyClientVpnEndpoint</a>) and change
  /// the VPC that's associated with it.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet to associate with the Client VPN endpoint.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AssociateClientVpnTargetNetworkResult>
      associateClientVpnTargetNetwork({
    @_s.required String clientVpnEndpointId,
    @_s.required String subnetId,
    String clientToken,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    ArgumentError.checkNotNull(subnetId, 'subnetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a set of DHCP options (that you've previously created) with the
  /// specified VPC, or associates no DHCP options with the VPC.
  ///
  /// After you associate the options with the VPC, any existing instances and
  /// all new instances that you launch in that VPC use the options. You don't
  /// need to restart or relaunch the instances. They automatically pick up the
  /// changes within a few hours, depending on how frequently the instance
  /// renews its DHCP lease. You can explicitly renew the lease using the
  /// operating system on the instance.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP
  /// Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [dhcpOptionsId] :
  /// The ID of the DHCP options set, or <code>default</code> to associate no
  /// DHCP options with the VPC.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> associateDhcpOptions({
    @_s.required String dhcpOptionsId,
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(dhcpOptionsId, 'dhcpOptionsId');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates an IAM instance profile with a running or stopped instance. You
  /// cannot associate more than one IAM instance profile with an instance.
  ///
  /// Parameter [iamInstanceProfile] :
  /// The IAM instance profile.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  Future<AssociateIamInstanceProfileResult> associateIamInstanceProfile({
    @_s.required IamInstanceProfileSpecification iamInstanceProfile,
    @_s.required String instanceId,
  }) async {
    ArgumentError.checkNotNull(iamInstanceProfile, 'iamInstanceProfile');
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a subnet in your VPC or an internet gateway or virtual private
  /// gateway attached to your VPC with a route table in your VPC. This
  /// association causes traffic from the subnet or gateway to be routed
  /// according to the routes in the route table. The action returns an
  /// association ID, which you need in order to disassociate the route table
  /// later. A route table can be associated with multiple subnets.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [gatewayId] :
  /// The ID of the internet gateway or virtual private gateway.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet.
  Future<AssociateRouteTableResult> associateRouteTable({
    @_s.required String routeTableId,
    bool dryRun,
    String gatewayId,
    String subnetId,
  }) async {
    ArgumentError.checkNotNull(routeTableId, 'routeTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a CIDR block with your subnet. You can only associate a single
  /// IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix
  /// length of /64.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix
  /// length.
  ///
  /// Parameter [subnetId] :
  /// The ID of your subnet.
  Future<AssociateSubnetCidrBlockResult> associateSubnetCidrBlock({
    @_s.required String ipv6CidrBlock,
    @_s.required String subnetId,
  }) async {
    ArgumentError.checkNotNull(ipv6CidrBlock, 'ipv6CidrBlock');
    ArgumentError.checkNotNull(subnetId, 'subnetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates the specified subnets and transit gateway attachments with the
  /// specified transit gateway multicast domain.
  ///
  /// The transit gateway attachment must be in the available state before you
  /// can add a resource. Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html">DescribeTransitGatewayAttachments</a>
  /// to see the state of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [subnetIds] :
  /// The IDs of the subnets to associate with the transit gateway multicast
  /// domain.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway attachment to associate with the transit
  /// gateway multicast domain.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<AssociateTransitGatewayMulticastDomainResult>
      associateTransitGatewayMulticastDomain({
    bool dryRun,
    List<String> subnetIds,
    String transitGatewayAttachmentId,
    String transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates the specified attachment with the specified transit gateway
  /// route table. You can associate only one route table with an attachment.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AssociateTransitGatewayRouteTableResult>
      associateTransitGatewayRouteTable({
    @_s.required String transitGatewayAttachmentId,
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates a CIDR block with your VPC. You can associate a secondary IPv4
  /// CIDR block, an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from
  /// an IPv6 address pool that you provisioned through bring your own IP
  /// addresses (<a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).
  /// The IPv6 CIDR block size is fixed at /56.
  ///
  /// You must specify one of the following in the request: an IPv4 CIDR block,
  /// an IPv6 pool, or an Amazon-provided IPv6 CIDR block.
  ///
  /// For more information about associating CIDR blocks with your VPC and
  /// applicable restrictions, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing">VPC
  /// and Subnet Sizing</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [amazonProvidedIpv6CidrBlock] :
  /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
  /// the VPC. You cannot specify the range of IPv6 addresses, or the size of
  /// the CIDR block.
  ///
  /// Parameter [cidrBlock] :
  /// An IPv4 CIDR block to associate with the VPC.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// An IPv6 CIDR block from the IPv6 address pool. You must also specify
  /// <code>Ipv6Pool</code> in the request.
  ///
  /// To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
  ///
  /// Parameter [ipv6CidrBlockNetworkBorderGroup] :
  /// The name of the location from which we advertise the IPV6 CIDR block. Use
  /// this parameter to limit the CiDR block to this location.
  ///
  /// You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code>
  /// to use this parameter.
  ///
  /// You can have one IPv6 CIDR block association per network border group.
  ///
  /// Parameter [ipv6Pool] :
  /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
  Future<AssociateVpcCidrBlockResult> associateVpcCidrBlock({
    @_s.required String vpcId,
    bool amazonProvidedIpv6CidrBlock,
    String cidrBlock,
    String ipv6CidrBlock,
    String ipv6CidrBlockNetworkBorderGroup,
    String ipv6Pool,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or
  /// more of the VPC's security groups. You cannot link an EC2-Classic instance
  /// to more than one VPC at a time. You can only link an instance that's in
  /// the <code>running</code> state. An instance is automatically unlinked from
  /// a VPC when it's stopped - you can link it to the VPC again when you
  /// restart it.
  ///
  /// After you've linked an instance, you cannot change the VPC security groups
  /// that are associated with it. To change the security groups, you must first
  /// unlink the instance, and then link it again.
  ///
  /// Linking your instance to a VPC is sometimes referred to as
  /// <i>attaching</i> your instance.
  ///
  /// Parameter [groups] :
  /// The ID of one or more of the VPC's security groups. You cannot specify
  /// security groups from a different VPC.
  ///
  /// Parameter [instanceId] :
  /// The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.
  ///
  /// Parameter [vpcId] :
  /// The ID of a ClassicLink-enabled VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AttachClassicLinkVpcResult> attachClassicLinkVpc({
    @_s.required List<String> groups,
    @_s.required String instanceId,
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(groups, 'groups');
    ArgumentError.checkNotNull(instanceId, 'instanceId');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches an internet gateway or a virtual private gateway to a VPC,
  /// enabling connectivity between the internet and the VPC. For more
  /// information about your VPC and internet gateway, see the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual
  /// Private Cloud User Guide</a>.
  ///
  /// Parameter [internetGatewayId] :
  /// The ID of the internet gateway.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> attachInternetGateway({
    @_s.required String internetGatewayId,
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(internetGatewayId, 'internetGatewayId');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches a network interface to an instance.
  ///
  /// Parameter [deviceIndex] :
  /// The index of the device for the network interface attachment.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AttachNetworkInterfaceResult> attachNetworkInterface({
    @_s.required int deviceIndex,
    @_s.required String instanceId,
    @_s.required String networkInterfaceId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(deviceIndex, 'deviceIndex');
    ArgumentError.checkNotNull(instanceId, 'instanceId');
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches an EBS volume to a running or stopped instance and exposes it to
  /// the instance with the specified device name.
  ///
  /// Encrypted EBS volumes must be attached to instances that support Amazon
  /// EBS encryption. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// After you attach an EBS volume, you must make it available. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html">Making
  /// an EBS Volume Available For Use</a>.
  ///
  /// If a volume has an AWS Marketplace product code:
  ///
  /// <ul>
  /// <li>
  /// The volume can be attached only to a stopped instance.
  /// </li>
  /// <li>
  /// AWS Marketplace product codes are copied from the volume to the instance.
  /// </li>
  /// <li>
  /// You must be subscribed to the product.
  /// </li>
  /// <li>
  /// The instance type and operating system of the instance must support the
  /// product. For example, you can't detach a volume from a Windows instance
  /// and attach it to a Linux instance.
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attaching
  /// Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [device] :
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [volumeId] :
  /// The ID of the EBS volume. The volume and instance must be within the same
  /// Availability Zone.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<VolumeAttachment> attachVolume({
    @_s.required String device,
    @_s.required String instanceId,
    @_s.required String volumeId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(device, 'device');
    ArgumentError.checkNotNull(instanceId, 'instanceId');
    ArgumentError.checkNotNull(volumeId, 'volumeId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches a virtual private gateway to a VPC. You can attach one virtual
  /// private gateway to one VPC at a time.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS
  /// Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AttachVpnGatewayResult> attachVpnGateway({
    @_s.required String vpcId,
    @_s.required String vpnGatewayId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
    ArgumentError.checkNotNull(vpnGatewayId, 'vpnGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds an ingress authorization rule to a Client VPN endpoint. Ingress
  /// authorization rules act as firewall rules that grant access to networks.
  /// You must configure ingress authorization rules to enable clients to access
  /// resources in AWS or on-premises networks.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [targetNetworkCidr] :
  /// The IPv4 address range, in CIDR notation, of the network for which access
  /// is being authorized.
  ///
  /// Parameter [accessGroupId] :
  /// The ID of the Active Directory group to grant access.
  ///
  /// Parameter [authorizeAllGroups] :
  /// Indicates whether to grant access to all clients. Use <code>true</code> to
  /// grant all clients who successfully establish a VPN connection access to
  /// the network.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A brief description of the authorization rule.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<AuthorizeClientVpnIngressResult> authorizeClientVpnIngress({
    @_s.required String clientVpnEndpointId,
    @_s.required String targetNetworkCidr,
    String accessGroupId,
    bool authorizeAllGroups,
    String clientToken,
    String description,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    ArgumentError.checkNotNull(targetNetworkCidr, 'targetNetworkCidr');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// [VPC only] Adds the specified egress rules to a security group for use
  /// with a VPC.
  ///
  /// An outbound rule permits instances to send traffic to the specified IPv4
  /// or IPv6 CIDR address ranges, or to the instances associated with the
  /// specified destination security groups.
  ///
  /// You specify a protocol for each rule (for example, TCP). For the TCP and
  /// UDP protocols, you must also specify the destination port or port range.
  /// For the ICMP protocol, you must also specify the ICMP type and code. You
  /// can use -1 for the type or code to mean all types or all codes.
  ///
  /// Rule changes are propagated to affected instances as quickly as possible.
  /// However, a small delay might occur.
  ///
  /// For more information about VPC security group limits, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon
  /// VPC Limits</a>.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group.
  ///
  /// Parameter [cidrIp] :
  /// Not supported. Use a set of IP permissions to specify the CIDR.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [fromPort] :
  /// Not supported. Use a set of IP permissions to specify the port.
  ///
  /// Parameter [ipPermissions] :
  /// The sets of IP permissions. You can't specify a destination security group
  /// and a CIDR IP address range in the same set of permissions.
  ///
  /// Parameter [ipProtocol] :
  /// Not supported. Use a set of IP permissions to specify the protocol name or
  /// number.
  ///
  /// Parameter [sourceSecurityGroupName] :
  /// Not supported. Use a set of IP permissions to specify a destination
  /// security group.
  ///
  /// Parameter [sourceSecurityGroupOwnerId] :
  /// Not supported. Use a set of IP permissions to specify a destination
  /// security group.
  ///
  /// Parameter [toPort] :
  /// Not supported. Use a set of IP permissions to specify the port.
  Future<void> authorizeSecurityGroupEgress({
    @_s.required String groupId,
    String cidrIp,
    bool dryRun,
    int fromPort,
    List<IpPermission> ipPermissions,
    String ipProtocol,
    String sourceSecurityGroupName,
    String sourceSecurityGroupOwnerId,
    int toPort,
  }) async {
    ArgumentError.checkNotNull(groupId, 'groupId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds the specified ingress rules to a security group.
  ///
  /// An inbound rule permits instances to receive traffic from the specified
  /// IPv4 or IPv6 CIDR address ranges, or from the instances associated with
  /// the specified destination security groups.
  ///
  /// You specify a protocol for each rule (for example, TCP). For TCP and UDP,
  /// you must also specify the destination port or port range. For ICMP/ICMPv6,
  /// you must also specify the ICMP/ICMPv6 type and code. You can use -1 to
  /// mean all types or all codes.
  ///
  /// Rule changes are propagated to instances within the security group as
  /// quickly as possible. However, a small delay might occur.
  ///
  /// For more information about VPC security group limits, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon
  /// VPC Limits</a>.
  ///
  /// Parameter [cidrIp] :
  /// The IPv4 address range, in CIDR format. You can't specify this parameter
  /// when specifying a source security group. To specify an IPv6 address range,
  /// use a set of IP permissions.
  ///
  /// Alternatively, use a set of IP permissions to specify multiple rules and a
  /// description for the rule.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [fromPort] :
  /// The start of port range for the TCP and UDP protocols, or an ICMP type
  /// number. For the ICMP type number, use <code>-1</code> to specify all
  /// types. If you specify all ICMP types, you must specify all codes.
  ///
  /// Alternatively, use a set of IP permissions to specify multiple rules and a
  /// description for the rule.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group. You must specify either the security group
  /// ID or the security group name in the request. For security groups in a
  /// nondefault VPC, you must specify the security group ID.
  ///
  /// Parameter [groupName] :
  /// [EC2-Classic, default VPC] The name of the security group. You must
  /// specify either the security group ID or the security group name in the
  /// request.
  ///
  /// Parameter [ipPermissions] :
  /// The sets of IP permissions.
  ///
  /// Parameter [ipProtocol] :
  /// The IP protocol name (<code>tcp</code>, <code>udp</code>,
  /// <code>icmp</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a>). To specify <code>icmpv6</code>, use a set of IP permissions.
  ///
  /// [VPC only] Use <code>-1</code> to specify all protocols. If you specify
  /// <code>-1</code> or a protocol other than <code>tcp</code>,
  /// <code>udp</code>, or <code>icmp</code>, traffic on all ports is allowed,
  /// regardless of any ports you specify.
  ///
  /// Alternatively, use a set of IP permissions to specify multiple rules and a
  /// description for the rule.
  ///
  /// Parameter [sourceSecurityGroupName] :
  /// [EC2-Classic, default VPC] The name of the source security group. You
  /// can't specify this parameter in combination with the following parameters:
  /// the CIDR IP address range, the start of the port range, the IP protocol,
  /// and the end of the port range. Creates rules that grant full ICMP, UDP,
  /// and TCP access. To create a rule with a specific IP protocol and port
  /// range, use a set of IP permissions instead. For EC2-VPC, the source
  /// security group must be in the same VPC.
  ///
  /// Parameter [sourceSecurityGroupOwnerId] :
  /// [nondefault VPC] The AWS account ID for the source security group, if the
  /// source security group is in a different account. You can't specify this
  /// parameter in combination with the following parameters: the CIDR IP
  /// address range, the IP protocol, the start of the port range, and the end
  /// of the port range. Creates rules that grant full ICMP, UDP, and TCP
  /// access. To create a rule with a specific IP protocol and port range, use a
  /// set of IP permissions instead.
  ///
  /// Parameter [toPort] :
  /// The end of port range for the TCP and UDP protocols, or an ICMP code
  /// number. For the ICMP code number, use <code>-1</code> to specify all
  /// codes. If you specify all ICMP types, you must specify all codes.
  ///
  /// Alternatively, use a set of IP permissions to specify multiple rules and a
  /// description for the rule.
  Future<void> authorizeSecurityGroupIngress({
    String cidrIp,
    bool dryRun,
    int fromPort,
    String groupId,
    String groupName,
    List<IpPermission> ipPermissions,
    String ipProtocol,
    String sourceSecurityGroupName,
    String sourceSecurityGroupOwnerId,
    int toPort,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Bundles an Amazon instance store-backed Windows instance.
  ///
  /// During bundling, only the root device volume (C:\) is bundled. Data on
  /// other instance store volumes is not preserved.
  /// <note>
  /// This action is not applicable for Linux/Unix instances or Windows
  /// instances that are backed by Amazon EBS.
  /// </note>
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance to bundle.
  ///
  /// Type: String
  ///
  /// Default: None
  ///
  /// Required: Yes
  ///
  /// Parameter [storage] :
  /// The bucket in which to store the AMI. You can specify a bucket that you
  /// already own or a new bucket that Amazon EC2 creates on your behalf. If you
  /// specify a bucket that belongs to someone else, Amazon EC2 returns an
  /// error.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<BundleInstanceResult> bundleInstance({
    @_s.required String instanceId,
    @_s.required Storage storage,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
    ArgumentError.checkNotNull(storage, 'storage');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels a bundling operation for an instance store-backed Windows
  /// instance.
  ///
  /// Parameter [bundleId] :
  /// The ID of the bundle task.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelBundleTaskResult> cancelBundleTask({
    @_s.required String bundleId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(bundleId, 'bundleId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels the specified Capacity Reservation, releases the reserved
  /// capacity, and changes the Capacity Reservation's state to
  /// <code>cancelled</code>.
  ///
  /// Instances running in the reserved capacity continue running until you stop
  /// them. Stopped instances that target the Capacity Reservation can no longer
  /// launch. Modify these instances to either target a different Capacity
  /// Reservation, launch On-Demand Instance capacity, or run in any open
  /// Capacity Reservation that has matching attributes and sufficient capacity.
  ///
  /// Parameter [capacityReservationId] :
  /// The ID of the Capacity Reservation to be cancelled.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelCapacityReservationResult> cancelCapacityReservation({
    @_s.required String capacityReservationId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(capacityReservationId, 'capacityReservationId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels an active conversion task. The task can be the import of an
  /// instance or volume. The action removes all artifacts of the conversion,
  /// including a partially uploaded volume or instance. If the conversion is
  /// complete or is in the process of transferring the final disk image, the
  /// command fails and returns an exception.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing
  /// a Virtual Machine Using the Amazon EC2 CLI</a>.
  ///
  /// Parameter [conversionTaskId] :
  /// The ID of the conversion task.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [reasonMessage] :
  /// The reason for canceling the conversion task.
  Future<void> cancelConversionTask({
    @_s.required String conversionTaskId,
    bool dryRun,
    String reasonMessage,
  }) async {
    ArgumentError.checkNotNull(conversionTaskId, 'conversionTaskId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels an active export task. The request removes all artifacts of the
  /// export, including any partially-created Amazon S3 objects. If the export
  /// task is complete or is in the process of transferring the final disk
  /// image, the command fails and returns an error.
  ///
  /// Parameter [exportTaskId] :
  /// The ID of the export task. This is the ID returned by
  /// <code>CreateInstanceExportTask</code>.
  Future<void> cancelExportTask({
    @_s.required String exportTaskId,
  }) async {
    ArgumentError.checkNotNull(exportTaskId, 'exportTaskId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels an in-process import virtual machine or import snapshot task.
  ///
  /// Parameter [cancelReason] :
  /// The reason for canceling the task.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [importTaskId] :
  /// The ID of the import image or import snapshot task to be canceled.
  Future<CancelImportTaskResult> cancelImportTask({
    String cancelReason,
    bool dryRun,
    String importTaskId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels the specified Reserved Instance listing in the Reserved Instance
  /// Marketplace.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [reservedInstancesListingId] :
  /// The ID of the Reserved Instance listing.
  Future<CancelReservedInstancesListingResult> cancelReservedInstancesListing({
    @_s.required String reservedInstancesListingId,
  }) async {
    ArgumentError.checkNotNull(
        reservedInstancesListingId, 'reservedInstancesListingId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels the specified Spot Fleet requests.
  ///
  /// After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot
  /// Instances. You must specify whether the Spot Fleet should also terminate
  /// its Spot Instances. If you terminate the instances, the Spot Fleet request
  /// enters the <code>cancelled_terminating</code> state. Otherwise, the Spot
  /// Fleet request enters the <code>cancelled_running</code> state and the
  /// instances continue to run until they are interrupted or you terminate them
  /// manually.
  ///
  /// Parameter [spotFleetRequestIds] :
  /// The IDs of the Spot Fleet requests.
  ///
  /// Parameter [terminateInstances] :
  /// Indicates whether to terminate instances for a Spot Fleet request if it is
  /// canceled successfully.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelSpotFleetRequestsResponse> cancelSpotFleetRequests({
    @_s.required List<String> spotFleetRequestIds,
    @_s.required bool terminateInstances,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(spotFleetRequestIds, 'spotFleetRequestIds');
    ArgumentError.checkNotNull(terminateInstances, 'terminateInstances');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Cancels one or more Spot Instance requests.
  /// <important>
  /// Canceling a Spot Instance request does not terminate running Spot
  /// Instances associated with the request.
  /// </important>
  ///
  /// Parameter [spotInstanceRequestIds] :
  /// One or more Spot Instance request IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CancelSpotInstanceRequestsResult> cancelSpotInstanceRequests({
    @_s.required List<String> spotInstanceRequestIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        spotInstanceRequestIds, 'spotInstanceRequestIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Determines whether a product code is associated with an instance. This
  /// action can only be used by the owner of the product code. It is useful
  /// when a product code owner must verify whether another user's instance is
  /// eligible for support.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [productCode] :
  /// The product code. This must be a product code that you own.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ConfirmProductInstanceResult> confirmProductInstance({
    @_s.required String instanceId,
    @_s.required String productCode,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
    ArgumentError.checkNotNull(productCode, 'productCode');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Copies the specified Amazon FPGA Image (AFI) to the current Region.
  ///
  /// Parameter [sourceFpgaImageId] :
  /// The ID of the source AFI.
  ///
  /// Parameter [sourceRegion] :
  /// The Region that contains the source AFI.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description for the new AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [name] :
  /// The name for the new AFI. The default is the name of the source AFI.
  Future<CopyFpgaImageResult> copyFpgaImage({
    @_s.required String sourceFpgaImageId,
    @_s.required String sourceRegion,
    String clientToken,
    String description,
    bool dryRun,
    String name,
  }) async {
    ArgumentError.checkNotNull(sourceFpgaImageId, 'sourceFpgaImageId');
    ArgumentError.checkNotNull(sourceRegion, 'sourceRegion');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Initiates the copy of an AMI from the specified source Region to the
  /// current Region. You specify the destination Region by using its endpoint
  /// when making the request.
  ///
  /// Copies of encrypted backing snapshots for the AMI are encrypted. Copies of
  /// unencrypted backing snapshots remain unencrypted, unless you set
  /// <code>Encrypted</code> during the copy operation. You cannot create an
  /// unencrypted copy of an encrypted backing snapshot.
  ///
  /// For more information about the prerequisites and limits when copying an
  /// AMI, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copying
  /// an AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [name] :
  /// The name of the new AMI in the destination Region.
  ///
  /// Parameter [sourceImageId] :
  /// The ID of the AMI to copy.
  ///
  /// Parameter [sourceRegion] :
  /// The name of the Region that contains the AMI to copy.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure idempotency of the
  /// request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [description] :
  /// A description for the new AMI in the destination Region.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// Specifies whether the destination snapshots of the copied image should be
  /// encrypted. You can encrypt a copy of an unencrypted snapshot, but you
  /// cannot create an unencrypted copy of an encrypted snapshot. The default
  /// CMK for EBS is used unless you specify a non-default AWS Key Management
  /// Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [kmsKeyId] :
  /// An identifier for the symmetric AWS Key Management Service (AWS KMS)
  /// customer master key (CMK) to use when creating the encrypted volume. This
  /// parameter is only required if you want to use a non-default CMK; if this
  /// parameter is not specified, the default CMK for EBS is used. If a
  /// <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must
  /// also be set.
  ///
  /// To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name,
  /// or alias ARN. When using an alias name, prefix it with "alias/". For
  /// example:
  ///
  /// <ul>
  /// <li>
  /// Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Key ARN:
  /// <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
  /// </li>
  /// <li>
  /// Alias name: <code>alias/ExampleAlias</code>
  /// </li>
  /// <li>
  /// Alias ARN:
  /// <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
  /// </li>
  /// </ul>
  /// AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action
  /// you call may appear to complete even though you provided an invalid
  /// identifier. This action will eventually report failure.
  ///
  /// The specified CMK must exist in the Region that the snapshot is being
  /// copied to.
  ///
  /// Amazon EBS does not support asymmetric CMKs.
  Future<CopyImageResult> copyImage({
    @_s.required String name,
    @_s.required String sourceImageId,
    @_s.required String sourceRegion,
    String clientToken,
    String description,
    bool dryRun,
    bool encrypted,
    String kmsKeyId,
  }) async {
    ArgumentError.checkNotNull(name, 'name');
    ArgumentError.checkNotNull(sourceImageId, 'sourceImageId');
    ArgumentError.checkNotNull(sourceRegion, 'sourceRegion');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Copies a point-in-time snapshot of an EBS volume and stores it in Amazon
  /// S3. You can copy the snapshot within the same Region or from one Region to
  /// another. You can use the snapshot to create EBS volumes or Amazon Machine
  /// Images (AMIs).
  ///
  /// Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted
  /// snapshots remain unencrypted, unless you enable encryption for the
  /// snapshot copy operation. By default, encrypted snapshot copies use the
  /// default AWS Key Management Service (AWS KMS) customer master key (CMK);
  /// however, you can specify a different CMK.
  ///
  /// To copy an encrypted snapshot that has been shared from another account,
  /// you must have permissions for the CMK used to encrypt the snapshot.
  ///
  /// Snapshots created by copying another snapshot have an arbitrary volume ID
  /// that should not be used for any purpose.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html">Copying
  /// an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [sourceRegion] :
  /// The ID of the Region that contains the snapshot to be copied.
  ///
  /// Parameter [sourceSnapshotId] :
  /// The ID of the EBS snapshot to copy.
  ///
  /// Parameter [description] :
  /// A description for the EBS snapshot.
  ///
  /// Parameter [destinationRegion] :
  /// The destination Region to use in the <code>PresignedUrl</code> parameter
  /// of a snapshot copy operation. This parameter is only valid for specifying
  /// the destination Region in a <code>PresignedUrl</code> parameter, where it
  /// is required.
  ///
  /// The snapshot copy is sent to the regional endpoint that you sent the HTTP
  /// request to (for example, <code>ec2.us-east-1.amazonaws.com</code>). With
  /// the AWS CLI, this is specified using the <code>--region</code> parameter
  /// or the default Region in your AWS configuration file.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// To encrypt a copy of an unencrypted snapshot if encryption by default is
  /// not enabled, enable encryption using this parameter. Otherwise, omit this
  /// parameter. Encrypted snapshots are encrypted, even if you omit this
  /// parameter and encryption by default is not enabled. You cannot set this
  /// parameter to false. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [kmsKeyId] :
  /// The identifier of the AWS Key Management Service (AWS KMS) customer master
  /// key (CMK) to use for Amazon EBS encryption. If this parameter is not
  /// specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code>
  /// is specified, the encrypted state must be <code>true</code>.
  ///
  /// You can specify the CMK using any of the following:
  ///
  /// <ul>
  /// <li>
  /// Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Key alias. For example, alias/ExampleAlias.
  /// </li>
  /// <li>
  /// Key ARN. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.
  /// </li>
  /// <li>
  /// Alias ARN. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.
  /// </li>
  /// </ul>
  /// AWS authenticates the CMK asynchronously. Therefore, if you specify an ID,
  /// alias, or ARN that is not valid, the action can appear to complete, but
  /// eventually fails.
  ///
  /// Parameter [presignedUrl] :
  /// When you copy an encrypted source snapshot using the Amazon EC2 Query API,
  /// you must supply a pre-signed URL. This parameter is optional for
  /// unencrypted snapshots. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html">Query
  /// Requests</a>.
  ///
  /// The <code>PresignedUrl</code> should use the snapshot source endpoint, the
  /// <code>CopySnapshot</code> action, and include the
  /// <code>SourceRegion</code>, <code>SourceSnapshotId</code>, and
  /// <code>DestinationRegion</code> parameters. The <code>PresignedUrl</code>
  /// must be signed using AWS Signature Version 4. Because EBS snapshots are
  /// stored in Amazon S3, the signing algorithm for this parameter uses the
  /// same logic that is described in <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating
  /// Requests by Using Query Parameters (AWS Signature Version 4)</a> in the
  /// <i>Amazon Simple Storage Service API Reference</i>. An invalid or
  /// improperly signed <code>PresignedUrl</code> will cause the copy operation
  /// to fail asynchronously, and the snapshot will move to an
  /// <code>error</code> state.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the new snapshot.
  Future<CopySnapshotResult> copySnapshot({
    @_s.required String sourceRegion,
    @_s.required String sourceSnapshotId,
    String description,
    String destinationRegion,
    bool dryRun,
    bool encrypted,
    String kmsKeyId,
    String presignedUrl,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(sourceRegion, 'sourceRegion');
    ArgumentError.checkNotNull(sourceSnapshotId, 'sourceSnapshotId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a new Capacity Reservation with the specified attributes.
  ///
  /// Capacity Reservations enable you to reserve capacity for your Amazon EC2
  /// instances in a specific Availability Zone for any duration. This gives you
  /// the flexibility to selectively add capacity reservations and still get the
  /// Regional RI discounts for that usage. By creating Capacity Reservations,
  /// you ensure that you always have access to Amazon EC2 capacity when you
  /// need it, for as long as you need it. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">Capacity
  /// Reservations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Your request to create a Capacity Reservation could fail if Amazon EC2
  /// does not have sufficient capacity to fulfill the request. If your request
  /// fails due to Amazon EC2 capacity constraints, either try again at a later
  /// time, try in a different Availability Zone, or request a smaller capacity
  /// reservation. If your application is flexible across instance types and
  /// sizes, try to create a Capacity Reservation with different instance
  /// attributes.
  ///
  /// Your request could also fail if the requested quantity exceeds your
  /// On-Demand Instance limit for the selected instance type. If your request
  /// fails due to limit constraints, increase your On-Demand Instance limit for
  /// the required instance type and try again. For more information about
  /// increasing your instance limits, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon
  /// EC2 Service Limits</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [instanceCount] :
  /// The number of instances for which to reserve capacity.
  ///
  /// Parameter [instancePlatform] :
  /// The type of operating system for which to reserve capacity.
  ///
  /// Parameter [instanceType] :
  /// The instance type for which to reserve capacity. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone in which to create the Capacity Reservation.
  ///
  /// Parameter [availabilityZoneId] :
  /// The ID of the Availability Zone in which to create the Capacity
  /// Reservation.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Constraint: Maximum 64 ASCII characters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ebsOptimized] :
  /// Indicates whether the Capacity Reservation supports EBS-optimized
  /// instances. This optimization provides dedicated throughput to Amazon EBS
  /// and an optimized configuration stack to provide optimal I/O performance.
  /// This optimization isn't available with all instance types. Additional
  /// usage charges apply when using an EBS- optimized instance.
  ///
  /// Parameter [endDate] :
  /// The date and time at which the Capacity Reservation expires. When a
  /// Capacity Reservation expires, the reserved capacity is released and you
  /// can no longer launch instances into it. The Capacity Reservation's state
  /// changes to <code>expired</code> when it reaches its end date and time.
  ///
  /// You must provide an <code>EndDate</code> value if <code>EndDateType</code>
  /// is <code>limited</code>. Omit <code>EndDate</code> if
  /// <code>EndDateType</code> is <code>unlimited</code>.
  ///
  /// If the <code>EndDateType</code> is <code>limited</code>, the Capacity
  /// Reservation is cancelled within an hour from the specified time. For
  /// example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is
  /// guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
  ///
  /// Parameter [endDateType] :
  /// Indicates the way in which the Capacity Reservation ends. A Capacity
  /// Reservation can have one of the following end types:
  ///
  /// <ul>
  /// <li>
  /// <code>unlimited</code> - The Capacity Reservation remains active until you
  /// explicitly cancel it. Do not provide an <code>EndDate</code> if the
  /// <code>EndDateType</code> is <code>unlimited</code>.
  /// </li>
  /// <li>
  /// <code>limited</code> - The Capacity Reservation expires automatically at a
  /// specified date and time. You must provide an <code>EndDate</code> value if
  /// the <code>EndDateType</code> value is <code>limited</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [ephemeralStorage] :
  /// Indicates whether the Capacity Reservation supports instances with
  /// temporary, block-level storage.
  ///
  /// Parameter [instanceMatchCriteria] :
  /// Indicates the type of instance launches that the Capacity Reservation
  /// accepts. The options include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The Capacity Reservation automatically matches all
  /// instances that have matching attributes (instance type, platform, and
  /// Availability Zone). Instances that have matching attributes run in the
  /// Capacity Reservation automatically without specifying any additional
  /// parameters.
  /// </li>
  /// <li>
  /// <code>targeted</code> - The Capacity Reservation only accepts instances
  /// that have matching attributes (instance type, platform, and Availability
  /// Zone), and explicitly target the Capacity Reservation. This ensures that
  /// only permitted instances can use the reserved capacity.
  /// </li>
  /// </ul>
  /// Default: <code>open</code>
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Capacity Reservation during launch.
  ///
  /// Parameter [tenancy] :
  /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation
  /// can have one of the following tenancy settings:
  ///
  /// <ul>
  /// <li>
  /// <code>default</code> - The Capacity Reservation is created on hardware
  /// that is shared with other AWS accounts.
  /// </li>
  /// <li>
  /// <code>dedicated</code> - The Capacity Reservation is created on
  /// single-tenant hardware that is dedicated to a single AWS account.
  /// </li>
  /// </ul>
  Future<CreateCapacityReservationResult> createCapacityReservation({
    @_s.required int instanceCount,
    @_s.required CapacityReservationInstancePlatform instancePlatform,
    @_s.required String instanceType,
    String availabilityZone,
    String availabilityZoneId,
    String clientToken,
    bool dryRun,
    bool ebsOptimized,
    DateTime endDate,
    EndDateType endDateType,
    bool ephemeralStorage,
    InstanceMatchCriteria instanceMatchCriteria,
    List<TagSpecification> tagSpecifications,
    CapacityReservationTenancy tenancy,
  }) async {
    ArgumentError.checkNotNull(instanceCount, 'instanceCount');
    ArgumentError.checkNotNull(instancePlatform, 'instancePlatform');
    ArgumentError.checkNotNull(instanceType, 'instanceType');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Client VPN endpoint. A Client VPN endpoint is the resource you
  /// create and configure to enable and manage client VPN sessions. It is the
  /// destination endpoint at which all client VPN sessions are terminated.
  ///
  /// Parameter [authenticationOptions] :
  /// Information about the authentication method to be used to authenticate
  /// clients.
  ///
  /// Parameter [clientCidrBlock] :
  /// The IPv4 address range, in CIDR notation, from which to assign client IP
  /// addresses. The address range cannot overlap with the local CIDR of the VPC
  /// in which the associated subnet is located, or the routes that you add
  /// manually. The address range cannot be changed after the Client VPN
  /// endpoint has been created. The CIDR block should be /22 or greater.
  ///
  /// Parameter [connectionLogOptions] :
  /// Information about the client connection logging options.
  ///
  /// If you enable client connection logging, data about client connections is
  /// sent to a Cloudwatch Logs log stream. The following information is logged:
  ///
  /// <ul>
  /// <li>
  /// Client connection requests
  /// </li>
  /// <li>
  /// Client connection results (successful and unsuccessful)
  /// </li>
  /// <li>
  /// Reasons for unsuccessful client connection requests
  /// </li>
  /// <li>
  /// Client connection termination time
  /// </li>
  /// </ul>
  ///
  /// Parameter [serverCertificateArn] :
  /// The ARN of the server certificate. For more information, see the <a
  /// href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate
  /// Manager User Guide</a>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A brief description of the Client VPN endpoint.
  ///
  /// Parameter [dnsServers] :
  /// Information about the DNS servers to be used for DNS resolution. A Client
  /// VPN endpoint can have up to two DNS servers. If no DNS server is
  /// specified, the DNS address configured on the device is used for the DNS
  /// server.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [securityGroupIds] :
  /// The IDs of one or more security groups to apply to the target network. You
  /// must also specify the ID of the VPC that contains the security groups.
  ///
  /// Parameter [splitTunnel] :
  /// Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint.
  ///
  /// By default, split-tunnel on a VPN endpoint is disabled.
  ///
  /// For information about split-tunnel VPN endpoints, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-Tunnel
  /// AWS Client VPN Endpoint</a> in the <i>AWS Client VPN Administrator
  /// Guide</i>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the Client VPN endpoint during creation.
  ///
  /// Parameter [transportProtocol] :
  /// The transport protocol to be used by the VPN session.
  ///
  /// Default value: <code>udp</code>
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC to associate with the Client VPN endpoint. If no
  /// security group IDs are specified in the request, the default security
  /// group for the VPC is applied.
  ///
  /// Parameter [vpnPort] :
  /// The port number to assign to the Client VPN endpoint for TCP and UDP
  /// traffic.
  ///
  /// Valid Values: <code>443</code> | <code>1194</code>
  ///
  /// Default Value: <code>443</code>
  Future<CreateClientVpnEndpointResult> createClientVpnEndpoint({
    @_s.required List<ClientVpnAuthenticationRequest> authenticationOptions,
    @_s.required String clientCidrBlock,
    @_s.required ConnectionLogOptions connectionLogOptions,
    @_s.required String serverCertificateArn,
    String clientToken,
    String description,
    List<String> dnsServers,
    bool dryRun,
    List<String> securityGroupIds,
    bool splitTunnel,
    List<TagSpecification> tagSpecifications,
    TransportProtocol transportProtocol,
    String vpcId,
    int vpnPort,
  }) async {
    ArgumentError.checkNotNull(authenticationOptions, 'authenticationOptions');
    ArgumentError.checkNotNull(clientCidrBlock, 'clientCidrBlock');
    ArgumentError.checkNotNull(connectionLogOptions, 'connectionLogOptions');
    ArgumentError.checkNotNull(serverCertificateArn, 'serverCertificateArn');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds a route to a network to a Client VPN endpoint. Each Client VPN
  /// endpoint has a route table that describes the available destination
  /// network routes. Each route in the route table specifies the path for traﬃc
  /// to speciﬁc resources or networks.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint to which to add the route.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 address range, in CIDR notation, of the route destination. For
  /// example:
  ///
  /// <ul>
  /// <li>
  /// To add a route for Internet access, enter <code>0.0.0.0/0</code>
  /// </li>
  /// <li>
  /// To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range
  /// </li>
  /// <li>
  /// To add a route for an on-premises network, enter the AWS Site-to-Site VPN
  /// connection's IPv4 CIDR range
  /// </li>
  /// </ul>
  /// Route address ranges cannot overlap with the CIDR range specified for
  /// client allocation.
  ///
  /// Parameter [targetVpcSubnetId] :
  /// The ID of the subnet through which you want to route traffic. The
  /// specified subnet must be an existing target network of the Client VPN
  /// endpoint.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A brief description of the route.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateClientVpnRouteResult> createClientVpnRoute({
    @_s.required String clientVpnEndpointId,
    @_s.required String destinationCidrBlock,
    @_s.required String targetVpcSubnetId,
    String clientToken,
    String description,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
    ArgumentError.checkNotNull(targetVpcSubnetId, 'targetVpcSubnetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Provides information to AWS about your VPN customer gateway device. The
  /// customer gateway is the appliance at your end of the VPN connection. (The
  /// device on the AWS side of the VPN connection is the virtual private
  /// gateway.) You must provide the Internet-routable IP address of the
  /// customer gateway's external interface. The IP address must be static and
  /// can be behind a device performing network address translation (NAT).
  ///
  /// For devices that use Border Gateway Protocol (BGP), you can also provide
  /// the device's BGP Autonomous System Number (ASN). You can use an existing
  /// ASN assigned to your network. If you don't have an ASN already, you can
  /// use a private ASN (in the 64512 - 65534 range).
  /// <note>
  /// Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with
  /// the exception of 7224, which is reserved in the <code>us-east-1</code>
  /// Region, and 9059, which is reserved in the <code>eu-west-1</code> Region.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS
  /// Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
  /// <important>
  /// To create more than one customer gateway with the same VPN type, IP
  /// address, and BGP ASN, specify a unique device name for each customer
  /// gateway. Identical requests return information about the existing customer
  /// gateway and do not create new customer gateways.
  /// </important>
  ///
  /// Parameter [bgpAsn] :
  /// For devices that support BGP, the customer gateway's BGP ASN.
  ///
  /// Default: 65000
  ///
  /// Parameter [type] :
  /// The type of VPN connection that this customer gateway supports
  /// (<code>ipsec.1</code>).
  ///
  /// Parameter [certificateArn] :
  /// The Amazon Resource Name (ARN) for the customer gateway certificate.
  ///
  /// Parameter [deviceName] :
  /// A name for the customer gateway device.
  ///
  /// Length Constraints: Up to 255 characters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [publicIp] :
  /// The Internet-routable IP address for the customer gateway's outside
  /// interface. The address must be static.
  Future<CreateCustomerGatewayResult> createCustomerGateway({
    @_s.required int bgpAsn,
    @_s.required GatewayType type,
    String certificateArn,
    String deviceName,
    bool dryRun,
    String publicIp,
  }) async {
    ArgumentError.checkNotNull(bgpAsn, 'bgpAsn');
    ArgumentError.checkNotNull(type, 'type');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in
  /// the specified Availability Zone in your default VPC. You can have only one
  /// default subnet per Availability Zone. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet">Creating
  /// a Default Subnet</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone in which to create the default subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateDefaultSubnetResult> createDefaultSubnet({
    @_s.required String availabilityZone,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(availabilityZone, 'availabilityZone');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a
  /// default subnet in each Availability Zone. For more information about the
  /// components of a default VPC, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">Default
  /// VPC and Default Subnets</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>. You cannot specify the components of the default VPC yourself.
  ///
  /// If you deleted your previous default VPC, you can create a default VPC.
  /// You cannot have more than one default VPC per Region.
  ///
  /// If your account supports EC2-Classic, you cannot use this action to create
  /// a default VPC in a Region that supports EC2-Classic. If you want a default
  /// VPC in a Region that supports EC2-Classic, see "I really want a default
  /// VPC for my existing EC2 account. Is that possible?" in the <a
  /// href="http://aws.amazon.com/vpc/faqs/#Default_VPCs">Default VPCs FAQ</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateDefaultVpcResult> createDefaultVpc({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a set of DHCP options for your VPC. After creating the set, you
  /// must associate it with the VPC, causing all existing and new instances
  /// that you launch in the VPC to use this set of DHCP options. The following
  /// are the individual DHCP options you can specify. For more information
  /// about the options, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC
  /// 2132</a>.
  ///
  /// <ul>
  /// <li>
  /// <code>domain-name-servers</code> - The IP addresses of up to four domain
  /// name servers, or AmazonProvidedDNS. The default DHCP option set specifies
  /// AmazonProvidedDNS. If specifying more than one domain name server, specify
  /// the IP addresses in a single parameter, separated by commas. To have your
  /// instance receive a custom DNS hostname as specified in
  /// <code>domain-name</code>, you must set <code>domain-name-servers</code> to
  /// a custom DNS server.
  /// </li>
  /// <li>
  /// <code>domain-name</code> - If you're using AmazonProvidedDNS in
  /// <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using
  /// AmazonProvidedDNS in another Region, specify
  /// <code>region.compute.internal</code> (for example,
  /// <code>ap-northeast-1.compute.internal</code>). Otherwise, specify a domain
  /// name (for example, <code>MyCompany.com</code>). This value is used to
  /// complete unqualified DNS hostnames. <b>Important</b>: Some Linux operating
  /// systems accept multiple domain names separated by spaces. However, Windows
  /// and other Linux operating systems treat the value as a single domain,
  /// which results in unexpected behavior. If your DHCP options set is
  /// associated with a VPC that has instances with multiple operating systems,
  /// specify only one domain name.
  /// </li>
  /// <li>
  /// <code>ntp-servers</code> - The IP addresses of up to four Network Time
  /// Protocol (NTP) servers.
  /// </li>
  /// <li>
  /// <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS
  /// name servers.
  /// </li>
  /// <li>
  /// <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We
  /// recommend that you specify 2 (broadcast and multicast are not currently
  /// supported). For more information about these node types, see <a
  /// href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.
  /// </li>
  /// </ul>
  /// Your VPC automatically starts out with a set of DHCP options that includes
  /// only a DNS server that we provide (AmazonProvidedDNS). If you create a set
  /// of options, and if your VPC has an internet gateway, make sure to set the
  /// <code>domain-name-servers</code> option either to
  /// <code>AmazonProvidedDNS</code> or to a domain name server of your choice.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP
  /// Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [dhcpConfigurations] :
  /// A DHCP configuration option.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateDhcpOptionsResult> createDhcpOptions({
    @_s.required List<NewDhcpConfiguration> dhcpConfigurations,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(dhcpConfigurations, 'dhcpConfigurations');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// [IPv6 only] Creates an egress-only internet gateway for your VPC. An
  /// egress-only internet gateway is used to enable outbound communication over
  /// IPv6 from instances in your VPC to the internet, and prevents hosts
  /// outside of your VPC from initiating an IPv6 connection with your instance.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC for which to create the egress-only internet gateway.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateEgressOnlyInternetGatewayResult>
      createEgressOnlyInternetGateway({
    @_s.required String vpcId,
    String clientToken,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Launches an EC2 Fleet.
  ///
  /// You can create a single EC2 Fleet that includes multiple launch
  /// specifications that vary by instance type, AMI, Availability Zone, or
  /// subnet.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">Launching
  /// an EC2 Fleet</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [launchTemplateConfigs] :
  /// The configuration for the EC2 Fleet.
  ///
  /// Parameter [targetCapacitySpecification] :
  /// The number of units to request.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [excessCapacityTerminationPolicy] :
  /// Indicates whether running instances should be terminated if the total
  /// target capacity of the EC2 Fleet is decreased below the current size of
  /// the EC2 Fleet.
  ///
  /// Parameter [onDemandOptions] :
  /// Describes the configuration of On-Demand Instances in an EC2 Fleet.
  ///
  /// Parameter [replaceUnhealthyInstances] :
  /// Indicates whether EC2 Fleet should replace unhealthy instances.
  ///
  /// Parameter [spotOptions] :
  /// Describes the configuration of Spot Instances in an EC2 Fleet.
  ///
  /// Parameter [tagSpecifications] :
  /// The key-value pair for tagging the EC2 Fleet request on creation. The
  /// value for <code>ResourceType</code> must be <code>fleet</code>, otherwise
  /// the fleet request fails. To tag instances at launch, specify the tags in
  /// the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template">launch
  /// template</a>. For information about tagging after launch, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources">Tagging
  /// Your Resources</a>.
  ///
  /// Parameter [terminateInstancesWithExpiration] :
  /// Indicates whether running instances should be terminated when the EC2
  /// Fleet expires.
  ///
  /// Parameter [type] :
  /// The type of the request. By default, the EC2 Fleet places an asynchronous
  /// request for your desired capacity, and maintains it by replenishing
  /// interrupted Spot Instances (<code>maintain</code>). A value of
  /// <code>instant</code> places a synchronous one-time request, and returns
  /// errors for any instances that could not be launched. A value of
  /// <code>request</code> places an asynchronous one-time request without
  /// maintaining capacity or submitting requests in alternative capacity pools
  /// if capacity is unavailable. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#ec2-fleet-request-type">EC2
  /// Fleet Request Types</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [validFrom] :
  /// The start date and time of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The
  /// default is to start fulfilling the request immediately.
  ///
  /// Parameter [validUntil] :
  /// The end date and time of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this
  /// point, no new EC2 Fleet requests are placed or able to fulfill the
  /// request. If no value is specified, the request remains until you cancel
  /// it.
  Future<CreateFleetResult> createFleet({
    @_s.required List<FleetLaunchTemplateConfigRequest> launchTemplateConfigs,
    @_s.required TargetCapacitySpecificationRequest targetCapacitySpecification,
    String clientToken,
    bool dryRun,
    FleetExcessCapacityTerminationPolicy excessCapacityTerminationPolicy,
    OnDemandOptionsRequest onDemandOptions,
    bool replaceUnhealthyInstances,
    SpotOptionsRequest spotOptions,
    List<TagSpecification> tagSpecifications,
    bool terminateInstancesWithExpiration,
    FleetType type,
    DateTime validFrom,
    DateTime validUntil,
  }) async {
    ArgumentError.checkNotNull(launchTemplateConfigs, 'launchTemplateConfigs');
    ArgumentError.checkNotNull(
        targetCapacitySpecification, 'targetCapacitySpecification');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates one or more flow logs to capture information about IP traffic for
  /// a specific network interface, subnet, or VPC.
  ///
  /// Flow log data for a monitored network interface is recorded as flow log
  /// records, which are log events consisting of fields that describe the
  /// traffic flow. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow
  /// Log Records</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// When publishing to CloudWatch Logs, flow log records are published to a
  /// log group, and each network interface has a unique log stream in the log
  /// group. When publishing to Amazon S3, flow log records for all of the
  /// monitored network interfaces are published to a single log file object
  /// that is stored in the specified bucket.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html">VPC
  /// Flow Logs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [resourceIds] :
  /// The ID of the subnet, network interface, or VPC for which you want to
  /// create a flow log.
  ///
  /// Constraints: Maximum of 1000 resources
  ///
  /// Parameter [resourceType] :
  /// The type of resource for which to create the flow log. For example, if you
  /// specified a VPC ID for the <code>ResourceId</code> property, specify
  /// <code>VPC</code> for this property.
  ///
  /// Parameter [trafficType] :
  /// The type of traffic to log. You can log traffic that the resource accepts
  /// or rejects, or all traffic.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [deliverLogsPermissionArn] :
  /// The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a
  /// CloudWatch Logs log group in your account.
  ///
  /// If you specify <code>LogDestinationType</code> as <code>s3</code>, do not
  /// specify <code>DeliverLogsPermissionArn</code> or
  /// <code>LogGroupName</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [logDestination] :
  /// Specifies the destination to which the flow log data is to be published.
  /// Flow log data can be published to a CloudWatch Logs log group or an Amazon
  /// S3 bucket. The value specified for this parameter depends on the value
  /// specified for <code>LogDestinationType</code>.
  ///
  /// If <code>LogDestinationType</code> is not specified or
  /// <code>cloud-watch-logs</code>, specify the Amazon Resource Name (ARN) of
  /// the CloudWatch Logs log group. For example, to publish to a log group
  /// called <code>my-logs</code>, specify
  /// <code>arn:aws:logs:us-east-1:123456789012:log-group:my-logs</code>.
  /// Alternatively, use <code>LogGroupName</code> instead.
  ///
  /// If LogDestinationType is <code>s3</code>, specify the ARN of the Amazon S3
  /// bucket. You can also specify a subfolder in the bucket. To specify a
  /// subfolder in the bucket, use the following ARN format:
  /// <code>bucket_ARN/subfolder_name/</code>. For example, to specify a
  /// subfolder named <code>my-logs</code> in a bucket named
  /// <code>my-bucket</code>, use the following ARN:
  /// <code>arn:aws:s3:::my-bucket/my-logs/</code>. You cannot use
  /// <code>AWSLogs</code> as a subfolder name. This is a reserved term.
  ///
  /// Parameter [logDestinationType] :
  /// Specifies the type of destination to which the flow log data is to be
  /// published. Flow log data can be published to CloudWatch Logs or Amazon S3.
  /// To publish flow log data to CloudWatch Logs, specify
  /// <code>cloud-watch-logs</code>. To publish flow log data to Amazon S3,
  /// specify <code>s3</code>.
  ///
  /// If you specify <code>LogDestinationType</code> as <code>s3</code>, do not
  /// specify <code>DeliverLogsPermissionArn</code> or
  /// <code>LogGroupName</code>.
  ///
  /// Default: <code>cloud-watch-logs</code>
  ///
  /// Parameter [logFormat] :
  /// The fields to include in the flow log record, in the order in which they
  /// should appear. For a list of available fields, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow
  /// Log Records</a>. If you omit this parameter, the flow log is created using
  /// the default format. If you specify this parameter, you must specify at
  /// least one field.
  ///
  /// Specify the fields using the <code>${field-id}</code> format, separated by
  /// spaces. For the AWS CLI, use single quotation marks (' ') to surround the
  /// parameter value.
  ///
  /// Only applicable to flow logs that are published to an Amazon S3 bucket.
  ///
  /// Parameter [logGroupName] :
  /// The name of a new or existing CloudWatch Logs log group where Amazon EC2
  /// publishes your flow logs.
  ///
  /// If you specify <code>LogDestinationType</code> as <code>s3</code>, do not
  /// specify <code>DeliverLogsPermissionArn</code> or
  /// <code>LogGroupName</code>.
  ///
  /// Parameter [maxAggregationInterval] :
  /// The maximum interval of time during which a flow of packets is captured
  /// and aggregated into a flow log record. You can specify 60 seconds (1
  /// minute) or 600 seconds (10 minutes).
  ///
  /// When a network interface is attached to a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
  /// instance</a>, the aggregation interval is always 60 seconds or less,
  /// regardless of the value that you specify.
  ///
  /// Default: 600
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the flow logs.
  Future<CreateFlowLogsResult> createFlowLogs({
    @_s.required List<String> resourceIds,
    @_s.required FlowLogsResourceType resourceType,
    @_s.required TrafficType trafficType,
    String clientToken,
    String deliverLogsPermissionArn,
    bool dryRun,
    String logDestination,
    LogDestinationType logDestinationType,
    String logFormat,
    String logGroupName,
    int maxAggregationInterval,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(resourceIds, 'resourceIds');
    ArgumentError.checkNotNull(resourceType, 'resourceType');
    ArgumentError.checkNotNull(trafficType, 'trafficType');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an Amazon FPGA Image (AFI) from the specified design checkpoint
  /// (DCP).
  ///
  /// The create operation is asynchronous. To verify that the AFI is ready for
  /// use, check the output logs.
  ///
  /// An AFI contains the FPGA bitstream that is ready to download to an FPGA.
  /// You can securely deploy an AFI on multiple FPGA-accelerated instances. For
  /// more information, see the <a href="https://github.com/aws/aws-fpga/">AWS
  /// FPGA Hardware Development Kit</a>.
  ///
  /// Parameter [inputStorageLocation] :
  /// The location of the encrypted design checkpoint in Amazon S3. The input
  /// must be a tarball.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [description] :
  /// A description for the AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [logsStorageLocation] :
  /// The location in Amazon S3 for the output logs.
  ///
  /// Parameter [name] :
  /// A name for the AFI.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the FPGA image during creation.
  Future<CreateFpgaImageResult> createFpgaImage({
    @_s.required StorageLocation inputStorageLocation,
    String clientToken,
    String description,
    bool dryRun,
    StorageLocation logsStorageLocation,
    String name,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(inputStorageLocation, 'inputStorageLocation');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that
  /// is either running or stopped.
  ///
  /// If you customized your instance with instance store volumes or EBS volumes
  /// in addition to the root device volume, the new AMI contains block device
  /// mapping information for those volumes. When you launch an instance from
  /// this new AMI, the instance automatically launches with those additional
  /// volumes.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating
  /// Amazon EBS-Backed Linux AMIs</a> in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [name] :
  /// A name for the new image.
  ///
  /// Constraints: 3-128 alphanumeric characters, parentheses (()), square
  /// brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single
  /// quotes ('), at-signs (@), or underscores(_)
  ///
  /// Parameter [blockDeviceMappings] :
  /// The block device mappings. This parameter cannot be used to modify the
  /// encryption status of existing volumes or snapshots. To create an AMI with
  /// encrypted snapshots, use the <a>CopyImage</a> action.
  ///
  /// Parameter [description] :
  /// A description for the new image.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [noReboot] :
  /// By default, Amazon EC2 attempts to shut down and reboot the instance
  /// before creating the image. If the 'No Reboot' option is set, Amazon EC2
  /// doesn't shut down the instance before creating the image. When this option
  /// is used, file system integrity on the created image can't be guaranteed.
  Future<CreateImageResult> createImage({
    @_s.required String instanceId,
    @_s.required String name,
    List<BlockDeviceMapping> blockDeviceMappings,
    String description,
    bool dryRun,
    bool noReboot,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
    ArgumentError.checkNotNull(name, 'name');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Exports a running or stopped instance to an S3 bucket.
  ///
  /// For information about the supported operating systems, image formats, and
  /// known limitations for the types of instances you can export, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting
  /// an Instance as a VM Using VM Import/Export</a> in the <i>VM Import/Export
  /// User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [description] :
  /// A description for the conversion task or the resource being exported. The
  /// maximum length is 255 bytes.
  ///
  /// Parameter [exportToS3Task] :
  /// The format and location for an instance export task.
  ///
  /// Parameter [targetEnvironment] :
  /// The target virtualization environment.
  Future<CreateInstanceExportTaskResult> createInstanceExportTask({
    @_s.required String instanceId,
    String description,
    ExportToS3TaskSpecification exportToS3Task,
    ExportEnvironment targetEnvironment,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an internet gateway for use with a VPC. After creating the
  /// internet gateway, you attach it to a VPC using
  /// <a>AttachInternetGateway</a>.
  ///
  /// For more information about your VPC and internet gateway, see the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual
  /// Private Cloud User Guide</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateInternetGatewayResult> createInternetGateway({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores
  /// the public key and displays the private key for you to save to a file. The
  /// private key is returned as an unencrypted PEM encoded PKCS#1 private key.
  /// If a key with the specified name already exists, Amazon EC2 returns an
  /// error.
  ///
  /// You can have up to five thousand key pairs per Region.
  ///
  /// The key pair returned to you is available only in the Region in which you
  /// create it. If you prefer, you can create your own key pair using a
  /// third-party tool and upload it to any Region using <a>ImportKeyPair</a>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key
  /// Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [keyName] :
  /// A unique name for the key pair.
  ///
  /// Constraints: Up to 255 ASCII characters
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the new key pair.
  Future<KeyPair> createKeyPair({
    @_s.required String keyName,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(keyName, 'keyName');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a launch template. A launch template contains the parameters to
  /// launch an instance. When you launch an instance using <a>RunInstances</a>,
  /// you can specify a launch template instead of providing the launch
  /// parameters in the request.
  ///
  /// Parameter [launchTemplateData] :
  /// The information for the launch template.
  ///
  /// Parameter [launchTemplateName] :
  /// A name for the launch template.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Constraint: Maximum 128 ASCII characters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the launch template during creation.
  ///
  /// Parameter [versionDescription] :
  /// A description for the first version of the launch template.
  Future<CreateLaunchTemplateResult> createLaunchTemplate({
    @_s.required RequestLaunchTemplateData launchTemplateData,
    @_s.required String launchTemplateName,
    String clientToken,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
    String versionDescription,
  }) async {
    ArgumentError.checkNotNull(launchTemplateData, 'launchTemplateData');
    ArgumentError.checkNotNull(launchTemplateName, 'launchTemplateName');
    _s.validateStringLength(
      'launchTemplateName',
      launchTemplateName,
      3,
      128,
    );
    _s.validateStringPattern(
      'launchTemplateName',
      launchTemplateName,
      r'''[a-zA-Z0-9\(\)\.\-/_]+''',
    );
    _s.validateStringLength(
      'versionDescription',
      versionDescription,
      0,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a new version for a launch template. You can specify an existing
  /// version of launch template from which to base the new version.
  ///
  /// Launch template versions are numbered in the order in which they are
  /// created. You cannot specify, change, or replace the numbering of launch
  /// template versions.
  ///
  /// Parameter [launchTemplateData] :
  /// The information for the launch template.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Constraint: Maximum 128 ASCII characters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template. You must specify either the launch template
  /// ID or launch template name in the request.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template. You must specify either the launch
  /// template ID or launch template name in the request.
  ///
  /// Parameter [sourceVersion] :
  /// The version number of the launch template version on which to base the new
  /// version. The new version inherits the same launch parameters as the source
  /// version, except for parameters that you specify in
  /// <code>LaunchTemplateData</code>. Snapshots applied to the block device
  /// mapping are ignored when creating a new version unless they are explicitly
  /// included.
  ///
  /// Parameter [versionDescription] :
  /// A description for the version of the launch template.
  Future<CreateLaunchTemplateVersionResult> createLaunchTemplateVersion({
    @_s.required RequestLaunchTemplateData launchTemplateData,
    String clientToken,
    bool dryRun,
    String launchTemplateId,
    String launchTemplateName,
    String sourceVersion,
    String versionDescription,
  }) async {
    ArgumentError.checkNotNull(launchTemplateData, 'launchTemplateData');
    _s.validateStringLength(
      'launchTemplateName',
      launchTemplateName,
      3,
      128,
    );
    _s.validateStringPattern(
      'launchTemplateName',
      launchTemplateName,
      r'''[a-zA-Z0-9\(\)\.\-/_]+''',
    );
    _s.validateStringLength(
      'versionDescription',
      versionDescription,
      0,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a static route for the specified local gateway route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range used for destination matches. Routing decisions are based
  /// on the most specific match.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [localGatewayVirtualInterfaceGroupId] :
  /// The ID of the virtual interface group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateLocalGatewayRouteResult> createLocalGatewayRoute({
    @_s.required String destinationCidrBlock,
    @_s.required String localGatewayRouteTableId,
    @_s.required String localGatewayVirtualInterfaceGroupId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
    ArgumentError.checkNotNull(
        localGatewayRouteTableId, 'localGatewayRouteTableId');
    ArgumentError.checkNotNull(localGatewayVirtualInterfaceGroupId,
        'localGatewayVirtualInterfaceGroupId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Associates the specified VPC with the specified local gateway route table.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateLocalGatewayRouteTableVpcAssociationResult>
      createLocalGatewayRouteTableVpcAssociation({
    @_s.required String localGatewayRouteTableId,
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        localGatewayRouteTableId, 'localGatewayRouteTableId');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a NAT gateway in the specified public subnet. This action creates
  /// a network interface in the specified subnet with a private IP address from
  /// the IP address range of the subnet. Internet-bound traffic from a private
  /// subnet can be routed to the NAT gateway, therefore enabling instances in
  /// the private subnet to connect to the internet. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">NAT
  /// Gateways</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [allocationId] :
  /// The allocation ID of an Elastic IP address to associate with the NAT
  /// gateway. If the Elastic IP address is associated with another resource,
  /// you must first disassociate it.
  ///
  /// Parameter [subnetId] :
  /// The subnet in which to create the NAT gateway.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Constraint: Maximum 64 ASCII characters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the NAT gateway.
  Future<CreateNatGatewayResult> createNatGateway({
    @_s.required String allocationId,
    @_s.required String subnetId,
    String clientToken,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(allocationId, 'allocationId');
    ArgumentError.checkNotNull(subnetId, 'subnetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a network ACL in a VPC. Network ACLs provide an optional layer of
  /// security (in addition to security groups) for the instances in your VPC.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network
  /// ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateNetworkAclResult> createNetworkAcl({
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an entry (a rule) in a network ACL with the specified rule number.
  /// Each network ACL has a set of numbered ingress rules and a separate set of
  /// numbered egress rules. When determining whether a packet should be allowed
  /// in or out of a subnet associated with the ACL, we process the entries in
  /// the ACL according to the rule numbers, in ascending order. Each network
  /// ACL has a set of ingress rules and a separate set of egress rules.
  ///
  /// We recommend that you leave room between the rule numbers (for example,
  /// 100, 110, 120, ...), and not number them one right after the other (for
  /// example, 101, 102, 103, ...). This makes it easier to add a rule between
  /// existing ones without having to renumber the rules.
  ///
  /// After you add an entry, you can't modify it; you must either replace it,
  /// or create an entry and delete the old one.
  ///
  /// For more information about network ACLs, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network
  /// ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [egress] :
  /// Indicates whether this is an egress rule (rule is applied to traffic
  /// leaving the subnet).
  ///
  /// Parameter [networkAclId] :
  /// The ID of the network ACL.
  ///
  /// Parameter [protocol] :
  /// The protocol number. A value of "-1" means all protocols. If you specify
  /// "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP),
  /// traffic on all ports is allowed, regardless of any ports or ICMP types or
  /// codes that you specify. If you specify protocol "58" (ICMPv6) and specify
  /// an IPv4 CIDR block, traffic for all ICMP types and codes allowed,
  /// regardless of any that you specify. If you specify protocol "58" (ICMPv6)
  /// and specify an IPv6 CIDR block, you must specify an ICMP type and code.
  ///
  /// Parameter [ruleAction] :
  /// Indicates whether to allow or deny the traffic that matches the rule.
  ///
  /// Parameter [ruleNumber] :
  /// The rule number for the entry (for example, 100). ACL entries are
  /// processed in ascending order by rule number.
  ///
  /// Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is
  /// reserved for internal use.
  ///
  /// Parameter [cidrBlock] :
  /// The IPv4 network range to allow or deny, in CIDR notation (for example
  /// <code>172.16.0.0/24</code>).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [icmpTypeCode] :
  /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying
  /// protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 network range to allow or deny, in CIDR notation (for example
  /// <code>2001:db8:1234:1a00::/64</code>).
  ///
  /// Parameter [portRange] :
  /// TCP or UDP protocols: The range of ports the rule applies to. Required if
  /// specifying protocol 6 (TCP) or 17 (UDP).
  Future<void> createNetworkAclEntry({
    @_s.required bool egress,
    @_s.required String networkAclId,
    @_s.required String protocol,
    @_s.required RuleAction ruleAction,
    @_s.required int ruleNumber,
    String cidrBlock,
    bool dryRun,
    IcmpTypeCode icmpTypeCode,
    String ipv6CidrBlock,
    PortRange portRange,
  }) async {
    ArgumentError.checkNotNull(egress, 'egress');
    ArgumentError.checkNotNull(networkAclId, 'networkAclId');
    ArgumentError.checkNotNull(protocol, 'protocol');
    ArgumentError.checkNotNull(ruleAction, 'ruleAction');
    ArgumentError.checkNotNull(ruleNumber, 'ruleNumber');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a network interface in the specified subnet.
  ///
  /// For more information about network interfaces, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic
  /// Network Interfaces</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet to associate with the network interface.
  ///
  /// Parameter [description] :
  /// A description for the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groups] :
  /// The IDs of one or more security groups.
  ///
  /// Parameter [interfaceType] :
  /// Indicates the type of network interface. To create an Elastic Fabric
  /// Adapter (EFA), specify <code>efa</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html">
  /// Elastic Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [ipv6AddressCount] :
  /// The number of IPv6 addresses to assign to a network interface. Amazon EC2
  /// automatically selects the IPv6 addresses from the subnet range. You can't
  /// use this option if specifying specific IPv6 addresses. If your subnet has
  /// the <code>AssignIpv6AddressOnCreation</code> attribute set to
  /// <code>true</code>, you can specify <code>0</code> to override this
  /// setting.
  ///
  /// Parameter [ipv6Addresses] :
  /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your
  /// subnet. You can't use this option if you're specifying a number of IPv6
  /// addresses.
  ///
  /// Parameter [privateIpAddress] :
  /// The primary private IPv4 address of the network interface. If you don't
  /// specify an IPv4 address, Amazon EC2 selects one for you from the subnet's
  /// IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP
  /// addresses specified in <code>privateIpAddresses</code> as primary (only
  /// one IP address can be designated as primary).
  ///
  /// Parameter [privateIpAddresses] :
  /// One or more private IPv4 addresses.
  ///
  /// Parameter [secondaryPrivateIpAddressCount] :
  /// The number of secondary private IPv4 addresses to assign to a network
  /// interface. When you specify a number of secondary IPv4 addresses, Amazon
  /// EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You
  /// can't specify this option and specify more than one private IP address
  /// using <code>privateIpAddresses</code>.
  ///
  /// The number of IP addresses you can assign to a network interface varies by
  /// instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP
  /// Addresses Per ENI Per Instance Type</a> in the <i>Amazon Virtual Private
  /// Cloud User Guide</i>.
  Future<CreateNetworkInterfaceResult> createNetworkInterface({
    @_s.required String subnetId,
    String description,
    bool dryRun,
    List<String> groups,
    NetworkInterfaceCreationType interfaceType,
    int ipv6AddressCount,
    List<InstanceIpv6Address> ipv6Addresses,
    String privateIpAddress,
    List<PrivateIpAddressSpecification> privateIpAddresses,
    int secondaryPrivateIpAddressCount,
  }) async {
    ArgumentError.checkNotNull(subnetId, 'subnetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Grants an AWS-authorized account permission to attach the specified
  /// network interface to an instance in their account.
  ///
  /// You can grant permission to a single AWS account only, and only one
  /// account at a time.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [permission] :
  /// The type of permission to grant.
  ///
  /// Parameter [awsAccountId] :
  /// The AWS account ID.
  ///
  /// Parameter [awsService] :
  /// The AWS service. Currently not supported.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateNetworkInterfacePermissionResult>
      createNetworkInterfacePermission({
    @_s.required String networkInterfaceId,
    @_s.required InterfacePermissionType permission,
    String awsAccountId,
    String awsService,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
    ArgumentError.checkNotNull(permission, 'permission');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a placement group in which to launch instances. The strategy of
  /// the placement group determines how the instances are organized within the
  /// group.
  ///
  /// A <code>cluster</code> placement group is a logical grouping of instances
  /// within a single Availability Zone that benefit from low network latency,
  /// high network throughput. A <code>spread</code> placement group places
  /// instances on distinct hardware. A <code>partition</code> placement group
  /// places groups of instances in different partitions, where instances in one
  /// partition do not share the same hardware with instances in another
  /// partition.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement
  /// Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupName] :
  /// A name for the placement group. Must be unique within the scope of your
  /// account for the Region.
  ///
  /// Constraints: Up to 255 ASCII characters
  ///
  /// Parameter [partitionCount] :
  /// The number of partitions. Valid only when <b>Strategy</b> is set to
  /// <code>partition</code>.
  ///
  /// Parameter [strategy] :
  /// The placement strategy.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the new placement group.
  Future<CreatePlacementGroupResult> createPlacementGroup({
    bool dryRun,
    String groupName,
    int partitionCount,
    PlacementStrategy strategy,
    List<TagSpecification> tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in
  /// the Reserved Instance Marketplace. You can submit one Standard Reserved
  /// Instance listing at a time. To get a list of your Standard Reserved
  /// Instances, you can use the <a>DescribeReservedInstances</a> operation.
  /// <note>
  /// Only Standard Reserved Instances can be sold in the Reserved Instance
  /// Marketplace. Convertible Reserved Instances cannot be sold.
  /// </note>
  /// The Reserved Instance Marketplace matches sellers who want to resell
  /// Standard Reserved Instance capacity that they no longer need with buyers
  /// who want to purchase additional capacity. Reserved Instances bought and
  /// sold through the Reserved Instance Marketplace work like any other
  /// Reserved Instances.
  ///
  /// To sell your Standard Reserved Instances, you must first register as a
  /// seller in the Reserved Instance Marketplace. After completing the
  /// registration process, you can create a Reserved Instance Marketplace
  /// listing of some or all of your Standard Reserved Instances, and specify
  /// the upfront price to receive for them. Your Standard Reserved Instance
  /// listings then become available for purchase. To view the details of your
  /// Standard Reserved Instance listing, you can use the
  /// <a>DescribeReservedInstancesListings</a> operation.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure idempotency of
  /// your listings. This helps avoid duplicate listings. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [instanceCount] :
  /// The number of instances that are a part of a Reserved Instance account to
  /// be listed in the Reserved Instance Marketplace. This number should be less
  /// than or equal to the instance count associated with the Reserved Instance
  /// ID specified in this call.
  ///
  /// Parameter [priceSchedules] :
  /// A list specifying the price of the Standard Reserved Instance for each
  /// month remaining in the Reserved Instance term.
  ///
  /// Parameter [reservedInstancesId] :
  /// The ID of the active Standard Reserved Instance.
  Future<CreateReservedInstancesListingResult> createReservedInstancesListing({
    @_s.required String clientToken,
    @_s.required int instanceCount,
    @_s.required List<PriceScheduleSpecification> priceSchedules,
    @_s.required String reservedInstancesId,
  }) async {
    ArgumentError.checkNotNull(clientToken, 'clientToken');
    ArgumentError.checkNotNull(instanceCount, 'instanceCount');
    ArgumentError.checkNotNull(priceSchedules, 'priceSchedules');
    ArgumentError.checkNotNull(reservedInstancesId, 'reservedInstancesId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a route in a route table within a VPC.
  ///
  /// You must specify one of the following targets: internet gateway or virtual
  /// private gateway, NAT instance, NAT gateway, VPC peering connection,
  /// network interface, egress-only internet gateway, or transit gateway.
  ///
  /// When determining how to route traffic, we use the route with the most
  /// specific match. For example, traffic is destined for the IPv4 address
  /// <code>192.0.2.3</code>, and the route table includes the following two
  /// IPv4 routes:
  ///
  /// <ul>
  /// <li>
  /// <code>192.0.2.0/24</code> (goes to some target A)
  /// </li>
  /// <li>
  /// <code>192.0.2.0/28</code> (goes to some target B)
  /// </li>
  /// </ul>
  /// Both routes apply to the traffic destined for <code>192.0.2.3</code>.
  /// However, the second route in the list covers a smaller number of IP
  /// addresses and is therefore more specific, so we use that route to
  /// determine where to target the traffic.
  ///
  /// For more information about route tables, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table for the route.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 CIDR address block used for the destination match. Routing
  /// decisions are based on the most specific match.
  ///
  /// Parameter [destinationIpv6CidrBlock] :
  /// The IPv6 CIDR block used for the destination match. Routing decisions are
  /// based on the most specific match.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [egressOnlyInternetGatewayId] :
  /// [IPv6 traffic only] The ID of an egress-only internet gateway.
  ///
  /// Parameter [gatewayId] :
  /// The ID of an internet gateway or virtual private gateway attached to your
  /// VPC.
  ///
  /// Parameter [instanceId] :
  /// The ID of a NAT instance in your VPC. The operation fails if you specify
  /// an instance ID unless exactly one network interface is attached.
  ///
  /// Parameter [localGatewayId] :
  /// The ID of the local gateway.
  ///
  /// Parameter [natGatewayId] :
  /// [IPv4 traffic only] The ID of a NAT gateway.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of a network interface.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of a transit gateway.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of a VPC peering connection.
  Future<CreateRouteResult> createRoute({
    @_s.required String routeTableId,
    String destinationCidrBlock,
    String destinationIpv6CidrBlock,
    bool dryRun,
    String egressOnlyInternetGatewayId,
    String gatewayId,
    String instanceId,
    String localGatewayId,
    String natGatewayId,
    String networkInterfaceId,
    String transitGatewayId,
    String vpcPeeringConnectionId,
  }) async {
    ArgumentError.checkNotNull(routeTableId, 'routeTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a route table for the specified VPC. After you create a route
  /// table, you can add routes and associate the table with a subnet.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateRouteTableResult> createRouteTable({
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a security group.
  ///
  /// A security group acts as a virtual firewall for your instance to control
  /// inbound and outbound traffic. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon
  /// EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security
  /// Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// When you create a security group, you specify a friendly name of your
  /// choice. You can have a security group for use in EC2-Classic with the same
  /// name as a security group for use in a VPC. However, you can't have two
  /// security groups for use in EC2-Classic with the same name or two security
  /// groups for use in a VPC with the same name.
  ///
  /// You have a default security group for use in EC2-Classic and a default
  /// security group for use in your VPC. If you don't specify a security group
  /// when you launch an instance, the instance is launched into the appropriate
  /// default security group. A default security group includes a default rule
  /// that grants instances unrestricted network access to each other.
  ///
  /// You can add or remove rules from your security groups using
  /// <a>AuthorizeSecurityGroupIngress</a>, <a>AuthorizeSecurityGroupEgress</a>,
  /// <a>RevokeSecurityGroupIngress</a>, and <a>RevokeSecurityGroupEgress</a>.
  ///
  /// For more information about VPC security group limits, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon
  /// VPC Limits</a>.
  ///
  /// Parameter [description] :
  /// A description for the security group. This is informational only.
  ///
  /// Constraints: Up to 255 characters in length
  ///
  /// Constraints for EC2-Classic: ASCII characters
  ///
  /// Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and
  /// ._-:/()#,@[]+=&amp;;{}!$*
  ///
  /// Parameter [groupName] :
  /// The name of the security group.
  ///
  /// Constraints: Up to 255 characters in length. Cannot start with
  /// <code>sg-</code>.
  ///
  /// Constraints for EC2-Classic: ASCII characters
  ///
  /// Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and
  /// ._-:/()#,@[]+=&amp;;{}!$*
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [vpcId] :
  /// [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
  Future<CreateSecurityGroupResult> createSecurityGroup({
    @_s.required String description,
    @_s.required String groupName,
    bool dryRun,
    String vpcId,
  }) async {
    ArgumentError.checkNotNull(description, 'description');
    ArgumentError.checkNotNull(groupName, 'groupName');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a snapshot of an EBS volume and stores it in Amazon S3. You can
  /// use snapshots for backups, to make copies of EBS volumes, and to save data
  /// before shutting down an instance.
  ///
  /// When a snapshot is created, any AWS Marketplace product codes that are
  /// associated with the source volume are propagated to the snapshot.
  ///
  /// You can take a snapshot of an attached volume that is in use. However,
  /// snapshots only capture data that has been written to your EBS volume at
  /// the time the snapshot command is issued; this may exclude any data that
  /// has been cached by any applications or the operating system. If you can
  /// pause any file systems on the volume long enough to take a snapshot, your
  /// snapshot should be complete. However, if you cannot pause all file writes
  /// to the volume, you should unmount the volume from within the instance,
  /// issue the snapshot command, and then remount the volume to ensure a
  /// consistent and complete snapshot. You may remount and use your volume
  /// while the snapshot status is <code>pending</code>.
  ///
  /// To create a snapshot for EBS volumes that serve as root devices, you
  /// should stop the instance before taking the snapshot.
  ///
  /// Snapshots that are taken from encrypted volumes are automatically
  /// encrypted. Volumes that are created from encrypted snapshots are also
  /// automatically encrypted. Your encrypted volumes and any associated
  /// snapshots always remain protected.
  ///
  /// You can tag your snapshots during creation. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging
  /// Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon
  /// Elastic Block Store</a> and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [volumeId] :
  /// The ID of the EBS volume.
  ///
  /// Parameter [description] :
  /// A description for the snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the snapshot during creation.
  Future<Snapshot> createSnapshot({
    @_s.required String volumeId,
    String description,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(volumeId, 'volumeId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates crash-consistent snapshots of multiple EBS volumes and stores the
  /// data in S3. Volumes are chosen by specifying an instance. Any attached
  /// volumes will produce one snapshot each that is crash-consistent across the
  /// instance. Boot volumes can be excluded by changing the parameters.
  ///
  /// Parameter [instanceSpecification] :
  /// The instance to specify which volumes should be included in the snapshots.
  ///
  /// Parameter [copyTagsFromSource] :
  /// Copies the tags from the specified volume to corresponding snapshot.
  ///
  /// Parameter [description] :
  /// A description propagated to every snapshot specified by the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// Tags to apply to every snapshot specified by the instance.
  Future<CreateSnapshotsResult> createSnapshots({
    @_s.required InstanceSpecification instanceSpecification,
    CopyTagsFromSource copyTagsFromSource,
    String description,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(instanceSpecification, 'instanceSpecification');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a data feed for Spot Instances, enabling you to view Spot Instance
  /// usage logs. You can create one data feed per AWS account. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot
  /// Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// Parameter [bucket] :
  /// The Amazon S3 bucket in which to store the Spot Instance data feed.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [prefix] :
  /// A prefix for the data feed file names.
  Future<CreateSpotDatafeedSubscriptionResult> createSpotDatafeedSubscription({
    @_s.required String bucket,
    bool dryRun,
    String prefix,
  }) async {
    ArgumentError.checkNotNull(bucket, 'bucket');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a subnet in an existing VPC.
  ///
  /// When you create each subnet, you provide the VPC ID and IPv4 CIDR block
  /// for the subnet. After you create a subnet, you can't change its CIDR
  /// block. The size of the subnet's IPv4 CIDR block can be the same as a VPC's
  /// IPv4 CIDR block, or a subset of a VPC's IPv4 CIDR block. If you create
  /// more than one subnet in a VPC, the subnets' CIDR blocks must not overlap.
  /// The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16
  /// IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4
  /// addresses).
  ///
  /// If you've associated an IPv6 CIDR block with your VPC, you can create a
  /// subnet with an IPv6 CIDR block that uses a /64 prefix length.
  /// <important>
  /// AWS reserves both the first four and the last IPv4 address in each
  /// subnet's CIDR block. They're not available for use.
  /// </important>
  /// If you add more than one subnet to a VPC, they're set up in a star
  /// topology with a logical router in the middle.
  ///
  /// If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP
  /// address doesn't change if you stop and restart the instance (unlike a
  /// similar instance launched outside a VPC, which gets a new IP address when
  /// restarted). It's therefore possible to have a subnet with no running
  /// instances (they're all stopped), but no remaining IP addresses available.
  ///
  /// For more information about subnets, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your
  /// VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [cidrBlock] :
  /// The IPv4 network range for the subnet, in CIDR notation. For example,
  /// <code>10.0.0.0/24</code>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone or Local Zone for the subnet.
  ///
  /// Default: AWS selects one for you. If you create more than one subnet in
  /// your VPC, we do not necessarily select a different zone for each subnet.
  ///
  /// To create a subnet in a Local Zone, set this value to the Local Zone ID,
  /// for example <code>us-west-2-lax-1a</code>. For information about the
  /// Regions that support Local Zones, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">Available
  /// Regions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [availabilityZoneId] :
  /// The AZ ID or the Local Zone ID of the subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 network range for the subnet, in CIDR notation. The subnet size
  /// must use a /64 prefix length.
  ///
  /// Parameter [outpostArn] :
  /// The Amazon Resource Name (ARN) of the Outpost.
  Future<CreateSubnetResult> createSubnet({
    @_s.required String cidrBlock,
    @_s.required String vpcId,
    String availabilityZone,
    String availabilityZoneId,
    bool dryRun,
    String ipv6CidrBlock,
    String outpostArn,
  }) async {
    ArgumentError.checkNotNull(cidrBlock, 'cidrBlock');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds or overwrites the specified tags for the specified Amazon EC2
  /// resource or resources. Each resource can have a maximum of 50 tags. Each
  /// tag consists of a key and optional value. Tag keys must be unique per
  /// resource.
  ///
  /// For more information about tags, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging
  /// Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// For more information about creating IAM policies that control users'
  /// access to resources based on tags, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported
  /// Resource-Level Permissions for Amazon EC2 API Actions</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [resources] :
  /// The IDs of the resources, separated by spaces.
  ///
  /// Constraints: Up to 1000 resource IDs. We recommend breaking up this
  /// request into smaller batches.
  ///
  /// Parameter [tags] :
  /// The tags. The <code>value</code> parameter is required, but if you don't
  /// want the tag to have a value, specify the parameter with no value, and we
  /// set the value to an empty string.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> createTags({
    @_s.required List<String> resources,
    @_s.required List<Tag> tags,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(resources, 'resources');
    ArgumentError.checkNotNull(tags, 'tags');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Traffic Mirror filter.
  ///
  /// A Traffic Mirror filter is a set of rules that defines the traffic to
  /// mirror.
  ///
  /// By default, no traffic is mirrored. To mirror traffic, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm">CreateTrafficMirrorFilterRule</a>
  /// to add Traffic Mirror rules to the filter. The rules you add define what
  /// traffic gets mirrored. You can also use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html">ModifyTrafficMirrorFilterNetworkServices</a>
  /// to mirror supported network services.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description of the Traffic Mirror filter.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to a Traffic Mirror filter.
  Future<CreateTrafficMirrorFilterResult> createTrafficMirrorFilter({
    String clientToken,
    String description,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Traffic Mirror filter rule.
  ///
  /// A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.
  ///
  /// You need the Traffic Mirror filter ID when you create the rule.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The destination CIDR block to assign to the Traffic Mirror rule.
  ///
  /// Parameter [ruleAction] :
  /// The action to take (<code>accept</code> | <code>reject</code>) on the
  /// filtered traffic.
  ///
  /// Parameter [ruleNumber] :
  /// The number of the Traffic Mirror rule. This number must be unique for each
  /// Traffic Mirror rule in a given direction. The rules are processed in
  /// ascending order by rule number.
  ///
  /// Parameter [sourceCidrBlock] :
  /// The source CIDR block to assign to the Traffic Mirror rule.
  ///
  /// Parameter [trafficDirection] :
  /// The type of traffic (<code>ingress</code> | <code>egress</code>).
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the filter that this rule is associated with.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description of the Traffic Mirror rule.
  ///
  /// Parameter [destinationPortRange] :
  /// The destination port range.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [protocol] :
  /// The protocol, for example UDP, to assign to the Traffic Mirror rule.
  ///
  /// For information about the protocol value, see <a
  /// href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a> on the Internet Assigned Numbers Authority (IANA) website.
  ///
  /// Parameter [sourcePortRange] :
  /// The source port range.
  Future<CreateTrafficMirrorFilterRuleResult> createTrafficMirrorFilterRule({
    @_s.required String destinationCidrBlock,
    @_s.required TrafficMirrorRuleAction ruleAction,
    @_s.required int ruleNumber,
    @_s.required String sourceCidrBlock,
    @_s.required TrafficDirection trafficDirection,
    @_s.required String trafficMirrorFilterId,
    String clientToken,
    String description,
    TrafficMirrorPortRangeRequest destinationPortRange,
    bool dryRun,
    int protocol,
    TrafficMirrorPortRangeRequest sourcePortRange,
  }) async {
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
    ArgumentError.checkNotNull(ruleAction, 'ruleAction');
    ArgumentError.checkNotNull(ruleNumber, 'ruleNumber');
    ArgumentError.checkNotNull(sourceCidrBlock, 'sourceCidrBlock');
    ArgumentError.checkNotNull(trafficDirection, 'trafficDirection');
    ArgumentError.checkNotNull(trafficMirrorFilterId, 'trafficMirrorFilterId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Traffic Mirror session.
  ///
  /// A Traffic Mirror session actively copies packets from a Traffic Mirror
  /// source to a Traffic Mirror target. Create a filter, and then assign it to
  /// the session to define a subset of the traffic to mirror, for example all
  /// TCP traffic.
  ///
  /// The Traffic Mirror source and the Traffic Mirror target (monitoring
  /// appliances) can be in the same VPC, or in a different VPC connected via
  /// VPC peering or a transit gateway.
  ///
  /// By default, no traffic is mirrored. Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm">CreateTrafficMirrorFilter</a>
  /// to create filter rules that specify the traffic to mirror.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the source network interface.
  ///
  /// Parameter [sessionNumber] :
  /// The session number determines the order in which sessions are evaluated
  /// when an interface is used by multiple sessions. The first session with a
  /// matching filter is the one that mirrors the packets.
  ///
  /// Valid values are 1-32766.
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the Traffic Mirror filter.
  ///
  /// Parameter [trafficMirrorTargetId] :
  /// The ID of the Traffic Mirror target.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description of the Traffic Mirror session.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [packetLength] :
  /// The number of bytes in each packet to mirror. These are bytes after the
  /// VXLAN header. Do not specify this parameter when you want to mirror the
  /// entire packet. To mirror a subset of the packet, set this to the length
  /// (in bytes) that you want to mirror. For example, if you set this value to
  /// 100, then the first 100 bytes that meet the filter criteria are copied to
  /// the target.
  ///
  /// If you do not want to mirror the entire packet, use the
  /// <code>PacketLength</code> parameter to specify the number of bytes in each
  /// packet to mirror.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to a Traffic Mirror session.
  ///
  /// Parameter [virtualNetworkId] :
  /// The VXLAN ID for the Traffic Mirror session. For more information about
  /// the VXLAN protocol, see <a href="https://tools.ietf.org/html/rfc7348">RFC
  /// 7348</a>. If you do not specify a <code>VirtualNetworkId</code>, an
  /// account-wide unique id is chosen at random.
  Future<CreateTrafficMirrorSessionResult> createTrafficMirrorSession({
    @_s.required String networkInterfaceId,
    @_s.required int sessionNumber,
    @_s.required String trafficMirrorFilterId,
    @_s.required String trafficMirrorTargetId,
    String clientToken,
    String description,
    bool dryRun,
    int packetLength,
    List<TagSpecification> tagSpecifications,
    int virtualNetworkId,
  }) async {
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
    ArgumentError.checkNotNull(sessionNumber, 'sessionNumber');
    ArgumentError.checkNotNull(trafficMirrorFilterId, 'trafficMirrorFilterId');
    ArgumentError.checkNotNull(trafficMirrorTargetId, 'trafficMirrorTargetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a target for your Traffic Mirror session.
  ///
  /// A Traffic Mirror target is the destination for mirrored traffic. The
  /// Traffic Mirror source and the Traffic Mirror target (monitoring
  /// appliances) can be in the same VPC, or in different VPCs connected via VPC
  /// peering or a transit gateway.
  ///
  /// A Traffic Mirror target can be a network interface, or a Network Load
  /// Balancer.
  ///
  /// To use the target in a Traffic Mirror session, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm">CreateTrafficMirrorSession</a>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [description] :
  /// The description of the Traffic Mirror target.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [networkInterfaceId] :
  /// The network interface ID that is associated with the target.
  ///
  /// Parameter [networkLoadBalancerArn] :
  /// The Amazon Resource Name (ARN) of the Network Load Balancer that is
  /// associated with the target.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to assign to the Traffic Mirror target.
  Future<CreateTrafficMirrorTargetResult> createTrafficMirrorTarget({
    String clientToken,
    String description,
    bool dryRun,
    String networkInterfaceId,
    String networkLoadBalancerArn,
    List<TagSpecification> tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a transit gateway.
  ///
  /// You can use a transit gateway to interconnect your virtual private clouds
  /// (VPC) and on-premises networks. After the transit gateway enters the
  /// <code>available</code> state, you can attach your VPCs and VPN connections
  /// to the transit gateway.
  ///
  /// To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.
  ///
  /// To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a
  /// customer gateway and specify the ID of the customer gateway and the ID of
  /// the transit gateway in a call to <a>CreateVpnConnection</a>.
  ///
  /// When you create a transit gateway, we create a default transit gateway
  /// route table and use it as the default association route table and the
  /// default propagation route table. You can use
  /// <a>CreateTransitGatewayRouteTable</a> to create additional transit gateway
  /// route tables. If you disable automatic route propagation, we do not create
  /// a default transit gateway route table. You can use
  /// <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from
  /// a resource attachment to a transit gateway route table. If you disable
  /// automatic associations, you can use
  /// <a>AssociateTransitGatewayRouteTable</a> to associate a resource
  /// attachment with a transit gateway route table.
  ///
  /// Parameter [description] :
  /// A description of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The transit gateway options.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the transit gateway.
  Future<CreateTransitGatewayResult> createTransitGateway({
    String description,
    bool dryRun,
    TransitGatewayRequestOptions options,
    List<TagSpecification> tagSpecifications,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a multicast domain using the specified transit gateway.
  ///
  /// The transit gateway must be in the available state before you create a
  /// domain. Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html">DescribeTransitGateways</a>
  /// to see the state of transit gateway.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags for the transit gateway multicast domain.
  Future<CreateTransitGatewayMulticastDomainResult>
      createTransitGatewayMulticastDomain({
    @_s.required String transitGatewayId,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(transitGatewayId, 'transitGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Requests a transit gateway peering attachment between the specified
  /// transit gateway (requester) and a peer transit gateway (accepter). The
  /// transit gateways must be in different Regions. The peer transit gateway
  /// can be in your account or a different AWS account.
  ///
  /// After you create the peering attachment, the owner of the accepter transit
  /// gateway must accept the attachment request.
  ///
  /// Parameter [peerAccountId] :
  /// The AWS account ID of the owner of the peer transit gateway.
  ///
  /// Parameter [peerRegion] :
  /// The Region where the peer transit gateway is located.
  ///
  /// Parameter [peerTransitGatewayId] :
  /// The ID of the peer transit gateway with which to create the peering
  /// attachment.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the transit gateway peering attachment.
  Future<CreateTransitGatewayPeeringAttachmentResult>
      createTransitGatewayPeeringAttachment({
    @_s.required String peerAccountId,
    @_s.required String peerRegion,
    @_s.required String peerTransitGatewayId,
    @_s.required String transitGatewayId,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(peerAccountId, 'peerAccountId');
    ArgumentError.checkNotNull(peerRegion, 'peerRegion');
    ArgumentError.checkNotNull(peerTransitGatewayId, 'peerTransitGatewayId');
    ArgumentError.checkNotNull(transitGatewayId, 'transitGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a static route for the specified transit gateway route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range used for destination matches. Routing decisions are based
  /// on the most specific match.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [blackhole] :
  /// Indicates whether to drop traffic that matches this route.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  Future<CreateTransitGatewayRouteResult> createTransitGatewayRoute({
    @_s.required String destinationCidrBlock,
    @_s.required String transitGatewayRouteTableId,
    bool blackhole,
    bool dryRun,
    String transitGatewayAttachmentId,
  }) async {
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a route table for the specified transit gateway.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the transit gateway route table.
  Future<CreateTransitGatewayRouteTableResult> createTransitGatewayRouteTable({
    @_s.required String transitGatewayId,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(transitGatewayId, 'transitGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Attaches the specified VPC to the specified transit gateway.
  ///
  /// If you attach a VPC with a CIDR range that overlaps the CIDR range of a
  /// VPC that is already attached, the new VPC CIDR range is not propagated to
  /// the default propagation route table.
  ///
  /// To send VPC traffic to an attached transit gateway, add a route to the VPC
  /// route table using <a>CreateRoute</a>.
  ///
  /// Parameter [subnetIds] :
  /// The IDs of one or more subnets. You can specify only one subnet per
  /// Availability Zone. You must specify at least one subnet, but we recommend
  /// that you specify two subnets for better availability. The transit gateway
  /// uses one IP address from each specified subnet.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The VPC attachment options.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the VPC attachment.
  Future<CreateTransitGatewayVpcAttachmentResult>
      createTransitGatewayVpcAttachment({
    @_s.required List<String> subnetIds,
    @_s.required String transitGatewayId,
    @_s.required String vpcId,
    bool dryRun,
    CreateTransitGatewayVpcAttachmentRequestOptions options,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(subnetIds, 'subnetIds');
    ArgumentError.checkNotNull(transitGatewayId, 'transitGatewayId');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an EBS volume that can be attached to an instance in the same
  /// Availability Zone. The volume is created in the regional endpoint that you
  /// send the HTTP request to. For more information see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions
  /// and Endpoints</a>.
  ///
  /// You can create a new empty volume or restore a volume from an EBS
  /// snapshot. Any AWS Marketplace product codes from the snapshot are
  /// propagated to the volume.
  ///
  /// You can create encrypted volumes. Encrypted volumes must be attached to
  /// instances that support Amazon EBS encryption. Volumes that are created
  /// from encrypted snapshots are also automatically encrypted. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// You can tag your volumes during creation. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging
  /// Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html">Creating
  /// an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone in which to create the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// Specifies whether the volume should be encrypted. The effect of setting
  /// the encryption state to <code>true</code> depends on the volume origin
  /// (new or from a snapshot), starting encryption state, ownership, and
  /// whether encryption by default is enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default">Encryption
  /// by Default</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Encrypted Amazon EBS volumes must be attached to instances that support
  /// Amazon EBS encryption. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported
  /// Instance Types</a>.
  ///
  /// Parameter [iops] :
  /// The number of I/O operations per second (IOPS) to provision for the
  /// volume, with a maximum ratio of 50 IOPS/GiB. Range is 100 to 64,000 IOPS
  /// for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
  /// instances</a>. Other instance families guarantee performance up to 32,000
  /// IOPS. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon
  /// EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// This parameter is valid only for Provisioned IOPS SSD (io1) volumes.
  ///
  /// Parameter [kmsKeyId] :
  /// The identifier of the AWS Key Management Service (AWS KMS) customer master
  /// key (CMK) to use for Amazon EBS encryption. If this parameter is not
  /// specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code>
  /// is specified, the encrypted state must be <code>true</code>.
  ///
  /// You can specify the CMK using any of the following:
  ///
  /// <ul>
  /// <li>
  /// Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Key alias. For example, alias/ExampleAlias.
  /// </li>
  /// <li>
  /// Key ARN. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.
  /// </li>
  /// <li>
  /// Alias ARN. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.
  /// </li>
  /// </ul>
  /// AWS authenticates the CMK asynchronously. Therefore, if you specify an ID,
  /// alias, or ARN that is not valid, the action can appear to complete, but
  /// eventually fails.
  ///
  /// Parameter [multiAttachEnabled] :
  /// Specifies whether to enable Amazon EBS Multi-Attach. If you enable
  /// Multi-Attach, you can attach the volume to up to 16 <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
  /// instances</a> in the same Availability Zone. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html">
  /// Amazon EBS Multi-Attach</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [outpostArn] :
  /// The Amazon Resource Name (ARN) of the Outpost.
  ///
  /// Parameter [size] :
  /// The size of the volume, in GiBs. You must specify either a snapshot ID or
  /// a volume size.
  ///
  /// Constraints: 1-16,384 for <code>gp2</code>, 4-16,384 for <code>io1</code>,
  /// 500-16,384 for <code>st1</code>, 500-16,384 for <code>sc1</code>, and
  /// 1-1,024 for <code>standard</code>. If you specify a snapshot, the volume
  /// size must be equal to or larger than the snapshot size.
  ///
  /// Default: If you're creating the volume from a snapshot and don't specify a
  /// volume size, the default is the snapshot size.
  ///
  /// Parameter [snapshotId] :
  /// The snapshot from which to create the volume. You must specify either a
  /// snapshot ID or a volume size.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the volume during creation.
  ///
  /// Parameter [volumeType] :
  /// The volume type. This can be <code>gp2</code> for General Purpose SSD,
  /// <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput
  /// Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for
  /// Magnetic volumes.
  ///
  /// Default: <code>gp2</code>
  Future<Volume> createVolume({
    @_s.required String availabilityZone,
    bool dryRun,
    bool encrypted,
    int iops,
    String kmsKeyId,
    bool multiAttachEnabled,
    String outpostArn,
    int size,
    String snapshotId,
    List<TagSpecification> tagSpecifications,
    VolumeType volumeType,
  }) async {
    ArgumentError.checkNotNull(availabilityZone, 'availabilityZone');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can
  /// create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16
  /// netmask (65,536 IPv4 addresses). For more information about how large to
  /// make your VPC, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your
  /// VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// You can optionally request an IPv6 CIDR block for the VPC. You can request
  /// an Amazon-provided IPv6 CIDR block from Amazon's pool of IPv6 addresses,
  /// or an IPv6 CIDR block from an IPv6 address pool that you provisioned
  /// through bring your own IP addresses (<a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).
  ///
  /// By default, each instance you launch in the VPC has the default DHCP
  /// options, which include only a default DNS server that we provide
  /// (AmazonProvidedDNS). For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP
  /// Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// You can specify the instance tenancy value for the VPC when you create it.
  /// You can't change this value for the VPC after you create it. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated
  /// Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [cidrBlock] :
  /// The IPv4 network range for the VPC, in CIDR notation. For example,
  /// <code>10.0.0.0/16</code>.
  ///
  /// Parameter [amazonProvidedIpv6CidrBlock] :
  /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
  /// the VPC. You cannot specify the range of IP addresses, or the size of the
  /// CIDR block.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceTenancy] :
  /// The tenancy options for instances launched into the VPC. For
  /// <code>default</code>, instances are launched with shared tenancy by
  /// default. You can launch instances with any tenancy into a shared tenancy
  /// VPC. For <code>dedicated</code>, instances are launched as dedicated
  /// tenancy instances by default. You can only launch instances with a tenancy
  /// of <code>dedicated</code> or <code>host</code> into a dedicated tenancy
  /// VPC.
  ///
  /// <b>Important:</b> The <code>host</code> value cannot be used with this
  /// parameter. Use the <code>default</code> or <code>dedicated</code> values
  /// only.
  ///
  /// Default: <code>default</code>
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 CIDR block from the IPv6 address pool. You must also specify
  /// <code>Ipv6Pool</code> in the request.
  ///
  /// To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
  ///
  /// Parameter [ipv6CidrBlockNetworkBorderGroup] :
  /// The name of the location from which we advertise the IPV6 CIDR block. Use
  /// this parameter to limit the address to this location.
  ///
  /// You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code>
  /// to use this parameter.
  ///
  /// Parameter [ipv6Pool] :
  /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
  Future<CreateVpcResult> createVpc({
    @_s.required String cidrBlock,
    bool amazonProvidedIpv6CidrBlock,
    bool dryRun,
    Tenancy instanceTenancy,
    String ipv6CidrBlock,
    String ipv6CidrBlockNetworkBorderGroup,
    String ipv6Pool,
  }) async {
    ArgumentError.checkNotNull(cidrBlock, 'cidrBlock');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a VPC endpoint for a specified service. An endpoint enables you to
  /// create a private connection between your VPC and the service. The service
  /// may be provided by AWS, an AWS Marketplace Partner, or another AWS
  /// account. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC
  /// Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// A <code>gateway</code> endpoint serves as a target for a route in your
  /// route table for traffic destined for the AWS service. You can specify an
  /// endpoint policy to attach to the endpoint, which will control access to
  /// the service from your VPC. You can also specify the VPC route tables that
  /// use the endpoint.
  ///
  /// An <code>interface</code> endpoint is a network interface in your subnet
  /// that serves as an endpoint for communicating with the specified service.
  /// You can specify the subnets in which to create an endpoint, and the
  /// security groups to associate with the endpoint network interface.
  ///
  /// Use <a>DescribeVpcEndpointServices</a> to get a list of supported
  /// services.
  ///
  /// Parameter [serviceName] :
  /// The service name. To get a list of available services, use the
  /// <a>DescribeVpcEndpointServices</a> request, or get the name from the
  /// service provider.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC in which the endpoint will be used.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [policyDocument] :
  /// A policy to attach to the endpoint that controls access to the service.
  /// The policy must be in valid JSON format. If this parameter is not
  /// specified, we attach a default policy that allows full access to the
  /// service.
  ///
  /// Parameter [privateDnsEnabled] :
  /// (Interface endpoint) Indicates whether to associate a private hosted zone
  /// with the specified VPC. The private hosted zone contains a record set for
  /// the default public DNS name for the service for the Region (for example,
  /// <code>kinesis.us-east-1.amazonaws.com</code>), which resolves to the
  /// private IP addresses of the endpoint network interfaces in the VPC. This
  /// enables you to make requests to the default public DNS name for the
  /// service instead of the public DNS names that are automatically generated
  /// by the VPC endpoint service.
  ///
  /// To use a private hosted zone, you must set the following VPC attributes to
  /// <code>true</code>: <code>enableDnsHostnames</code> and
  /// <code>enableDnsSupport</code>. Use <a>ModifyVpcAttribute</a> to set the
  /// VPC attributes.
  ///
  /// Default: <code>true</code>
  ///
  /// Parameter [routeTableIds] :
  /// (Gateway endpoint) One or more route table IDs.
  ///
  /// Parameter [securityGroupIds] :
  /// (Interface endpoint) The ID of one or more security groups to associate
  /// with the endpoint network interface.
  ///
  /// Parameter [subnetIds] :
  /// (Interface endpoint) The ID of one or more subnets in which to create an
  /// endpoint network interface.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to associate with the endpoint.
  ///
  /// Parameter [vpcEndpointType] :
  /// The type of endpoint.
  ///
  /// Default: Gateway
  Future<CreateVpcEndpointResult> createVpcEndpoint({
    @_s.required String serviceName,
    @_s.required String vpcId,
    String clientToken,
    bool dryRun,
    String policyDocument,
    bool privateDnsEnabled,
    List<String> routeTableIds,
    List<String> securityGroupIds,
    List<String> subnetIds,
    List<TagSpecification> tagSpecifications,
    VpcEndpointType vpcEndpointType,
  }) async {
    ArgumentError.checkNotNull(serviceName, 'serviceName');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a connection notification for a specified VPC endpoint or VPC
  /// endpoint service. A connection notification notifies you of specific
  /// endpoint events. You must create an SNS topic to receive notifications.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Create a
  /// Topic</a> in the <i>Amazon Simple Notification Service Developer
  /// Guide</i>.
  ///
  /// You can create a connection notification for interface endpoints only.
  ///
  /// Parameter [connectionEvents] :
  /// One or more endpoint events for which to receive notifications. Valid
  /// values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>,
  /// and <code>Reject</code>.
  ///
  /// Parameter [connectionNotificationArn] :
  /// The ARN of the SNS topic for the notifications.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [serviceId] :
  /// The ID of the endpoint service.
  ///
  /// Parameter [vpcEndpointId] :
  /// The ID of the endpoint.
  Future<CreateVpcEndpointConnectionNotificationResult>
      createVpcEndpointConnectionNotification({
    @_s.required List<String> connectionEvents,
    @_s.required String connectionNotificationArn,
    String clientToken,
    bool dryRun,
    String serviceId,
    String vpcEndpointId,
  }) async {
    ArgumentError.checkNotNull(connectionEvents, 'connectionEvents');
    ArgumentError.checkNotNull(
        connectionNotificationArn, 'connectionNotificationArn');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a VPC endpoint service configuration to which service consumers
  /// (AWS accounts, IAM users, and IAM roles) can connect. Service consumers
  /// can create an interface VPC endpoint to connect to your service.
  ///
  /// To create an endpoint service configuration, you must first create a
  /// Network Load Balancer for your service. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC
  /// Endpoint Services</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// If you set the private DNS name, you must prove that you own the private
  /// DNS domain name. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC
  /// Endpoint Service Private DNS Name Verification</a> in the <i>Amazon
  /// Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [networkLoadBalancerArns] :
  /// The Amazon Resource Names (ARNs) of one or more Network Load Balancers for
  /// your service.
  ///
  /// Parameter [acceptanceRequired] :
  /// Indicates whether requests from service consumers to create an endpoint to
  /// your service must be accepted. To accept a request, use
  /// <a>AcceptVpcEndpointConnections</a>.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [privateDnsName] :
  /// The private DNS name to assign to the VPC endpoint service.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to associate with the service.
  Future<CreateVpcEndpointServiceConfigurationResult>
      createVpcEndpointServiceConfiguration({
    @_s.required List<String> networkLoadBalancerArns,
    bool acceptanceRequired,
    String clientToken,
    bool dryRun,
    String privateDnsName,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(
        networkLoadBalancerArns, 'networkLoadBalancerArns');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Requests a VPC peering connection between two VPCs: a requester VPC that
  /// you own and an accepter VPC with which to create the connection. The
  /// accepter VPC can belong to another AWS account and can be in a different
  /// Region to the requester VPC. The requester VPC and accepter VPC cannot
  /// have overlapping CIDR blocks.
  /// <note>
  /// Limitations and rules apply to a VPC peering connection. For more
  /// information, see the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations">limitations</a>
  /// section in the <i>VPC Peering Guide</i>.
  /// </note>
  /// The owner of the accepter VPC must accept the peering request to activate
  /// the peering connection. The VPC peering connection request expires after 7
  /// days, after which it cannot be accepted or rejected.
  ///
  /// If you create a VPC peering connection request between VPCs with
  /// overlapping CIDR blocks, the VPC peering connection has a status of
  /// <code>failed</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [peerOwnerId] :
  /// The AWS account ID of the owner of the accepter VPC.
  ///
  /// Default: Your AWS account ID
  ///
  /// Parameter [peerRegion] :
  /// The Region code for the accepter VPC, if the accepter VPC is located in a
  /// Region other than the Region in which you make the request.
  ///
  /// Default: The Region in which you make the request.
  ///
  /// Parameter [peerVpcId] :
  /// The ID of the VPC with which you are creating the VPC peering connection.
  /// You must specify this parameter in the request.
  ///
  /// Parameter [vpcId] :
  /// The ID of the requester VPC. You must specify this parameter in the
  /// request.
  Future<CreateVpcPeeringConnectionResult> createVpcPeeringConnection({
    bool dryRun,
    String peerOwnerId,
    String peerRegion,
    String peerVpcId,
    String vpcId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a VPN connection between an existing virtual private gateway and a
  /// VPN customer gateway. The supported connection type is
  /// <code>ipsec.1</code>.
  ///
  /// The response includes information that you need to give to your network
  /// administrator to configure your customer gateway.
  /// <important>
  /// We strongly recommend that you use HTTPS when calling this operation
  /// because the response contains sensitive cryptographic information for
  /// configuring your customer gateway.
  /// </important>
  /// If you decide to shut down your VPN connection for any reason and later
  /// create a new VPN connection, you must reconfigure your customer gateway
  /// with the new information returned from this call.
  ///
  /// This is an idempotent operation. If you perform the operation more than
  /// once, Amazon EC2 doesn't return an error.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS
  /// Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [customerGatewayId] :
  /// The ID of the customer gateway.
  ///
  /// Parameter [type] :
  /// The type of VPN connection (<code>ipsec.1</code>).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The options for the VPN connection.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway. If you specify a transit gateway, you
  /// cannot specify a virtual private gateway.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway. If you specify a virtual private
  /// gateway, you cannot specify a transit gateway.
  Future<CreateVpnConnectionResult> createVpnConnection({
    @_s.required String customerGatewayId,
    @_s.required String type,
    bool dryRun,
    VpnConnectionOptionsSpecification options,
    String transitGatewayId,
    String vpnGatewayId,
  }) async {
    ArgumentError.checkNotNull(customerGatewayId, 'customerGatewayId');
    ArgumentError.checkNotNull(type, 'type');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a static route associated with a VPN connection between an
  /// existing virtual private gateway and a VPN customer gateway. The static
  /// route allows traffic to be routed from the virtual private gateway to the
  /// VPN customer gateway.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS
  /// Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR block associated with the local subnet of the customer network.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the VPN connection.
  Future<void> createVpnConnectionRoute({
    @_s.required String destinationCidrBlock,
    @_s.required String vpnConnectionId,
  }) async {
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
    ArgumentError.checkNotNull(vpnConnectionId, 'vpnConnectionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a virtual private gateway. A virtual private gateway is the
  /// endpoint on the VPC side of your VPN connection. You can create a virtual
  /// private gateway before creating the VPC itself.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS
  /// Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [type] :
  /// The type of VPN connection this virtual private gateway supports.
  ///
  /// Parameter [amazonSideAsn] :
  /// A private Autonomous System Number (ASN) for the Amazon side of a BGP
  /// session. If you're using a 16-bit ASN, it must be in the 64512 to 65534
  /// range. If you're using a 32-bit ASN, it must be in the 4200000000 to
  /// 4294967294 range.
  ///
  /// Default: 64512
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone for the virtual private gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<CreateVpnGatewayResult> createVpnGateway({
    @_s.required GatewayType type,
    int amazonSideAsn,
    String availabilityZone,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(type, 'type');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Client VPN endpoint. You must disassociate all
  /// target networks before you can delete a Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN to be deleted.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteClientVpnEndpointResult> deleteClientVpnEndpoint({
    @_s.required String clientVpnEndpointId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a route from a Client VPN endpoint. You can only delete routes
  /// that you manually added using the <b>CreateClientVpnRoute</b> action. You
  /// cannot delete routes that were automatically added when associating a
  /// subnet. To remove routes that have been automatically added, disassociate
  /// the target subnet from the Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint from which the route is to be deleted.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 address range, in CIDR notation, of the route to be deleted.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [targetVpcSubnetId] :
  /// The ID of the target subnet used by the route.
  Future<DeleteClientVpnRouteResult> deleteClientVpnRoute({
    @_s.required String clientVpnEndpointId,
    @_s.required String destinationCidrBlock,
    bool dryRun,
    String targetVpcSubnetId,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified customer gateway. You must delete the VPN connection
  /// before you can delete the customer gateway.
  ///
  /// Parameter [customerGatewayId] :
  /// The ID of the customer gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteCustomerGateway({
    @_s.required String customerGatewayId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(customerGatewayId, 'customerGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified set of DHCP options. You must disassociate the set
  /// of DHCP options before you can delete it. You can disassociate the set of
  /// DHCP options by associating either a new set of options or the default set
  /// of options with the VPC.
  ///
  /// Parameter [dhcpOptionsId] :
  /// The ID of the DHCP options set.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteDhcpOptions({
    @_s.required String dhcpOptionsId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(dhcpOptionsId, 'dhcpOptionsId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes an egress-only internet gateway.
  ///
  /// Parameter [egressOnlyInternetGatewayId] :
  /// The ID of the egress-only internet gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteEgressOnlyInternetGatewayResult>
      deleteEgressOnlyInternetGateway({
    @_s.required String egressOnlyInternetGatewayId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        egressOnlyInternetGatewayId, 'egressOnlyInternetGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified EC2 Fleet.
  ///
  /// After you delete an EC2 Fleet, it launches no new instances. You must
  /// specify whether an EC2 Fleet should also terminate its instances. If you
  /// terminate the instances, the EC2 Fleet enters the
  /// <code>deleted_terminating</code> state. Otherwise, the EC2 Fleet enters
  /// the <code>deleted_running</code> state, and the instances continue to run
  /// until they are interrupted or you terminate them manually.
  ///
  /// Parameter [fleetIds] :
  /// The IDs of the EC2 Fleets.
  ///
  /// Parameter [terminateInstances] :
  /// Indicates whether to terminate instances for an EC2 Fleet if it is deleted
  /// successfully.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteFleetsResult> deleteFleets({
    @_s.required List<String> fleetIds,
    @_s.required bool terminateInstances,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(fleetIds, 'fleetIds');
    ArgumentError.checkNotNull(terminateInstances, 'terminateInstances');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes one or more flow logs.
  ///
  /// Parameter [flowLogIds] :
  /// One or more flow log IDs.
  ///
  /// Constraint: Maximum of 1000 flow log IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteFlowLogsResult> deleteFlowLogs({
    @_s.required List<String> flowLogIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(flowLogIds, 'flowLogIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Amazon FPGA Image (AFI).
  ///
  /// Parameter [fpgaImageId] :
  /// The ID of the AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteFpgaImageResult> deleteFpgaImage({
    @_s.required String fpgaImageId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(fpgaImageId, 'fpgaImageId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified internet gateway. You must detach the internet
  /// gateway from the VPC before you can delete it.
  ///
  /// Parameter [internetGatewayId] :
  /// The ID of the internet gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteInternetGateway({
    @_s.required String internetGatewayId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(internetGatewayId, 'internetGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified key pair, by removing the public key from Amazon
  /// EC2.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [keyName] :
  /// The name of the key pair.
  ///
  /// Parameter [keyPairId] :
  /// The ID of the key pair.
  Future<void> deleteKeyPair({
    bool dryRun,
    String keyName,
    String keyPairId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a launch template. Deleting a launch template deletes all of its
  /// versions.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template. You must specify either the launch template
  /// ID or launch template name in the request.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template. You must specify either the launch
  /// template ID or launch template name in the request.
  Future<DeleteLaunchTemplateResult> deleteLaunchTemplate({
    bool dryRun,
    String launchTemplateId,
    String launchTemplateName,
  }) async {
    _s.validateStringLength(
      'launchTemplateName',
      launchTemplateName,
      3,
      128,
    );
    _s.validateStringPattern(
      'launchTemplateName',
      launchTemplateName,
      r'''[a-zA-Z0-9\(\)\.\-/_]+''',
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes one or more versions of a launch template. You cannot delete the
  /// default version of a launch template; you must first assign a different
  /// version as the default. If the default version is the only version for the
  /// launch template, you must delete the entire launch template using
  /// <a>DeleteLaunchTemplate</a>.
  ///
  /// Parameter [versions] :
  /// The version numbers of one or more launch template versions to delete.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template. You must specify either the launch template
  /// ID or launch template name in the request.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template. You must specify either the launch
  /// template ID or launch template name in the request.
  Future<DeleteLaunchTemplateVersionsResult> deleteLaunchTemplateVersions({
    @_s.required List<String> versions,
    bool dryRun,
    String launchTemplateId,
    String launchTemplateName,
  }) async {
    ArgumentError.checkNotNull(versions, 'versions');
    _s.validateStringLength(
      'launchTemplateName',
      launchTemplateName,
      3,
      128,
    );
    _s.validateStringPattern(
      'launchTemplateName',
      launchTemplateName,
      r'''[a-zA-Z0-9\(\)\.\-/_]+''',
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified route from the specified local gateway route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range for the route. This must match the CIDR for the route
  /// exactly.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteLocalGatewayRouteResult> deleteLocalGatewayRoute({
    @_s.required String destinationCidrBlock,
    @_s.required String localGatewayRouteTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
    ArgumentError.checkNotNull(
        localGatewayRouteTableId, 'localGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified association between a VPC and local gateway route
  /// table.
  ///
  /// Parameter [localGatewayRouteTableVpcAssociationId] :
  /// The ID of the association.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteLocalGatewayRouteTableVpcAssociationResult>
      deleteLocalGatewayRouteTableVpcAssociation({
    @_s.required String localGatewayRouteTableVpcAssociationId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(localGatewayRouteTableVpcAssociationId,
        'localGatewayRouteTableVpcAssociationId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified NAT gateway. Deleting a NAT gateway disassociates
  /// its Elastic IP address, but does not release the address from your
  /// account. Deleting a NAT gateway does not delete any NAT gateway routes in
  /// your route tables.
  ///
  /// Parameter [natGatewayId] :
  /// The ID of the NAT gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteNatGatewayResult> deleteNatGateway({
    @_s.required String natGatewayId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(natGatewayId, 'natGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified network ACL. You can't delete the ACL if it's
  /// associated with any subnets. You can't delete the default network ACL.
  ///
  /// Parameter [networkAclId] :
  /// The ID of the network ACL.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteNetworkAcl({
    @_s.required String networkAclId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(networkAclId, 'networkAclId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified ingress or egress entry (rule) from the specified
  /// network ACL.
  ///
  /// Parameter [egress] :
  /// Indicates whether the rule is an egress rule.
  ///
  /// Parameter [networkAclId] :
  /// The ID of the network ACL.
  ///
  /// Parameter [ruleNumber] :
  /// The rule number of the entry to delete.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteNetworkAclEntry({
    @_s.required bool egress,
    @_s.required String networkAclId,
    @_s.required int ruleNumber,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(egress, 'egress');
    ArgumentError.checkNotNull(networkAclId, 'networkAclId');
    ArgumentError.checkNotNull(ruleNumber, 'ruleNumber');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified network interface. You must detach the network
  /// interface before you can delete it.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteNetworkInterface({
    @_s.required String networkInterfaceId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a permission for a network interface. By default, you cannot
  /// delete the permission if the account for which you're removing the
  /// permission has attached the network interface to an instance. However, you
  /// can force delete the permission, regardless of any attachment.
  ///
  /// Parameter [networkInterfacePermissionId] :
  /// The ID of the network interface permission.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [force] :
  /// Specify <code>true</code> to remove the permission even if the network
  /// interface is attached to an instance.
  Future<DeleteNetworkInterfacePermissionResult>
      deleteNetworkInterfacePermission({
    @_s.required String networkInterfacePermissionId,
    bool dryRun,
    bool force,
  }) async {
    ArgumentError.checkNotNull(
        networkInterfacePermissionId, 'networkInterfacePermissionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified placement group. You must terminate all instances in
  /// the placement group before you can delete the placement group. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement
  /// Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [groupName] :
  /// The name of the placement group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deletePlacementGroup({
    @_s.required String groupName,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(groupName, 'groupName');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the queued purchases for the specified Reserved Instances.
  ///
  /// Parameter [reservedInstancesIds] :
  /// The IDs of the Reserved Instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteQueuedReservedInstancesResult> deleteQueuedReservedInstances({
    @_s.required List<String> reservedInstancesIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(reservedInstancesIds, 'reservedInstancesIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified route from the specified route table.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 CIDR range for the route. The value you specify must match the
  /// CIDR for the route exactly.
  ///
  /// Parameter [destinationIpv6CidrBlock] :
  /// The IPv6 CIDR range for the route. The value you specify must match the
  /// CIDR for the route exactly.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteRoute({
    @_s.required String routeTableId,
    String destinationCidrBlock,
    String destinationIpv6CidrBlock,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(routeTableId, 'routeTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified route table. You must disassociate the route table
  /// from any subnets before you can delete it. You can't delete the main route
  /// table.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteRouteTable({
    @_s.required String routeTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(routeTableId, 'routeTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a security group.
  ///
  /// If you attempt to delete a security group that is associated with an
  /// instance, or is referenced by another security group, the operation fails
  /// with <code>InvalidGroup.InUse</code> in EC2-Classic or
  /// <code>DependencyViolation</code> in EC2-VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group. Required for a nondefault VPC.
  ///
  /// Parameter [groupName] :
  /// [EC2-Classic, default VPC] The name of the security group. You can specify
  /// either the security group name or the security group ID.
  Future<void> deleteSecurityGroup({
    bool dryRun,
    String groupId,
    String groupName,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified snapshot.
  ///
  /// When you make periodic snapshots of a volume, the snapshots are
  /// incremental, and only the blocks on the device that have changed since
  /// your last snapshot are saved in the new snapshot. When you delete a
  /// snapshot, only the data not needed for any other snapshot is removed. So
  /// regardless of which prior snapshots have been deleted, all active
  /// snapshots will have access to all the information needed to restore the
  /// volume.
  ///
  /// You cannot delete a snapshot of the root device of an EBS volume used by a
  /// registered AMI. You must first de-register the AMI before you can delete
  /// the snapshot.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html">Deleting
  /// an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the EBS snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteSnapshot({
    @_s.required String snapshotId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(snapshotId, 'snapshotId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the data feed for Spot Instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteSpotDatafeedSubscription({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified subnet. You must terminate all running instances in
  /// the subnet before you can delete the subnet.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteSubnet({
    @_s.required String subnetId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(subnetId, 'subnetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified set of tags from the specified set of resources.
  ///
  /// To list the current tags, use <a>DescribeTags</a>. For more information
  /// about tags, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging
  /// Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [resources] :
  /// The IDs of the resources, separated by spaces.
  ///
  /// Constraints: Up to 1000 resource IDs. We recommend breaking up this
  /// request into smaller batches.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tags] :
  /// The tags to delete. Specify a tag key and an optional tag value to delete
  /// specific tags. If you specify a tag key without a tag value, we delete any
  /// tag with this key regardless of its value. If you specify a tag key with
  /// an empty string as the tag value, we delete the tag only if its value is
  /// an empty string.
  ///
  /// If you omit this parameter, we delete all user-defined tags for the
  /// specified resources. We do not delete AWS-generated tags (tags that have
  /// the <code>aws:</code> prefix).
  Future<void> deleteTags({
    @_s.required List<String> resources,
    bool dryRun,
    List<Tag> tags,
  }) async {
    ArgumentError.checkNotNull(resources, 'resources');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Traffic Mirror filter.
  ///
  /// You cannot delete a Traffic Mirror filter that is in use by a Traffic
  /// Mirror session.
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the Traffic Mirror filter.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTrafficMirrorFilterResult> deleteTrafficMirrorFilter({
    @_s.required String trafficMirrorFilterId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(trafficMirrorFilterId, 'trafficMirrorFilterId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Traffic Mirror rule.
  ///
  /// Parameter [trafficMirrorFilterRuleId] :
  /// The ID of the Traffic Mirror rule.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTrafficMirrorFilterRuleResult> deleteTrafficMirrorFilterRule({
    @_s.required String trafficMirrorFilterRuleId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        trafficMirrorFilterRuleId, 'trafficMirrorFilterRuleId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Traffic Mirror session.
  ///
  /// Parameter [trafficMirrorSessionId] :
  /// The ID of the Traffic Mirror session.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTrafficMirrorSessionResult> deleteTrafficMirrorSession({
    @_s.required String trafficMirrorSessionId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        trafficMirrorSessionId, 'trafficMirrorSessionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified Traffic Mirror target.
  ///
  /// You cannot delete a Traffic Mirror target that is in use by a Traffic
  /// Mirror session.
  ///
  /// Parameter [trafficMirrorTargetId] :
  /// The ID of the Traffic Mirror target.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTrafficMirrorTargetResult> deleteTrafficMirrorTarget({
    @_s.required String trafficMirrorTargetId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(trafficMirrorTargetId, 'trafficMirrorTargetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified transit gateway.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayResult> deleteTransitGateway({
    @_s.required String transitGatewayId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(transitGatewayId, 'transitGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified transit gateway multicast domain.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayMulticastDomainResult>
      deleteTransitGatewayMulticastDomain({
    @_s.required String transitGatewayMulticastDomainId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayMulticastDomainId, 'transitGatewayMulticastDomainId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a transit gateway peering attachment.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway peering attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayPeeringAttachmentResult>
      deleteTransitGatewayPeeringAttachment({
    @_s.required String transitGatewayAttachmentId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified route from the specified transit gateway route
  /// table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range for the route. This must match the CIDR for the route
  /// exactly.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayRouteResult> deleteTransitGatewayRoute({
    @_s.required String destinationCidrBlock,
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified transit gateway route table. You must disassociate
  /// the route table from any transit gateway route tables before you can
  /// delete it.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayRouteTableResult> deleteTransitGatewayRouteTable({
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified VPC attachment.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteTransitGatewayVpcAttachmentResult>
      deleteTransitGatewayVpcAttachment({
    @_s.required String transitGatewayAttachmentId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified EBS volume. The volume must be in the
  /// <code>available</code> state (not attached to an instance).
  ///
  /// The volume can remain in the <code>deleting</code> state for several
  /// minutes.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html">Deleting
  /// an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteVolume({
    @_s.required String volumeId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(volumeId, 'volumeId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified VPC. You must detach or delete all gateways and
  /// resources that are associated with the VPC before you can delete it. For
  /// example, you must terminate all instances running in the VPC, delete all
  /// security groups associated with the VPC (except the default one), delete
  /// all route tables associated with the VPC (except the default one), and so
  /// on.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteVpc({
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes one or more VPC endpoint connection notifications.
  ///
  /// Parameter [connectionNotificationIds] :
  /// One or more notification IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVpcEndpointConnectionNotificationsResult>
      deleteVpcEndpointConnectionNotifications({
    @_s.required List<String> connectionNotificationIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        connectionNotificationIds, 'connectionNotificationIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes one or more VPC endpoint service configurations in your account.
  /// Before you delete the endpoint service configuration, you must reject any
  /// <code>Available</code> or <code>PendingAcceptance</code> interface
  /// endpoint connections that are attached to the service.
  ///
  /// Parameter [serviceIds] :
  /// The IDs of one or more services.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVpcEndpointServiceConfigurationsResult>
      deleteVpcEndpointServiceConfigurations({
    @_s.required List<String> serviceIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(serviceIds, 'serviceIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes one or more specified VPC endpoints. Deleting a gateway endpoint
  /// also deletes the endpoint routes in the route tables that were associated
  /// with the endpoint. Deleting an interface endpoint deletes the endpoint
  /// network interfaces.
  ///
  /// Parameter [vpcEndpointIds] :
  /// One or more VPC endpoint IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVpcEndpointsResult> deleteVpcEndpoints({
    @_s.required List<String> vpcEndpointIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpcEndpointIds, 'vpcEndpointIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes a VPC peering connection. Either the owner of the requester VPC or
  /// the owner of the accepter VPC can delete the VPC peering connection if
  /// it's in the <code>active</code> state. The owner of the requester VPC can
  /// delete a VPC peering connection in the <code>pending-acceptance</code>
  /// state. You cannot delete a VPC peering connection that's in the
  /// <code>failed</code> state.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of the VPC peering connection.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeleteVpcPeeringConnectionResult> deleteVpcPeeringConnection({
    @_s.required String vpcPeeringConnectionId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        vpcPeeringConnectionId, 'vpcPeeringConnectionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified VPN connection.
  ///
  /// If you're deleting the VPC and its associated components, we recommend
  /// that you detach the virtual private gateway from the VPC and delete the
  /// VPC before deleting the VPN connection. If you believe that the tunnel
  /// credentials for your VPN connection have been compromised, you can delete
  /// the VPN connection and create a new one that has new keys, without needing
  /// to delete the VPC or virtual private gateway. If you create a new VPN
  /// connection, you must reconfigure the customer gateway using the new
  /// configuration information returned with the new VPN connection ID.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the VPN connection.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteVpnConnection({
    @_s.required String vpnConnectionId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpnConnectionId, 'vpnConnectionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified static route associated with a VPN connection
  /// between an existing virtual private gateway and a VPN customer gateway.
  /// The static route allows traffic to be routed from the virtual private
  /// gateway to the VPN customer gateway.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR block associated with the local subnet of the customer network.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the VPN connection.
  Future<void> deleteVpnConnectionRoute({
    @_s.required String destinationCidrBlock,
    @_s.required String vpnConnectionId,
  }) async {
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
    ArgumentError.checkNotNull(vpnConnectionId, 'vpnConnectionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deletes the specified virtual private gateway. You must first detach the
  /// virtual private gateway from the VPC. Note that you don't need to delete
  /// the virtual private gateway if you plan to delete and recreate the VPN
  /// connection between your VPC and your network.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deleteVpnGateway({
    @_s.required String vpnGatewayId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpnGatewayId, 'vpnGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Releases the specified address range that you provisioned for use with
  /// your AWS resources through bring your own IP addresses (BYOIP) and deletes
  /// the corresponding address pool.
  ///
  /// Before you can release an address range, you must stop advertising it
  /// using <a>WithdrawByoipCidr</a> and you must not have any IP addresses
  /// allocated from its address range.
  ///
  /// Parameter [cidr] :
  /// The address range, in CIDR notation. The prefix must be the same prefix
  /// that you specified when you provisioned the address range.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DeprovisionByoipCidrResult> deprovisionByoipCidr({
    @_s.required String cidr,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(cidr, 'cidr');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deregisters the specified AMI. After you deregister an AMI, it can't be
  /// used to launch new instances; however, it doesn't affect any instances
  /// that you've already launched from the AMI. You'll continue to incur usage
  /// costs for those instances until you terminate them.
  ///
  /// When you deregister an Amazon EBS-backed AMI, it doesn't affect the
  /// snapshot that was created for the root volume of the instance during the
  /// AMI creation process. When you deregister an instance store-backed AMI, it
  /// doesn't affect the files that you uploaded to Amazon S3 when you created
  /// the AMI.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> deregisterImage({
    @_s.required String imageId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(imageId, 'imageId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deregisters tag keys to prevent tags that have the specified tag keys from
  /// being included in scheduled event notifications for resources in the
  /// Region.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceTagAttribute] :
  /// Information about the tag keys to deregister.
  Future<DeregisterInstanceEventNotificationAttributesResult>
      deregisterInstanceEventNotificationAttributes({
    bool dryRun,
    DeregisterInstanceTagAttributeRequest instanceTagAttribute,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deregisters the specified members (network interfaces) from the transit
  /// gateway multicast group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupIpAddress] :
  /// The IP address assigned to the transit gateway multicast group.
  ///
  /// Parameter [networkInterfaceIds] :
  /// The IDs of the group members' network interfaces.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<DeregisterTransitGatewayMulticastGroupMembersResult>
      deregisterTransitGatewayMulticastGroupMembers({
    bool dryRun,
    String groupIpAddress,
    List<String> networkInterfaceIds,
    String transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Deregisters the specified sources (network interfaces) from the transit
  /// gateway multicast group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupIpAddress] :
  /// The IP address assigned to the transit gateway multicast group.
  ///
  /// Parameter [networkInterfaceIds] :
  /// The IDs of the group sources' network interfaces.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<DeregisterTransitGatewayMulticastGroupSourcesResult>
      deregisterTransitGatewayMulticastGroupSources({
    bool dryRun,
    String groupIpAddress,
    List<String> networkInterfaceIds,
    String transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes attributes of your AWS account. The following are the supported
  /// account attributes:
  ///
  /// <ul>
  /// <li>
  /// <code>supported-platforms</code>: Indicates whether your account can
  /// launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.
  /// </li>
  /// <li>
  /// <code>default-vpc</code>: The ID of the default VPC for your account, or
  /// <code>none</code>.
  /// </li>
  /// <li>
  /// <code>max-instances</code>: This attribute is no longer supported. The
  /// returned value does not reflect your actual vCPU limit for running
  /// On-Demand Instances. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits">On-Demand
  /// Instance Limits</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// </li>
  /// <li>
  /// <code>vpc-max-security-groups-per-interface</code>: The maximum number of
  /// security groups that you can assign to a network interface.
  /// </li>
  /// <li>
  /// <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses
  /// that you can allocate for use with EC2-Classic.
  /// </li>
  /// <li>
  /// <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP
  /// addresses that you can allocate for use with EC2-VPC.
  /// </li>
  /// </ul>
  ///
  /// Parameter [attributeNames] :
  /// The account attribute names.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeAccountAttributesResult> describeAccountAttributes({
    List<String> attributeNames,
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Elastic IP addresses or all of your Elastic IP
  /// addresses.
  ///
  /// An Elastic IP address is for use in either the EC2-Classic platform or in
  /// a VPC. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic
  /// IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [allocationIds] :
  /// [EC2-VPC] Information about the allocation IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>allocation-id</code> - [EC2-VPC] The allocation ID for the address.
  /// </li>
  /// <li>
  /// <code>association-id</code> - [EC2-VPC] The association ID for the
  /// address.
  /// </li>
  /// <li>
  /// <code>domain</code> - Indicates whether the address is for use in
  /// EC2-Classic (<code>standard</code>) or in a VPC (<code>vpc</code>).
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance the address is
  /// associated with, if any.
  /// </li>
  /// <li>
  /// <code>network-border-group</code> - The location from where the IP address
  /// is advertised.
  /// </li>
  /// <li>
  /// <code>network-interface-id</code> - [EC2-VPC] The ID of the network
  /// interface that the address is associated with, if any.
  /// </li>
  /// <li>
  /// <code>network-interface-owner-id</code> - The AWS account ID of the owner.
  /// </li>
  /// <li>
  /// <code>private-ip-address</code> - [EC2-VPC] The private IP address
  /// associated with the Elastic IP address.
  /// </li>
  /// <li>
  /// <code>public-ip</code> - The Elastic IP address.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [publicIps] :
  /// One or more Elastic IP addresses.
  ///
  /// Default: Describes all your Elastic IP addresses.
  Future<DescribeAddressesResult> describeAddresses({
    List<String> allocationIds,
    bool dryRun,
    List<Filter> filters,
    List<String> publicIps,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the longer ID format settings for all resource types in a
  /// specific Region. This request is useful for performing a quick audit to
  /// determine whether a specific Region is fully opted in for longer IDs
  /// (17-character IDs).
  ///
  /// This request only returns information about resource types that support
  /// longer IDs.
  ///
  /// The following resource types support longer IDs: <code>bundle</code> |
  /// <code>conversion-task</code> | <code>customer-gateway</code> |
  /// <code>dhcp-options</code> | <code>elastic-ip-allocation</code> |
  /// <code>elastic-ip-association</code> | <code>export-task</code> |
  /// <code>flow-log</code> | <code>image</code> | <code>import-task</code> |
  /// <code>instance</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>reservation</code> |
  /// <code>route-table</code> | <code>route-table-association</code> |
  /// <code>security-group</code> | <code>snapshot</code> | <code>subnet</code>
  /// | <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeAggregateIdFormatResult> describeAggregateIdFormat({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Availability Zones and Local Zones that are available to
  /// you. If there is an event impacting an Availability Zone or Local Zone,
  /// you can use this request to view the state and any provided messages for
  /// that Availability Zone or Local Zone.
  ///
  /// For more information about Availability Zones and Local Zones, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions
  /// and Availability Zones</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [allAvailabilityZones] :
  /// Include all Availability Zones and Local Zones regardless of your opt in
  /// status.
  ///
  /// If you do not use this parameter, the results include only the zones for
  /// the Regions where you have chosen the option to opt in.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>group-name</code> - For Availability Zones, use the Region name. For
  /// Local Zones, use the name of the group associated with the Local Zone (for
  /// example, <code>us-west-2-lax-1</code>).
  /// </li>
  /// <li>
  /// <code>message</code> - The Availability Zone or Local Zone message.
  /// </li>
  /// <li>
  /// <code>opt-in-status</code> - The opt in status (<code>opted-in</code>, and
  /// <code>not-opted-in</code> | <code>opt-in-not-required</code>).
  /// </li>
  /// <li>
  /// <code>region-name</code> - The name of the Region for the Availability
  /// Zone or Local Zone (for example, <code>us-east-1</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the Availability Zone or Local Zone
  /// (<code>available</code> | <code>information</code> | <code>impaired</code>
  /// | <code>unavailable</code>).
  /// </li>
  /// <li>
  /// <code>zone-id</code> - The ID of the Availability Zone (for example,
  /// <code>use1-az1</code>) or the Local Zone (for example, use
  /// <code>usw2-lax1-az1</code>).
  /// </li>
  /// <li>
  /// <code>zone-name</code> - The name of the Availability Zone (for example,
  /// <code>us-east-1a</code>) or the Local Zone (for example, use
  /// <code>us-west-2-lax-1a</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [zoneIds] :
  /// The IDs of the Availability Zones and Local Zones.
  ///
  /// Parameter [zoneNames] :
  /// The names of the Availability Zones and Local Zones.
  Future<DescribeAvailabilityZonesResult> describeAvailabilityZones({
    bool allAvailabilityZones,
    bool dryRun,
    List<Filter> filters,
    List<String> zoneIds,
    List<String> zoneNames,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified bundle tasks or all of your bundle tasks.
  /// <note>
  /// Completed bundle tasks are listed for only a limited time. If your bundle
  /// task is no longer in the list, you can still register an AMI from it. Just
  /// use <code>RegisterImage</code> with the Amazon S3 bucket name and image
  /// manifest name you provided to the bundle task.
  /// </note>
  ///
  /// Parameter [bundleIds] :
  /// The bundle task IDs.
  ///
  /// Default: Describes all your bundle tasks.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>bundle-id</code> - The ID of the bundle task.
  /// </li>
  /// <li>
  /// <code>error-code</code> - If the task failed, the error code returned.
  /// </li>
  /// <li>
  /// <code>error-message</code> - If the task failed, the error message
  /// returned.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// <li>
  /// <code>progress</code> - The level of task completion, as a percentage (for
  /// example, 20%).
  /// </li>
  /// <li>
  /// <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.
  /// </li>
  /// <li>
  /// <code>s3-prefix</code> - The beginning of the AMI name.
  /// </li>
  /// <li>
  /// <code>start-time</code> - The time the task started (for example,
  /// 2013-09-15T17:15:20.000Z).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the task (<code>pending</code> |
  /// <code>waiting-for-shutdown</code> | <code>bundling</code> |
  /// <code>storing</code> | <code>cancelling</code> | <code>complete</code> |
  /// <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>update-time</code> - The time of the most recent update for the
  /// task.
  /// </li>
  /// </ul>
  Future<DescribeBundleTasksResult> describeBundleTasks({
    List<String> bundleIds,
    bool dryRun,
    List<Filter> filters,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the IP address ranges that were specified in calls to
  /// <a>ProvisionByoipCidr</a>.
  ///
  /// To describe the address pools that were created when you provisioned the
  /// address ranges, use <a>DescribePublicIpv4Pools</a> or
  /// <a>DescribeIpv6Pools</a>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeByoipCidrsResult> describeByoipCidrs({
    @_s.required int maxResults,
    bool dryRun,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(maxResults, 'maxResults');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your Capacity Reservations. The results describe
  /// only the Capacity Reservations in the AWS Region that you're currently
  /// using.
  ///
  /// Parameter [capacityReservationIds] :
  /// The ID of the Capacity Reservation.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-type</code> - The type of instance for which the Capacity
  /// Reservation reserves capacity.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the AWS account that owns the Capacity
  /// Reservation.
  /// </li>
  /// <li>
  /// <code>availability-zone-id</code> - The Availability Zone ID of the
  /// Capacity Reservation.
  /// </li>
  /// <li>
  /// <code>instance-platform</code> - The type of operating system for which
  /// the Capacity Reservation reserves capacity.
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone ID of the Capacity
  /// Reservation.
  /// </li>
  /// <li>
  /// <code>tenancy</code> - Indicates the tenancy of the Capacity Reservation.
  /// A Capacity Reservation can have one of the following tenancy settings:
  ///
  /// <ul>
  /// <li>
  /// <code>default</code> - The Capacity Reservation is created on hardware
  /// that is shared with other AWS accounts.
  /// </li>
  /// <li>
  /// <code>dedicated</code> - The Capacity Reservation is created on
  /// single-tenant hardware that is dedicated to a single AWS account.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>state</code> - The current state of the Capacity Reservation. A
  /// Capacity Reservation can be in one of the following states:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code>- The Capacity Reservation is active and the capacity
  /// is available for your use.
  /// </li>
  /// <li>
  /// <code>expired</code> - The Capacity Reservation expired automatically at
  /// the date and time specified in your request. The reserved capacity is no
  /// longer available for your use.
  /// </li>
  /// <li>
  /// <code>cancelled</code> - The Capacity Reservation was manually cancelled.
  /// The reserved capacity is no longer available for your use.
  /// </li>
  /// <li>
  /// <code>pending</code> - The Capacity Reservation request was successful but
  /// the capacity provisioning is still pending.
  /// </li>
  /// <li>
  /// <code>failed</code> - The Capacity Reservation request has failed. A
  /// request might fail due to invalid request parameters, capacity
  /// constraints, or instance limit constraints. Failed requests are retained
  /// for 60 minutes.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>end-date</code> - The date and time at which the Capacity
  /// Reservation expires. When a Capacity Reservation expires, the reserved
  /// capacity is released and you can no longer launch instances into it. The
  /// Capacity Reservation's state changes to expired when it reaches its end
  /// date and time.
  /// </li>
  /// <li>
  /// <code>end-date-type</code> - Indicates the way in which the Capacity
  /// Reservation ends. A Capacity Reservation can have one of the following end
  /// types:
  ///
  /// <ul>
  /// <li>
  /// <code>unlimited</code> - The Capacity Reservation remains active until you
  /// explicitly cancel it.
  /// </li>
  /// <li>
  /// <code>limited</code> - The Capacity Reservation expires automatically at a
  /// specified date and time.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>instance-match-criteria</code> - Indicates the type of instance
  /// launches that the Capacity Reservation accepts. The options include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The Capacity Reservation accepts all instances that
  /// have matching attributes (instance type, platform, and Availability Zone).
  /// Instances that have matching attributes launch into the Capacity
  /// Reservation automatically without specifying any additional parameters.
  /// </li>
  /// <li>
  /// <code>targeted</code> - The Capacity Reservation only accepts instances
  /// that have matching attributes (instance type, platform, and Availability
  /// Zone), and explicitly target the Capacity Reservation. This ensures that
  /// only permitted instances can use the reserved capacity.
  /// </li>
  /// </ul> </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// returned nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeCapacityReservationsResult> describeCapacityReservations({
    List<String> capacityReservationIds,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your linked EC2-Classic instances. This request
  /// only returns information about EC2-Classic instances linked to a VPC
  /// through ClassicLink. You cannot use this request to return information
  /// about other instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>group-id</code> - The ID of a VPC security group that's associated
  /// with the instance.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC to which the instance is linked.
  ///
  /// <code>vpc-id</code> - The ID of the VPC that the instance is linked to.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceIds] :
  /// One or more instance IDs. Must be instances linked to a VPC through
  /// ClassicLink.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Constraint: If the value is greater than 1000, we return only 1000 items.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeClassicLinkInstancesResult> describeClassicLinkInstances({
    bool dryRun,
    List<Filter> filters,
    List<String> instanceIds,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the authorization rules for a specified Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>description</code> - The description of the authorization rule.
  /// </li>
  /// <li>
  /// <code>destination-cidr</code> - The CIDR of the network to which the
  /// authorization rule applies.
  /// </li>
  /// <li>
  /// <code>group-id</code> - The ID of the Active Directory group to which the
  /// authorization rule grants access.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnAuthorizationRulesResult>
      describeClientVpnAuthorizationRules({
    @_s.required String clientVpnEndpointId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes active client connections and connections that have been
  /// terminated within the last 60 minutes for the specified Client VPN
  /// endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>connection-id</code> - The ID of the connection.
  /// </li>
  /// <li>
  /// <code>username</code> - For Active Directory client authentication, the
  /// user name of the client who established the client connection.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnConnectionsResult> describeClientVpnConnections({
    @_s.required String clientVpnEndpointId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more Client VPN endpoints in the account.
  ///
  /// Parameter [clientVpnEndpointIds] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>endpoint-id</code> - The ID of the Client VPN endpoint.
  /// </li>
  /// <li>
  /// <code>transport-protocol</code> - The transport protocol (<code>tcp</code>
  /// | <code>udp</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnEndpointsResult> describeClientVpnEndpoints({
    List<String> clientVpnEndpointIds,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the routes for the specified Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>destination-cidr</code> - The CIDR of the route destination.
  /// </li>
  /// <li>
  /// <code>origin</code> - How the route was associated with the Client VPN
  /// endpoint (<code>associate</code> | <code>add-route</code>).
  /// </li>
  /// <li>
  /// <code>target-subnet</code> - The ID of the subnet through which traffic is
  /// routed.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnRoutesResult> describeClientVpnRoutes({
    @_s.required String clientVpnEndpointId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the target networks associated with the specified Client VPN
  /// endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [associationIds] :
  /// The IDs of the target network associations.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>association-id</code> - The ID of the association.
  /// </li>
  /// <li>
  /// <code>target-network-id</code> - The ID of the subnet specified as the
  /// target network.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC in which the target network is
  /// located.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// nextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeClientVpnTargetNetworksResult>
      describeClientVpnTargetNetworks({
    @_s.required String clientVpnEndpointId,
    List<String> associationIds,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified customer-owned address pools or all of your
  /// customer-owned address pools.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// <code>coip-pool.pool-id</code>
  /// </li>
  /// </ul>
  /// <ul>
  /// <li>
  /// <code>coip-pool.local-gateway-route-table-id</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [poolIds] :
  /// The IDs of the address pools.
  Future<DescribeCoipPoolsResult> describeCoipPools({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> poolIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified conversion tasks or all your conversion tasks. For
  /// more information, see the <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM
  /// Import/Export User Guide</a>.
  ///
  /// For information about the import manifest referenced by this API action,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  ///
  /// Parameter [conversionTaskIds] :
  /// The conversion task IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeConversionTasksResult> describeConversionTasks({
    List<String> conversionTaskIds,
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your VPN customer gateways.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS
  /// Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [customerGatewayIds] :
  /// One or more customer gateway IDs.
  ///
  /// Default: Describes all your customer gateways.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>bgp-asn</code> - The customer gateway's Border Gateway Protocol
  /// (BGP) Autonomous System Number (ASN).
  /// </li>
  /// <li>
  /// <code>customer-gateway-id</code> - The ID of the customer gateway.
  /// </li>
  /// <li>
  /// <code>ip-address</code> - The IP address of the customer gateway's
  /// Internet-routable external interface.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the customer gateway
  /// (<code>pending</code> | <code>available</code> | <code>deleting</code> |
  /// <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>type</code> - The type of customer gateway. Currently, the only
  /// supported type is <code>ipsec.1</code>.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  Future<DescribeCustomerGatewaysResult> describeCustomerGateways({
    List<String> customerGatewayIds,
    bool dryRun,
    List<Filter> filters,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your DHCP options sets.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP
  /// Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [dhcpOptionsIds] :
  /// The IDs of one or more DHCP options sets.
  ///
  /// Default: Describes all your DHCP options sets.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>dhcp-options-id</code> - The ID of a DHCP options set.
  /// </li>
  /// <li>
  /// <code>key</code> - The key for one of the options (for example,
  /// <code>domain-name</code>).
  /// </li>
  /// <li>
  /// <code>value</code> - The value for one of the options.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the AWS account that owns the DHCP
  /// options set.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeDhcpOptionsResult> describeDhcpOptions({
    List<String> dhcpOptionsIds,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your egress-only internet gateways.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [egressOnlyInternetGatewayIds] :
  /// One or more egress-only internet gateway IDs.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeEgressOnlyInternetGatewaysResult>
      describeEgressOnlyInternetGateways({
    bool dryRun,
    List<String> egressOnlyInternetGatewayIds,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Elastic Graphics accelerator associated with your instances.
  /// For more information about Elastic Graphics, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon
  /// Elastic Graphics</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [elasticGpuIds] :
  /// The Elastic Graphics accelerator IDs.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone in which the
  /// Elastic Graphics accelerator resides.
  /// </li>
  /// <li>
  /// <code>elastic-gpu-health</code> - The status of the Elastic Graphics
  /// accelerator (<code>OK</code> | <code>IMPAIRED</code>).
  /// </li>
  /// <li>
  /// <code>elastic-gpu-state</code> - The state of the Elastic Graphics
  /// accelerator (<code>ATTACHED</code>).
  /// </li>
  /// <li>
  /// <code>elastic-gpu-type</code> - The type of Elastic Graphics accelerator;
  /// for example, <code>eg1.medium</code>.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance to which the Elastic
  /// Graphics accelerator is associated.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 5 and 1000.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeElasticGpusResult> describeElasticGpus({
    bool dryRun,
    List<String> elasticGpuIds,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      10,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified export image tasks or all your export image tasks.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [exportImageTaskIds] :
  /// The IDs of the export image tasks.
  ///
  /// Parameter [filters] :
  /// Filter tasks using the <code>task-state</code> filter and one of the
  /// following values: <code>active</code>, <code>completed</code>,
  /// <code>deleting</code>, or <code>deleted</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call.
  ///
  /// Parameter [nextToken] :
  /// A token that indicates the next page of results.
  Future<DescribeExportImageTasksResult> describeExportImageTasks({
    bool dryRun,
    List<String> exportImageTaskIds,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      500,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified export instance tasks or all your export instance
  /// tasks.
  ///
  /// Parameter [exportTaskIds] :
  /// The export task IDs.
  ///
  /// Parameter [filters] :
  /// the filters for the export tasks.
  Future<DescribeExportTasksResult> describeExportTasks({
    List<String> exportTaskIds,
    List<Filter> filters,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the state of fast snapshot restores for your snapshots.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code>: The Availability Zone of the snapshot.
  /// </li>
  /// <li>
  /// <code>owner-id</code>: The ID of the AWS account that owns the snapshot.
  /// </li>
  /// <li>
  /// <code>snapshot-id</code>: The ID of the snapshot.
  /// </li>
  /// <li>
  /// <code>state</code>: The state of fast snapshot restores for the snapshot
  /// (<code>enabling</code> | <code>optimizing</code> | <code>enabled</code> |
  /// <code>disabling</code> | <code>disabled</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeFastSnapshotRestoresResult> describeFastSnapshotRestores({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      0,
      200,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the events for the specified EC2 Fleet during the specified
  /// time.
  ///
  /// EC2 Fleet events are delayed by up to 30 seconds before they can be
  /// described. This ensures that you can query by the last evaluated time and
  /// not miss a recorded event. EC2 Fleet events are available for 48 hours.
  ///
  /// Parameter [fleetId] :
  /// The ID of the EC2 Fleet.
  ///
  /// Parameter [startTime] :
  /// The start date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [eventType] :
  /// The type of events to describe. By default, all events are described.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. Specify a value
  /// between 1 and 1000. The default value is 1000. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  Future<DescribeFleetHistoryResult> describeFleetHistory({
    @_s.required String fleetId,
    @_s.required DateTime startTime,
    bool dryRun,
    FleetEventType eventType,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(fleetId, 'fleetId');
    ArgumentError.checkNotNull(startTime, 'startTime');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the running instances for the specified EC2 Fleet.
  ///
  /// Parameter [fleetId] :
  /// The ID of the EC2 Fleet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-type</code> - The instance type.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. Specify a value
  /// between 1 and 1000. The default value is 1000. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  Future<DescribeFleetInstancesResult> describeFleetInstances({
    @_s.required String fleetId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(fleetId, 'fleetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified EC2 Fleets or all of your EC2 Fleets.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>activity-status</code> - The progress of the EC2 Fleet (
  /// <code>error</code> | <code>pending-fulfillment</code> |
  /// <code>pending-termination</code> | <code>fulfilled</code>).
  /// </li>
  /// <li>
  /// <code>excess-capacity-termination-policy</code> - Indicates whether to
  /// terminate running instances if the target capacity is decreased below the
  /// current EC2 Fleet size (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>fleet-state</code> - The state of the EC2 Fleet
  /// (<code>submitted</code> | <code>active</code> | <code>deleted</code> |
  /// <code>failed</code> | <code>deleted-running</code> |
  /// <code>deleted-terminating</code> | <code>modifying</code>).
  /// </li>
  /// <li>
  /// <code>replace-unhealthy-instances</code> - Indicates whether EC2 Fleet
  /// should replace unhealthy instances (<code>true</code> |
  /// <code>false</code>).
  /// </li>
  /// <li>
  /// <code>type</code> - The type of request (<code>instant</code> |
  /// <code>request</code> | <code>maintain</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [fleetIds] :
  /// The ID of the EC2 Fleets.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. Specify a value
  /// between 1 and 1000. The default value is 1000. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  Future<DescribeFleetsResult> describeFleets({
    bool dryRun,
    List<Filter> filters,
    List<String> fleetIds,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more flow logs. To view the information in your flow logs
  /// (the log streams for the network interfaces), you must use the CloudWatch
  /// Logs console or the CloudWatch Logs API.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filter] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>deliver-log-status</code> - The status of the logs delivery
  /// (<code>SUCCESS</code> | <code>FAILED</code>).
  /// </li>
  /// <li>
  /// <code>log-destination-type</code> - The type of destination to which the
  /// flow log publishes data. Possible destination types include
  /// <code>cloud-watch-logs</code> and <code>S3</code>.
  /// </li>
  /// <li>
  /// <code>flow-log-id</code> - The ID of the flow log.
  /// </li>
  /// <li>
  /// <code>log-group-name</code> - The name of the log group.
  /// </li>
  /// <li>
  /// <code>resource-id</code> - The ID of the VPC, subnet, or network
  /// interface.
  /// </li>
  /// <li>
  /// <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> |
  /// <code>REJECT</code> | <code>ALL</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [flowLogIds] :
  /// One or more flow log IDs.
  ///
  /// Constraint: Maximum of 1000 flow log IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeFlowLogsResult> describeFlowLogs({
    bool dryRun,
    List<Filter> filter,
    List<String> flowLogIds,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified Amazon FPGA Image
  /// (AFI).
  ///
  /// Parameter [attribute] :
  /// The AFI attribute.
  ///
  /// Parameter [fpgaImageId] :
  /// The ID of the AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeFpgaImageAttributeResult> describeFpgaImageAttribute({
    @_s.required FpgaImageAttributeName attribute,
    @_s.required String fpgaImageId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(attribute, 'attribute');
    ArgumentError.checkNotNull(fpgaImageId, 'fpgaImageId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Amazon FPGA Images (AFIs) available to you. These include
  /// public AFIs, private AFIs that you own, and AFIs owned by other AWS
  /// accounts for which you have load permissions.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>create-time</code> - The creation time of the AFI.
  /// </li>
  /// <li>
  /// <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).
  /// </li>
  /// <li>
  /// <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI
  /// ID).
  /// </li>
  /// <li>
  /// <code>name</code> - The name of the AFI.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The AWS account ID of the AFI owner.
  /// </li>
  /// <li>
  /// <code>product-code</code> - The product code.
  /// </li>
  /// <li>
  /// <code>shell-version</code> - The version of the AWS Shell that was used to
  /// create the bitstream.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the AFI (<code>pending</code> |
  /// <code>failed</code> | <code>available</code> | <code>unavailable</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>update-time</code> - The time of the most recent update.
  /// </li>
  /// </ul>
  ///
  /// Parameter [fpgaImageIds] :
  /// The AFI IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  ///
  /// Parameter [owners] :
  /// Filters the AFI by owner. Specify an AWS account ID, <code>self</code>
  /// (owner is the sender of the request), or an AWS owner alias (valid values
  /// are <code>amazon</code> | <code>aws-marketplace</code>).
  Future<DescribeFpgaImagesResult> describeFpgaImages({
    bool dryRun,
    List<Filter> filters,
    List<String> fpgaImageIds,
    int maxResults,
    String nextToken,
    List<String> owners,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Dedicated Host reservations that are available to purchase.
  ///
  /// The results describe all of the Dedicated Host reservation offerings,
  /// including offerings that might not match the instance family and Region of
  /// your Dedicated Hosts. When purchasing an offering, ensure that the
  /// instance family and Region of the offering matches that of the Dedicated
  /// Hosts with which it is to be associated. For more information about
  /// supported instance types, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated
  /// Hosts Overview</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [filter] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-family</code> - The instance family of the offering (for
  /// example, <code>m4</code>).
  /// </li>
  /// <li>
  /// <code>payment-option</code> - The payment option (<code>NoUpfront</code> |
  /// <code>PartialUpfront</code> | <code>AllUpfront</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxDuration] :
  /// This is the maximum duration of the reservation to purchase, specified in
  /// seconds. Reservations are available in one-year and three-year terms. The
  /// number of seconds specified must be the number of seconds in a year
  /// (365x24x60x60) times one of the supported durations (1 or 3). For example,
  /// specify 94608000 for three years.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// returned <code>nextToken</code> value. This value can be between 5 and
  /// 500. If <code>maxResults</code> is given a larger value than 500, you
  /// receive an error.
  ///
  /// Parameter [minDuration] :
  /// This is the minimum duration of the reservation you'd like to purchase,
  /// specified in seconds. Reservations are available in one-year and
  /// three-year terms. The number of seconds specified must be the number of
  /// seconds in a year (365x24x60x60) times one of the supported durations (1
  /// or 3). For example, specify 31536000 for one year.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  ///
  /// Parameter [offeringId] :
  /// The ID of the reservation offering.
  Future<DescribeHostReservationOfferingsResult>
      describeHostReservationOfferings({
    List<Filter> filter,
    int maxDuration,
    int maxResults,
    int minDuration,
    String nextToken,
    String offeringId,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      500,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes reservations that are associated with Dedicated Hosts in your
  /// account.
  ///
  /// Parameter [filter] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-family</code> - The instance family (for example,
  /// <code>m4</code>).
  /// </li>
  /// <li>
  /// <code>payment-option</code> - The payment option (<code>NoUpfront</code> |
  /// <code>PartialUpfront</code> | <code>AllUpfront</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the reservation
  /// (<code>payment-pending</code> | <code>payment-failed</code> |
  /// <code>active</code> | <code>retired</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [hostReservationIdSet] :
  /// The host reservation IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// returned <code>nextToken</code> value. This value can be between 5 and
  /// 500. If <code>maxResults</code> is given a larger value than 500, you
  /// receive an error.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  Future<DescribeHostReservationsResult> describeHostReservations({
    List<Filter> filter,
    List<String> hostReservationIdSet,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Dedicated Hosts or all your Dedicated Hosts.
  ///
  /// The results describe only the Dedicated Hosts in the Region you're
  /// currently using. All listed instances consume capacity on your Dedicated
  /// Host. Dedicated Hosts that have recently been released are listed with the
  /// state <code>released</code>.
  ///
  /// Parameter [filter] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>auto-placement</code> - Whether auto-placement is enabled or
  /// disabled (<code>on</code> | <code>off</code>).
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the host.
  /// </li>
  /// <li>
  /// <code>client-token</code> - The idempotency token that you provided when
  /// you allocated the host.
  /// </li>
  /// <li>
  /// <code>host-reservation-id</code> - The ID of the reservation assigned to
  /// this host.
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type size that the Dedicated
  /// Host is configured to support.
  /// </li>
  /// <li>
  /// <code>state</code> - The allocation state of the Dedicated Host
  /// (<code>available</code> | <code>under-assessment</code> |
  /// <code>permanent-failure</code> | <code>released</code> |
  /// <code>released-permanent-failure</code>).
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [hostIds] :
  /// The IDs of the Dedicated Hosts. The IDs are used for targeted instance
  /// launches.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// returned <code>nextToken</code> value. This value can be between 5 and
  /// 500. If <code>maxResults</code> is given a larger value than 500, you
  /// receive an error.
  ///
  /// You cannot specify this parameter and the host IDs parameter in the same
  /// request.
  ///
  /// Parameter [nextToken] :
  /// The token to use to retrieve the next page of results.
  Future<DescribeHostsResult> describeHosts({
    List<Filter> filter,
    List<String> hostIds,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your IAM instance profile associations.
  ///
  /// Parameter [associationIds] :
  /// The IAM instance profile associations.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the association
  /// (<code>associating</code> | <code>associated</code> |
  /// <code>disassociating</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeIamInstanceProfileAssociationsResult>
      describeIamInstanceProfileAssociations({
    List<String> associationIds,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the ID format settings for your resources on a per-Region basis,
  /// for example, to view which resource types are enabled for longer IDs. This
  /// request only returns information about resource types whose ID formats can
  /// be modified; it does not return information about other resource types.
  ///
  /// The following resource types support longer IDs: <code>bundle</code> |
  /// <code>conversion-task</code> | <code>customer-gateway</code> |
  /// <code>dhcp-options</code> | <code>elastic-ip-allocation</code> |
  /// <code>elastic-ip-association</code> | <code>export-task</code> |
  /// <code>flow-log</code> | <code>image</code> | <code>import-task</code> |
  /// <code>instance</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>reservation</code> |
  /// <code>route-table</code> | <code>route-table-association</code> |
  /// <code>security-group</code> | <code>snapshot</code> | <code>subnet</code>
  /// | <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// These settings apply to the IAM user who makes the request; they do not
  /// apply to the entire AWS account. By default, an IAM user defaults to the
  /// same settings as the root user, unless they explicitly override the
  /// settings by running the <a>ModifyIdFormat</a> command. Resources created
  /// with longer IDs are visible to all IAM users, regardless of these settings
  /// and provided that they have permission to use the relevant
  /// <code>Describe</code> command for the resource type.
  ///
  /// Parameter [resource] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>instance</code> |
  /// <code>internet-gateway</code> | <code>network-acl</code> |
  /// <code>network-acl-association</code> | <code>network-interface</code> |
  /// <code>network-interface-attachment</code> | <code>prefix-list</code> |
  /// <code>reservation</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>snapshot</code> | <code>subnet</code> |
  /// <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>
  Future<DescribeIdFormatResult> describeIdFormat({
    String resource,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the ID format settings for resources for the specified IAM user,
  /// IAM role, or root user. For example, you can view the resource types that
  /// are enabled for longer IDs. This request only returns information about
  /// resource types whose ID formats can be modified; it does not return
  /// information about other resource types. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource
  /// IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// The following resource types support longer IDs: <code>bundle</code> |
  /// <code>conversion-task</code> | <code>customer-gateway</code> |
  /// <code>dhcp-options</code> | <code>elastic-ip-allocation</code> |
  /// <code>elastic-ip-association</code> | <code>export-task</code> |
  /// <code>flow-log</code> | <code>image</code> | <code>import-task</code> |
  /// <code>instance</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>reservation</code> |
  /// <code>route-table</code> | <code>route-table-association</code> |
  /// <code>security-group</code> | <code>snapshot</code> | <code>subnet</code>
  /// | <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// These settings apply to the principal specified in the request. They do
  /// not apply to the principal that makes the request.
  ///
  /// Parameter [principalArn] :
  /// The ARN of the principal, which can be an IAM role, IAM user, or the root
  /// user.
  ///
  /// Parameter [resource] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>instance</code> |
  /// <code>internet-gateway</code> | <code>network-acl</code> |
  /// <code>network-acl-association</code> | <code>network-interface</code> |
  /// <code>network-interface-attachment</code> | <code>prefix-list</code> |
  /// <code>reservation</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>snapshot</code> | <code>subnet</code> |
  /// <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>
  Future<DescribeIdentityIdFormatResult> describeIdentityIdFormat({
    @_s.required String principalArn,
    String resource,
  }) async {
    ArgumentError.checkNotNull(principalArn, 'principalArn');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified AMI. You can specify
  /// only one attribute at a time.
  ///
  /// Parameter [attribute] :
  /// The AMI attribute.
  ///
  /// <b>Note</b>: Depending on your account privileges, the
  /// <code>blockDeviceMapping</code> attribute may return a
  /// <code>Client.AuthFailure</code> error. If this happens, use
  /// <a>DescribeImages</a> to get information about the block device mapping
  /// for the AMI.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ImageAttribute> describeImageAttribute({
    @_s.required ImageAttributeName attribute,
    @_s.required String imageId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(attribute, 'attribute');
    ArgumentError.checkNotNull(imageId, 'imageId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified images (AMIs, AKIs, and ARIs) available to you or
  /// all of the images available to you.
  ///
  /// The images available to you include public images, private images that you
  /// own, and private images owned by other AWS accounts for which you have
  /// explicit launch permissions.
  ///
  /// Recently deregistered images appear in the returned results for a short
  /// interval and then return empty results. After all instances that reference
  /// a deregistered AMI are terminated, specifying the ID of the image results
  /// in an error indicating that the AMI ID cannot be found.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [executableUsers] :
  /// Scopes the images by users with explicit launch permissions. Specify an
  /// AWS account ID, <code>self</code> (the sender of the request), or
  /// <code>all</code> (public AMIs).
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>architecture</code> - The image architecture (<code>i386</code> |
  /// <code>x86_64</code> | <code>arm64</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.delete-on-termination</code> - A Boolean value
  /// that indicates whether the Amazon EBS volume is deleted on instance
  /// termination.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.device-name</code> - The device name specified
  /// in the block device mapping (for example, <code>/dev/sdh</code> or
  /// <code>xvdh</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot
  /// used for the EBS volume.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.volume-size</code> - The volume size of the EBS
  /// volume, in GiB.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.volume-type</code> - The volume type of the EBS
  /// volume (<code>gp2</code> | <code>io1</code> | <code>st1 </code>|
  /// <code>sc1</code> | <code>standard</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.encrypted</code> - A Boolean that indicates
  /// whether the EBS volume is encrypted.
  /// </li>
  /// <li>
  /// <code>description</code> - The description of the image (provided during
  /// image creation).
  /// </li>
  /// <li>
  /// <code>ena-support</code> - A Boolean that indicates whether enhanced
  /// networking with ENA is enabled.
  /// </li>
  /// <li>
  /// <code>hypervisor</code> - The hypervisor type (<code>ovm</code> |
  /// <code>xen</code>).
  /// </li>
  /// <li>
  /// <code>image-id</code> - The ID of the image.
  /// </li>
  /// <li>
  /// <code>image-type</code> - The image type (<code>machine</code> |
  /// <code>kernel</code> | <code>ramdisk</code>).
  /// </li>
  /// <li>
  /// <code>is-public</code> - A Boolean that indicates whether the image is
  /// public.
  /// </li>
  /// <li>
  /// <code>kernel-id</code> - The kernel ID.
  /// </li>
  /// <li>
  /// <code>manifest-location</code> - The location of the image manifest.
  /// </li>
  /// <li>
  /// <code>name</code> - The name of the AMI (provided during image creation).
  /// </li>
  /// <li>
  /// <code>owner-alias</code> - String value from an Amazon-maintained list
  /// (<code>amazon</code> | <code>aws-marketplace</code> |
  /// <code>microsoft</code>) of snapshot owners. Not to be confused with the
  /// user-configured AWS account alias, which is set from the IAM console.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The AWS account ID of the image owner.
  /// </li>
  /// <li>
  /// <code>platform</code> - The platform. To only list Windows-based AMIs, use
  /// <code>windows</code>.
  /// </li>
  /// <li>
  /// <code>product-code</code> - The product code.
  /// </li>
  /// <li>
  /// <code>product-code.type</code> - The type of the product code
  /// (<code>devpay</code> | <code>marketplace</code>).
  /// </li>
  /// <li>
  /// <code>ramdisk-id</code> - The RAM disk ID.
  /// </li>
  /// <li>
  /// <code>root-device-name</code> - The device name of the root device volume
  /// (for example, <code>/dev/sda1</code>).
  /// </li>
  /// <li>
  /// <code>root-device-type</code> - The type of the root device volume
  /// (<code>ebs</code> | <code>instance-store</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the image (<code>available</code> |
  /// <code>pending</code> | <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>state-reason-code</code> - The reason code for the state change.
  /// </li>
  /// <li>
  /// <code>state-reason-message</code> - The message for the state change.
  /// </li>
  /// <li>
  /// <code>sriov-net-support</code> - A value of <code>simple</code> indicates
  /// that enhanced networking with the Intel 82599 VF interface is enabled.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>virtualization-type</code> - The virtualization type
  /// (<code>paravirtual</code> | <code>hvm</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [imageIds] :
  /// The image IDs.
  ///
  /// Default: Describes all images available to you.
  ///
  /// Parameter [owners] :
  /// Filters the images by the owner. Specify an AWS account ID,
  /// <code>self</code> (owner is the sender of the request), or an AWS owner
  /// alias (valid values are <code>amazon</code> | <code>aws-marketplace</code>
  /// | <code>microsoft</code>). Omitting this option returns all images for
  /// which you have launch permissions, regardless of ownership.
  Future<DescribeImagesResult> describeImages({
    bool dryRun,
    List<String> executableUsers,
    List<Filter> filters,
    List<String> imageIds,
    List<String> owners,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Displays details about an import virtual machine or import snapshot tasks
  /// that are already created.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// Filter tasks using the <code>task-state</code> filter and one of the
  /// following values: <code>active</code>, <code>completed</code>,
  /// <code>deleting</code>, or <code>deleted</code>.
  ///
  /// Parameter [importTaskIds] :
  /// The IDs of the import image tasks.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call.
  ///
  /// Parameter [nextToken] :
  /// A token that indicates the next page of results.
  Future<DescribeImportImageTasksResult> describeImportImageTasks({
    bool dryRun,
    List<Filter> filters,
    List<String> importTaskIds,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your import snapshot tasks.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// Parameter [importTaskIds] :
  /// A list of import snapshot task IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// A token that indicates the next page of results.
  Future<DescribeImportSnapshotTasksResult> describeImportSnapshotTasks({
    bool dryRun,
    List<Filter> filters,
    List<String> importTaskIds,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified instance. You can
  /// specify only one attribute at a time. Valid attribute values are:
  /// <code>instanceType</code> | <code>kernel</code> | <code>ramdisk</code> |
  /// <code>userData</code> | <code>disableApiTermination</code> |
  /// <code>instanceInitiatedShutdownBehavior</code> |
  /// <code>rootDeviceName</code> | <code>blockDeviceMapping</code> |
  /// <code>productCodes</code> | <code>sourceDestCheck</code> |
  /// <code>groupSet</code> | <code>ebsOptimized</code> |
  /// <code>sriovNetSupport</code>
  ///
  /// Parameter [attribute] :
  /// The instance attribute.
  ///
  /// Note: The <code>enaSupport</code> attribute is not supported at this time.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<InstanceAttribute> describeInstanceAttribute({
    @_s.required InstanceAttributeName attribute,
    @_s.required String instanceId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(attribute, 'attribute');
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the credit option for CPU usage of the specified burstable
  /// performance instances. The credit options are <code>standard</code> and
  /// <code>unlimited</code>.
  ///
  /// If you do not specify an instance ID, Amazon EC2 returns burstable
  /// performance instances with the <code>unlimited</code> credit option, as
  /// well as instances that were previously configured as T2, T3, and T3a with
  /// the <code>unlimited</code> credit option. For example, if you resize a T2
  /// instance, while it is configured as <code>unlimited</code>, to an M4
  /// instance, Amazon EC2 returns the M4 instance.
  ///
  /// If you specify one or more instance IDs, Amazon EC2 returns the credit
  /// option (<code>standard</code> or <code>unlimited</code>) of those
  /// instances. If you specify an instance ID that is not valid, such as an
  /// instance that is not a burstable performance instance, an error is
  /// returned.
  ///
  /// Recently terminated instances might appear in the returned results. This
  /// interval is usually less than one hour.
  ///
  /// If an Availability Zone is experiencing a service disruption and you
  /// specify instance IDs in the affected zone, or do not specify any instance
  /// IDs at all, the call fails. If you specify only instance IDs in an
  /// unaffected zone, the call works normally.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs.
  ///
  /// Default: Describes all your instances.
  ///
  /// Constraints: Maximum 1000 explicitly specified instance IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 5 and 1000. You
  /// cannot specify this parameter and the instance IDs parameter in the same
  /// call.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeInstanceCreditSpecificationsResult>
      describeInstanceCreditSpecifications({
    bool dryRun,
    List<Filter> filters,
    List<String> instanceIds,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the tag keys that are registered to appear in scheduled event
  /// notifications for resources in the current Region.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeInstanceEventNotificationAttributesResult>
      describeInstanceEventNotificationAttributes({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the status of the specified instances or all of your instances.
  /// By default, only running instances are described, unless you specifically
  /// indicate to return the status of all instances.
  ///
  /// Instance status includes the following components:
  ///
  /// <ul>
  /// <li>
  /// <b>Status checks</b> - Amazon EC2 performs status checks on running EC2
  /// instances to identify hardware and software issues. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status
  /// Checks for Your Instances</a> and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshooting
  /// Instances with Failed Status Checks</a> in the <i>Amazon Elastic Compute
  /// Cloud User Guide</i>.
  /// </li>
  /// <li>
  /// <b>Scheduled events</b> - Amazon EC2 can schedule events (such as reboot,
  /// stop, or terminate) for your instances related to hardware issues,
  /// software updates, or system maintenance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled
  /// Events for Your Instances</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  /// </li>
  /// <li>
  /// <b>Instance state</b> - You can manage your instances from the moment you
  /// launch them through their termination. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance
  /// Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the instance.
  /// </li>
  /// <li>
  /// <code>event.code</code> - The code for the scheduled event
  /// (<code>instance-reboot</code> | <code>system-reboot</code> |
  /// <code>system-maintenance</code> | <code>instance-retirement</code> |
  /// <code>instance-stop</code>).
  /// </li>
  /// <li>
  /// <code>event.description</code> - A description of the event.
  /// </li>
  /// <li>
  /// <code>event.instance-event-id</code> - The ID of the event whose date and
  /// time you are modifying.
  /// </li>
  /// <li>
  /// <code>event.not-after</code> - The latest end time for the scheduled event
  /// (for example, <code>2014-09-15T17:15:20.000Z</code>).
  /// </li>
  /// <li>
  /// <code>event.not-before</code> - The earliest start time for the scheduled
  /// event (for example, <code>2014-09-15T17:15:20.000Z</code>).
  /// </li>
  /// <li>
  /// <code>event.not-before-deadline</code> - The deadline for starting the
  /// event (for example, <code>2014-09-15T17:15:20.000Z</code>).
  /// </li>
  /// <li>
  /// <code>instance-state-code</code> - The code for the instance state, as a
  /// 16-bit unsigned integer. The high byte is used for internal purposes and
  /// should be ignored. The low byte is set based on the state represented. The
  /// valid values are 0 (pending), 16 (running), 32 (shutting-down), 48
  /// (terminated), 64 (stopping), and 80 (stopped).
  /// </li>
  /// <li>
  /// <code>instance-state-name</code> - The state of the instance
  /// (<code>pending</code> | <code>running</code> | <code>shutting-down</code>
  /// | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).
  /// </li>
  /// <li>
  /// <code>instance-status.reachability</code> - Filters on instance status
  /// where the name is <code>reachability</code> (<code>passed</code> |
  /// <code>failed</code> | <code>initializing</code> |
  /// <code>insufficient-data</code>).
  /// </li>
  /// <li>
  /// <code>instance-status.status</code> - The status of the instance
  /// (<code>ok</code> | <code>impaired</code> | <code>initializing</code> |
  /// <code>insufficient-data</code> | <code>not-applicable</code>).
  /// </li>
  /// <li>
  /// <code>system-status.reachability</code> - Filters on system status where
  /// the name is <code>reachability</code> (<code>passed</code> |
  /// <code>failed</code> | <code>initializing</code> |
  /// <code>insufficient-data</code>).
  /// </li>
  /// <li>
  /// <code>system-status.status</code> - The system status of the instance
  /// (<code>ok</code> | <code>impaired</code> | <code>initializing</code> |
  /// <code>insufficient-data</code> | <code>not-applicable</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [includeAllInstances] :
  /// When <code>true</code>, includes the health status for all instances. When
  /// <code>false</code>, includes the health status for running instances only.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs.
  ///
  /// Default: Describes all your instances.
  ///
  /// Constraints: Maximum 100 explicitly specified instance IDs.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 5 and 1000. You
  /// cannot specify this parameter and the instance IDs parameter in the same
  /// call.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeInstanceStatusResult> describeInstanceStatus({
    bool dryRun,
    List<Filter> filters,
    bool includeAllInstances,
    List<String> instanceIds,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Returns a list of all instance types offered. The results can be filtered
  /// by location (Region or Availability Zone). If no location is specified,
  /// the instance types offered in the current Region are returned.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>location</code> - This depends on the location type. For example, if
  /// the location type is <code>region</code> (default), the location is the
  /// Region code (for example, <code>us-east-2</code>.)
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type.
  /// </li>
  /// </ul>
  ///
  /// Parameter [locationType] :
  /// The location type.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the next
  /// token value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeInstanceTypeOfferingsResult> describeInstanceTypeOfferings({
    bool dryRun,
    List<Filter> filters,
    LocationType locationType,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Returns a list of all instance types offered in your current AWS Region.
  /// The results can be filtered by the attributes of the instance types.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. Filter names and values are case-sensitive.
  ///
  /// <ul>
  /// <li>
  /// <code>auto-recovery-supported</code> - Indicates whether auto recovery is
  /// supported. (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>bare-metal</code> - Indicates whether it is a bare metal instance
  /// type. (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>burstable-performance-supported</code> - Indicates whether it is a
  /// burstable performance instance type. (<code>true</code> |
  /// <code>false</code>)
  /// </li>
  /// <li>
  /// <code>current-generation</code> - Indicates whether this instance type is
  /// the latest generation instance type of an instance family.
  /// (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>ebs-info.ebs-optimized-support</code> - Indicates whether the
  /// instance type is EBS-optimized. (<code>supported</code> |
  /// <code>unsupported</code> | <code>default</code>)
  /// </li>
  /// <li>
  /// <code>ebs-info.encryption-support</code> - Indicates whether EBS
  /// encryption is supported. (<code>supported</code> |
  /// <code>unsupported</code>)
  /// </li>
  /// <li>
  /// <code>free-tier-eligible</code> - Indicates whether the instance type is
  /// eligible to use in the free tier. (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>hibernation-supported</code> - Indicates whether On-Demand
  /// hibernation is supported. (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>hypervisor</code> - The hypervisor used. (<code>nitro</code> |
  /// <code>xen</code>)
  /// </li>
  /// <li>
  /// <code>instance-storage-info.disk.count</code> - The number of local disks.
  /// </li>
  /// <li>
  /// <code>instance-storage-info.disk.size-in-gb</code> - The storage size of
  /// each instance storage disk, in GB.
  /// </li>
  /// <li>
  /// <code>instance-storage-info.disk.type</code> - The storage technology for
  /// the local instance storage disks. (<code>hdd</code> | <code>ssd</code>)
  /// </li>
  /// <li>
  /// <code>instance-storage-info.total-size-in-gb</code> - The total amount of
  /// storage available from all local instance storage, in GB.
  /// </li>
  /// <li>
  /// <code>instance-storage-supported</code> - Indicates whether the instance
  /// type has local instance storage. (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>memory-info.size-in-mib</code> - The memory size.
  /// </li>
  /// <li>
  /// <code>network-info.ena-support</code> - Indicates whether Elastic Network
  /// Adapter (ENA) is supported or required. (<code>required</code> |
  /// <code>supported</code> | <code>unsupported</code>)
  /// </li>
  /// <li>
  /// <code>network-info.ipv4-addresses-per-interface</code> - The maximum
  /// number of private IPv4 addresses per network interface.
  /// </li>
  /// <li>
  /// <code>network-info.ipv6-addresses-per-interface</code> - The maximum
  /// number of private IPv6 addresses per network interface.
  /// </li>
  /// <li>
  /// <code>network-info.ipv6-supported</code> - Indicates whether the instance
  /// type supports IPv6. (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>network-info.maximum-network-interfaces</code> - The maximum number
  /// of network interfaces per instance.
  /// </li>
  /// <li>
  /// <code>network-info.network-performance</code> - Describes the network
  /// performance.
  /// </li>
  /// <li>
  /// <code>processor-info.sustained-clock-speed-in-ghz</code> - The CPU clock
  /// speed, in GHz.
  /// </li>
  /// <li>
  /// <code>vcpu-info.default-cores</code> - The default number of cores for the
  /// instance type.
  /// </li>
  /// <li>
  /// <code>vcpu-info.default-threads-per-core</code> - The default number of
  /// threads per core for the instance type.
  /// </li>
  /// <li>
  /// <code>vcpu-info.default-vcpus</code> - The default number of vCPUs for the
  /// instance type.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceTypes] :
  /// The instance types. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the next
  /// token value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeInstanceTypesResult> describeInstanceTypes({
    bool dryRun,
    List<Filter> filters,
    List<String> instanceTypes,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified instances or all of AWS account's instances.
  ///
  /// If you specify one or more instance IDs, Amazon EC2 returns information
  /// for those instances. If you do not specify instance IDs, Amazon EC2
  /// returns information for all relevant instances. If you specify an instance
  /// ID that is not valid, an error is returned. If you specify an instance
  /// that you do not own, it is not included in the returned results.
  ///
  /// Recently terminated instances might appear in the returned results. This
  /// interval is usually less than one hour.
  ///
  /// If you describe instances in the rare case where an Availability Zone is
  /// experiencing a service disruption and you specify instance IDs that are in
  /// the affected zone, or do not specify any instance IDs at all, the call
  /// fails. If you describe instances and specify only instance IDs that are in
  /// an unaffected zone, the call works normally.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>affinity</code> - The affinity setting for an instance running on a
  /// Dedicated Host (<code>default</code> | <code>host</code>).
  /// </li>
  /// <li>
  /// <code>architecture</code> - The instance architecture (<code>i386</code> |
  /// <code>x86_64</code> | <code>arm64</code>).
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the instance.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.attach-time</code> - The attach time for an EBS
  /// volume mapped to the instance, for example,
  /// <code>2010-09-15T17:15:20.000Z</code>.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.delete-on-termination</code> - A Boolean that
  /// indicates whether the EBS volume is deleted on instance termination.
  /// </li>
  /// <li>
  /// <code>block-device-mapping.device-name</code> - The device name specified
  /// in the block device mapping (for example, <code>/dev/sdh</code> or
  /// <code>xvdh</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.status</code> - The status for the EBS volume
  /// (<code>attaching</code> | <code>attached</code> | <code>detaching</code> |
  /// <code>detached</code>).
  /// </li>
  /// <li>
  /// <code>block-device-mapping.volume-id</code> - The volume ID of the EBS
  /// volume.
  /// </li>
  /// <li>
  /// <code>client-token</code> - The idempotency token you provided when you
  /// launched the instance.
  /// </li>
  /// <li>
  /// <code>dns-name</code> - The public DNS name of the instance.
  /// </li>
  /// <li>
  /// <code>group-id</code> - The ID of the security group for the instance.
  /// EC2-Classic only.
  /// </li>
  /// <li>
  /// <code>group-name</code> - The name of the security group for the instance.
  /// EC2-Classic only.
  /// </li>
  /// <li>
  /// <code>hibernation-options.configured</code> - A Boolean that indicates
  /// whether the instance is enabled for hibernation. A value of
  /// <code>true</code> means that the instance is enabled for hibernation.
  /// </li>
  /// <li>
  /// <code>host-id</code> - The ID of the Dedicated Host on which the instance
  /// is running, if applicable.
  /// </li>
  /// <li>
  /// <code>hypervisor</code> - The hypervisor type of the instance
  /// (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used
  /// for both Xen and Nitro hypervisors.
  /// </li>
  /// <li>
  /// <code>iam-instance-profile.arn</code> - The instance profile associated
  /// with the instance. Specified as an ARN.
  /// </li>
  /// <li>
  /// <code>image-id</code> - The ID of the image used to launch the instance.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance.
  /// </li>
  /// <li>
  /// <code>instance-lifecycle</code> - Indicates whether this is a Spot
  /// Instance or a Scheduled Instance (<code>spot</code> |
  /// <code>scheduled</code>).
  /// </li>
  /// <li>
  /// <code>instance-state-code</code> - The state of the instance, as a 16-bit
  /// unsigned integer. The high byte is used for internal purposes and should
  /// be ignored. The low byte is set based on the state represented. The valid
  /// values are: 0 (pending), 16 (running), 32 (shutting-down), 48
  /// (terminated), 64 (stopping), and 80 (stopped).
  /// </li>
  /// <li>
  /// <code>instance-state-name</code> - The state of the instance
  /// (<code>pending</code> | <code>running</code> | <code>shutting-down</code>
  /// | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The type of instance (for example,
  /// <code>t2.micro</code>).
  /// </li>
  /// <li>
  /// <code>instance.group-id</code> - The ID of the security group for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>instance.group-name</code> - The name of the security group for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>ip-address</code> - The public IPv4 address of the instance.
  /// </li>
  /// <li>
  /// <code>kernel-id</code> - The kernel ID.
  /// </li>
  /// <li>
  /// <code>key-name</code> - The name of the key pair used when the instance
  /// was launched.
  /// </li>
  /// <li>
  /// <code>launch-index</code> - When launching multiple instances, this is the
  /// index for the instance in the launch group (for example, 0, 1, 2, and so
  /// on).
  /// </li>
  /// <li>
  /// <code>launch-time</code> - The time when the instance was launched.
  /// </li>
  /// <li>
  /// <code>metadata-options.http-tokens</code> - The metadata request
  /// authorization state (<code>optional</code> | <code>required</code>)
  /// </li>
  /// <li>
  /// <code>metadata-options.http-put-response-hop-limit</code> - The http
  /// metadata request put response hop limit (integer, possible values
  /// <code>1</code> to <code>64</code>)
  /// </li>
  /// <li>
  /// <code>metadata-options.http-endpoint</code> - Enable or disable metadata
  /// access on http endpoint (<code>enabled</code> | <code>disabled</code>)
  /// </li>
  /// <li>
  /// <code>monitoring-state</code> - Indicates whether detailed monitoring is
  /// enabled (<code>disabled</code> | <code>enabled</code>).
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.private-ip-address</code> - The private
  /// IPv4 address associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.primary</code> - Specifies whether the
  /// IPv4 address of the network interface is the primary private IPv4 address.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.association.public-ip</code> - The ID of
  /// the association of an Elastic IP address (IPv4) with a network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.association.ip-owner-id</code> - The
  /// owner ID of the private IPv4 address associated with the network
  /// interface.
  /// </li>
  /// <li>
  /// <code>network-interface.association.public-ip</code> - The address of the
  /// Elastic IP address (IPv4) bound to the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.association.ip-owner-id</code> - The owner of the
  /// Elastic IP address (IPv4) associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.association.allocation-id</code> - The allocation
  /// ID returned when you allocated the Elastic IP address (IPv4) for your
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.association.association-id</code> - The
  /// association ID returned when the network interface was associated with an
  /// IPv4 address.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.attachment-id</code> - The ID of the
  /// interface attachment.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.instance-id</code> - The ID of the
  /// instance to which the network interface is attached.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.instance-owner-id</code> - The owner ID
  /// of the instance to which the network interface is attached.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.device-index</code> - The device index
  /// to which the network interface is attached.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.status</code> - The status of the
  /// attachment (<code>attaching</code> | <code>attached</code> |
  /// <code>detaching</code> | <code>detached</code>).
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.attach-time</code> - The time that the
  /// network interface was attached to an instance.
  /// </li>
  /// <li>
  /// <code>network-interface.attachment.delete-on-termination</code> -
  /// Specifies whether the attachment is deleted when an instance is
  /// terminated.
  /// </li>
  /// <li>
  /// <code>network-interface.availability-zone</code> - The Availability Zone
  /// for the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.description</code> - The description of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.group-id</code> - The ID of a security group
  /// associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.group-name</code> - The name of a security group
  /// associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6
  /// address associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.mac-address</code> - The MAC address of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.network-interface-id</code> - The ID of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.owner-id</code> - The ID of the owner of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.private-dns-name</code> - The private DNS name of
  /// the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.requester-id</code> - The requester ID for the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.requester-managed</code> - Indicates whether the
  /// network interface is being managed by AWS.
  /// </li>
  /// <li>
  /// <code>network-interface.status</code> - The status of the network
  /// interface (<code>available</code>) | <code>in-use</code>).
  /// </li>
  /// <li>
  /// <code>network-interface.source-dest-check</code> - Whether the network
  /// interface performs source/destination checking. A value of
  /// <code>true</code> means that checking is enabled, and <code>false</code>
  /// means that checking is disabled. The value must be <code>false</code> for
  /// the network interface to perform network address translation (NAT) in your
  /// VPC.
  /// </li>
  /// <li>
  /// <code>network-interface.subnet-id</code> - The ID of the subnet for the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.vpc-id</code> - The ID of the VPC for the network
  /// interface.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The AWS account ID of the instance owner.
  /// </li>
  /// <li>
  /// <code>placement-group-name</code> - The name of the placement group for
  /// the instance.
  /// </li>
  /// <li>
  /// <code>placement-partition-number</code> - The partition in which the
  /// instance is located.
  /// </li>
  /// <li>
  /// <code>platform</code> - The platform. To list only Windows instances, use
  /// <code>windows</code>.
  /// </li>
  /// <li>
  /// <code>private-dns-name</code> - The private IPv4 DNS name of the instance.
  /// </li>
  /// <li>
  /// <code>private-ip-address</code> - The private IPv4 address of the
  /// instance.
  /// </li>
  /// <li>
  /// <code>product-code</code> - The product code associated with the AMI used
  /// to launch the instance.
  /// </li>
  /// <li>
  /// <code>product-code.type</code> - The type of product code
  /// (<code>devpay</code> | <code>marketplace</code>).
  /// </li>
  /// <li>
  /// <code>ramdisk-id</code> - The RAM disk ID.
  /// </li>
  /// <li>
  /// <code>reason</code> - The reason for the current state of the instance
  /// (for example, shows "User Initiated [date]" when you stop or terminate the
  /// instance). Similar to the state-reason-code filter.
  /// </li>
  /// <li>
  /// <code>requester-id</code> - The ID of the entity that launched the
  /// instance on your behalf (for example, AWS Management Console, Auto
  /// Scaling, and so on).
  /// </li>
  /// <li>
  /// <code>reservation-id</code> - The ID of the instance's reservation. A
  /// reservation ID is created any time you launch an instance. A reservation
  /// ID has a one-to-one relationship with an instance launch request, but can
  /// be associated with more than one instance if you launch multiple instances
  /// using the same launch request. For example, if you launch one instance,
  /// you get one reservation ID. If you launch ten instances using the same
  /// launch request, you also get one reservation ID.
  /// </li>
  /// <li>
  /// <code>root-device-name</code> - The device name of the root device volume
  /// (for example, <code>/dev/sda1</code>).
  /// </li>
  /// <li>
  /// <code>root-device-type</code> - The type of the root device volume
  /// (<code>ebs</code> | <code>instance-store</code>).
  /// </li>
  /// <li>
  /// <code>source-dest-check</code> - Indicates whether the instance performs
  /// source/destination checking. A value of <code>true</code> means that
  /// checking is enabled, and <code>false</code> means that checking is
  /// disabled. The value must be <code>false</code> for the instance to perform
  /// network address translation (NAT) in your VPC.
  /// </li>
  /// <li>
  /// <code>spot-instance-request-id</code> - The ID of the Spot Instance
  /// request.
  /// </li>
  /// <li>
  /// <code>state-reason-code</code> - The reason code for the state change.
  /// </li>
  /// <li>
  /// <code>state-reason-message</code> - A message that describes the state
  /// change.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet for the instance.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources that have a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code>
  /// | <code>default</code> | <code>host</code>).
  /// </li>
  /// <li>
  /// <code>virtualization-type</code> - The virtualization type of the instance
  /// (<code>paravirtual</code> | <code>hvm</code>).
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC that the instance is running in.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs.
  ///
  /// Default: Describes all your instances.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 5 and 1000. You
  /// cannot specify this parameter and the instance IDs parameter in the same
  /// call.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeInstancesResult> describeInstances({
    bool dryRun,
    List<Filter> filters,
    List<String> instanceIds,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your internet gateways.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>attachment.state</code> - The current state of the attachment
  /// between the gateway and the VPC (<code>available</code>). Present only if
  /// a VPC is attached.
  /// </li>
  /// <li>
  /// <code>attachment.vpc-id</code> - The ID of an attached VPC.
  /// </li>
  /// <li>
  /// <code>internet-gateway-id</code> - The ID of the Internet gateway.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the AWS account that owns the internet
  /// gateway.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [internetGatewayIds] :
  /// One or more internet gateway IDs.
  ///
  /// Default: Describes all your internet gateways.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeInternetGatewaysResult> describeInternetGateways({
    bool dryRun,
    List<Filter> filters,
    List<String> internetGatewayIds,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your IPv6 address pools.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [poolIds] :
  /// The IDs of the IPv6 address pools.
  Future<DescribeIpv6PoolsResult> describeIpv6Pools({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> poolIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified key pairs or all of your key pairs.
  ///
  /// For more information about key pairs, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key
  /// Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>key-pair-id</code> - The ID of the key pair.
  /// </li>
  /// <li>
  /// <code>fingerprint</code> - The fingerprint of the key pair.
  /// </li>
  /// <li>
  /// <code>key-name</code> - The name of the key pair.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [keyNames] :
  /// The key pair names.
  ///
  /// Default: Describes all your key pairs.
  ///
  /// Parameter [keyPairIds] :
  /// The IDs of the key pairs.
  Future<DescribeKeyPairsResult> describeKeyPairs({
    bool dryRun,
    List<Filter> filters,
    List<String> keyNames,
    List<String> keyPairIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more versions of a specified launch template. You can
  /// describe all versions, individual versions, or a range of versions.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>create-time</code> - The time the launch template version was
  /// created.
  /// </li>
  /// <li>
  /// <code>ebs-optimized</code> - A boolean that indicates whether the instance
  /// is optimized for Amazon EBS I/O.
  /// </li>
  /// <li>
  /// <code>iam-instance-profile</code> - The ARN of the IAM instance profile.
  /// </li>
  /// <li>
  /// <code>image-id</code> - The ID of the AMI.
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type.
  /// </li>
  /// <li>
  /// <code>is-default-version</code> - A boolean that indicates whether the
  /// launch template version is the default version.
  /// </li>
  /// <li>
  /// <code>kernel-id</code> - The kernel ID.
  /// </li>
  /// <li>
  /// <code>ram-disk-id</code> - The RAM disk ID.
  /// </li>
  /// </ul>
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template. You must specify either the launch template
  /// ID or launch template name in the request.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template. You must specify either the launch
  /// template ID or launch template name in the request.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 1 and 200.
  ///
  /// Parameter [maxVersion] :
  /// The version number up to which to describe launch template versions.
  ///
  /// Parameter [minVersion] :
  /// The version number after which to describe launch template versions.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  ///
  /// Parameter [versions] :
  /// One or more versions of the launch template.
  Future<DescribeLaunchTemplateVersionsResult> describeLaunchTemplateVersions({
    bool dryRun,
    List<Filter> filters,
    String launchTemplateId,
    String launchTemplateName,
    int maxResults,
    String maxVersion,
    String minVersion,
    String nextToken,
    List<String> versions,
  }) async {
    _s.validateStringLength(
      'launchTemplateName',
      launchTemplateName,
      3,
      128,
    );
    _s.validateStringPattern(
      'launchTemplateName',
      launchTemplateName,
      r'''[a-zA-Z0-9\(\)\.\-/_]+''',
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more launch templates.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>create-time</code> - The time the launch template was created.
  /// </li>
  /// <li>
  /// <code>launch-template-name</code> - The name of the launch template.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [launchTemplateIds] :
  /// One or more launch template IDs.
  ///
  /// Parameter [launchTemplateNames] :
  /// One or more launch template names.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. This value can be between 1 and 200.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeLaunchTemplatesResult> describeLaunchTemplates({
    bool dryRun,
    List<Filter> filters,
    List<String> launchTemplateIds,
    List<String> launchTemplateNames,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      200,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the associations between virtual interface groups and local
  /// gateway route tables.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// Parameter [localGatewayRouteTableVirtualInterfaceGroupAssociationIds] :
  /// The IDs of the associations.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult>
      describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations({
    bool dryRun,
    List<Filter> filters,
    List<String> localGatewayRouteTableVirtualInterfaceGroupAssociationIds,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified associations between VPCs and local gateway route
  /// tables.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// Parameter [localGatewayRouteTableVpcAssociationIds] :
  /// The IDs of the associations.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayRouteTableVpcAssociationsResult>
      describeLocalGatewayRouteTableVpcAssociations({
    bool dryRun,
    List<Filter> filters,
    List<String> localGatewayRouteTableVpcAssociationIds,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more local gateway route tables. By default, all local
  /// gateway route tables are described. Alternatively, you can filter the
  /// results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// Parameter [localGatewayRouteTableIds] :
  /// The IDs of the local gateway route tables.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayRouteTablesResult>
      describeLocalGatewayRouteTables({
    bool dryRun,
    List<Filter> filters,
    List<String> localGatewayRouteTableIds,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified local gateway virtual interface groups.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// Parameter [localGatewayVirtualInterfaceGroupIds] :
  /// The IDs of the virtual interface groups.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayVirtualInterfaceGroupsResult>
      describeLocalGatewayVirtualInterfaceGroups({
    bool dryRun,
    List<Filter> filters,
    List<String> localGatewayVirtualInterfaceGroupIds,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified local gateway virtual interfaces.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// Parameter [localGatewayVirtualInterfaceIds] :
  /// The IDs of the virtual interfaces.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewayVirtualInterfacesResult>
      describeLocalGatewayVirtualInterfaces({
    bool dryRun,
    List<Filter> filters,
    List<String> localGatewayVirtualInterfaceIds,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more local gateways. By default, all local gateways are
  /// described. Alternatively, you can filter the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// Parameter [localGatewayIds] :
  /// The IDs of the local gateways.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeLocalGatewaysResult> describeLocalGateways({
    bool dryRun,
    List<Filter> filters,
    List<String> localGatewayIds,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your Elastic IP addresses that are being moved to the EC2-VPC
  /// platform, or that are being restored to the EC2-Classic platform. This
  /// request does not return information about any other Elastic IP addresses
  /// in your account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>moving-status</code> - The status of the Elastic IP address
  /// (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. This value
  /// can be between 5 and 1000; if <code>MaxResults</code> is given a value
  /// outside of this range, an error is returned.
  ///
  /// Default: If no value is provided, the default is 1000.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [publicIps] :
  /// One or more Elastic IP addresses.
  Future<DescribeMovingAddressesResult> describeMovingAddresses({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> publicIps,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your NAT gateways.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filter] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>nat-gateway-id</code> - The ID of the NAT gateway.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the NAT gateway (<code>pending</code> |
  /// <code>failed</code> | <code>available</code> | <code>deleting</code> |
  /// <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet in which the NAT gateway
  /// resides.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [natGatewayIds] :
  /// One or more NAT gateway IDs.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeNatGatewaysResult> describeNatGateways({
    bool dryRun,
    List<Filter> filter,
    int maxResults,
    List<String> natGatewayIds,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your network ACLs.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network
  /// ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>association.association-id</code> - The ID of an association ID for
  /// the ACL.
  /// </li>
  /// <li>
  /// <code>association.network-acl-id</code> - The ID of the network ACL
  /// involved in the association.
  /// </li>
  /// <li>
  /// <code>association.subnet-id</code> - The ID of the subnet involved in the
  /// association.
  /// </li>
  /// <li>
  /// <code>default</code> - Indicates whether the ACL is the default network
  /// ACL for the VPC.
  /// </li>
  /// <li>
  /// <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.
  /// </li>
  /// <li>
  /// <code>entry.icmp.code</code> - The ICMP code specified in the entry, if
  /// any.
  /// </li>
  /// <li>
  /// <code>entry.icmp.type</code> - The ICMP type specified in the entry, if
  /// any.
  /// </li>
  /// <li>
  /// <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.
  /// </li>
  /// <li>
  /// <code>entry.port-range.from</code> - The start of the port range specified
  /// in the entry.
  /// </li>
  /// <li>
  /// <code>entry.port-range.to</code> - The end of the port range specified in
  /// the entry.
  /// </li>
  /// <li>
  /// <code>entry.protocol</code> - The protocol specified in the entry
  /// (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol
  /// number).
  /// </li>
  /// <li>
  /// <code>entry.rule-action</code> - Allows or denies the matching traffic
  /// (<code>allow</code> | <code>deny</code>).
  /// </li>
  /// <li>
  /// <code>entry.rule-number</code> - The number of an entry (in other words,
  /// rule) in the set of ACL entries.
  /// </li>
  /// <li>
  /// <code>network-acl-id</code> - The ID of the network ACL.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the AWS account that owns the network
  /// ACL.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC for the network ACL.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [networkAclIds] :
  /// One or more network ACL IDs.
  ///
  /// Default: Describes all your network ACLs.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<DescribeNetworkAclsResult> describeNetworkAcls({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    List<String> networkAclIds,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes a network interface attribute. You can specify only one
  /// attribute at a time.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [attribute] :
  /// The attribute of the network interface. This parameter is required.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeNetworkInterfaceAttributeResult>
      describeNetworkInterfaceAttribute({
    @_s.required String networkInterfaceId,
    NetworkInterfaceAttribute attribute,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the permissions for your network interfaces.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>network-interface-permission.network-interface-permission-id</code>
  /// - The ID of the permission.
  /// </li>
  /// <li>
  /// <code>network-interface-permission.network-interface-id</code> - The ID of
  /// the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface-permission.aws-account-id</code> - The AWS account
  /// ID.
  /// </li>
  /// <li>
  /// <code>network-interface-permission.aws-service</code> - The AWS service.
  /// </li>
  /// <li>
  /// <code>network-interface-permission.permission</code> - The type of
  /// permission (<code>INSTANCE-ATTACH</code> | <code>EIP-ASSOCIATE</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned
  /// <code>NextToken</code> value. If this parameter is not specified, up to 50
  /// results are returned by default.
  ///
  /// Parameter [networkInterfacePermissionIds] :
  /// One or more network interface permission IDs.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeNetworkInterfacePermissionsResult>
      describeNetworkInterfacePermissions({
    List<Filter> filters,
    int maxResults,
    List<String> networkInterfacePermissionIds,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your network interfaces.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>addresses.private-ip-address</code> - The private IPv4 addresses
  /// associated with the network interface.
  /// </li>
  /// <li>
  /// <code>addresses.primary</code> - Whether the private IPv4 address is the
  /// primary IP address associated with the network interface.
  /// </li>
  /// <li>
  /// <code>addresses.association.public-ip</code> - The association ID returned
  /// when the network interface was associated with the Elastic IP address
  /// (IPv4).
  /// </li>
  /// <li>
  /// <code>addresses.association.owner-id</code> - The owner ID of the
  /// addresses associated with the network interface.
  /// </li>
  /// <li>
  /// <code>association.association-id</code> - The association ID returned when
  /// the network interface was associated with an IPv4 address.
  /// </li>
  /// <li>
  /// <code>association.allocation-id</code> - The allocation ID returned when
  /// you allocated the Elastic IP address (IPv4) for your network interface.
  /// </li>
  /// <li>
  /// <code>association.ip-owner-id</code> - The owner of the Elastic IP address
  /// (IPv4) associated with the network interface.
  /// </li>
  /// <li>
  /// <code>association.public-ip</code> - The address of the Elastic IP address
  /// (IPv4) bound to the network interface.
  /// </li>
  /// <li>
  /// <code>association.public-dns-name</code> - The public DNS name for the
  /// network interface (IPv4).
  /// </li>
  /// <li>
  /// <code>attachment.attachment-id</code> - The ID of the interface
  /// attachment.
  /// </li>
  /// <li>
  /// <code>attachment.attach-time</code> - The time that the network interface
  /// was attached to an instance.
  /// </li>
  /// <li>
  /// <code>attachment.delete-on-termination</code> - Indicates whether the
  /// attachment is deleted when an instance is terminated.
  /// </li>
  /// <li>
  /// <code>attachment.device-index</code> - The device index to which the
  /// network interface is attached.
  /// </li>
  /// <li>
  /// <code>attachment.instance-id</code> - The ID of the instance to which the
  /// network interface is attached.
  /// </li>
  /// <li>
  /// <code>attachment.instance-owner-id</code> - The owner ID of the instance
  /// to which the network interface is attached.
  /// </li>
  /// <li>
  /// <code>attachment.nat-gateway-id</code> - The ID of the NAT gateway to
  /// which the network interface is attached.
  /// </li>
  /// <li>
  /// <code>attachment.status</code> - The status of the attachment
  /// (<code>attaching</code> | <code>attached</code> | <code>detaching</code> |
  /// <code>detached</code>).
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the network
  /// interface.
  /// </li>
  /// <li>
  /// <code>description</code> - The description of the network interface.
  /// </li>
  /// <li>
  /// <code>group-id</code> - The ID of a security group associated with the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>group-name</code> - The name of a security group associated with the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>ipv6-addresses.ipv6-address</code> - An IPv6 address associated with
  /// the network interface.
  /// </li>
  /// <li>
  /// <code>mac-address</code> - The MAC address of the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface-id</code> - The ID of the network interface.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The AWS account ID of the network interface owner.
  /// </li>
  /// <li>
  /// <code>private-ip-address</code> - The private IPv4 address or addresses of
  /// the network interface.
  /// </li>
  /// <li>
  /// <code>private-dns-name</code> - The private DNS name of the network
  /// interface (IPv4).
  /// </li>
  /// <li>
  /// <code>requester-id</code> - The ID of the entity that launched the
  /// instance on your behalf (for example, AWS Management Console, Auto
  /// Scaling, and so on).
  /// </li>
  /// <li>
  /// <code>requester-managed</code> - Indicates whether the network interface
  /// is being managed by an AWS service (for example, AWS Management Console,
  /// Auto Scaling, and so on).
  /// </li>
  /// <li>
  /// <code>source-dest-check</code> - Indicates whether the network interface
  /// performs source/destination checking. A value of <code>true</code> means
  /// checking is enabled, and <code>false</code> means checking is disabled.
  /// The value must be <code>false</code> for the network interface to perform
  /// network address translation (NAT) in your VPC.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the network interface. If the network
  /// interface is not attached to an instance, the status is
  /// <code>available</code>; if a network interface is attached to an instance
  /// the status is <code>in-use</code>.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet for the network interface.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC for the network interface.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. The request
  /// returns a token that you can specify in a subsequent call to get the next
  /// set of results. You cannot specify this parameter and the network
  /// interface IDs parameter in the same request.
  ///
  /// Parameter [networkInterfaceIds] :
  /// One or more network interface IDs.
  ///
  /// Default: Describes all your network interfaces.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeNetworkInterfacesResult> describeNetworkInterfaces({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    List<String> networkInterfaceIds,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified placement groups or all of your placement groups.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement
  /// Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>group-name</code> - The name of the placement group.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the placement group
  /// (<code>pending</code> | <code>available</code> | <code>deleting</code> |
  /// <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>strategy</code> - The strategy of the placement group
  /// (<code>cluster</code> | <code>spread</code> | <code>partition</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources that have a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [groupIds] :
  /// The IDs of the placement groups.
  ///
  /// Parameter [groupNames] :
  /// The names of the placement groups.
  ///
  /// Default: Describes all your placement groups, or only those otherwise
  /// specified.
  Future<DescribePlacementGroupsResult> describePlacementGroups({
    bool dryRun,
    List<Filter> filters,
    List<String> groupIds,
    List<String> groupNames,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes available AWS services in a prefix list format, which includes
  /// the prefix list name and prefix list ID of the service and the IP address
  /// range for the service. A prefix list ID is required for creating an
  /// outbound security group rule that allows traffic from a VPC to access an
  /// AWS service through a gateway VPC endpoint. Currently, the services that
  /// support this action are Amazon S3 and Amazon DynamoDB.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>prefix-list-id</code>: The ID of a prefix list.
  /// </li>
  /// <li>
  /// <code>prefix-list-name</code>: The name of a prefix list.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [prefixListIds] :
  /// One or more prefix list IDs.
  Future<DescribePrefixListsResult> describePrefixLists({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> prefixListIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the ID format settings for the root user and all IAM roles and
  /// IAM users that have explicitly specified a longer ID (17-character ID)
  /// preference.
  ///
  /// By default, all IAM roles and IAM users default to the same ID settings as
  /// the root user, unless they explicitly override the settings. This request
  /// is useful for identifying those IAM users and IAM roles that have
  /// overridden the default ID settings.
  ///
  /// The following resource types support longer IDs: <code>bundle</code> |
  /// <code>conversion-task</code> | <code>customer-gateway</code> |
  /// <code>dhcp-options</code> | <code>elastic-ip-allocation</code> |
  /// <code>elastic-ip-association</code> | <code>export-task</code> |
  /// <code>flow-log</code> | <code>image</code> | <code>import-task</code> |
  /// <code>instance</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>reservation</code> |
  /// <code>route-table</code> | <code>route-table-association</code> |
  /// <code>security-group</code> | <code>snapshot</code> | <code>subnet</code>
  /// | <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another call with the returned NextToken value.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  ///
  /// Parameter [resources] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>instance</code> |
  /// <code>internet-gateway</code> | <code>network-acl</code> |
  /// <code>network-acl-association</code> | <code>network-interface</code> |
  /// <code>network-interface-attachment</code> | <code>prefix-list</code> |
  /// <code>reservation</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>snapshot</code> | <code>subnet</code> |
  /// <code>subnet-cidr-block-association</code> | <code>volume</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>
  Future<DescribePrincipalIdFormatResult> describePrincipalIdFormat({
    bool dryRun,
    int maxResults,
    String nextToken,
    List<String> resources,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified IPv4 address pools.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [poolIds] :
  /// The IDs of the address pools.
  Future<DescribePublicIpv4PoolsResult> describePublicIpv4Pools({
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> poolIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      10,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Regions that are enabled for your account, or all Regions.
  ///
  /// For a list of the Regions supported by Amazon EC2, see <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region">
  /// Regions and Endpoints</a>.
  ///
  /// For information about enabling and disabling Regions for your account, see
  /// <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing
  /// AWS Regions</a> in the <i>AWS General Reference</i>.
  ///
  /// Parameter [allRegions] :
  /// Indicates whether to display all Regions, including Regions that are
  /// disabled for your account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>endpoint</code> - The endpoint of the Region (for example,
  /// <code>ec2.us-east-1.amazonaws.com</code>).
  /// </li>
  /// <li>
  /// <code>opt-in-status</code> - The opt-in status of the Region
  /// (<code>opt-in-not-required</code> | <code>opted-in</code> |
  /// <code>not-opted-in</code>).
  /// </li>
  /// <li>
  /// <code>region-name</code> - The name of the Region (for example,
  /// <code>us-east-1</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [regionNames] :
  /// The names of the Regions. You can specify any Regions, whether they are
  /// enabled and disabled for your account.
  Future<DescribeRegionsResult> describeRegions({
    bool allRegions,
    bool dryRun,
    List<Filter> filters,
    List<String> regionNames,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of the Reserved Instances that you purchased.
  ///
  /// For more information about Reserved Instances, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved
  /// Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone where the Reserved
  /// Instance can be used.
  /// </li>
  /// <li>
  /// <code>duration</code> - The duration of the Reserved Instance (one year or
  /// three years), in seconds (<code>31536000</code> | <code>94608000</code>).
  /// </li>
  /// <li>
  /// <code>end</code> - The time when the Reserved Instance expires (for
  /// example, 2015-08-07T11:54:42.000Z).
  /// </li>
  /// <li>
  /// <code>fixed-price</code> - The purchase price of the Reserved Instance
  /// (for example, 9800.0).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type that is covered by the
  /// reservation.
  /// </li>
  /// <li>
  /// <code>scope</code> - The scope of the Reserved Instance
  /// (<code>Region</code> or <code>Availability Zone</code>).
  /// </li>
  /// <li>
  /// <code>product-description</code> - The Reserved Instance product platform
  /// description. Instances that include <code>(Amazon VPC)</code> in the
  /// product platform description will only be displayed to EC2-Classic account
  /// holders and are for use with Amazon VPC (<code>Linux/UNIX</code> |
  /// <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> |
  /// <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise
  /// Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> |
  /// <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows
  /// with SQL Server Standard</code> | <code>Windows with SQL Server Standard
  /// (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> |
  /// <code>Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with
  /// SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise
  /// (Amazon VPC)</code>).
  /// </li>
  /// <li>
  /// <code>reserved-instances-id</code> - The ID of the Reserved Instance.
  /// </li>
  /// <li>
  /// <code>start</code> - The time at which the Reserved Instance purchase
  /// request was placed (for example, 2014-08-07T11:54:42.000Z).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the Reserved Instance
  /// (<code>payment-pending</code> | <code>active</code> |
  /// <code>payment-failed</code> | <code>retired</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>usage-price</code> - The usage price of the Reserved Instance, per
  /// hour (for example, 0.84).
  /// </li>
  /// </ul>
  ///
  /// Parameter [offeringClass] :
  /// Describes whether the Reserved Instance is Standard or Convertible.
  ///
  /// Parameter [offeringType] :
  /// The Reserved Instance offering type. If you are using tools that predate
  /// the 2011-11-01 API version, you only have access to the <code>Medium
  /// Utilization</code> Reserved Instance offering type.
  ///
  /// Parameter [reservedInstancesIds] :
  /// One or more Reserved Instance IDs.
  ///
  /// Default: Describes all your Reserved Instances, or only those otherwise
  /// specified.
  Future<DescribeReservedInstancesResult> describeReservedInstances({
    bool dryRun,
    List<Filter> filters,
    OfferingClassType offeringClass,
    OfferingTypeValues offeringType,
    List<String> reservedInstancesIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your account's Reserved Instance listings in the Reserved
  /// Instance Marketplace.
  ///
  /// The Reserved Instance Marketplace matches sellers who want to resell
  /// Reserved Instance capacity that they no longer need with buyers who want
  /// to purchase additional capacity. Reserved Instances bought and sold
  /// through the Reserved Instance Marketplace work like any other Reserved
  /// Instances.
  ///
  /// As a seller, you choose to list some or all of your Reserved Instances,
  /// and you specify the upfront price to receive for them. Your Reserved
  /// Instances are then listed in the Reserved Instance Marketplace and are
  /// available for purchase.
  ///
  /// As a buyer, you specify the configuration of the Reserved Instance to
  /// purchase, and the Marketplace matches what you're searching for with
  /// what's available. The Marketplace first sells the lowest priced Reserved
  /// Instances to you, and continues to sell available Reserved Instance
  /// listings to you until your demand is met. You are charged based on the
  /// total price of all of the listings that you purchase.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>reserved-instances-id</code> - The ID of the Reserved Instances.
  /// </li>
  /// <li>
  /// <code>reserved-instances-listing-id</code> - The ID of the Reserved
  /// Instances listing.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the Reserved Instance listing
  /// (<code>pending</code> | <code>active</code> | <code>cancelled</code> |
  /// <code>closed</code>).
  /// </li>
  /// <li>
  /// <code>status-message</code> - The reason for the status.
  /// </li>
  /// </ul>
  ///
  /// Parameter [reservedInstancesId] :
  /// One or more Reserved Instance IDs.
  ///
  /// Parameter [reservedInstancesListingId] :
  /// One or more Reserved Instance listing IDs.
  Future<DescribeReservedInstancesListingsResult>
      describeReservedInstancesListings({
    List<Filter> filters,
    String reservedInstancesId,
    String reservedInstancesListingId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the modifications made to your Reserved Instances. If no
  /// parameter is specified, information about all your Reserved Instances
  /// modification requests is returned. If a modification ID is specified, only
  /// information about the specific modification is returned.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying
  /// Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>client-token</code> - The idempotency token for the modification
  /// request.
  /// </li>
  /// <li>
  /// <code>create-date</code> - The time when the modification request was
  /// created.
  /// </li>
  /// <li>
  /// <code>effective-date</code> - The time when the modification becomes
  /// effective.
  /// </li>
  /// <li>
  /// <code>modification-result.reserved-instances-id</code> - The ID for the
  /// Reserved Instances created as part of the modification request. This ID is
  /// only available when the status of the modification is
  /// <code>fulfilled</code>.
  /// </li>
  /// <li>
  /// <code>modification-result.target-configuration.availability-zone</code> -
  /// The Availability Zone for the new Reserved Instances.
  /// </li>
  /// <li>
  /// <code>modification-result.target-configuration.instance-count </code> -
  /// The number of new Reserved Instances.
  /// </li>
  /// <li>
  /// <code>modification-result.target-configuration.instance-type</code> - The
  /// instance type of the new Reserved Instances.
  /// </li>
  /// <li>
  /// <code>modification-result.target-configuration.platform</code> - The
  /// network platform of the new Reserved Instances (<code>EC2-Classic</code> |
  /// <code>EC2-VPC</code>).
  /// </li>
  /// <li>
  /// <code>reserved-instances-id</code> - The ID of the Reserved Instances
  /// modified.
  /// </li>
  /// <li>
  /// <code>reserved-instances-modification-id</code> - The ID of the
  /// modification request.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the Reserved Instances modification
  /// request (<code>processing</code> | <code>fulfilled</code> |
  /// <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>status-message</code> - The reason for the status.
  /// </li>
  /// <li>
  /// <code>update-date</code> - The time when the modification request was last
  /// updated.
  /// </li>
  /// </ul>
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  ///
  /// Parameter [reservedInstancesModificationIds] :
  /// IDs for the submitted modification request.
  Future<DescribeReservedInstancesModificationsResult>
      describeReservedInstancesModifications({
    List<Filter> filters,
    String nextToken,
    List<String> reservedInstancesModificationIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes Reserved Instance offerings that are available for purchase.
  /// With Reserved Instances, you purchase the right to launch instances for a
  /// period of time. During that time period, you do not receive insufficient
  /// capacity errors, and you pay a lower usage rate than the rate charged for
  /// On-Demand instances for the actual time used.
  ///
  /// If you have listed your own Reserved Instances for sale in the Reserved
  /// Instance Marketplace, they will be excluded from these results. This is to
  /// ensure that you do not purchase your own Reserved Instances.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone in which the Reserved Instance can be used.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone where the Reserved
  /// Instance can be used.
  /// </li>
  /// <li>
  /// <code>duration</code> - The duration of the Reserved Instance (for
  /// example, one year or three years), in seconds (<code>31536000</code> |
  /// <code>94608000</code>).
  /// </li>
  /// <li>
  /// <code>fixed-price</code> - The purchase price of the Reserved Instance
  /// (for example, 9800.0).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type that is covered by the
  /// reservation.
  /// </li>
  /// <li>
  /// <code>marketplace</code> - Set to <code>true</code> to show only Reserved
  /// Instance Marketplace offerings. When this filter is not used, which is the
  /// default behavior, all offerings from both AWS and the Reserved Instance
  /// Marketplace are listed.
  /// </li>
  /// <li>
  /// <code>product-description</code> - The Reserved Instance product platform
  /// description. Instances that include <code>(Amazon VPC)</code> in the
  /// product platform description will only be displayed to EC2-Classic account
  /// holders and are for use with Amazon VPC. (<code>Linux/UNIX</code> |
  /// <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> |
  /// <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise
  /// Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> |
  /// <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows
  /// with SQL Server Standard</code> | <code>Windows with SQL Server Standard
  /// (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code>
  /// Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL
  /// Server Enterprise</code> | <code>Windows with SQL Server Enterprise
  /// (Amazon VPC)</code>)
  /// </li>
  /// <li>
  /// <code>reserved-instances-offering-id</code> - The Reserved Instances
  /// offering ID.
  /// </li>
  /// <li>
  /// <code>scope</code> - The scope of the Reserved Instance
  /// (<code>Availability Zone</code> or <code>Region</code>).
  /// </li>
  /// <li>
  /// <code>usage-price</code> - The usage price of the Reserved Instance, per
  /// hour (for example, 0.84).
  /// </li>
  /// </ul>
  ///
  /// Parameter [includeMarketplace] :
  /// Include Reserved Instance Marketplace offerings in the response.
  ///
  /// Parameter [instanceTenancy] :
  /// The tenancy of the instances covered by the reservation. A Reserved
  /// Instance with a tenancy of <code>dedicated</code> is applied to instances
  /// that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).
  ///
  /// <b>Important:</b> The <code>host</code> value cannot be used with this
  /// parameter. Use the <code>default</code> or <code>dedicated</code> values
  /// only.
  ///
  /// Default: <code>default</code>
  ///
  /// Parameter [instanceType] :
  /// The instance type that the reservation will cover (for example,
  /// <code>m1.small</code>). For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [maxDuration] :
  /// The maximum duration (in seconds) to filter when searching for offerings.
  ///
  /// Default: 94608000 (3 years)
  ///
  /// Parameter [maxInstanceCount] :
  /// The maximum number of instances to filter when searching for offerings.
  ///
  /// Default: 20
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. The
  /// maximum is 100.
  ///
  /// Default: 100
  ///
  /// Parameter [minDuration] :
  /// The minimum duration (in seconds) to filter when searching for offerings.
  ///
  /// Default: 2592000 (1 month)
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  ///
  /// Parameter [offeringClass] :
  /// The offering class of the Reserved Instance. Can be <code>standard</code>
  /// or <code>convertible</code>.
  ///
  /// Parameter [offeringType] :
  /// The Reserved Instance offering type. If you are using tools that predate
  /// the 2011-11-01 API version, you only have access to the <code>Medium
  /// Utilization</code> Reserved Instance offering type.
  ///
  /// Parameter [productDescription] :
  /// The Reserved Instance product platform description. Instances that include
  /// <code>(Amazon VPC)</code> in the description are for use with Amazon VPC.
  ///
  /// Parameter [reservedInstancesOfferingIds] :
  /// One or more Reserved Instances offering IDs.
  Future<DescribeReservedInstancesOfferingsResult>
      describeReservedInstancesOfferings({
    String availabilityZone,
    bool dryRun,
    List<Filter> filters,
    bool includeMarketplace,
    Tenancy instanceTenancy,
    InstanceType instanceType,
    int maxDuration,
    int maxInstanceCount,
    int maxResults,
    int minDuration,
    String nextToken,
    OfferingClassType offeringClass,
    OfferingTypeValues offeringType,
    RIProductDescription productDescription,
    List<String> reservedInstancesOfferingIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your route tables.
  ///
  /// Each subnet in your VPC must be associated with a route table. If a subnet
  /// is not explicitly associated with any route table, it is implicitly
  /// associated with the main route table. This command does not return the
  /// subnet ID for implicit associations.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>association.route-table-association-id</code> - The ID of an
  /// association ID for the route table.
  /// </li>
  /// <li>
  /// <code>association.route-table-id</code> - The ID of the route table
  /// involved in the association.
  /// </li>
  /// <li>
  /// <code>association.subnet-id</code> - The ID of the subnet involved in the
  /// association.
  /// </li>
  /// <li>
  /// <code>association.main</code> - Indicates whether the route table is the
  /// main route table for the VPC (<code>true</code> | <code>false</code>).
  /// Route tables that do not have an association ID are not returned in the
  /// response.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the AWS account that owns the route
  /// table.
  /// </li>
  /// <li>
  /// <code>route-table-id</code> - The ID of the route table.
  /// </li>
  /// <li>
  /// <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified
  /// in a route in the table.
  /// </li>
  /// <li>
  /// <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range
  /// specified in a route in the route table.
  /// </li>
  /// <li>
  /// <code>route.destination-prefix-list-id</code> - The ID (prefix) of the AWS
  /// service specified in a route in the table.
  /// </li>
  /// <li>
  /// <code>route.egress-only-internet-gateway-id</code> - The ID of an
  /// egress-only Internet gateway specified in a route in the route table.
  /// </li>
  /// <li>
  /// <code>route.gateway-id</code> - The ID of a gateway specified in a route
  /// in the table.
  /// </li>
  /// <li>
  /// <code>route.instance-id</code> - The ID of an instance specified in a
  /// route in the table.
  /// </li>
  /// <li>
  /// <code>route.nat-gateway-id</code> - The ID of a NAT gateway.
  /// </li>
  /// <li>
  /// <code>route.transit-gateway-id</code> - The ID of a transit gateway.
  /// </li>
  /// <li>
  /// <code>route.origin</code> - Describes how the route was created.
  /// <code>CreateRouteTable</code> indicates that the route was automatically
  /// created when the route table was created; <code>CreateRoute</code>
  /// indicates that the route was manually added to the route table;
  /// <code>EnableVgwRoutePropagation</code> indicates that the route was
  /// propagated by route propagation.
  /// </li>
  /// <li>
  /// <code>route.state</code> - The state of a route in the route table
  /// (<code>active</code> | <code>blackhole</code>). The blackhole state
  /// indicates that the route's target isn't available (for example, the
  /// specified gateway isn't attached to the VPC, the specified NAT instance
  /// has been terminated, and so on).
  /// </li>
  /// <li>
  /// <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering
  /// connection specified in a route in the table.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of a transit gateway.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC for the route table.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [routeTableIds] :
  /// One or more route table IDs.
  ///
  /// Default: Describes all your route tables.
  Future<DescribeRouteTablesResult> describeRouteTables({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> routeTableIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      100,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Finds available schedules that meet the specified criteria.
  ///
  /// You can search for an available schedule no more than 3 months in advance.
  /// You must meet the minimum required duration of 1,200 hours per year. For
  /// example, the minimum daily schedule is 4 hours, the minimum weekly
  /// schedule is 24 hours, and the minimum monthly schedule is 100 hours.
  ///
  /// After you find a schedule that meets your needs, call
  /// <a>PurchaseScheduledInstances</a> to purchase Scheduled Instances with
  /// that schedule.
  ///
  /// Parameter [firstSlotStartTimeRange] :
  /// The time period for the first schedule to start.
  ///
  /// Parameter [recurrence] :
  /// The schedule recurrence.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone (for example,
  /// <code>us-west-2a</code>).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type (for example,
  /// <code>c4.large</code>).
  /// </li>
  /// <li>
  /// <code>network-platform</code> - The network platform
  /// (<code>EC2-Classic</code> or <code>EC2-VPC</code>).
  /// </li>
  /// <li>
  /// <code>platform</code> - The platform (<code>Linux/UNIX</code> or
  /// <code>Windows</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. This value can
  /// be between 5 and 300. The default value is 300. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [maxSlotDurationInHours] :
  /// The maximum available duration, in hours. This value must be greater than
  /// <code>MinSlotDurationInHours</code> and less than 1,720.
  ///
  /// Parameter [minSlotDurationInHours] :
  /// The minimum available duration, in hours. The minimum required duration is
  /// 1,200 hours per year. For example, the minimum daily schedule is 4 hours,
  /// the minimum weekly schedule is 24 hours, and the minimum monthly schedule
  /// is 100 hours.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  Future<DescribeScheduledInstanceAvailabilityResult>
      describeScheduledInstanceAvailability({
    @_s.required SlotDateTimeRangeRequest firstSlotStartTimeRange,
    @_s.required ScheduledInstanceRecurrenceRequest recurrence,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    int maxSlotDurationInHours,
    int minSlotDurationInHours,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(
        firstSlotStartTimeRange, 'firstSlotStartTimeRange');
    ArgumentError.checkNotNull(recurrence, 'recurrence');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      300,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Scheduled Instances or all your Scheduled
  /// Instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone (for example,
  /// <code>us-west-2a</code>).
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The instance type (for example,
  /// <code>c4.large</code>).
  /// </li>
  /// <li>
  /// <code>network-platform</code> - The network platform
  /// (<code>EC2-Classic</code> or <code>EC2-VPC</code>).
  /// </li>
  /// <li>
  /// <code>platform</code> - The platform (<code>Linux/UNIX</code> or
  /// <code>Windows</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. This value can
  /// be between 5 and 300. The default value is 100. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  ///
  /// Parameter [scheduledInstanceIds] :
  /// The Scheduled Instance IDs.
  ///
  /// Parameter [slotStartTimeRange] :
  /// The time period for the first schedule to start.
  Future<DescribeScheduledInstancesResult> describeScheduledInstances({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> scheduledInstanceIds,
    SlotStartTimeRangeRequest slotStartTimeRange,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// [VPC only] Describes the VPCs on the other side of a VPC peering
  /// connection that are referencing the security groups you've specified in
  /// this request.
  ///
  /// Parameter [groupId] :
  /// The IDs of the security groups in your account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeSecurityGroupReferencesResult>
      describeSecurityGroupReferences({
    @_s.required List<String> groupId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(groupId, 'groupId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified security groups or all of your security groups.
  ///
  /// A security group is for use with instances either in the EC2-Classic
  /// platform or in a specific VPC. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon
  /// EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security
  /// Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. If using multiple filters for rules, the results include
  /// security groups for which any combination of rules - not necessarily a
  /// single rule - match all filters.
  ///
  /// <ul>
  /// <li>
  /// <code>description</code> - The description of the security group.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.cidr</code> - An IPv4 CIDR block for an
  /// outbound security group rule.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.from-port</code> - For an outbound rule, the
  /// start of port range for the TCP and UDP protocols, or an ICMP type number.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.group-id</code> - The ID of a security group
  /// that has been referenced in an outbound security group rule.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.group-name</code> - The name of a security
  /// group that has been referenced in an outbound security group rule.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an
  /// outbound security group rule.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.prefix-list-id</code> - The ID (prefix) of the
  /// AWS service to which a security group rule allows outbound access.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.protocol</code> - The IP protocol for an
  /// outbound security group rule (<code>tcp</code> | <code>udp</code> |
  /// <code>icmp</code> or a protocol number).
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.to-port</code> - For an outbound rule, the end
  /// of port range for the TCP and UDP protocols, or an ICMP code.
  /// </li>
  /// <li>
  /// <code>egress.ip-permission.user-id</code> - The ID of an AWS account that
  /// has been referenced in an outbound security group rule.
  /// </li>
  /// <li>
  /// <code>group-id</code> - The ID of the security group.
  /// </li>
  /// <li>
  /// <code>group-name</code> - The name of the security group.
  /// </li>
  /// <li>
  /// <code>ip-permission.cidr</code> - An IPv4 CIDR block for an inbound
  /// security group rule.
  /// </li>
  /// <li>
  /// <code>ip-permission.from-port</code> - For an inbound rule, the start of
  /// port range for the TCP and UDP protocols, or an ICMP type number.
  /// </li>
  /// <li>
  /// <code>ip-permission.group-id</code> - The ID of a security group that has
  /// been referenced in an inbound security group rule.
  /// </li>
  /// <li>
  /// <code>ip-permission.group-name</code> - The name of a security group that
  /// has been referenced in an inbound security group rule.
  /// </li>
  /// <li>
  /// <code>ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an inbound
  /// security group rule.
  /// </li>
  /// <li>
  /// <code>ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS
  /// service from which a security group rule allows inbound access.
  /// </li>
  /// <li>
  /// <code>ip-permission.protocol</code> - The IP protocol for an inbound
  /// security group rule (<code>tcp</code> | <code>udp</code> |
  /// <code>icmp</code> or a protocol number).
  /// </li>
  /// <li>
  /// <code>ip-permission.to-port</code> - For an inbound rule, the end of port
  /// range for the TCP and UDP protocols, or an ICMP code.
  /// </li>
  /// <li>
  /// <code>ip-permission.user-id</code> - The ID of an AWS account that has
  /// been referenced in an inbound security group rule.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The AWS account ID of the owner of the security
  /// group.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC specified when the security group
  /// was created.
  /// </li>
  /// </ul>
  ///
  /// Parameter [groupIds] :
  /// The IDs of the security groups. Required for security groups in a
  /// nondefault VPC.
  ///
  /// Default: Describes all your security groups.
  ///
  /// Parameter [groupNames] :
  /// [EC2-Classic and default VPC only] The names of the security groups. You
  /// can specify either the security group name or the security group ID. For
  /// security groups in a nondefault VPC, use the <code>group-name</code>
  /// filter to describe security groups by name.
  ///
  /// Default: Describes all your security groups.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another request with the returned
  /// <code>NextToken</code> value. This value can be between 5 and 1000. If
  /// this parameter is not specified, then all results are returned.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeSecurityGroupsResult> describeSecurityGroups({
    bool dryRun,
    List<Filter> filters,
    List<String> groupIds,
    List<String> groupNames,
    int maxResults,
    String nextToken,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified snapshot. You can
  /// specify only one attribute at a time.
  ///
  /// For more information about EBS snapshots, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon
  /// EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [attribute] :
  /// The snapshot attribute you would like to view.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the EBS snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeSnapshotAttributeResult> describeSnapshotAttribute({
    @_s.required SnapshotAttributeName attribute,
    @_s.required String snapshotId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(attribute, 'attribute');
    ArgumentError.checkNotNull(snapshotId, 'snapshotId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified EBS snapshots available to you or all of the EBS
  /// snapshots available to you.
  ///
  /// The snapshots available to you include public snapshots, private snapshots
  /// that you own, and private snapshots owned by other AWS accounts for which
  /// you have explicit create volume permissions.
  ///
  /// The create volume permissions fall into the following categories:
  ///
  /// <ul>
  /// <li>
  /// <i>public</i>: The owner of the snapshot granted create volume permissions
  /// for the snapshot to the <code>all</code> group. All AWS accounts have
  /// create volume permissions for these snapshots.
  /// </li>
  /// <li>
  /// <i>explicit</i>: The owner of the snapshot granted create volume
  /// permissions to a specific AWS account.
  /// </li>
  /// <li>
  /// <i>implicit</i>: An AWS account has implicit create volume permissions for
  /// all snapshots it owns.
  /// </li>
  /// </ul>
  /// The list of snapshots returned can be filtered by specifying snapshot IDs,
  /// snapshot owners, or AWS accounts with create volume permissions. If no
  /// options are specified, Amazon EC2 returns all snapshots for which you have
  /// create volume permissions.
  ///
  /// If you specify one or more snapshot IDs, only snapshots that have the
  /// specified IDs are returned. If you specify an invalid snapshot ID, an
  /// error is returned. If you specify a snapshot ID for which you do not have
  /// access, it is not included in the returned results.
  ///
  /// If you specify one or more snapshot owners using the <code>OwnerIds</code>
  /// option, only snapshots from the specified owners and for which you have
  /// access are returned. The results can include the AWS account IDs of the
  /// specified owners, <code>amazon</code> for snapshots owned by Amazon, or
  /// <code>self</code> for snapshots that you own.
  ///
  /// If you specify a list of restorable users, only snapshots with create
  /// snapshot permissions for those users are returned. You can specify AWS
  /// account IDs (if you own the snapshots), <code>self</code> for snapshots
  /// for which you own or have explicit permissions, or <code>all</code> for
  /// public snapshots.
  ///
  /// If you are describing a long list of snapshots, you can paginate the
  /// output to make the list more manageable. The <code>MaxResults</code>
  /// parameter sets the maximum number of results returned in a single page. If
  /// the list of results exceeds your <code>MaxResults</code> value, then that
  /// number of results is returned along with a <code>NextToken</code> value
  /// that can be passed to a subsequent <code>DescribeSnapshots</code> request
  /// to retrieve the remaining results.
  ///
  /// To get the state of fast snapshot restores for a snapshot, use
  /// <a>DescribeFastSnapshotRestores</a>.
  ///
  /// For more information about EBS snapshots, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon
  /// EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>description</code> - A description of the snapshot.
  /// </li>
  /// <li>
  /// <code>encrypted</code> - Indicates whether the snapshot is encrypted
  /// (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>owner-alias</code> - Value from an Amazon-maintained list
  /// (<code>amazon</code> | <code>self</code> | <code>all</code> |
  /// <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners.
  /// Not to be confused with the user-configured AWS account alias, which is
  /// set from the IAM console.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the AWS account that owns the snapshot.
  /// </li>
  /// <li>
  /// <code>progress</code> - The progress of the snapshot, as a percentage (for
  /// example, 80%).
  /// </li>
  /// <li>
  /// <code>snapshot-id</code> - The snapshot ID.
  /// </li>
  /// <li>
  /// <code>start-time</code> - The time stamp when the snapshot was initiated.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the snapshot (<code>pending</code> |
  /// <code>completed</code> | <code>error</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>volume-id</code> - The ID of the volume the snapshot is for.
  /// </li>
  /// <li>
  /// <code>volume-size</code> - The size of the volume, in GiB.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of snapshot results returned by
  /// <code>DescribeSnapshots</code> in paginated output. When this parameter is
  /// used, <code>DescribeSnapshots</code> only returns <code>MaxResults</code>
  /// results in a single page along with a <code>NextToken</code> response
  /// element. The remaining results of the initial request can be seen by
  /// sending another <code>DescribeSnapshots</code> request with the returned
  /// <code>NextToken</code> value. This value can be between 5 and 1000; if
  /// <code>MaxResults</code> is given a value larger than 1000, only 1000
  /// results are returned. If this parameter is not used, then
  /// <code>DescribeSnapshots</code> returns all results. You cannot specify
  /// this parameter and the snapshot IDs parameter in the same request.
  ///
  /// Parameter [nextToken] :
  /// The <code>NextToken</code> value returned from a previous paginated
  /// <code>DescribeSnapshots</code> request where <code>MaxResults</code> was
  /// used and the results exceeded the value of that parameter. Pagination
  /// continues from the end of the previous results that returned the
  /// <code>NextToken</code> value. This value is <code>null</code> when there
  /// are no more results to return.
  ///
  /// Parameter [ownerIds] :
  /// Describes the snapshots owned by these owners.
  ///
  /// Parameter [restorableByUserIds] :
  /// The IDs of the AWS accounts that can create volumes from the snapshot.
  ///
  /// Parameter [snapshotIds] :
  /// The snapshot IDs.
  ///
  /// Default: Describes the snapshots for which you have create volume
  /// permissions.
  Future<DescribeSnapshotsResult> describeSnapshots({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> ownerIds,
    List<String> restorableByUserIds,
    List<String> snapshotIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the data feed for Spot Instances. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot
  /// Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeSpotDatafeedSubscriptionResult>
      describeSpotDatafeedSubscription({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the running instances for the specified Spot Fleet.
  ///
  /// Parameter [spotFleetRequestId] :
  /// The ID of the Spot Fleet request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. Specify a value
  /// between 1 and 1000. The default value is 1000. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  Future<DescribeSpotFleetInstancesResponse> describeSpotFleetInstances({
    @_s.required String spotFleetRequestId,
    bool dryRun,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(spotFleetRequestId, 'spotFleetRequestId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the events for the specified Spot Fleet request during the
  /// specified time.
  ///
  /// Spot Fleet events are delayed by up to 30 seconds before they can be
  /// described. This ensures that you can query by the last evaluated time and
  /// not miss a recorded event. Spot Fleet events are available for 48 hours.
  ///
  /// Parameter [spotFleetRequestId] :
  /// The ID of the Spot Fleet request.
  ///
  /// Parameter [startTime] :
  /// The starting date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [eventType] :
  /// The type of events to describe. By default, all events are described.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. Specify a value
  /// between 1 and 1000. The default value is 1000. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  Future<DescribeSpotFleetRequestHistoryResponse>
      describeSpotFleetRequestHistory({
    @_s.required String spotFleetRequestId,
    @_s.required DateTime startTime,
    bool dryRun,
    EventType eventType,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(spotFleetRequestId, 'spotFleetRequestId');
    ArgumentError.checkNotNull(startTime, 'startTime');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your Spot Fleet requests.
  ///
  /// Spot Fleet requests are deleted 48 hours after they are canceled and their
  /// instances are terminated.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. Specify a value
  /// between 1 and 1000. The default value is 1000. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  ///
  /// Parameter [spotFleetRequestIds] :
  /// The IDs of the Spot Fleet requests.
  Future<DescribeSpotFleetRequestsResponse> describeSpotFleetRequests({
    bool dryRun,
    int maxResults,
    String nextToken,
    List<String> spotFleetRequestIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified Spot Instance requests.
  ///
  /// You can use <code>DescribeSpotInstanceRequests</code> to find a running
  /// Spot Instance by examining the response. If the status of the Spot
  /// Instance is <code>fulfilled</code>, the instance ID appears in the
  /// response and contains the identifier of the instance. Alternatively, you
  /// can use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances">DescribeInstances</a>
  /// with a filter to look for instances where the instance lifecycle is
  /// <code>spot</code>.
  ///
  /// We recommend that you set <code>MaxResults</code> to a value between 5 and
  /// 1000 to limit the number of results returned. This paginates the output,
  /// which makes the list more manageable and returns the results faster. If
  /// the list of results exceeds your <code>MaxResults</code> value, then that
  /// number of results is returned along with a <code>NextToken</code> value
  /// that can be passed to a subsequent
  /// <code>DescribeSpotInstanceRequests</code> request to retrieve the
  /// remaining results.
  ///
  /// Spot Instance requests are deleted four hours after they are canceled and
  /// their instances are terminated.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone-group</code> - The Availability Zone group.
  /// </li>
  /// <li>
  /// <code>create-time</code> - The time stamp when the Spot Instance request
  /// was created.
  /// </li>
  /// <li>
  /// <code>fault-code</code> - The fault code related to the request.
  /// </li>
  /// <li>
  /// <code>fault-message</code> - The fault message related to the request.
  /// </li>
  /// <li>
  /// <code>instance-id</code> - The ID of the instance that fulfilled the
  /// request.
  /// </li>
  /// <li>
  /// <code>launch-group</code> - The Spot Instance launch group.
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.delete-on-termination</code> - Indicates
  /// whether the EBS volume is deleted on instance termination.
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.device-name</code> - The device name for
  /// the volume in the block device mapping (for example, <code>/dev/sdh</code>
  /// or <code>xvdh</code>).
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.snapshot-id</code> - The ID of the
  /// snapshot for the EBS volume.
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.volume-size</code> - The size of the EBS
  /// volume, in GiB.
  /// </li>
  /// <li>
  /// <code>launch.block-device-mapping.volume-type</code> - The type of EBS
  /// volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> for
  /// Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD,
  /// <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.
  /// </li>
  /// <li>
  /// <code>launch.group-id</code> - The ID of the security group for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>launch.group-name</code> - The name of the security group for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>launch.image-id</code> - The ID of the AMI.
  /// </li>
  /// <li>
  /// <code>launch.instance-type</code> - The type of instance (for example,
  /// <code>m3.medium</code>).
  /// </li>
  /// <li>
  /// <code>launch.kernel-id</code> - The kernel ID.
  /// </li>
  /// <li>
  /// <code>launch.key-name</code> - The name of the key pair the instance
  /// launched with.
  /// </li>
  /// <li>
  /// <code>launch.monitoring-enabled</code> - Whether detailed monitoring is
  /// enabled for the Spot Instance.
  /// </li>
  /// <li>
  /// <code>launch.ramdisk-id</code> - The RAM disk ID.
  /// </li>
  /// <li>
  /// <code>launched-availability-zone</code> - The Availability Zone in which
  /// the request is launched.
  /// </li>
  /// <li>
  /// <code>network-interface.addresses.primary</code> - Indicates whether the
  /// IP address is the primary private IP address.
  /// </li>
  /// <li>
  /// <code>network-interface.delete-on-termination</code> - Indicates whether
  /// the network interface is deleted when the instance is terminated.
  /// </li>
  /// <li>
  /// <code>network-interface.description</code> - A description of the network
  /// interface.
  /// </li>
  /// <li>
  /// <code>network-interface.device-index</code> - The index of the device for
  /// the network interface attachment on the instance.
  /// </li>
  /// <li>
  /// <code>network-interface.group-id</code> - The ID of the security group
  /// associated with the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.network-interface-id</code> - The ID of the
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.private-ip-address</code> - The primary private IP
  /// address of the network interface.
  /// </li>
  /// <li>
  /// <code>network-interface.subnet-id</code> - The ID of the subnet for the
  /// instance.
  /// </li>
  /// <li>
  /// <code>product-description</code> - The product description associated with
  /// the instance (<code>Linux/UNIX</code> | <code>Windows</code>).
  /// </li>
  /// <li>
  /// <code>spot-instance-request-id</code> - The Spot Instance request ID.
  /// </li>
  /// <li>
  /// <code>spot-price</code> - The maximum hourly price for any Spot Instance
  /// launched to fulfill the request.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the Spot Instance request
  /// (<code>open</code> | <code>active</code> | <code>closed</code> |
  /// <code>cancelled</code> | <code>failed</code>). Spot request status
  /// information can help you track your Amazon EC2 Spot Instance requests. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot
  /// Request Status</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  /// </li>
  /// <li>
  /// <code>status-code</code> - The short code describing the most recent
  /// evaluation of your Spot Instance request.
  /// </li>
  /// <li>
  /// <code>status-message</code> - The message explaining the status of the
  /// Spot Instance request.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>type</code> - The type of Spot Instance request
  /// (<code>one-time</code> | <code>persistent</code>).
  /// </li>
  /// <li>
  /// <code>valid-from</code> - The start date of the request.
  /// </li>
  /// <li>
  /// <code>valid-until</code> - The end date of the request.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. Specify a value
  /// between 5 and 1000. To retrieve the remaining results, make another call
  /// with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next set of results. This value is
  /// <code>null</code> when there are no more results to return.
  ///
  /// Parameter [spotInstanceRequestIds] :
  /// One or more Spot Instance request IDs.
  Future<DescribeSpotInstanceRequestsResult> describeSpotInstanceRequests({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> spotInstanceRequestIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the Spot price history. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot
  /// Instance Pricing History</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// When you specify a start and end time, this operation returns the prices
  /// of the instance types within the time range that you specified and the
  /// time when the price changed. The price is valid within the time period
  /// that you specified; the response merely indicates the last time that the
  /// price changed.
  ///
  /// Parameter [availabilityZone] :
  /// Filters the results by the specified Availability Zone.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endTime] :
  /// The date and time, up to the current date, from which to stop retrieving
  /// the price history data, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone for which prices
  /// should be returned.
  /// </li>
  /// <li>
  /// <code>instance-type</code> - The type of instance (for example,
  /// <code>m3.medium</code>).
  /// </li>
  /// <li>
  /// <code>product-description</code> - The product description for the Spot
  /// price (<code>Linux/UNIX</code> | <code>SUSE Linux</code> |
  /// <code>Windows</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE
  /// Linux (Amazon VPC)</code> | <code>Windows (Amazon VPC)</code>).
  /// </li>
  /// <li>
  /// <code>spot-price</code> - The Spot price. The value must match exactly (or
  /// use wildcards; greater than or less than comparison is not supported).
  /// </li>
  /// <li>
  /// <code>timestamp</code> - The time stamp of the Spot price history, in UTC
  /// format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). You can
  /// use wildcards (* and ?). Greater than or less than comparison is not
  /// supported.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceTypes] :
  /// Filters the results by the specified instance types.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. Specify a value
  /// between 1 and 1000. The default value is 1000. To retrieve the remaining
  /// results, make another call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of results.
  ///
  /// Parameter [productDescriptions] :
  /// Filters the results by the specified basic product descriptions.
  ///
  /// Parameter [startTime] :
  /// The date and time, up to the past 90 days, from which to start retrieving
  /// the price history data, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  Future<DescribeSpotPriceHistoryResult> describeSpotPriceHistory({
    String availabilityZone,
    bool dryRun,
    DateTime endTime,
    List<Filter> filters,
    List<String> instanceTypes,
    int maxResults,
    String nextToken,
    List<String> productDescriptions,
    DateTime startTime,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// [VPC only] Describes the stale security group rules for security groups in
  /// a specified VPC. Rules are stale when they reference a deleted security
  /// group in a peer VPC, or a security group in a peer VPC for which the VPC
  /// peering connection has been deleted.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. The request
  /// returns a token that you can specify in a subsequent call to get the next
  /// set of results.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of items to return. (You received this token
  /// from a prior call.)
  Future<DescribeStaleSecurityGroupsResult> describeStaleSecurityGroups({
    @_s.required String vpcId,
    bool dryRun,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      1,
      1024,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your subnets.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your
  /// VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone for the subnet. You
  /// can also use <code>availabilityZone</code> as the filter name.
  /// </li>
  /// <li>
  /// <code>availability-zone-id</code> - The ID of the Availability Zone for
  /// the subnet. You can also use <code>availabilityZoneId</code> as the filter
  /// name.
  /// </li>
  /// <li>
  /// <code>available-ip-address-count</code> - The number of IPv4 addresses in
  /// the subnet that are available.
  /// </li>
  /// <li>
  /// <code>cidr-block</code> - The IPv4 CIDR block of the subnet. The CIDR
  /// block you specify must exactly match the subnet's CIDR block for
  /// information to be returned for the subnet. You can also use
  /// <code>cidr</code> or <code>cidrBlock</code> as the filter names.
  /// </li>
  /// <li>
  /// <code>default-for-az</code> - Indicates whether this is the default subnet
  /// for the Availability Zone. You can also use <code>defaultForAz</code> as
  /// the filter name.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR
  /// block associated with the subnet.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.association-id</code> - An association
  /// ID for an IPv6 CIDR block associated with the subnet.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR
  /// block associated with the subnet.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the AWS account that owns the subnet.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the subnet (<code>pending</code> |
  /// <code>available</code>).
  /// </li>
  /// <li>
  /// <code>subnet-arn</code> - The Amazon Resource Name (ARN) of the subnet.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC for the subnet.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [subnetIds] :
  /// One or more subnet IDs.
  ///
  /// Default: Describes all your subnets.
  Future<DescribeSubnetsResult> describeSubnets({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> subnetIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified tags for your EC2 resources.
  ///
  /// For more information about tags, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging
  /// Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>key</code> - The tag key.
  /// </li>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The resource type
  /// (<code>customer-gateway</code> | <code>dedicated-host</code> |
  /// <code>dhcp-options</code> | <code>elastic-ip</code> | <code>fleet</code> |
  /// <code>fpga-image</code> | <code>host-reservation</code> |
  /// <code>image</code> | <code>instance</code> | <code>internet-gateway</code>
  /// | <code>key-pair</code> | <code>launch-template</code> |
  /// <code>natgateway</code> | <code>network-acl</code> |
  /// <code>network-interface</code> | <code>placement-group</code> |
  /// <code>reserved-instances</code> | <code>route-table</code> |
  /// <code>security-group</code> | <code>snapshot</code> |
  /// <code>spot-instances-request</code> | <code>subnet</code> |
  /// <code>volume</code> | <code>vpc</code> | <code>vpc-endpoint</code> |
  /// <code>vpc-endpoint-service</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of the tag. For
  /// example, specify "tag:Owner" for the filter name and "TeamA" for the
  /// filter value to find resources with the tag "Owner=TeamA".
  /// </li>
  /// <li>
  /// <code>value</code> - The tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. This value can
  /// be between 5 and 1000. To retrieve the remaining results, make another
  /// call with the returned <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeTagsResult> describeTags({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more Traffic Mirror filters.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>description</code>: The Traffic Mirror filter description.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror
  /// filter.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [trafficMirrorFilterIds] :
  /// The ID of the Traffic Mirror filter.
  Future<DescribeTrafficMirrorFiltersResult> describeTrafficMirrorFilters({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> trafficMirrorFilterIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more Traffic Mirror sessions. By default, all Traffic
  /// Mirror sessions are described. Alternatively, you can filter the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>description</code>: The Traffic Mirror session description.
  /// </li>
  /// <li>
  /// <code>network-interface-id</code>: The ID of the Traffic Mirror session
  /// network interface.
  /// </li>
  /// <li>
  /// <code>owner-id</code>: The ID of the account that owns the Traffic Mirror
  /// session.
  /// </li>
  /// <li>
  /// <code>packet-length</code>: The assigned number of packets to mirror.
  /// </li>
  /// <li>
  /// <code>session-number</code>: The assigned session number.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror
  /// filter.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-session-id</code>: The ID of the Traffic Mirror
  /// session.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror
  /// target.
  /// </li>
  /// <li>
  /// <code>virtual-network-id</code>: The virtual network ID of the Traffic
  /// Mirror session.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [trafficMirrorSessionIds] :
  /// The ID of the Traffic Mirror session.
  Future<DescribeTrafficMirrorSessionsResult> describeTrafficMirrorSessions({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> trafficMirrorSessionIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Information about one or more Traffic Mirror targets.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>description</code>: The Traffic Mirror target description.
  /// </li>
  /// <li>
  /// <code>network-interface-id</code>: The ID of the Traffic Mirror session
  /// network interface.
  /// </li>
  /// <li>
  /// <code>network-load-balancer-arn</code>: The Amazon Resource Name (ARN) of
  /// the Network Load Balancer that is associated with the session.
  /// </li>
  /// <li>
  /// <code>owner-id</code>: The ID of the account that owns the Traffic Mirror
  /// session.
  /// </li>
  /// <li>
  /// <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror
  /// target.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [trafficMirrorTargetIds] :
  /// The ID of the Traffic Mirror targets.
  Future<DescribeTrafficMirrorTargetsResult> describeTrafficMirrorTargets({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> trafficMirrorTargetIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more attachments between resources and transit gateways.
  /// By default, all attachments are described. Alternatively, you can filter
  /// the results by attachment ID, attachment state, resource ID, or resource
  /// owner.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>association.state</code> - The state of the association
  /// (<code>associating</code> | <code>associated</code> |
  /// <code>disassociating</code>).
  /// </li>
  /// <li>
  /// <code>association.transit-gateway-route-table-id</code> - The ID of the
  /// route table for the transit gateway.
  /// </li>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-owner-id</code> - The ID of the AWS account that owns the
  /// resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The resource type (<code>vpc</code> |
  /// <code>vpn</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the attachment (<code>available</code> |
  /// <code>deleted</code> | <code>deleting</code> | <code>failed</code> |
  /// <code>modifying</code> | <code>pendingAcceptance</code> |
  /// <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> |
  /// <code>rejecting</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the attachment.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>transit-gateway-owner-id</code> - The ID of the AWS account that
  /// owns the transit gateway.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayAttachmentIds] :
  /// The IDs of the attachments.
  Future<DescribeTransitGatewayAttachmentsResult>
      describeTransitGatewayAttachments({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> transitGatewayAttachmentIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more transit gateway multicast domains.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>state</code> - The state of the transit gateway multicast domain.
  /// Valid values are <code>pending</code> | <code>available</code> |
  /// <code>deleting</code> | <code>deleted</code>.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>transit-gateway-multicast-domain-id</code> - The ID of the transit
  /// gateway multicast domain.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayMulticastDomainIds] :
  /// The ID of the transit gateway multicast domain.
  Future<DescribeTransitGatewayMulticastDomainsResult>
      describeTransitGatewayMulticastDomains({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> transitGatewayMulticastDomainIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes your transit gateway peering attachments.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the transit gateway
  /// attachment.
  /// </li>
  /// <li>
  /// <code>local-owner-id</code> - The ID of your AWS account.
  /// </li>
  /// <li>
  /// <code>remote-owner-id</code> - The ID of the AWS account in the remote
  /// Region that owns the transit gateway.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the peering attachment
  /// (<code>available</code> | <code>deleted</code> | <code>deleting</code> |
  /// <code>failed</code> | <code>modifying</code> |
  /// <code>pendingAcceptance</code> | <code>pending</code> |
  /// <code>rollingBack</code> | <code>rejected</code> |
  /// <code>rejecting</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayAttachmentIds] :
  /// One or more IDs of the transit gateway peering attachments.
  Future<DescribeTransitGatewayPeeringAttachmentsResult>
      describeTransitGatewayPeeringAttachments({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> transitGatewayAttachmentIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more transit gateway route tables. By default, all
  /// transit gateway route tables are described. Alternatively, you can filter
  /// the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>default-association-route-table</code> - Indicates whether this is
  /// the default association route table for the transit gateway
  /// (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>default-propagation-route-table</code> - Indicates whether this is
  /// the default propagation route table for the transit gateway
  /// (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the attachment (<code>available</code> |
  /// <code>deleted</code> | <code>deleting</code> | <code>failed</code> |
  /// <code>modifying</code> | <code>pendingAcceptance</code> |
  /// <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> |
  /// <code>rejecting</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>transit-gateway-route-table-id</code> - The ID of the transit
  /// gateway route table.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayRouteTableIds] :
  /// The IDs of the transit gateway route tables.
  Future<DescribeTransitGatewayRouteTablesResult>
      describeTransitGatewayRouteTables({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> transitGatewayRouteTableIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more VPC attachments. By default, all VPC attachments are
  /// described. Alternatively, you can filter the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>state</code> - The state of the attachment (<code>available</code> |
  /// <code>deleted</code> | <code>deleting</code> | <code>failed</code> |
  /// <code>modifying</code> | <code>pendingAcceptance</code> |
  /// <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> |
  /// <code>rejecting</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the attachment.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayAttachmentIds] :
  /// The IDs of the attachments.
  Future<DescribeTransitGatewayVpcAttachmentsResult>
      describeTransitGatewayVpcAttachments({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> transitGatewayAttachmentIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more transit gateways. By default, all transit gateways
  /// are described. Alternatively, you can filter the results.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>options.propagation-default-route-table-id</code> - The ID of the
  /// default propagation route table.
  /// </li>
  /// <li>
  /// <code>options.amazon-side-asn</code> - The private ASN for the Amazon side
  /// of a BGP session.
  /// </li>
  /// <li>
  /// <code>options.association-default-route-table-id</code> - The ID of the
  /// default association route table.
  /// </li>
  /// <li>
  /// <code>options.auto-accept-shared-attachments</code> - Indicates whether
  /// there is automatic acceptance of attachment requests (<code>enable</code>
  /// | <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>options.default-route-table-association</code> - Indicates whether
  /// resource attachments are automatically associated with the default
  /// association route table (<code>enable</code> | <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>options.default-route-table-propagation</code> - Indicates whether
  /// resource attachments automatically propagate routes to the default
  /// propagation route table (<code>enable</code> | <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>options.dns-support</code> - Indicates whether DNS support is
  /// enabled (<code>enable</code> | <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>options.vpn-ecmp-support</code> - Indicates whether Equal Cost
  /// Multipath Protocol support is enabled (<code>enable</code> |
  /// <code>disable</code>).
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the AWS account that owns the transit
  /// gateway.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the attachment (<code>available</code> |
  /// <code>deleted</code> | <code>deleting</code> | <code>failed</code> |
  /// <code>modifying</code> | <code>pendingAcceptance</code> |
  /// <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> |
  /// <code>rejecting</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of the transit gateway.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayIds] :
  /// The IDs of the transit gateways.
  Future<DescribeTransitGatewaysResult> describeTransitGateways({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> transitGatewayIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified volume. You can specify
  /// only one attribute at a time.
  ///
  /// For more information about EBS volumes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon
  /// EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [attribute] :
  /// The attribute of the volume. This parameter is required.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeVolumeAttributeResult> describeVolumeAttribute({
    @_s.required VolumeAttributeName attribute,
    @_s.required String volumeId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(attribute, 'attribute');
    ArgumentError.checkNotNull(volumeId, 'volumeId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the status of the specified volumes. Volume status provides the
  /// result of the checks performed on your volumes to determine events that
  /// can impair the performance of your volumes. The performance of a volume
  /// can be affected if an issue occurs on the volume's underlying host. If the
  /// volume's underlying host experiences a power outage or system issue, after
  /// the system is restored, there could be data inconsistencies on the volume.
  /// Volume events notify you if this occurs. Volume actions notify you if any
  /// action needs to be taken in response to the event.
  ///
  /// The <code>DescribeVolumeStatus</code> operation provides the following
  /// information about the specified volumes:
  ///
  /// <i>Status</i>: Reflects the current status of the volume. The possible
  /// values are <code>ok</code>, <code>impaired</code> , <code>warning</code>,
  /// or <code>insufficient-data</code>. If all checks pass, the overall status
  /// of the volume is <code>ok</code>. If the check fails, the overall status
  /// is <code>impaired</code>. If the status is <code>insufficient-data</code>,
  /// then the checks may still be taking place on your volume at the time. We
  /// recommend that you retry the request. For more information about volume
  /// status, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html">Monitoring
  /// the Status of Your Volumes</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// <i>Events</i>: Reflect the cause of a volume status and may require you to
  /// take action. For example, if your volume returns an <code>impaired</code>
  /// status, then the volume event might be
  /// <code>potential-data-inconsistency</code>. This means that your volume has
  /// been affected by an issue with the underlying host, has all I/O operations
  /// disabled, and may have inconsistent data.
  ///
  /// <i>Actions</i>: Reflect the actions you may have to take in response to an
  /// event. For example, if the status of the volume is <code>impaired</code>
  /// and the volume event shows <code>potential-data-inconsistency</code>, then
  /// the action shows <code>enable-volume-io</code>. This means that you may
  /// want to enable the I/O operations for the volume by calling the
  /// <a>EnableVolumeIO</a> action and then check the volume for data
  /// consistency.
  ///
  /// Volume status is based on the volume status checks, and does not reflect
  /// the volume state. Therefore, volume status does not indicate volumes in
  /// the <code>error</code> state (for example, when a volume is incapable of
  /// accepting I/O.)
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>action.code</code> - The action code for the event (for example,
  /// <code>enable-volume-io</code>).
  /// </li>
  /// <li>
  /// <code>action.description</code> - A description of the action.
  /// </li>
  /// <li>
  /// <code>action.event-id</code> - The event ID associated with the action.
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone of the instance.
  /// </li>
  /// <li>
  /// <code>event.description</code> - A description of the event.
  /// </li>
  /// <li>
  /// <code>event.event-id</code> - The event ID.
  /// </li>
  /// <li>
  /// <code>event.event-type</code> - The event type (for
  /// <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for
  /// <code>io-performance</code>: <code>io-performance:degraded</code> |
  /// <code>io-performance:severely-degraded</code> |
  /// <code>io-performance:stalled</code>).
  /// </li>
  /// <li>
  /// <code>event.not-after</code> - The latest end time for the event.
  /// </li>
  /// <li>
  /// <code>event.not-before</code> - The earliest start time for the event.
  /// </li>
  /// <li>
  /// <code>volume-status.details-name</code> - The cause for
  /// <code>volume-status.status</code> (<code>io-enabled</code> |
  /// <code>io-performance</code>).
  /// </li>
  /// <li>
  /// <code>volume-status.details-status</code> - The status of
  /// <code>volume-status.details-name</code> (for <code>io-enabled</code>:
  /// <code>passed</code> | <code>failed</code>; for
  /// <code>io-performance</code>: <code>normal</code> | <code>degraded</code> |
  /// <code>severely-degraded</code> | <code>stalled</code>).
  /// </li>
  /// <li>
  /// <code>volume-status.status</code> - The status of the volume
  /// (<code>ok</code> | <code>impaired</code> | <code>warning</code> |
  /// <code>insufficient-data</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of volume results returned by
  /// <code>DescribeVolumeStatus</code> in paginated output. When this parameter
  /// is used, the request only returns <code>MaxResults</code> results in a
  /// single page along with a <code>NextToken</code> response element. The
  /// remaining results of the initial request can be seen by sending another
  /// request with the returned <code>NextToken</code> value. This value can be
  /// between 5 and 1000; if <code>MaxResults</code> is given a value larger
  /// than 1000, only 1000 results are returned. If this parameter is not used,
  /// then <code>DescribeVolumeStatus</code> returns all results. You cannot
  /// specify this parameter and the volume IDs parameter in the same request.
  ///
  /// Parameter [nextToken] :
  /// The <code>NextToken</code> value to include in a future
  /// <code>DescribeVolumeStatus</code> request. When the results of the request
  /// exceed <code>MaxResults</code>, this value can be used to retrieve the
  /// next page of results. This value is <code>null</code> when there are no
  /// more results to return.
  ///
  /// Parameter [volumeIds] :
  /// The IDs of the volumes.
  ///
  /// Default: Describes all your volumes.
  Future<DescribeVolumeStatusResult> describeVolumeStatus({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> volumeIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified EBS volumes or all of your EBS volumes.
  ///
  /// If you are describing a long list of volumes, you can paginate the output
  /// to make the list more manageable. The <code>MaxResults</code> parameter
  /// sets the maximum number of results returned in a single page. If the list
  /// of results exceeds your <code>MaxResults</code> value, then that number of
  /// results is returned along with a <code>NextToken</code> value that can be
  /// passed to a subsequent <code>DescribeVolumes</code> request to retrieve
  /// the remaining results.
  ///
  /// For more information about EBS volumes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon
  /// EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters.
  ///
  /// <ul>
  /// <li>
  /// <code>attachment.attach-time</code> - The time stamp when the attachment
  /// initiated.
  /// </li>
  /// <li>
  /// <code>attachment.delete-on-termination</code> - Whether the volume is
  /// deleted on instance termination.
  /// </li>
  /// <li>
  /// <code>attachment.device</code> - The device name specified in the block
  /// device mapping (for example, <code>/dev/sda1</code>).
  /// </li>
  /// <li>
  /// <code>attachment.instance-id</code> - The ID of the instance the volume is
  /// attached to.
  /// </li>
  /// <li>
  /// <code>attachment.status</code> - The attachment state
  /// (<code>attaching</code> | <code>attached</code> | <code>detaching</code>).
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone in which the volume
  /// was created.
  /// </li>
  /// <li>
  /// <code>create-time</code> - The time stamp when the volume was created.
  /// </li>
  /// <li>
  /// <code>encrypted</code> - Indicates whether the volume is encrypted
  /// (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>multi-attach-enabled</code> - Indicates whether the volume is
  /// enabled for Multi-Attach (<code>true</code> | <code>false</code>)
  /// </li>
  /// <li>
  /// <code>fast-restored</code> - Indicates whether the volume was created from
  /// a snapshot that is enabled for fast snapshot restore (<code>true</code> |
  /// <code>false</code>).
  /// </li>
  /// <li>
  /// <code>size</code> - The size of the volume, in GiB.
  /// </li>
  /// <li>
  /// <code>snapshot-id</code> - The snapshot from which the volume was created.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the volume (<code>creating</code> |
  /// <code>available</code> | <code>in-use</code> | <code>deleting</code> |
  /// <code>deleted</code> | <code>error</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>volume-id</code> - The volume ID.
  /// </li>
  /// <li>
  /// <code>volume-type</code> - The Amazon EBS volume type. This can be
  /// <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned
  /// IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>
  /// for Cold HDD, or <code>standard</code> for Magnetic volumes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of volume results returned by
  /// <code>DescribeVolumes</code> in paginated output. When this parameter is
  /// used, <code>DescribeVolumes</code> only returns <code>MaxResults</code>
  /// results in a single page along with a <code>NextToken</code> response
  /// element. The remaining results of the initial request can be seen by
  /// sending another <code>DescribeVolumes</code> request with the returned
  /// <code>NextToken</code> value. This value can be between 5 and 500; if
  /// <code>MaxResults</code> is given a value larger than 500, only 500 results
  /// are returned. If this parameter is not used, then
  /// <code>DescribeVolumes</code> returns all results. You cannot specify this
  /// parameter and the volume IDs parameter in the same request.
  ///
  /// Parameter [nextToken] :
  /// The <code>NextToken</code> value returned from a previous paginated
  /// <code>DescribeVolumes</code> request where <code>MaxResults</code> was
  /// used and the results exceeded the value of that parameter. Pagination
  /// continues from the end of the previous results that returned the
  /// <code>NextToken</code> value. This value is <code>null</code> when there
  /// are no more results to return.
  ///
  /// Parameter [volumeIds] :
  /// The volume IDs.
  Future<DescribeVolumesResult> describeVolumes({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> volumeIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Reports the current modification status of EBS volumes.
  ///
  /// Current-generation EBS volumes support modification of attributes
  /// including type, size, and (for <code>io1</code> volumes) IOPS provisioning
  /// while either attached to or detached from an instance. Following an action
  /// from the API or the console to modify a volume, the status of the
  /// modification may be <code>modifying</code>, <code>optimizing</code>,
  /// <code>completed</code>, or <code>failed</code>. If a volume has never been
  /// modified, then certain elements of the returned
  /// <code>VolumeModification</code> objects are null.
  ///
  /// You can also use CloudWatch Events to check the status of a modification
  /// to an EBS volume. For information about CloudWatch Events, see the <a
  /// href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon
  /// CloudWatch Events User Guide</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring
  /// Volume Modifications"</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. Supported filters: <code>volume-id</code> |
  /// <code>modification-state</code> | <code>target-size</code> |
  /// <code>target-iops</code> | <code>target-volume-type</code> |
  /// <code>original-size</code> | <code>original-iops</code> |
  /// <code>original-volume-type</code> | <code>start-time</code> |
  /// <code>originalMultiAttachEnabled</code> |
  /// <code>targetMultiAttachEnabled</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results (up to a limit of 500) to be returned in a
  /// paginated request.
  ///
  /// Parameter [nextToken] :
  /// The <code>nextToken</code> value returned by a previous paginated request.
  ///
  /// Parameter [volumeIds] :
  /// The IDs of the volumes for which in-progress modifications will be
  /// described.
  Future<DescribeVolumesModificationsResult> describeVolumesModifications({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> volumeIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the specified attribute of the specified VPC. You can specify
  /// only one attribute at a time.
  ///
  /// Parameter [attribute] :
  /// The VPC attribute.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DescribeVpcAttributeResult> describeVpcAttribute({
    @_s.required VpcAttributeName attribute,
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(attribute, 'attribute');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the ClassicLink status of one or more VPCs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>is-classic-link-enabled</code> - Whether the VPC is enabled for
  /// ClassicLink (<code>true</code> | <code>false</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [vpcIds] :
  /// One or more VPCs for which you want to describe the ClassicLink status.
  Future<DescribeVpcClassicLinkResult> describeVpcClassicLink({
    bool dryRun,
    List<Filter> filters,
    List<String> vpcIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the ClassicLink DNS support status of one or more VPCs. If
  /// enabled, the DNS hostname of a linked EC2-Classic instance resolves to its
  /// private IP address when addressed from an instance in the VPC to which
  /// it's linked. Similarly, the DNS hostname of an instance in a VPC resolves
  /// to its private IP address when addressed from a linked EC2-Classic
  /// instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a>
  /// in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [vpcIds] :
  /// One or more VPC IDs.
  Future<DescribeVpcClassicLinkDnsSupportResult>
      describeVpcClassicLinkDnsSupport({
    int maxResults,
    String nextToken,
    List<String> vpcIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      255,
    );
    _s.validateStringLength(
      'nextToken',
      nextToken,
      1,
      1024,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the connection notifications for VPC endpoints and VPC endpoint
  /// services.
  ///
  /// Parameter [connectionNotificationId] :
  /// The ID of the notification.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>connection-notification-arn</code> - The ARN of the SNS topic for
  /// the notification.
  /// </li>
  /// <li>
  /// <code>connection-notification-id</code> - The ID of the notification.
  /// </li>
  /// <li>
  /// <code>connection-notification-state</code> - The state of the notification
  /// (<code>Enabled</code> | <code>Disabled</code>).
  /// </li>
  /// <li>
  /// <code>connection-notification-type</code> - The type of notification
  /// (<code>Topic</code>).
  /// </li>
  /// <li>
  /// <code>service-id</code> - The ID of the endpoint service.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-id</code> - The ID of the VPC endpoint.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return in a single call. To retrieve the
  /// remaining results, make another request with the returned
  /// <code>NextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token to request the next page of results.
  Future<DescribeVpcEndpointConnectionNotificationsResult>
      describeVpcEndpointConnectionNotifications({
    String connectionNotificationId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the VPC endpoint connections to your VPC endpoint services,
  /// including any endpoints that are pending your acceptance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>service-id</code> - The ID of the service.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-owner</code> - The AWS account number of the owner of
  /// the endpoint.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-state</code> - The state of the endpoint
  /// (<code>pendingAcceptance</code> | <code>pending</code> |
  /// <code>available</code> | <code>deleting</code> | <code>deleted</code> |
  /// <code>rejected</code> | <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-id</code> - The ID of the endpoint.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. This value
  /// can be between 5 and 1,000; if <code>MaxResults</code> is given a value
  /// larger than 1,000, only 1,000 results are returned.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeVpcEndpointConnectionsResult> describeVpcEndpointConnections({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the VPC endpoint service configurations in your account (your
  /// services).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>service-name</code> - The name of the service.
  /// </li>
  /// <li>
  /// <code>service-id</code> - The ID of the service.
  /// </li>
  /// <li>
  /// <code>service-state</code> - The state of the service
  /// (<code>Pending</code> | <code>Available</code> | <code>Deleting</code> |
  /// <code>Deleted</code> | <code>Failed</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. This value
  /// can be between 5 and 1,000; if <code>MaxResults</code> is given a value
  /// larger than 1,000, only 1,000 results are returned.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  ///
  /// Parameter [serviceIds] :
  /// The IDs of one or more services.
  Future<DescribeVpcEndpointServiceConfigurationsResult>
      describeVpcEndpointServiceConfigurations({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> serviceIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the principals (service consumers) that are permitted to
  /// discover your VPC endpoint service.
  ///
  /// Parameter [serviceId] :
  /// The ID of the service.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>principal</code> - The ARN of the principal.
  /// </li>
  /// <li>
  /// <code>principal-type</code> - The principal type (<code>All</code> |
  /// <code>Service</code> | <code>OrganizationUnit</code> |
  /// <code>Account</code> | <code>User</code> | <code>Role</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results of the initial request can be seen by sending
  /// another request with the returned <code>NextToken</code> value. This value
  /// can be between 5 and 1,000; if <code>MaxResults</code> is given a value
  /// larger than 1,000, only 1,000 results are returned.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<DescribeVpcEndpointServicePermissionsResult>
      describeVpcEndpointServicePermissions({
    @_s.required String serviceId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(serviceId, 'serviceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes available services to which you can create a VPC endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>service-name</code> - The name of the service.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. The request
  /// returns a token that you can specify in a subsequent call to get the next
  /// set of results.
  ///
  /// Constraint: If the value is greater than 1,000, we return only 1,000
  /// items.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of items to return. (You received this token
  /// from a prior call.)
  ///
  /// Parameter [serviceNames] :
  /// One or more service names.
  Future<DescribeVpcEndpointServicesResult> describeVpcEndpointServices({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> serviceNames,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your VPC endpoints.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>service-name</code> - The name of the service.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC in which the endpoint resides.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-id</code> - The ID of the endpoint.
  /// </li>
  /// <li>
  /// <code>vpc-endpoint-state</code> - The state of the endpoint
  /// (<code>pendingAcceptance</code> | <code>pending</code> |
  /// <code>available</code> | <code>deleting</code> | <code>deleted</code> |
  /// <code>rejected</code> | <code>failed</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of items to return for this request. The request
  /// returns a token that you can specify in a subsequent call to get the next
  /// set of results.
  ///
  /// Constraint: If the value is greater than 1,000, we return only 1,000
  /// items.
  ///
  /// Parameter [nextToken] :
  /// The token for the next set of items to return. (You received this token
  /// from a prior call.)
  ///
  /// Parameter [vpcEndpointIds] :
  /// One or more endpoint IDs.
  Future<DescribeVpcEndpointsResult> describeVpcEndpoints({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> vpcEndpointIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your VPC peering connections.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>accepter-vpc-info.cidr-block</code> - The IPv4 CIDR block of the
  /// accepter VPC.
  /// </li>
  /// <li>
  /// <code>accepter-vpc-info.owner-id</code> - The AWS account ID of the owner
  /// of the accepter VPC.
  /// </li>
  /// <li>
  /// <code>accepter-vpc-info.vpc-id</code> - The ID of the accepter VPC.
  /// </li>
  /// <li>
  /// <code>expiration-time</code> - The expiration date and time for the VPC
  /// peering connection.
  /// </li>
  /// <li>
  /// <code>requester-vpc-info.cidr-block</code> - The IPv4 CIDR block of the
  /// requester's VPC.
  /// </li>
  /// <li>
  /// <code>requester-vpc-info.owner-id</code> - The AWS account ID of the owner
  /// of the requester VPC.
  /// </li>
  /// <li>
  /// <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.
  /// </li>
  /// <li>
  /// <code>status-code</code> - The status of the VPC peering connection
  /// (<code>pending-acceptance</code> | <code>failed</code> |
  /// <code>expired</code> | <code>provisioning</code> | <code>active</code> |
  /// <code>deleting</code> | <code>deleted</code> | <code>rejected</code>).
  /// </li>
  /// <li>
  /// <code>status-message</code> - A message that provides more information
  /// about the status of the VPC peering connection, if applicable.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-peering-connection-id</code> - The ID of the VPC peering
  /// connection.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [vpcPeeringConnectionIds] :
  /// One or more VPC peering connection IDs.
  ///
  /// Default: Describes all your VPC peering connections.
  Future<DescribeVpcPeeringConnectionsResult> describeVpcPeeringConnections({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> vpcPeeringConnectionIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your VPCs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>cidr</code> - The primary IPv4 CIDR block of the VPC. The CIDR block
  /// you specify must exactly match the VPC's CIDR block for information to be
  /// returned for the VPC. Must contain the slash followed by one or two digits
  /// (for example, <code>/28</code>).
  /// </li>
  /// <li>
  /// <code>cidr-block-association.cidr-block</code> - An IPv4 CIDR block
  /// associated with the VPC.
  /// </li>
  /// <li>
  /// <code>cidr-block-association.association-id</code> - The association ID
  /// for an IPv4 CIDR block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>cidr-block-association.state</code> - The state of an IPv4 CIDR
  /// block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>dhcp-options-id</code> - The ID of a set of DHCP options.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR
  /// block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.ipv6-pool</code> - The ID of the IPv6
  /// address pool from which the IPv6 CIDR block is allocated.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.association-id</code> - The association
  /// ID for an IPv6 CIDR block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR
  /// block associated with the VPC.
  /// </li>
  /// <li>
  /// <code>isDefault</code> - Indicates whether the VPC is the default VPC.
  /// </li>
  /// <li>
  /// <code>owner-id</code> - The ID of the AWS account that owns the VPC.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the VPC (<code>pending</code> |
  /// <code>available</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>vpc-id</code> - The ID of the VPC.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [vpcIds] :
  /// One or more VPC IDs.
  ///
  /// Default: Describes all your VPCs.
  Future<DescribeVpcsResult> describeVpcs({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    List<String> vpcIds,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your VPN connections.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS
  /// Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>customer-gateway-configuration</code> - The configuration
  /// information for the customer gateway.
  /// </li>
  /// <li>
  /// <code>customer-gateway-id</code> - The ID of a customer gateway associated
  /// with the VPN connection.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the VPN connection (<code>pending</code>
  /// | <code>available</code> | <code>deleting</code> | <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>option.static-routes-only</code> - Indicates whether the connection
  /// has static routes only. Used for devices that do not support Border
  /// Gateway Protocol (BGP).
  /// </li>
  /// <li>
  /// <code>route.destination-cidr-block</code> - The destination CIDR block.
  /// This corresponds to the subnet used in a customer data center.
  /// </li>
  /// <li>
  /// <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated
  /// with a BGP device.
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>type</code> - The type of VPN connection. Currently the only
  /// supported type is <code>ipsec.1</code>.
  /// </li>
  /// <li>
  /// <code>vpn-connection-id</code> - The ID of the VPN connection.
  /// </li>
  /// <li>
  /// <code>vpn-gateway-id</code> - The ID of a virtual private gateway
  /// associated with the VPN connection.
  /// </li>
  /// <li>
  /// <code>transit-gateway-id</code> - The ID of a transit gateway associated
  /// with the VPN connection.
  /// </li>
  /// </ul>
  ///
  /// Parameter [vpnConnectionIds] :
  /// One or more VPN connection IDs.
  ///
  /// Default: Describes your VPN connections.
  Future<DescribeVpnConnectionsResult> describeVpnConnections({
    bool dryRun,
    List<Filter> filters,
    List<String> vpnConnectionIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes one or more of your virtual private gateways.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS
  /// Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// <ul>
  /// <li>
  /// <code>amazon-side-asn</code> - The Autonomous System Number (ASN) for the
  /// Amazon side of the gateway.
  /// </li>
  /// <li>
  /// <code>attachment.state</code> - The current state of the attachment
  /// between the gateway and the VPC (<code>attaching</code> |
  /// <code>attached</code> | <code>detaching</code> | <code>detached</code>).
  /// </li>
  /// <li>
  /// <code>attachment.vpc-id</code> - The ID of an attached VPC.
  /// </li>
  /// <li>
  /// <code>availability-zone</code> - The Availability Zone for the virtual
  /// private gateway (if applicable).
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the virtual private gateway
  /// (<code>pending</code> | <code>available</code> | <code>deleting</code> |
  /// <code>deleted</code>).
  /// </li>
  /// <li>
  /// <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned
  /// to the resource. Use the tag key in the filter name and the tag value as
  /// the filter value. For example, to find all resources that have a tag with
  /// the key <code>Owner</code> and the value <code>TeamA</code>, specify
  /// <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the
  /// filter value.
  /// </li>
  /// <li>
  /// <code>tag-key</code> - The key of a tag assigned to the resource. Use this
  /// filter to find all resources assigned a tag with a specific key,
  /// regardless of the tag value.
  /// </li>
  /// <li>
  /// <code>type</code> - The type of virtual private gateway. Currently the
  /// only supported type is <code>ipsec.1</code>.
  /// </li>
  /// <li>
  /// <code>vpn-gateway-id</code> - The ID of the virtual private gateway.
  /// </li>
  /// </ul>
  ///
  /// Parameter [vpnGatewayIds] :
  /// One or more virtual private gateway IDs.
  ///
  /// Default: Describes all your virtual private gateways.
  Future<DescribeVpnGatewaysResult> describeVpnGateways({
    bool dryRun,
    List<Filter> filters,
    List<String> vpnGatewayIds,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the
  /// instance has been unlinked, the VPC security groups are no longer
  /// associated with it. An instance is automatically unlinked from a VPC when
  /// it's stopped.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance to unlink from the VPC.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC to which the instance is linked.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DetachClassicLinkVpcResult> detachClassicLinkVpc({
    @_s.required String instanceId,
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Detaches an internet gateway from a VPC, disabling connectivity between
  /// the internet and the VPC. The VPC must not contain any running instances
  /// with Elastic IP addresses or public IPv4 addresses.
  ///
  /// Parameter [internetGatewayId] :
  /// The ID of the internet gateway.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> detachInternetGateway({
    @_s.required String internetGatewayId,
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(internetGatewayId, 'internetGatewayId');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Detaches a network interface from an instance.
  ///
  /// Parameter [attachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [force] :
  /// Specifies whether to force a detachment.
  /// <note>
  /// <ul>
  /// <li>
  /// Use the <code>Force</code> parameter only as a last resort to detach a
  /// network interface from a failed instance.
  /// </li>
  /// <li>
  /// If you use the <code>Force</code> parameter to detach a network interface,
  /// you might not be able to attach a different network interface to the same
  /// index on the instance without first stopping and starting the instance.
  /// </li>
  /// <li>
  /// If you force the detachment of a network interface, the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">instance
  /// metadata</a> might not get updated. This means that the attributes
  /// associated with the detached network interface might still be visible. The
  /// instance metadata will get updated when you stop and start the instance.
  /// </li>
  /// </ul> </note>
  Future<void> detachNetworkInterface({
    @_s.required String attachmentId,
    bool dryRun,
    bool force,
  }) async {
    ArgumentError.checkNotNull(attachmentId, 'attachmentId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Detaches an EBS volume from an instance. Make sure to unmount any file
  /// systems on the device within your operating system before detaching the
  /// volume. Failure to do so can result in the volume becoming stuck in the
  /// <code>busy</code> state while detaching. If this happens, detachment can
  /// be delayed indefinitely until you unmount the volume, force detachment,
  /// reboot the instance, or all three. If an EBS volume is the root device of
  /// an instance, it can't be detached while the instance is running. To detach
  /// the root volume, stop the instance first.
  ///
  /// When a volume with an AWS Marketplace product code is detached from an
  /// instance, the product code is no longer associated with the instance.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html">Detaching
  /// an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [device] :
  /// The device name.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [force] :
  /// Forces detachment if the previous detachment attempt did not occur cleanly
  /// (for example, logging into an instance, unmounting the volume, and
  /// detaching normally). This option can lead to data loss or a corrupted file
  /// system. Use this option only as a last resort to detach a volume from a
  /// failed instance. The instance won't have an opportunity to flush file
  /// system caches or file system metadata. If you use this option, you must
  /// perform file system check and repair procedures.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance. If you are detaching a Multi-Attach enabled
  /// volume, you must specify an instance ID.
  Future<VolumeAttachment> detachVolume({
    @_s.required String volumeId,
    String device,
    bool dryRun,
    bool force,
    String instanceId,
  }) async {
    ArgumentError.checkNotNull(volumeId, 'volumeId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Detaches a virtual private gateway from a VPC. You do this if you're
  /// planning to turn off the VPC and not use it anymore. You can confirm a
  /// virtual private gateway has been completely detached from a VPC by
  /// describing the virtual private gateway (any attachments to the virtual
  /// private gateway are also described).
  ///
  /// You must wait for the attachment's state to switch to
  /// <code>detached</code> before you can delete the VPC or attach a different
  /// VPC to the virtual private gateway.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> detachVpnGateway({
    @_s.required String vpcId,
    @_s.required String vpnGatewayId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
    ArgumentError.checkNotNull(vpnGatewayId, 'vpnGatewayId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables EBS encryption by default for your account in the current Region.
  ///
  /// After you disable encryption by default, you can still create encrypted
  /// volumes by enabling encryption when you create each volume.
  ///
  /// Disabling encryption by default does not change the encryption status of
  /// your existing volumes.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableEbsEncryptionByDefaultResult> disableEbsEncryptionByDefault({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables fast snapshot restores for the specified snapshots in the
  /// specified Availability Zones.
  ///
  /// Parameter [availabilityZones] :
  /// One or more Availability Zones. For example, <code>us-east-2a</code>.
  ///
  /// Parameter [sourceSnapshotIds] :
  /// The IDs of one or more snapshots. For example,
  /// <code>snap-1234567890abcdef0</code>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableFastSnapshotRestoresResult> disableFastSnapshotRestores({
    @_s.required List<String> availabilityZones,
    @_s.required List<String> sourceSnapshotIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(availabilityZones, 'availabilityZones');
    ArgumentError.checkNotNull(sourceSnapshotIds, 'sourceSnapshotIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables the specified resource attachment from propagating routes to the
  /// specified propagation route table.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the propagation route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableTransitGatewayRouteTablePropagationResult>
      disableTransitGatewayRouteTablePropagation({
    @_s.required String transitGatewayAttachmentId,
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables a virtual private gateway (VGW) from propagating routes to a
  /// specified route table of a VPC.
  ///
  /// Parameter [gatewayId] :
  /// The ID of the virtual private gateway.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> disableVgwRoutePropagation({
    @_s.required String gatewayId,
    @_s.required String routeTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(gatewayId, 'gatewayId');
    ArgumentError.checkNotNull(routeTableId, 'routeTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC
  /// that has EC2-Classic instances linked to it.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisableVpcClassicLinkResult> disableVpcClassicLink({
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames
  /// resolve to public IP addresses when addressed between a linked EC2-Classic
  /// instance and instances in the VPC to which it's linked. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a>
  /// in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  Future<DisableVpcClassicLinkDnsSupportResult>
      disableVpcClassicLinkDnsSupport({
    String vpcId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates an Elastic IP address from the instance or network interface
  /// it's associated with.
  ///
  /// An Elastic IP address is for use in either the EC2-Classic platform or in
  /// a VPC. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic
  /// IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// This is an idempotent operation. If you perform the operation more than
  /// once, Amazon EC2 doesn't return an error.
  ///
  /// Parameter [associationId] :
  /// [EC2-VPC] The association ID. Required for EC2-VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [publicIp] :
  /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
  Future<void> disassociateAddress({
    String associationId,
    bool dryRun,
    String publicIp,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a target network from the specified Client VPN endpoint.
  /// When you disassociate the last target network from a Client VPN, the
  /// following happens:
  ///
  /// <ul>
  /// <li>
  /// The route that was automatically added for the VPC is deleted
  /// </li>
  /// <li>
  /// All active client connections are terminated
  /// </li>
  /// <li>
  /// New client connections are disallowed
  /// </li>
  /// <li>
  /// The Client VPN endpoint's status changes to <code>pending-associate</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [associationId] :
  /// The ID of the target network association.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint from which to disassociate the target
  /// network.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateClientVpnTargetNetworkResult>
      disassociateClientVpnTargetNetwork({
    @_s.required String associationId,
    @_s.required String clientVpnEndpointId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(associationId, 'associationId');
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates an IAM instance profile from a running or stopped instance.
  ///
  /// Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
  /// ID.
  ///
  /// Parameter [associationId] :
  /// The ID of the IAM instance profile association.
  Future<DisassociateIamInstanceProfileResult> disassociateIamInstanceProfile({
    @_s.required String associationId,
  }) async {
    ArgumentError.checkNotNull(associationId, 'associationId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a subnet from a route table.
  ///
  /// After you perform this action, the subnet no longer uses the routes in the
  /// route table. Instead, it uses the routes in the VPC's main route table.
  /// For more information about route tables, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [associationId] :
  /// The association ID representing the current association between the route
  /// table and subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> disassociateRouteTable({
    @_s.required String associationId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(associationId, 'associationId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a CIDR block from a subnet. Currently, you can disassociate
  /// an IPv6 CIDR block only. You must detach or delete all gateways and
  /// resources that are associated with the CIDR block before you can
  /// disassociate it.
  ///
  /// Parameter [associationId] :
  /// The association ID for the CIDR block.
  Future<DisassociateSubnetCidrBlockResult> disassociateSubnetCidrBlock({
    @_s.required String associationId,
  }) async {
    ArgumentError.checkNotNull(associationId, 'associationId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates the specified subnets from the transit gateway multicast
  /// domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [subnetIds] :
  /// The IDs of the subnets;
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<DisassociateTransitGatewayMulticastDomainResult>
      disassociateTransitGatewayMulticastDomain({
    bool dryRun,
    List<String> subnetIds,
    String transitGatewayAttachmentId,
    String transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a resource attachment from a transit gateway route table.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<DisassociateTransitGatewayRouteTableResult>
      disassociateTransitGatewayRouteTable({
    @_s.required String transitGatewayAttachmentId,
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you
  /// must specify its association ID. You can get the association ID by using
  /// <a>DescribeVpcs</a>. You must detach or delete all gateways and resources
  /// that are associated with the CIDR block before you can disassociate it.
  ///
  /// You cannot disassociate the CIDR block with which you originally created
  /// the VPC (the primary CIDR block).
  ///
  /// Parameter [associationId] :
  /// The association ID for the CIDR block.
  Future<DisassociateVpcCidrBlockResult> disassociateVpcCidrBlock({
    @_s.required String associationId,
  }) async {
    ArgumentError.checkNotNull(associationId, 'associationId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables EBS encryption by default for your account in the current Region.
  ///
  /// After you enable encryption by default, the EBS volumes that you create
  /// are are always encrypted, either using the default CMK or the CMK that you
  /// specified when you created each volume. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// You can specify the default CMK for encryption by default using
  /// <a>ModifyEbsDefaultKmsKeyId</a> or <a>ResetEbsDefaultKmsKeyId</a>.
  ///
  /// Enabling encryption by default has no effect on the encryption status of
  /// your existing volumes.
  ///
  /// After you enable encryption by default, you can no longer launch instances
  /// using instance types that do not support encryption. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported
  /// Instance Types</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableEbsEncryptionByDefaultResult> enableEbsEncryptionByDefault({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables fast snapshot restores for the specified snapshots in the
  /// specified Availability Zones.
  ///
  /// You get the full benefit of fast snapshot restores after they enter the
  /// <code>enabled</code> state. To get the current state of fast snapshot
  /// restores, use <a>DescribeFastSnapshotRestores</a>. To disable fast
  /// snapshot restores, use <a>DisableFastSnapshotRestores</a>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-fast-snapshot-restore.html">Amazon
  /// EBS Fast Snapshot Restore</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [availabilityZones] :
  /// One or more Availability Zones. For example, <code>us-east-2a</code>.
  ///
  /// Parameter [sourceSnapshotIds] :
  /// The IDs of one or more snapshots. For example,
  /// <code>snap-1234567890abcdef0</code>. You can specify a snapshot that was
  /// shared with you from another AWS account.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableFastSnapshotRestoresResult> enableFastSnapshotRestores({
    @_s.required List<String> availabilityZones,
    @_s.required List<String> sourceSnapshotIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(availabilityZones, 'availabilityZones');
    ArgumentError.checkNotNull(sourceSnapshotIds, 'sourceSnapshotIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables the specified attachment to propagate routes to the specified
  /// propagation route table.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the propagation route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableTransitGatewayRouteTablePropagationResult>
      enableTransitGatewayRouteTablePropagation({
    @_s.required String transitGatewayAttachmentId,
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables a virtual private gateway (VGW) to propagate routes to the
  /// specified route table of a VPC.
  ///
  /// Parameter [gatewayId] :
  /// The ID of the virtual private gateway that is attached to a VPC. The
  /// virtual private gateway must be attached to the same VPC that the routing
  /// tables are associated with.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table. The routing table must be associated with the
  /// same VPC that the virtual private gateway is attached to.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> enableVgwRoutePropagation({
    @_s.required String gatewayId,
    @_s.required String routeTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(gatewayId, 'gatewayId');
    ArgumentError.checkNotNull(routeTableId, 'routeTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables I/O operations for a volume that had I/O operations disabled
  /// because the data on the volume was potentially inconsistent.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> enableVolumeIO({
    @_s.required String volumeId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(volumeId, 'volumeId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables a VPC for ClassicLink. You can then link EC2-Classic instances to
  /// your ClassicLink-enabled VPC to allow communication over private IP
  /// addresses. You cannot enable your VPC for ClassicLink if any of your VPC
  /// route tables have existing routes for address ranges within the
  /// <code>10.0.0.0/8</code> IP address range, excluding local routes for VPCs
  /// in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address
  /// ranges. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a>
  /// in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<EnableVpcClassicLinkResult> enableVpcClassicLink({
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables a VPC to support DNS hostname resolution for ClassicLink. If
  /// enabled, the DNS hostname of a linked EC2-Classic instance resolves to its
  /// private IP address when addressed from an instance in the VPC to which
  /// it's linked. Similarly, the DNS hostname of an instance in a VPC resolves
  /// to its private IP address when addressed from a linked EC2-Classic
  /// instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a>
  /// in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  Future<EnableVpcClassicLinkDnsSupportResult> enableVpcClassicLinkDnsSupport({
    String vpcId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Downloads the client certificate revocation list for the specified Client
  /// VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ExportClientVpnClientCertificateRevocationListResult>
      exportClientVpnClientCertificateRevocationList({
    @_s.required String clientVpnEndpointId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Downloads the contents of the Client VPN endpoint configuration file for
  /// the specified Client VPN endpoint. The Client VPN endpoint configuration
  /// file includes the Client VPN endpoint and certificate information clients
  /// need to establish a connection with the Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ExportClientVpnClientConfigurationResult>
      exportClientVpnClientConfiguration({
    @_s.required String clientVpnEndpointId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Exports an Amazon Machine Image (AMI) to a VM file. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html">Exporting
  /// a VM Directory from an Amazon Machine Image (AMI)</a> in the <i>VM
  /// Import/Export User Guide</i>.
  ///
  /// Parameter [diskImageFormat] :
  /// The disk image format.
  ///
  /// Parameter [imageId] :
  /// The ID of the image.
  ///
  /// Parameter [s3ExportLocation] :
  /// Information about the destination S3 bucket. The bucket must exist and
  /// grant WRITE and READ_ACP permissions to the AWS account
  /// vm-import-export@amazon.com.
  ///
  /// Parameter [clientToken] :
  /// Token to enable idempotency for export image requests.
  ///
  /// Parameter [description] :
  /// A description of the image being exported. The maximum length is 255
  /// bytes.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [roleName] :
  /// The name of the role that grants VM Import/Export permission to export
  /// images to your S3 bucket. If this parameter is not specified, the default
  /// role is named 'vmimport'.
  Future<ExportImageResult> exportImage({
    @_s.required DiskImageFormat diskImageFormat,
    @_s.required String imageId,
    @_s.required ExportTaskS3LocationRequest s3ExportLocation,
    String clientToken,
    String description,
    bool dryRun,
    String roleName,
  }) async {
    ArgumentError.checkNotNull(diskImageFormat, 'diskImageFormat');
    ArgumentError.checkNotNull(imageId, 'imageId');
    ArgumentError.checkNotNull(s3ExportLocation, 's3ExportLocation');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Exports routes from the specified transit gateway route table to the
  /// specified S3 bucket. By default, all routes are exported. Alternatively,
  /// you can filter by CIDR range.
  ///
  /// The routes are saved to the specified bucket in a JSON file. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html#tgw-export-route-tables">Export
  /// Route Tables to Amazon S3</a> in <i>Transit Gateways</i>.
  ///
  /// Parameter [s3Bucket] :
  /// The name of the S3 bucket.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>attachment.transit-gateway-attachment-id</code> - The id of the
  /// transit gateway attachment.
  /// </li>
  /// <li>
  /// <code>attachment.resource-id</code> - The resource id of the transit
  /// gateway attachment.
  /// </li>
  /// <li>
  /// <code>route-search.exact-match</code> - The exact match of the specified
  /// filter.
  /// </li>
  /// <li>
  /// <code>route-search.longest-prefix-match</code> - The longest prefix that
  /// matches the route.
  /// </li>
  /// <li>
  /// <code>route-search.subnet-of-match</code> - The routes with a subnet that
  /// match the specified CIDR filter.
  /// </li>
  /// <li>
  /// <code>route-search.supernet-of-match</code> - The routes with a CIDR that
  /// encompass the CIDR filter. For example, if you have 10.0.1.0/29 and
  /// 10.0.1.0/31 routes in your route table and you specify supernet-of-match
  /// as 10.0.1.0/30, then the result returns 10.0.1.0/29.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the attachment (<code>available</code> |
  /// <code>deleted</code> | <code>deleting</code> | <code>failed</code> |
  /// <code>modifying</code> | <code>pendingAcceptance</code> |
  /// <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> |
  /// <code>rejecting</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-route-destination-cidr-block</code> - The CIDR
  /// range.
  /// </li>
  /// <li>
  /// <code>type</code> - The type of route (<code>active</code> |
  /// <code>blackhole</code>).
  /// </li>
  /// </ul>
  Future<ExportTransitGatewayRoutesResult> exportTransitGatewayRoutes({
    @_s.required String s3Bucket,
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
    List<Filter> filters,
  }) async {
    ArgumentError.checkNotNull(s3Bucket, 's3Bucket');
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the IPv6 CIDR block associations for a specified
  /// IPv6 address pool.
  ///
  /// Parameter [poolId] :
  /// The ID of the IPv6 address pool.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetAssociatedIpv6PoolCidrsResult> getAssociatedIpv6PoolCidrs({
    @_s.required String poolId,
    bool dryRun,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(poolId, 'poolId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets usage information about a Capacity Reservation. If the Capacity
  /// Reservation is shared, it shows usage information for the Capacity
  /// Reservation owner and each AWS account that is currently using the shared
  /// capacity. If the Capacity Reservation is not shared, it shows only the
  /// Capacity Reservation owner's usage.
  ///
  /// Parameter [capacityReservationId] :
  /// The ID of the Capacity Reservation.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return for the request in a single page.
  /// The remaining results can be seen by sending another request with the
  /// returned nextToken value.
  ///
  /// Valid range: Minimum value of 1. Maximum value of 1000.
  ///
  /// Parameter [nextToken] :
  /// The token to retrieve the next page of results.
  Future<GetCapacityReservationUsageResult> getCapacityReservationUsage({
    @_s.required String capacityReservationId,
    bool dryRun,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(capacityReservationId, 'capacityReservationId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      1,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the allocations from the specified customer-owned address pool.
  ///
  /// Parameter [poolId] :
  /// The ID of the address pool.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// The filters. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// <code>coip-address-usage.allocation-id</code>
  /// </li>
  /// </ul>
  /// <ul>
  /// <li>
  /// <code>coip-address-usage.aws-account-id</code>
  /// </li>
  /// </ul>
  /// <ul>
  /// <li>
  /// <code>coip-address-usage.aws-service</code>
  /// </li>
  /// </ul>
  /// <ul>
  /// <li>
  /// <code>coip-address-usage.co-ip</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetCoipPoolUsageResult> getCoipPoolUsage({
    @_s.required String poolId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(poolId, 'poolId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets the console output for the specified instance. For Linux instances,
  /// the instance console output displays the exact console output that would
  /// normally be displayed on a physical monitor attached to a computer. For
  /// Windows instances, the instance console output includes the last three
  /// system event log errors.
  ///
  /// By default, the console output returns buffered information that was
  /// posted shortly after an instance transition state (start, stop, reboot, or
  /// terminate). This information is available for at least one hour after the
  /// most recent post. Only the most recent 64 KB of console output is
  /// available.
  ///
  /// You can optionally retrieve the latest serial console output at any time
  /// during the instance lifecycle. This option is supported on instance types
  /// that use the Nitro hypervisor.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance
  /// Console Output</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [latest] :
  /// When enabled, retrieves the latest console output for the instance.
  ///
  /// Default: disabled (<code>false</code>)
  Future<GetConsoleOutputResult> getConsoleOutput({
    @_s.required String instanceId,
    bool dryRun,
    bool latest,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Retrieve a JPG-format screenshot of a running instance to help with
  /// troubleshooting.
  ///
  /// The returned content is Base64-encoded.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [wakeUp] :
  /// When set to <code>true</code>, acts as keystroke input and wakes up an
  /// instance that's in standby or "sleep" mode.
  Future<GetConsoleScreenshotResult> getConsoleScreenshot({
    @_s.required String instanceId,
    bool dryRun,
    bool wakeUp,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the default credit option for CPU usage of a burstable
  /// performance instance family.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [instanceFamily] :
  /// The instance family.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetDefaultCreditSpecificationResult> getDefaultCreditSpecification({
    @_s.required UnlimitedSupportedInstanceFamily instanceFamily,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceFamily, 'instanceFamily');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes the default customer master key (CMK) for EBS encryption by
  /// default for your account in this Region. You can change the default CMK
  /// for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a> or
  /// <a>ResetEbsDefaultKmsKeyId</a>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetEbsDefaultKmsKeyIdResult> getEbsDefaultKmsKeyId({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Describes whether EBS encryption by default is enabled for your account in
  /// the current Region.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetEbsEncryptionByDefaultResult> getEbsEncryptionByDefault({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Preview a reservation purchase with configurations that match those of
  /// your Dedicated Host. You must have active Dedicated Hosts in your account
  /// before you purchase a reservation.
  ///
  /// This is a preview of the <a>PurchaseHostReservation</a> action and does
  /// not result in the offering being purchased.
  ///
  /// Parameter [hostIdSet] :
  /// The IDs of the Dedicated Hosts with which the reservation is associated.
  ///
  /// Parameter [offeringId] :
  /// The offering ID of the reservation.
  Future<GetHostReservationPurchasePreviewResult>
      getHostReservationPurchasePreview({
    @_s.required List<String> hostIdSet,
    @_s.required String offeringId,
  }) async {
    ArgumentError.checkNotNull(hostIdSet, 'hostIdSet');
    ArgumentError.checkNotNull(offeringId, 'offeringId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Retrieves the configuration data of the specified instance. You can use
  /// this data to create a launch template.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetLaunchTemplateDataResult> getLaunchTemplateData({
    @_s.required String instanceId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Retrieves the encrypted administrator password for a running Windows
  /// instance.
  ///
  /// The Windows password is generated at boot by the <code>EC2Config</code>
  /// service or <code>EC2Launch</code> scripts (Windows Server 2016 and later).
  /// This usually only happens the first time an instance is launched. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html">EC2Config</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html">EC2Launch</a>
  /// in the Amazon Elastic Compute Cloud User Guide.
  ///
  /// For the <code>EC2Config</code> service, the password is not generated for
  /// rebundled AMIs unless <code>Ec2SetPassword</code> is enabled before
  /// bundling.
  ///
  /// The password is encrypted using the key pair that you specified when you
  /// launched the instance. You must provide the corresponding key pair file.
  ///
  /// When you launch an instance, password generation and encryption may take a
  /// few minutes. If you try to retrieve the password before it's available,
  /// the output returns an empty string. We recommend that you wait up to 15
  /// minutes after launching an instance before trying to retrieve the
  /// generated password.
  ///
  /// Parameter [instanceId] :
  /// The ID of the Windows instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<GetPasswordDataResult> getPasswordData({
    @_s.required String instanceId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Returns a quote and exchange information for exchanging one or more
  /// specified Convertible Reserved Instances for a new Convertible Reserved
  /// Instance. If the exchange cannot be performed, the reason is returned in
  /// the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform
  /// the exchange.
  ///
  /// Parameter [reservedInstanceIds] :
  /// The IDs of the Convertible Reserved Instances to exchange.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [targetConfigurations] :
  /// The configuration of the target Convertible Reserved Instance to exchange
  /// for your current Convertible Reserved Instances.
  Future<GetReservedInstancesExchangeQuoteResult>
      getReservedInstancesExchangeQuote({
    @_s.required List<String> reservedInstanceIds,
    bool dryRun,
    List<TargetConfigurationRequest> targetConfigurations,
  }) async {
    ArgumentError.checkNotNull(reservedInstanceIds, 'reservedInstanceIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Lists the route tables to which the specified resource attachment
  /// propagates routes.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>transit-gateway-route-table-id</code> - The ID of the transit
  /// gateway route table.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayAttachmentPropagationsResult>
      getTransitGatewayAttachmentPropagations({
    @_s.required String transitGatewayAttachmentId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the associations for the transit gateway multicast
  /// domain.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The type of resource. The valid value is:
  /// <code>vpc</code>.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the subnet association. Valid values are
  /// <code>associated</code> | <code>associating</code> |
  /// <code>disassociated</code> | <code>disassociating</code>.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet.
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The id of the transit gateway
  /// attachment.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<GetTransitGatewayMulticastDomainAssociationsResult>
      getTransitGatewayMulticastDomainAssociations({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    String transitGatewayMulticastDomainId,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the associations for the specified transit gateway
  /// route table.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The resource type (<code>vpc</code> |
  /// <code>vpn</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the attachment.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayRouteTableAssociationsResult>
      getTransitGatewayRouteTableAssociations({
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Gets information about the route table propagations for the specified
  /// transit gateway route table.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The resource type (<code>vpc</code> |
  /// <code>vpn</code>).
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The ID of the attachment.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<GetTransitGatewayRouteTablePropagationsResult>
      getTransitGatewayRouteTablePropagations({
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Uploads a client certificate revocation list to the specified Client VPN
  /// endpoint. Uploading a client certificate revocation list overwrites the
  /// existing client certificate revocation list.
  ///
  /// Uploading a client certificate revocation list resets existing client
  /// connections.
  ///
  /// Parameter [certificateRevocationList] :
  /// The client certificate revocation list file. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-working-certificates.html#cvpn-working-certificates-generate">Generate
  /// a Client Certificate Revocation List</a> in the <i>AWS Client VPN
  /// Administrator Guide</i>.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint to which the client certificate
  /// revocation list applies.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ImportClientVpnClientCertificateRevocationListResult>
      importClientVpnClientCertificateRevocationList({
    @_s.required String certificateRevocationList,
    @_s.required String clientVpnEndpointId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        certificateRevocationList, 'certificateRevocationList');
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Import single or multi-volume disk images or EBS snapshots into an Amazon
  /// Machine Image (AMI). For more information, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing
  /// a VM as an Image Using VM Import/Export</a> in the <i>VM Import/Export
  /// User Guide</i>.
  ///
  /// Parameter [architecture] :
  /// The architecture of the virtual machine.
  ///
  /// Valid values: <code>i386</code> | <code>x86_64</code> | <code>arm64</code>
  ///
  /// Parameter [clientData] :
  /// The client-specific data.
  ///
  /// Parameter [clientToken] :
  /// The token to enable idempotency for VM import requests.
  ///
  /// Parameter [description] :
  /// A description string for the import image task.
  ///
  /// Parameter [diskContainers] :
  /// Information about the disk containers.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// Specifies whether the destination AMI of the imported image should be
  /// encrypted. The default CMK for EBS is used unless you specify a
  /// non-default AWS Key Management Service (AWS KMS) CMK using
  /// <code>KmsKeyId</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [hypervisor] :
  /// The target hypervisor platform.
  ///
  /// Valid values: <code>xen</code>
  ///
  /// Parameter [kmsKeyId] :
  /// An identifier for the symmetric AWS Key Management Service (AWS KMS)
  /// customer master key (CMK) to use when creating the encrypted AMI. This
  /// parameter is only required if you want to use a non-default CMK; if this
  /// parameter is not specified, the default CMK for EBS is used. If a
  /// <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must
  /// also be set.
  ///
  /// The CMK identifier may be provided in any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID
  /// </li>
  /// <li>
  /// Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace,
  /// followed by the Region of the CMK, the AWS account ID of the CMK owner,
  /// the <code>alias</code> namespace, and then the CMK alias. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.
  /// </li>
  /// <li>
  /// ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code>
  /// namespace, followed by the Region of the CMK, the AWS account ID of the
  /// CMK owner, the <code>key</code> namespace, and then the CMK ID. For
  /// example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.
  /// </li>
  /// <li>
  /// ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code>
  /// namespace, followed by the Region of the CMK, the AWS account ID of the
  /// CMK owner, the <code>alias</code> namespace, and then the CMK alias. For
  /// example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.
  /// </li>
  /// </ul>
  /// AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action
  /// you call may appear to complete even though you provided an invalid
  /// identifier. This action will eventually report failure.
  ///
  /// The specified CMK must exist in the Region that the AMI is being copied
  /// to.
  ///
  /// Amazon EBS does not support asymmetric CMKs.
  ///
  /// Parameter [licenseSpecifications] :
  /// The ARNs of the license configurations.
  ///
  /// Parameter [licenseType] :
  /// The license type to be used for the Amazon Machine Image (AMI) after
  /// importing.
  ///
  /// By default, we detect the source-system operating system (OS) and apply
  /// the appropriate license. Specify <code>AWS</code> to replace the
  /// source-system license with an AWS license, if appropriate. Specify
  /// <code>BYOL</code> to retain the source-system license, if appropriate.
  ///
  /// To use <code>BYOL</code>, you must have existing licenses with rights to
  /// use these licenses in a third party cloud, such as AWS. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a>
  /// in the VM Import/Export User Guide.
  ///
  /// Parameter [platform] :
  /// The operating system of the virtual machine.
  ///
  /// Valid values: <code>Windows</code> | <code>Linux</code>
  ///
  /// Parameter [roleName] :
  /// The name of the role to use when not using the default role, 'vmimport'.
  Future<ImportImageResult> importImage({
    String architecture,
    ClientData clientData,
    String clientToken,
    String description,
    List<ImageDiskContainer> diskContainers,
    bool dryRun,
    bool encrypted,
    String hypervisor,
    String kmsKeyId,
    List<ImportImageLicenseConfigurationRequest> licenseSpecifications,
    String licenseType,
    String platform,
    String roleName,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an import instance task using metadata from the specified disk
  /// image. <code>ImportInstance</code> only supports single-volume VMs. To
  /// import multi-volume VMs, use <a>ImportImage</a>. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing
  /// a Virtual Machine Using the Amazon EC2 CLI</a>.
  ///
  /// For information about the import manifest referenced by this API action,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  ///
  /// Parameter [platform] :
  /// The instance operating system.
  ///
  /// Parameter [description] :
  /// A description for the instance being imported.
  ///
  /// Parameter [diskImages] :
  /// The disk image.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchSpecification] :
  /// The launch specification.
  Future<ImportInstanceResult> importInstance({
    @_s.required PlatformValues platform,
    String description,
    List<DiskImage> diskImages,
    bool dryRun,
    ImportInstanceLaunchSpecification launchSpecification,
  }) async {
    ArgumentError.checkNotNull(platform, 'platform');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Imports the public key from an RSA key pair that you created with a
  /// third-party tool. Compare this with <a>CreateKeyPair</a>, in which AWS
  /// creates the key pair and gives the keys to you (AWS keeps a copy of the
  /// public key). With ImportKeyPair, you create the key pair and give AWS just
  /// the public key. The private key is never transferred between you and AWS.
  ///
  /// For more information about key pairs, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key
  /// Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [keyName] :
  /// A unique name for the key pair.
  ///
  /// Parameter [publicKeyMaterial] :
  /// The public key. For API calls, the text must be base64-encoded. For
  /// command line tools, base64 encoding is performed for you.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the imported key pair.
  Future<ImportKeyPairResult> importKeyPair({
    @_s.required String keyName,
    @_s.required Uint8List publicKeyMaterial,
    bool dryRun,
    List<TagSpecification> tagSpecifications,
  }) async {
    ArgumentError.checkNotNull(keyName, 'keyName');
    ArgumentError.checkNotNull(publicKeyMaterial, 'publicKeyMaterial');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Imports a disk into an EBS snapshot.
  ///
  /// Parameter [clientData] :
  /// The client-specific data.
  ///
  /// Parameter [clientToken] :
  /// Token to enable idempotency for VM import requests.
  ///
  /// Parameter [description] :
  /// The description string for the import snapshot task.
  ///
  /// Parameter [diskContainer] :
  /// Information about the disk container.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [encrypted] :
  /// Specifies whether the destination snapshot of the imported image should be
  /// encrypted. The default CMK for EBS is used unless you specify a
  /// non-default AWS Key Management Service (AWS KMS) CMK using
  /// <code>KmsKeyId</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [kmsKeyId] :
  /// An identifier for the symmetric AWS Key Management Service (AWS KMS)
  /// customer master key (CMK) to use when creating the encrypted snapshot.
  /// This parameter is only required if you want to use a non-default CMK; if
  /// this parameter is not specified, the default CMK for EBS is used. If a
  /// <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must
  /// also be set.
  ///
  /// The CMK identifier may be provided in any of the following formats:
  ///
  /// <ul>
  /// <li>
  /// Key ID
  /// </li>
  /// <li>
  /// Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace,
  /// followed by the Region of the CMK, the AWS account ID of the CMK owner,
  /// the <code>alias</code> namespace, and then the CMK alias. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.
  /// </li>
  /// <li>
  /// ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code>
  /// namespace, followed by the Region of the CMK, the AWS account ID of the
  /// CMK owner, the <code>key</code> namespace, and then the CMK ID. For
  /// example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.
  /// </li>
  /// <li>
  /// ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code>
  /// namespace, followed by the Region of the CMK, the AWS account ID of the
  /// CMK owner, the <code>alias</code> namespace, and then the CMK alias. For
  /// example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.
  /// </li>
  /// </ul>
  /// AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action
  /// you call may appear to complete even though you provided an invalid
  /// identifier. This action will eventually report failure.
  ///
  /// The specified CMK must exist in the Region that the snapshot is being
  /// copied to.
  ///
  /// Amazon EBS does not support asymmetric CMKs.
  ///
  /// Parameter [roleName] :
  /// The name of the role to use when not using the default role, 'vmimport'.
  Future<ImportSnapshotResult> importSnapshot({
    ClientData clientData,
    String clientToken,
    String description,
    SnapshotDiskContainer diskContainer,
    bool dryRun,
    bool encrypted,
    String kmsKeyId,
    String roleName,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates an import volume task using metadata from the specified disk
  /// image.For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html">Importing
  /// Disks to Amazon EBS</a>.
  ///
  /// For information about the import manifest referenced by this API action,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone for the resulting EBS volume.
  ///
  /// Parameter [image] :
  /// The disk image.
  ///
  /// Parameter [volume] :
  /// The volume size.
  ///
  /// Parameter [description] :
  /// A description of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ImportVolumeResult> importVolume({
    @_s.required String availabilityZone,
    @_s.required DiskImageDetail image,
    @_s.required VolumeDetail volume,
    String description,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(availabilityZone, 'availabilityZone');
    ArgumentError.checkNotNull(image, 'image');
    ArgumentError.checkNotNull(volume, 'volume');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables or disables an Availability Zone group for your account.
  ///
  /// Use <a
  /// href="https://docs.aws.amazon.com/AWSEC2ApiDocReef/build/server-root/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">describe-availability-zones</a>
  /// to view the value for <code>GroupName</code>.
  ///
  /// Parameter [groupName] :
  /// The name of the Availability Zone Group.
  ///
  /// Parameter [optInStatus] :
  /// Indicates whether to enable or disable membership. The valid values are
  /// <code>opted-in</code>. You must contact <a
  /// href="https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services">AWS
  /// Support</a> to disable an Availability Zone group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyAvailabilityZoneGroupResult> modifyAvailabilityZoneGroup({
    @_s.required String groupName,
    @_s.required ModifyAvailabilityZoneOptInStatus optInStatus,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(groupName, 'groupName');
    ArgumentError.checkNotNull(optInStatus, 'optInStatus');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a Capacity Reservation's capacity and the conditions under which
  /// it is to be released. You cannot change a Capacity Reservation's instance
  /// type, EBS optimization, instance store settings, platform, Availability
  /// Zone, or instance eligibility. If you need to modify any of these
  /// attributes, we recommend that you cancel the Capacity Reservation, and
  /// then create a new one with the required attributes.
  ///
  /// Parameter [capacityReservationId] :
  /// The ID of the Capacity Reservation.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endDate] :
  /// The date and time at which the Capacity Reservation expires. When a
  /// Capacity Reservation expires, the reserved capacity is released and you
  /// can no longer launch instances into it. The Capacity Reservation's state
  /// changes to <code>expired</code> when it reaches its end date and time.
  ///
  /// The Capacity Reservation is cancelled within an hour from the specified
  /// time. For example, if you specify 5/31/2019, 13:30:55, the Capacity
  /// Reservation is guaranteed to end between 13:30:55 and 14:30:55 on
  /// 5/31/2019.
  ///
  /// You must provide an <code>EndDate</code> value if <code>EndDateType</code>
  /// is <code>limited</code>. Omit <code>EndDate</code> if
  /// <code>EndDateType</code> is <code>unlimited</code>.
  ///
  /// Parameter [endDateType] :
  /// Indicates the way in which the Capacity Reservation ends. A Capacity
  /// Reservation can have one of the following end types:
  ///
  /// <ul>
  /// <li>
  /// <code>unlimited</code> - The Capacity Reservation remains active until you
  /// explicitly cancel it. Do not provide an <code>EndDate</code> value if
  /// <code>EndDateType</code> is <code>unlimited</code>.
  /// </li>
  /// <li>
  /// <code>limited</code> - The Capacity Reservation expires automatically at a
  /// specified date and time. You must provide an <code>EndDate</code> value if
  /// <code>EndDateType</code> is <code>limited</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [instanceCount] :
  /// The number of instances for which to reserve capacity.
  Future<ModifyCapacityReservationResult> modifyCapacityReservation({
    @_s.required String capacityReservationId,
    bool dryRun,
    DateTime endDate,
    EndDateType endDateType,
    int instanceCount,
  }) async {
    ArgumentError.checkNotNull(capacityReservationId, 'capacityReservationId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified Client VPN endpoint. Modifying the DNS server
  /// resets existing client connections.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint to modify.
  ///
  /// Parameter [connectionLogOptions] :
  /// Information about the client connection logging options.
  ///
  /// If you enable client connection logging, data about client connections is
  /// sent to a Cloudwatch Logs log stream. The following information is logged:
  ///
  /// <ul>
  /// <li>
  /// Client connection requests
  /// </li>
  /// <li>
  /// Client connection results (successful and unsuccessful)
  /// </li>
  /// <li>
  /// Reasons for unsuccessful client connection requests
  /// </li>
  /// <li>
  /// Client connection termination time
  /// </li>
  /// </ul>
  ///
  /// Parameter [description] :
  /// A brief description of the Client VPN endpoint.
  ///
  /// Parameter [dnsServers] :
  /// Information about the DNS servers to be used by Client VPN connections. A
  /// Client VPN endpoint can have up to two DNS servers.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [securityGroupIds] :
  /// The IDs of one or more security groups to apply to the target network.
  ///
  /// Parameter [serverCertificateArn] :
  /// The ARN of the server certificate to be used. The server certificate must
  /// be provisioned in AWS Certificate Manager (ACM).
  ///
  /// Parameter [splitTunnel] :
  /// Indicates whether the VPN is split-tunnel.
  ///
  /// For information about split-tunnel VPN endpoints, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-Tunnel
  /// AWS Client VPN Endpoint</a> in the <i>AWS Client VPN Administrator
  /// Guide</i>.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC to associate with the Client VPN endpoint.
  ///
  /// Parameter [vpnPort] :
  /// The port number to assign to the Client VPN endpoint for TCP and UDP
  /// traffic.
  ///
  /// Valid Values: <code>443</code> | <code>1194</code>
  ///
  /// Default Value: <code>443</code>
  Future<ModifyClientVpnEndpointResult> modifyClientVpnEndpoint({
    @_s.required String clientVpnEndpointId,
    ConnectionLogOptions connectionLogOptions,
    String description,
    DnsServersOptionsModifyStructure dnsServers,
    bool dryRun,
    List<String> securityGroupIds,
    String serverCertificateArn,
    bool splitTunnel,
    String vpcId,
    int vpnPort,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the default credit option for CPU usage of burstable performance
  /// instances. The default credit option is set at the account level per AWS
  /// Region, and is specified per instance family. All new burstable
  /// performance instances in the account launch using the default credit
  /// option.
  ///
  /// <code>ModifyDefaultCreditSpecification</code> is an asynchronous
  /// operation, which works at an AWS Region level and modifies the credit
  /// option for each Availability Zone. All zones in a Region are updated
  /// within five minutes. But if instances are launched during this operation,
  /// they might not get the new credit option until the zone is updated. To
  /// verify whether the update has occurred, you can call
  /// <code>GetDefaultCreditSpecification</code> and check
  /// <code>DefaultCreditSpecification</code> for updates.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [cpuCredits] :
  /// The credit option for CPU usage of the instance family.
  ///
  /// Valid Values: <code>standard</code> | <code>unlimited</code>
  ///
  /// Parameter [instanceFamily] :
  /// The instance family.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyDefaultCreditSpecificationResult>
      modifyDefaultCreditSpecification({
    @_s.required String cpuCredits,
    @_s.required UnlimitedSupportedInstanceFamily instanceFamily,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(cpuCredits, 'cpuCredits');
    ArgumentError.checkNotNull(instanceFamily, 'instanceFamily');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Changes the default customer master key (CMK) for EBS encryption by
  /// default for your account in this Region.
  ///
  /// AWS creates a unique AWS managed CMK in each Region for use with
  /// encryption by default. If you change the default CMK to a symmetric
  /// customer managed CMK, it is used instead of the AWS managed CMK. To reset
  /// the default CMK to the AWS managed CMK for EBS, use
  /// <a>ResetEbsDefaultKmsKeyId</a>. Amazon EBS does not support asymmetric
  /// CMKs.
  ///
  /// If you delete or disable the customer managed CMK that you specified for
  /// use with encryption by default, your instances will fail to launch.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [kmsKeyId] :
  /// The identifier of the AWS Key Management Service (AWS KMS) customer master
  /// key (CMK) to use for Amazon EBS encryption. If this parameter is not
  /// specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code>
  /// is specified, the encrypted state must be <code>true</code>.
  ///
  /// You can specify the CMK using any of the following:
  ///
  /// <ul>
  /// <li>
  /// Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.
  /// </li>
  /// <li>
  /// Key alias. For example, alias/ExampleAlias.
  /// </li>
  /// <li>
  /// Key ARN. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.
  /// </li>
  /// <li>
  /// Alias ARN. For example,
  /// arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.
  /// </li>
  /// </ul>
  /// AWS authenticates the CMK asynchronously. Therefore, if you specify an ID,
  /// alias, or ARN that is not valid, the action can appear to complete, but
  /// eventually fails.
  ///
  /// Amazon EBS does not support asymmetric CMKs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyEbsDefaultKmsKeyIdResult> modifyEbsDefaultKmsKeyId({
    @_s.required String kmsKeyId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(kmsKeyId, 'kmsKeyId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified EC2 Fleet.
  ///
  /// You can only modify an EC2 Fleet request of type <code>maintain</code>.
  ///
  /// While the EC2 Fleet is being modified, it is in the <code>modifying</code>
  /// state.
  ///
  /// To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet
  /// launches the additional Spot Instances according to the allocation
  /// strategy for the EC2 Fleet request. If the allocation strategy is
  /// <code>lowest-price</code>, the EC2 Fleet launches instances using the Spot
  /// Instance pool with the lowest price. If the allocation strategy is
  /// <code>diversified</code>, the EC2 Fleet distributes the instances across
  /// the Spot Instance pools. If the allocation strategy is
  /// <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot
  /// Instance pools with optimal capacity for the number of instances that are
  /// launching.
  ///
  /// To scale down your EC2 Fleet, decrease its target capacity. First, the EC2
  /// Fleet cancels any open requests that exceed the new target capacity. You
  /// can request that the EC2 Fleet terminate Spot Instances until the size of
  /// the fleet no longer exceeds the new target capacity. If the allocation
  /// strategy is <code>lowest-price</code>, the EC2 Fleet terminates the
  /// instances with the highest price per unit. If the allocation strategy is
  /// <code>capacity-optimized</code>, the EC2 Fleet terminates the instances in
  /// the Spot Instance pools that have the least available Spot Instance
  /// capacity. If the allocation strategy is <code>diversified</code>, the EC2
  /// Fleet terminates instances across the Spot Instance pools. Alternatively,
  /// you can request that the EC2 Fleet keep the fleet at its current size, but
  /// not replace any Spot Instances that are interrupted or that you terminate
  /// manually.
  ///
  /// If you are finished with your EC2 Fleet for now, but will use it again
  /// later, you can set the target capacity to 0.
  ///
  /// Parameter [fleetId] :
  /// The ID of the EC2 Fleet.
  ///
  /// Parameter [targetCapacitySpecification] :
  /// The size of the EC2 Fleet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [excessCapacityTerminationPolicy] :
  /// Indicates whether running instances should be terminated if the total
  /// target capacity of the EC2 Fleet is decreased below the current size of
  /// the EC2 Fleet.
  Future<ModifyFleetResult> modifyFleet({
    @_s.required String fleetId,
    @_s.required TargetCapacitySpecificationRequest targetCapacitySpecification,
    bool dryRun,
    FleetExcessCapacityTerminationPolicy excessCapacityTerminationPolicy,
  }) async {
    ArgumentError.checkNotNull(fleetId, 'fleetId');
    ArgumentError.checkNotNull(
        targetCapacitySpecification, 'targetCapacitySpecification');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified attribute of the specified Amazon FPGA Image (AFI).
  ///
  /// Parameter [fpgaImageId] :
  /// The ID of the AFI.
  ///
  /// Parameter [attribute] :
  /// The name of the attribute.
  ///
  /// Parameter [description] :
  /// A description for the AFI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [loadPermission] :
  /// The load permission for the AFI.
  ///
  /// Parameter [name] :
  /// A name for the AFI.
  ///
  /// Parameter [operationType] :
  /// The operation type.
  ///
  /// Parameter [productCodes] :
  /// The product codes. After you add a product code to an AFI, it can't be
  /// removed. This parameter is valid only when modifying the
  /// <code>productCodes</code> attribute.
  ///
  /// Parameter [userGroups] :
  /// The user groups. This parameter is valid only when modifying the
  /// <code>loadPermission</code> attribute.
  ///
  /// Parameter [userIds] :
  /// The AWS account IDs. This parameter is valid only when modifying the
  /// <code>loadPermission</code> attribute.
  Future<ModifyFpgaImageAttributeResult> modifyFpgaImageAttribute({
    @_s.required String fpgaImageId,
    FpgaImageAttributeName attribute,
    String description,
    bool dryRun,
    LoadPermissionModifications loadPermission,
    String name,
    OperationType operationType,
    List<String> productCodes,
    List<String> userGroups,
    List<String> userIds,
  }) async {
    ArgumentError.checkNotNull(fpgaImageId, 'fpgaImageId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modify the auto-placement setting of a Dedicated Host. When auto-placement
  /// is enabled, any instances that you launch with a tenancy of
  /// <code>host</code> but without a specific host ID are placed onto any
  /// available Dedicated Host in your account that has auto-placement enabled.
  /// When auto-placement is disabled, you need to provide a host ID to have the
  /// instance launch onto a specific host. If no host ID is provided, the
  /// instance is launched onto a suitable host with auto-placement enabled.
  ///
  /// You can also use this API action to modify a Dedicated Host to support
  /// either multiple instance types in an instance family, or to support a
  /// specific instance type only.
  ///
  /// Parameter [hostIds] :
  /// The IDs of the Dedicated Hosts to modify.
  ///
  /// Parameter [autoPlacement] :
  /// Specify whether to enable or disable auto-placement.
  ///
  /// Parameter [hostRecovery] :
  /// Indicates whether to enable or disable host recovery for the Dedicated
  /// Host. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html">
  /// Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [instanceFamily] :
  /// Specifies the instance family to be supported by the Dedicated Host.
  /// Specify this parameter to modify a Dedicated Host to support multiple
  /// instance types within its current instance family.
  ///
  /// If you want to modify a Dedicated Host to support a specific instance type
  /// only, omit this parameter and specify <b>InstanceType</b> instead. You
  /// cannot specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same
  /// request.
  ///
  /// Parameter [instanceType] :
  /// Specifies the instance type to be supported by the Dedicated Host. Specify
  /// this parameter to modify a Dedicated Host to support only a specific
  /// instance type.
  ///
  /// If you want to modify a Dedicated Host to support multiple instance types
  /// in its current instance family, omit this parameter and specify
  /// <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and
  /// <b>InstanceFamily</b> in the same request.
  Future<ModifyHostsResult> modifyHosts({
    @_s.required List<String> hostIds,
    AutoPlacement autoPlacement,
    HostRecovery hostRecovery,
    String instanceFamily,
    String instanceType,
  }) async {
    ArgumentError.checkNotNull(hostIds, 'hostIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the ID format for the specified resource on a per-Region basis.
  /// You can specify that resources should receive longer IDs (17-character
  /// IDs) when they are created.
  ///
  /// This request can only be used to modify longer ID settings for resource
  /// types that are within the opt-in period. Resources currently in their
  /// opt-in period include: <code>bundle</code> | <code>conversion-task</code>
  /// | <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>subnet</code> | <code>subnet-cidr-block-association</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// This setting applies to the IAM user who makes the request; it does not
  /// apply to the entire AWS account. By default, an IAM user defaults to the
  /// same settings as the root user. If you're using this action as the root
  /// user, then these settings apply to the entire account, unless an IAM user
  /// explicitly overrides these settings for themselves. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource
  /// IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Resources created with longer IDs are visible to all IAM roles and users,
  /// regardless of these settings and provided that they have permission to use
  /// the relevant <code>Describe</code> command for the resource type.
  ///
  /// Parameter [resource] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>subnet</code> | <code>subnet-cidr-block-association</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// Alternatively, use the <code>all-current</code> option to include all
  /// resource types that are currently within their opt-in period for longer
  /// IDs.
  ///
  /// Parameter [useLongIds] :
  /// Indicate whether the resource should use longer IDs (17-character IDs).
  Future<void> modifyIdFormat({
    @_s.required String resource,
    @_s.required bool useLongIds,
  }) async {
    ArgumentError.checkNotNull(resource, 'resource');
    ArgumentError.checkNotNull(useLongIds, 'useLongIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the ID format of a resource for a specified IAM user, IAM role,
  /// or the root user for an account; or all IAM users, IAM roles, and the root
  /// user for an account. You can specify that resources should receive longer
  /// IDs (17-character IDs) when they are created.
  ///
  /// This request can only be used to modify longer ID settings for resource
  /// types that are within the opt-in period. Resources currently in their
  /// opt-in period include: <code>bundle</code> | <code>conversion-task</code>
  /// | <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>subnet</code> | <code>subnet-cidr-block-association</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource
  /// IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// This setting applies to the principal specified in the request; it does
  /// not apply to the principal that makes the request.
  ///
  /// Resources created with longer IDs are visible to all IAM roles and users,
  /// regardless of these settings and provided that they have permission to use
  /// the relevant <code>Describe</code> command for the resource type.
  ///
  /// Parameter [principalArn] :
  /// The ARN of the principal, which can be an IAM user, IAM role, or the root
  /// user. Specify <code>all</code> to modify the ID format for all IAM users,
  /// IAM roles, and the root user of the account.
  ///
  /// Parameter [resource] :
  /// The type of resource: <code>bundle</code> | <code>conversion-task</code> |
  /// <code>customer-gateway</code> | <code>dhcp-options</code> |
  /// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
  /// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
  /// <code>import-task</code> | <code>internet-gateway</code> |
  /// <code>network-acl</code> | <code>network-acl-association</code> |
  /// <code>network-interface</code> | <code>network-interface-attachment</code>
  /// | <code>prefix-list</code> | <code>route-table</code> |
  /// <code>route-table-association</code> | <code>security-group</code> |
  /// <code>subnet</code> | <code>subnet-cidr-block-association</code> |
  /// <code>vpc</code> | <code>vpc-cidr-block-association</code> |
  /// <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> |
  /// <code>vpn-connection</code> | <code>vpn-gateway</code>.
  ///
  /// Alternatively, use the <code>all-current</code> option to include all
  /// resource types that are currently within their opt-in period for longer
  /// IDs.
  ///
  /// Parameter [useLongIds] :
  /// Indicates whether the resource should use longer IDs (17-character IDs)
  Future<void> modifyIdentityIdFormat({
    @_s.required String principalArn,
    @_s.required String resource,
    @_s.required bool useLongIds,
  }) async {
    ArgumentError.checkNotNull(principalArn, 'principalArn');
    ArgumentError.checkNotNull(resource, 'resource');
    ArgumentError.checkNotNull(useLongIds, 'useLongIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified attribute of the specified AMI. You can specify
  /// only one attribute at a time. You can use the <code>Attribute</code>
  /// parameter to specify the attribute or one of the following parameters:
  /// <code>Description</code>, <code>LaunchPermission</code>, or
  /// <code>ProductCode</code>.
  ///
  /// AWS Marketplace product codes cannot be modified. Images with an AWS
  /// Marketplace product code cannot be made public.
  ///
  /// To enable the SriovNetSupport enhanced networking attribute of an image,
  /// enable SriovNetSupport on an instance and create an AMI from the instance.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [attribute] :
  /// The name of the attribute to modify. The valid values are
  /// <code>description</code>, <code>launchPermission</code>, and
  /// <code>productCodes</code>.
  ///
  /// Parameter [description] :
  /// A new description for the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchPermission] :
  /// A new launch permission for the AMI.
  ///
  /// Parameter [operationType] :
  /// The operation type. This parameter can be used only when the
  /// <code>Attribute</code> parameter is <code>launchPermission</code>.
  ///
  /// Parameter [productCodes] :
  /// The DevPay product codes. After you add a product code to an AMI, it can't
  /// be removed.
  ///
  /// Parameter [userGroups] :
  /// The user groups. This parameter can be used only when the
  /// <code>Attribute</code> parameter is <code>launchPermission</code>.
  ///
  /// Parameter [userIds] :
  /// The AWS account IDs. This parameter can be used only when the
  /// <code>Attribute</code> parameter is <code>launchPermission</code>.
  ///
  /// Parameter [value] :
  /// The value of the attribute being modified. This parameter can be used only
  /// when the <code>Attribute</code> parameter is <code>description</code> or
  /// <code>productCodes</code>.
  Future<void> modifyImageAttribute({
    @_s.required String imageId,
    String attribute,
    AttributeValue description,
    bool dryRun,
    LaunchPermissionModifications launchPermission,
    OperationType operationType,
    List<String> productCodes,
    List<String> userGroups,
    List<String> userIds,
    String value,
  }) async {
    ArgumentError.checkNotNull(imageId, 'imageId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified attribute of the specified instance. You can
  /// specify only one attribute at a time.
  ///
  /// <b>Note: </b>Using this action to change the security groups associated
  /// with an elastic network interface (ENI) attached to an instance in a VPC
  /// can result in an error if the instance has more than one ENI. To change
  /// the security groups associated with an ENI attached to an instance that
  /// has multiple ENIs, we recommend that you use the
  /// <a>ModifyNetworkInterfaceAttribute</a> action.
  ///
  /// To modify some attributes, the instance must be stopped. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modifying
  /// Attributes of a Stopped Instance</a> in the <i>Amazon Elastic Compute
  /// Cloud User Guide</i>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [attribute] :
  /// The name of the attribute.
  ///
  /// Parameter [blockDeviceMappings] :
  /// Modifies the <code>DeleteOnTermination</code> attribute for volumes that
  /// are currently attached. The volume must be owned by the caller. If no
  /// value is specified for <code>DeleteOnTermination</code>, the default is
  /// <code>true</code> and the volume is deleted when the instance is
  /// terminated.
  ///
  /// To add instance store volumes to an Amazon EBS-backed instance, you must
  /// add them when you launch the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM">Updating
  /// the Block Device Mapping when Launching an Instance</a> in the <i>Amazon
  /// Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [disableApiTermination] :
  /// If the value is <code>true</code>, you can't terminate the instance using
  /// the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use
  /// this parameter for Spot Instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ebsOptimized] :
  /// Specifies whether the instance is optimized for Amazon EBS I/O. This
  /// optimization provides dedicated throughput to Amazon EBS and an optimized
  /// configuration stack to provide optimal EBS I/O performance. This
  /// optimization isn't available with all instance types. Additional usage
  /// charges apply when using an EBS Optimized instance.
  ///
  /// Parameter [enaSupport] :
  /// Set to <code>true</code> to enable enhanced networking with ENA for the
  /// instance.
  ///
  /// This option is supported only for HVM instances. Specifying this option
  /// with a PV instance can make it unreachable.
  ///
  /// Parameter [groups] :
  /// [EC2-VPC] Changes the security groups of the instance. You must specify at
  /// least one security group, even if it's just the default security group for
  /// the VPC. You must specify the security group ID, not the security group
  /// name.
  ///
  /// Parameter [instanceInitiatedShutdownBehavior] :
  /// Specifies whether an instance stops or terminates when you initiate
  /// shutdown from the instance (using the operating system command for system
  /// shutdown).
  ///
  /// Parameter [instanceType] :
  /// Changes the instance type to the specified value. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a>. If the instance type is not valid, the error returned is
  /// <code>InvalidInstanceAttributeValue</code>.
  ///
  /// Parameter [kernel] :
  /// Changes the instance's kernel to the specified value. We recommend that
  /// you use PV-GRUB instead of kernels and RAM disks. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.
  ///
  /// Parameter [ramdisk] :
  /// Changes the instance's RAM disk to the specified value. We recommend that
  /// you use PV-GRUB instead of kernels and RAM disks. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.
  ///
  /// Parameter [sourceDestCheck] :
  /// Specifies whether source/destination checking is enabled. A value of
  /// <code>true</code> means that checking is enabled, and <code>false</code>
  /// means that checking is disabled. This value must be <code>false</code> for
  /// a NAT instance to perform NAT.
  ///
  /// Parameter [sriovNetSupport] :
  /// Set to <code>simple</code> to enable enhanced networking with the Intel
  /// 82599 Virtual Function interface for the instance.
  ///
  /// There is no way to disable enhanced networking with the Intel 82599
  /// Virtual Function interface at this time.
  ///
  /// This option is supported only for HVM instances. Specifying this option
  /// with a PV instance can make it unreachable.
  ///
  /// Parameter [userData] :
  /// Changes the instance's user data to the specified value. If you are using
  /// an AWS SDK or command line tool, base64-encoding is performed for you, and
  /// you can load the text from a file. Otherwise, you must provide
  /// base64-encoded text.
  ///
  /// Parameter [value] :
  /// A new value for the attribute. Use only with the <code>kernel</code>,
  /// <code>ramdisk</code>, <code>userData</code>,
  /// <code>disableApiTermination</code>, or
  /// <code>instanceInitiatedShutdownBehavior</code> attribute.
  Future<void> modifyInstanceAttribute({
    @_s.required String instanceId,
    InstanceAttributeName attribute,
    List<InstanceBlockDeviceMappingSpecification> blockDeviceMappings,
    AttributeBooleanValue disableApiTermination,
    bool dryRun,
    AttributeBooleanValue ebsOptimized,
    AttributeBooleanValue enaSupport,
    List<String> groups,
    AttributeValue instanceInitiatedShutdownBehavior,
    AttributeValue instanceType,
    AttributeValue kernel,
    AttributeValue ramdisk,
    AttributeBooleanValue sourceDestCheck,
    AttributeValue sriovNetSupport,
    BlobAttributeValue userData,
    String value,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the Capacity Reservation settings for a stopped instance. Use
  /// this action to configure an instance to target a specific Capacity
  /// Reservation, run in any <code>open</code> Capacity Reservation with
  /// matching attributes, or run On-Demand Instance capacity.
  ///
  /// Parameter [capacityReservationSpecification] :
  /// Information about the Capacity Reservation targeting option.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance to be modified.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyInstanceCapacityReservationAttributesResult>
      modifyInstanceCapacityReservationAttributes({
    @_s.required
        CapacityReservationSpecification capacityReservationSpecification,
    @_s.required String instanceId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        capacityReservationSpecification, 'capacityReservationSpecification');
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the credit option for CPU usage on a running or stopped burstable
  /// performance instance. The credit options are <code>standard</code> and
  /// <code>unlimited</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [instanceCreditSpecifications] :
  /// Information about the credit option for CPU usage.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token that you provide to ensure idempotency of
  /// your modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyInstanceCreditSpecificationResult>
      modifyInstanceCreditSpecification({
    @_s.required
        List<InstanceCreditSpecificationRequest> instanceCreditSpecifications,
    String clientToken,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        instanceCreditSpecifications, 'instanceCreditSpecifications');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the start time for a scheduled Amazon EC2 instance event.
  ///
  /// Parameter [instanceEventId] :
  /// The ID of the event whose date and time you are modifying.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance with the scheduled event.
  ///
  /// Parameter [notBefore] :
  /// The new date and time when the event will take place.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyInstanceEventStartTimeResult> modifyInstanceEventStartTime({
    @_s.required String instanceEventId,
    @_s.required String instanceId,
    @_s.required DateTime notBefore,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceEventId, 'instanceEventId');
    ArgumentError.checkNotNull(instanceId, 'instanceId');
    ArgumentError.checkNotNull(notBefore, 'notBefore');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modify the instance metadata parameters on a running or stopped instance.
  /// When you modify the parameters on a stopped instance, they are applied
  /// when the instance is started. When you modify the parameters on a running
  /// instance, the API responds with a state of “pending”. After the parameter
  /// modifications are successfully applied to the instance, the state of the
  /// modifications changes from “pending” to “applied” in subsequent
  /// describe-instances API calls. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
  /// Metadata and User Data</a>.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [httpEndpoint] :
  /// This parameter enables or disables the HTTP metadata endpoint on your
  /// instances. If the parameter is not specified, the existing state is
  /// maintained.
  /// <note>
  /// If you specify a value of <code>disabled</code>, you will not be able to
  /// access your instance metadata.
  /// </note>
  ///
  /// Parameter [httpPutResponseHopLimit] :
  /// The desired HTTP PUT response hop limit for instance metadata requests.
  /// The larger the number, the further instance metadata requests can travel.
  /// If no parameter is specified, the existing state is maintained.
  ///
  /// Possible values: Integers from 1 to 64
  ///
  /// Parameter [httpTokens] :
  /// The state of token usage for your instance metadata requests. If the
  /// parameter is not specified in the request, the default state is
  /// <code>optional</code>.
  ///
  /// If the state is <code>optional</code>, you can choose to retrieve instance
  /// metadata with or without a signed token header on your request. If you
  /// retrieve the IAM role credentials without a token, the version 1.0 role
  /// credentials are returned. If you retrieve the IAM role credentials using a
  /// valid signed token, the version 2.0 role credentials are returned.
  ///
  /// If the state is <code>required</code>, you must send a signed token header
  /// with any instance metadata retrieval requests. In this state, retrieving
  /// the IAM role credential always returns the version 2.0 credentials; the
  /// version 1.0 credentials are not available.
  Future<ModifyInstanceMetadataOptionsResult> modifyInstanceMetadataOptions({
    @_s.required String instanceId,
    bool dryRun,
    InstanceMetadataEndpointState httpEndpoint,
    int httpPutResponseHopLimit,
    HttpTokensState httpTokens,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the placement attributes for a specified instance. You can do the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// Modify the affinity between an instance and a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated
  /// Host</a>. When affinity is set to <code>host</code> and the instance is
  /// not associated with a specific Dedicated Host, the next time the instance
  /// is launched, it is automatically associated with the host on which it
  /// lands. If the instance is restarted or rebooted, this relationship
  /// persists.
  /// </li>
  /// <li>
  /// Change the Dedicated Host with which an instance is associated.
  /// </li>
  /// <li>
  /// Change the instance tenancy of an instance from <code>host</code> to
  /// <code>dedicated</code>, or from <code>dedicated</code> to
  /// <code>host</code>.
  /// </li>
  /// <li>
  /// Move an instance to or from a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement
  /// group</a>.
  /// </li>
  /// </ul>
  /// At least one attribute for affinity, host ID, tenancy, or placement group
  /// name must be specified in the request. Affinity and tenancy can be
  /// modified in the same request.
  ///
  /// To modify the host ID, tenancy, placement group, or partition for an
  /// instance, the instance must be in the <code>stopped</code> state.
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance that you are modifying.
  ///
  /// Parameter [affinity] :
  /// The affinity setting for the instance.
  ///
  /// Parameter [groupName] :
  /// The name of the placement group in which to place the instance. For spread
  /// placement groups, the instance must have a tenancy of
  /// <code>default</code>. For cluster and partition placement groups, the
  /// instance must have a tenancy of <code>default</code> or
  /// <code>dedicated</code>.
  ///
  /// To remove an instance from a placement group, specify an empty string
  /// ("").
  ///
  /// Parameter [hostId] :
  /// The ID of the Dedicated Host with which to associate the instance.
  ///
  /// Parameter [hostResourceGroupArn] :
  /// The ARN of the host resource group in which to place the instance.
  ///
  /// Parameter [partitionNumber] :
  /// Reserved for future use.
  ///
  /// Parameter [tenancy] :
  /// The tenancy for the instance.
  Future<ModifyInstancePlacementResult> modifyInstancePlacement({
    @_s.required String instanceId,
    Affinity affinity,
    String groupName,
    String hostId,
    String hostResourceGroupArn,
    int partitionNumber,
    HostTenancy tenancy,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a launch template. You can specify which version of the launch
  /// template to set as the default version. When launching an instance, the
  /// default version applies when a launch template version is not specified.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Constraint: Maximum 128 ASCII characters.
  ///
  /// Parameter [defaultVersion] :
  /// The version number of the launch template to set as the default version.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [launchTemplateId] :
  /// The ID of the launch template. You must specify either the launch template
  /// ID or launch template name in the request.
  ///
  /// Parameter [launchTemplateName] :
  /// The name of the launch template. You must specify either the launch
  /// template ID or launch template name in the request.
  Future<ModifyLaunchTemplateResult> modifyLaunchTemplate({
    String clientToken,
    String defaultVersion,
    bool dryRun,
    String launchTemplateId,
    String launchTemplateName,
  }) async {
    _s.validateStringLength(
      'launchTemplateName',
      launchTemplateName,
      3,
      128,
    );
    _s.validateStringPattern(
      'launchTemplateName',
      launchTemplateName,
      r'''[a-zA-Z0-9\(\)\.\-/_]+''',
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified network interface attribute. You can specify only
  /// one attribute at a time. You can use this action to attach and detach
  /// security groups from an existing EC2 instance.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [attachment] :
  /// Information about the interface attachment. If modifying the 'delete on
  /// termination' attribute, you must specify the ID of the interface
  /// attachment.
  ///
  /// Parameter [description] :
  /// A description for the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groups] :
  /// Changes the security groups for the network interface. The new set of
  /// groups you specify replaces the current set. You must specify at least one
  /// group, even if it's just the default security group in the VPC. You must
  /// specify the ID of the security group, not the name.
  ///
  /// Parameter [sourceDestCheck] :
  /// Indicates whether source/destination checking is enabled. A value of
  /// <code>true</code> means checking is enabled, and <code>false</code> means
  /// checking is disabled. This value must be <code>false</code> for a NAT
  /// instance to perform NAT. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT
  /// Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  Future<void> modifyNetworkInterfaceAttribute({
    @_s.required String networkInterfaceId,
    NetworkInterfaceAttachmentChanges attachment,
    AttributeValue description,
    bool dryRun,
    List<String> groups,
    AttributeBooleanValue sourceDestCheck,
  }) async {
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the Availability Zone, instance count, instance type, or network
  /// platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved
  /// Instances to be modified must be identical, except for Availability Zone,
  /// network platform, and instance type.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying
  /// Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.
  ///
  /// Parameter [reservedInstancesIds] :
  /// The IDs of the Reserved Instances to modify.
  ///
  /// Parameter [targetConfigurations] :
  /// The configuration settings for the Reserved Instances to modify.
  ///
  /// Parameter [clientToken] :
  /// A unique, case-sensitive token you provide to ensure idempotency of your
  /// modification request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  Future<ModifyReservedInstancesResult> modifyReservedInstances({
    @_s.required List<String> reservedInstancesIds,
    @_s.required List<ReservedInstancesConfiguration> targetConfigurations,
    String clientToken,
  }) async {
    ArgumentError.checkNotNull(reservedInstancesIds, 'reservedInstancesIds');
    ArgumentError.checkNotNull(targetConfigurations, 'targetConfigurations');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Adds or removes permission settings for the specified snapshot. You may
  /// add or remove specified AWS account IDs from a snapshot's list of create
  /// volume permissions, but you cannot do both in a single operation. If you
  /// need to both add and remove account IDs for a snapshot, you must use
  /// multiple operations. You can make up to 500 modifications to a snapshot in
  /// a single operation.
  ///
  /// Encrypted snapshots and snapshots with AWS Marketplace product codes
  /// cannot be made public. Snapshots encrypted with your default CMK cannot be
  /// shared with other accounts.
  ///
  /// For more information about modifying snapshot permissions, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing
  /// Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot.
  ///
  /// Parameter [attribute] :
  /// The snapshot attribute to modify. Only volume creation permissions can be
  /// modified.
  ///
  /// Parameter [createVolumePermission] :
  /// A JSON representation of the snapshot attribute modification.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupNames] :
  /// The group to modify for the snapshot.
  ///
  /// Parameter [operationType] :
  /// The type of operation to perform to the attribute.
  ///
  /// Parameter [userIds] :
  /// The account ID to modify for the snapshot.
  Future<void> modifySnapshotAttribute({
    @_s.required String snapshotId,
    SnapshotAttributeName attribute,
    CreateVolumePermissionModifications createVolumePermission,
    bool dryRun,
    List<String> groupNames,
    OperationType operationType,
    List<String> userIds,
  }) async {
    ArgumentError.checkNotNull(snapshotId, 'snapshotId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified Spot Fleet request.
  ///
  /// You can only modify a Spot Fleet request of type <code>maintain</code>.
  ///
  /// While the Spot Fleet request is being modified, it is in the
  /// <code>modifying</code> state.
  ///
  /// To scale up your Spot Fleet, increase its target capacity. The Spot Fleet
  /// launches the additional Spot Instances according to the allocation
  /// strategy for the Spot Fleet request. If the allocation strategy is
  /// <code>lowestPrice</code>, the Spot Fleet launches instances using the Spot
  /// Instance pool with the lowest price. If the allocation strategy is
  /// <code>diversified</code>, the Spot Fleet distributes the instances across
  /// the Spot Instance pools. If the allocation strategy is
  /// <code>capacityOptimized</code>, Spot Fleet launches instances from Spot
  /// Instance pools with optimal capacity for the number of instances that are
  /// launching.
  ///
  /// To scale down your Spot Fleet, decrease its target capacity. First, the
  /// Spot Fleet cancels any open requests that exceed the new target capacity.
  /// You can request that the Spot Fleet terminate Spot Instances until the
  /// size of the fleet no longer exceeds the new target capacity. If the
  /// allocation strategy is <code>lowestPrice</code>, the Spot Fleet terminates
  /// the instances with the highest price per unit. If the allocation strategy
  /// is <code>capacityOptimized</code>, the Spot Fleet terminates the instances
  /// in the Spot Instance pools that have the least available Spot Instance
  /// capacity. If the allocation strategy is <code>diversified</code>, the Spot
  /// Fleet terminates instances across the Spot Instance pools. Alternatively,
  /// you can request that the Spot Fleet keep the fleet at its current size,
  /// but not replace any Spot Instances that are interrupted or that you
  /// terminate manually.
  ///
  /// If you are finished with your Spot Fleet for now, but will use it again
  /// later, you can set the target capacity to 0.
  ///
  /// Parameter [spotFleetRequestId] :
  /// The ID of the Spot Fleet request.
  ///
  /// Parameter [excessCapacityTerminationPolicy] :
  /// Indicates whether running Spot Instances should be terminated if the
  /// target capacity of the Spot Fleet request is decreased below the current
  /// size of the Spot Fleet.
  ///
  /// Parameter [onDemandTargetCapacity] :
  /// The number of On-Demand Instances in the fleet.
  ///
  /// Parameter [targetCapacity] :
  /// The size of the fleet.
  Future<ModifySpotFleetRequestResponse> modifySpotFleetRequest({
    @_s.required String spotFleetRequestId,
    ExcessCapacityTerminationPolicy excessCapacityTerminationPolicy,
    int onDemandTargetCapacity,
    int targetCapacity,
  }) async {
    ArgumentError.checkNotNull(spotFleetRequestId, 'spotFleetRequestId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a subnet attribute. You can only modify one attribute at a time.
  ///
  /// Parameter [subnetId] :
  /// The ID of the subnet.
  ///
  /// Parameter [assignIpv6AddressOnCreation] :
  /// Specify <code>true</code> to indicate that network interfaces created in
  /// the specified subnet should be assigned an IPv6 address. This includes a
  /// network interface that's created when launching an instance into the
  /// subnet (the instance therefore receives an IPv6 address).
  ///
  /// If you enable the IPv6 addressing feature for your subnet, your network
  /// interface or instance only receives an IPv6 address if it's created using
  /// version <code>2016-11-15</code> or later of the Amazon EC2 API.
  ///
  /// Parameter [mapPublicIpOnLaunch] :
  /// Specify <code>true</code> to indicate that ENIs attached to instances
  /// created in the specified subnet should be assigned a public IPv4 address.
  Future<void> modifySubnetAttribute({
    @_s.required String subnetId,
    AttributeBooleanValue assignIpv6AddressOnCreation,
    AttributeBooleanValue mapPublicIpOnLaunch,
  }) async {
    ArgumentError.checkNotNull(subnetId, 'subnetId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Allows or restricts mirroring network services.
  ///
  /// By default, Amazon DNS network services are not eligible for Traffic
  /// Mirror. Use <code>AddNetworkServices</code> to add network services to a
  /// Traffic Mirror filter. When a network service is added to the Traffic
  /// Mirror filter, all traffic related to that network service will be
  /// mirrored. When you no longer want to mirror network services, use
  /// <code>RemoveNetworkServices</code> to remove the network services from the
  /// Traffic Mirror filter.
  ///
  /// For information about filter rule properties, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html">Network
  /// Services</a> in the <i>Traffic Mirroring User Guide </i>.
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the Traffic Mirror filter.
  ///
  /// Parameter [addNetworkServices] :
  /// The network service, for example Amazon DNS, that you want to mirror.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [removeNetworkServices] :
  /// The network service, for example Amazon DNS, that you no longer want to
  /// mirror.
  Future<ModifyTrafficMirrorFilterNetworkServicesResult>
      modifyTrafficMirrorFilterNetworkServices({
    @_s.required String trafficMirrorFilterId,
    List<String> addNetworkServices,
    bool dryRun,
    List<String> removeNetworkServices,
  }) async {
    ArgumentError.checkNotNull(trafficMirrorFilterId, 'trafficMirrorFilterId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified Traffic Mirror rule.
  ///
  /// <code>DestinationCidrBlock</code> and <code>SourceCidrBlock</code> must
  /// both be an IPv4 range or an IPv6 range.
  ///
  /// Parameter [trafficMirrorFilterRuleId] :
  /// The ID of the Traffic Mirror rule.
  ///
  /// Parameter [description] :
  /// The description to assign to the Traffic Mirror rule.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The destination CIDR block to assign to the Traffic Mirror rule.
  ///
  /// Parameter [destinationPortRange] :
  /// The destination ports that are associated with the Traffic Mirror rule.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [protocol] :
  /// The protocol, for example TCP, to assign to the Traffic Mirror rule.
  ///
  /// Parameter [removeFields] :
  /// The properties that you want to remove from the Traffic Mirror filter
  /// rule.
  ///
  /// When you remove a property from a Traffic Mirror filter rule, the property
  /// is set to the default.
  ///
  /// Parameter [ruleAction] :
  /// The action to assign to the rule.
  ///
  /// Parameter [ruleNumber] :
  /// The number of the Traffic Mirror rule. This number must be unique for each
  /// Traffic Mirror rule in a given direction. The rules are processed in
  /// ascending order by rule number.
  ///
  /// Parameter [sourceCidrBlock] :
  /// The source CIDR block to assign to the Traffic Mirror rule.
  ///
  /// Parameter [sourcePortRange] :
  /// The port range to assign to the Traffic Mirror rule.
  ///
  /// Parameter [trafficDirection] :
  /// The type of traffic (<code>ingress</code> | <code>egress</code>) to assign
  /// to the rule.
  Future<ModifyTrafficMirrorFilterRuleResult> modifyTrafficMirrorFilterRule({
    @_s.required String trafficMirrorFilterRuleId,
    String description,
    String destinationCidrBlock,
    TrafficMirrorPortRangeRequest destinationPortRange,
    bool dryRun,
    int protocol,
    List<String> removeFields,
    TrafficMirrorRuleAction ruleAction,
    int ruleNumber,
    String sourceCidrBlock,
    TrafficMirrorPortRangeRequest sourcePortRange,
    TrafficDirection trafficDirection,
  }) async {
    ArgumentError.checkNotNull(
        trafficMirrorFilterRuleId, 'trafficMirrorFilterRuleId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a Traffic Mirror session.
  ///
  /// Parameter [trafficMirrorSessionId] :
  /// The ID of the Traffic Mirror session.
  ///
  /// Parameter [description] :
  /// The description to assign to the Traffic Mirror session.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [packetLength] :
  /// The number of bytes in each packet to mirror. These are bytes after the
  /// VXLAN header. To mirror a subset, set this to the length (in bytes) to
  /// mirror. For example, if you set this value to 100, then the first 100
  /// bytes that meet the filter criteria are copied to the target. Do not
  /// specify this parameter when you want to mirror the entire packet.
  ///
  /// Parameter [removeFields] :
  /// The properties that you want to remove from the Traffic Mirror session.
  ///
  /// When you remove a property from a Traffic Mirror session, the property is
  /// set to the default.
  ///
  /// Parameter [sessionNumber] :
  /// The session number determines the order in which sessions are evaluated
  /// when an interface is used by multiple sessions. The first session with a
  /// matching filter is the one that mirrors the packets.
  ///
  /// Valid values are 1-32766.
  ///
  /// Parameter [trafficMirrorFilterId] :
  /// The ID of the Traffic Mirror filter.
  ///
  /// Parameter [trafficMirrorTargetId] :
  /// The Traffic Mirror target. The target must be in the same VPC as the
  /// source, or have a VPC peering connection with the source.
  ///
  /// Parameter [virtualNetworkId] :
  /// The virtual network ID of the Traffic Mirror session.
  Future<ModifyTrafficMirrorSessionResult> modifyTrafficMirrorSession({
    @_s.required String trafficMirrorSessionId,
    String description,
    bool dryRun,
    int packetLength,
    List<String> removeFields,
    int sessionNumber,
    String trafficMirrorFilterId,
    String trafficMirrorTargetId,
    int virtualNetworkId,
  }) async {
    ArgumentError.checkNotNull(
        trafficMirrorSessionId, 'trafficMirrorSessionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified VPC attachment.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [addSubnetIds] :
  /// The IDs of one or more subnets to add. You can specify at most one subnet
  /// per Availability Zone.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [options] :
  /// The new VPC attachment options.
  /// <note>
  /// You cannot modify the IPv6 options.
  /// </note>
  ///
  /// Parameter [removeSubnetIds] :
  /// The IDs of one or more subnets to remove.
  Future<ModifyTransitGatewayVpcAttachmentResult>
      modifyTransitGatewayVpcAttachment({
    @_s.required String transitGatewayAttachmentId,
    List<String> addSubnetIds,
    bool dryRun,
    ModifyTransitGatewayVpcAttachmentRequestOptions options,
    List<String> removeSubnetIds,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// You can modify several parameters of an existing EBS volume, including
  /// volume size, volume type, and IOPS capacity. If your EBS volume is
  /// attached to a current-generation EC2 instance type, you may be able to
  /// apply these changes without stopping the instance or detaching the volume
  /// from it. For more information about modifying an EBS volume running Linux,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying
  /// the Size, IOPS, or Type of an EBS Volume on Linux</a>. For more
  /// information about modifying an EBS volume running Windows, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying
  /// the Size, IOPS, or Type of an EBS Volume on Windows</a>.
  ///
  /// When you complete a resize operation on your volume, you need to extend
  /// the volume's file-system size to take advantage of the new storage
  /// capacity. For information about extending a Linux file system, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux">Extending
  /// a Linux File System</a>. For information about extending a Windows file
  /// system, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows">Extending
  /// a Windows File System</a>.
  ///
  /// You can use CloudWatch Events to check the status of a modification to an
  /// EBS volume. For information about CloudWatch Events, see the <a
  /// href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon
  /// CloudWatch Events User Guide</a>. You can also track the status of a
  /// modification using <a>DescribeVolumesModifications</a>. For information
  /// about tracking status changes using either method, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring
  /// Volume Modifications</a>.
  ///
  /// With previous-generation instance types, resizing an EBS volume may
  /// require detaching and reattaching the volume or stopping and restarting
  /// the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying
  /// the Size, IOPS, or Type of an EBS Volume on Linux</a> and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying
  /// the Size, IOPS, or Type of an EBS Volume on Windows</a>.
  ///
  /// If you reach the maximum volume modification rate per volume limit, you
  /// will need to wait at least six hours before applying further modifications
  /// to the affected EBS volume.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [iops] :
  /// The target IOPS rate of the volume.
  ///
  /// This is only valid for Provisioned IOPS SSD (<code>io1</code>) volumes.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html#EBSVolumeTypes_piops">Provisioned
  /// IOPS SSD (io1) Volumes</a>.
  ///
  /// Default: If no IOPS value is specified, the existing value is retained.
  ///
  /// Parameter [size] :
  /// The target size of the volume, in GiB. The target volume size must be
  /// greater than or equal to than the existing size of the volume. For
  /// information about available EBS volume sizes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon
  /// EBS Volume Types</a>.
  ///
  /// Default: If no size is specified, the existing size is retained.
  ///
  /// Parameter [volumeType] :
  /// The target EBS volume type of the volume.
  ///
  /// Default: If no type is specified, the existing type is retained.
  Future<ModifyVolumeResult> modifyVolume({
    @_s.required String volumeId,
    bool dryRun,
    int iops,
    int size,
    VolumeType volumeType,
  }) async {
    ArgumentError.checkNotNull(volumeId, 'volumeId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a volume attribute.
  ///
  /// By default, all I/O operations for the volume are suspended when the data
  /// on the volume is determined to be potentially inconsistent, to prevent
  /// undetectable, latent data corruption. The I/O access to the volume can be
  /// resumed by first enabling I/O access and then checking the data
  /// consistency on your volume.
  ///
  /// You can change the default behavior to resume I/O operations. We recommend
  /// that you change this only for boot volumes or for volumes that are
  /// stateless or disposable.
  ///
  /// Parameter [volumeId] :
  /// The ID of the volume.
  ///
  /// Parameter [autoEnableIO] :
  /// Indicates whether the volume should be auto-enabled for I/O operations.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> modifyVolumeAttribute({
    @_s.required String volumeId,
    AttributeBooleanValue autoEnableIO,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(volumeId, 'volumeId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the specified attribute of the specified VPC.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [enableDnsHostnames] :
  /// Indicates whether the instances launched in the VPC get DNS hostnames. If
  /// enabled, instances in the VPC get DNS hostnames; otherwise, they do not.
  ///
  /// You cannot modify the DNS resolution and DNS hostnames attributes in the
  /// same request. Use separate requests for each attribute. You can only
  /// enable DNS hostnames if you've enabled DNS support.
  ///
  /// Parameter [enableDnsSupport] :
  /// Indicates whether the DNS resolution is supported for the VPC. If enabled,
  /// queries to the Amazon provided DNS server at the 169.254.169.253 IP
  /// address, or the reserved IP address at the base of the VPC network range
  /// "plus two" succeed. If disabled, the Amazon provided DNS service in the
  /// VPC that resolves public DNS hostnames to IP addresses is not enabled.
  ///
  /// You cannot modify the DNS resolution and DNS hostnames attributes in the
  /// same request. Use separate requests for each attribute.
  Future<void> modifyVpcAttribute({
    @_s.required String vpcId,
    AttributeBooleanValue enableDnsHostnames,
    AttributeBooleanValue enableDnsSupport,
  }) async {
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies attributes of a specified VPC endpoint. The attributes that you
  /// can modify depend on the type of VPC endpoint (interface or gateway). For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC
  /// Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [vpcEndpointId] :
  /// The ID of the endpoint.
  ///
  /// Parameter [addRouteTableIds] :
  /// (Gateway endpoint) One or more route tables IDs to associate with the
  /// endpoint.
  ///
  /// Parameter [addSecurityGroupIds] :
  /// (Interface endpoint) One or more security group IDs to associate with the
  /// network interface.
  ///
  /// Parameter [addSubnetIds] :
  /// (Interface endpoint) One or more subnet IDs in which to serve the
  /// endpoint.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [policyDocument] :
  /// A policy to attach to the endpoint that controls access to the service.
  /// The policy must be in valid JSON format.
  ///
  /// Parameter [privateDnsEnabled] :
  /// (Interface endpoint) Indicates whether a private hosted zone is associated
  /// with the VPC.
  ///
  /// Parameter [removeRouteTableIds] :
  /// (Gateway endpoint) One or more route table IDs to disassociate from the
  /// endpoint.
  ///
  /// Parameter [removeSecurityGroupIds] :
  /// (Interface endpoint) One or more security group IDs to disassociate from
  /// the network interface.
  ///
  /// Parameter [removeSubnetIds] :
  /// (Interface endpoint) One or more subnets IDs in which to remove the
  /// endpoint.
  ///
  /// Parameter [resetPolicy] :
  /// (Gateway endpoint) Specify <code>true</code> to reset the policy document
  /// to the default policy. The default policy allows full access to the
  /// service.
  Future<ModifyVpcEndpointResult> modifyVpcEndpoint({
    @_s.required String vpcEndpointId,
    List<String> addRouteTableIds,
    List<String> addSecurityGroupIds,
    List<String> addSubnetIds,
    bool dryRun,
    String policyDocument,
    bool privateDnsEnabled,
    List<String> removeRouteTableIds,
    List<String> removeSecurityGroupIds,
    List<String> removeSubnetIds,
    bool resetPolicy,
  }) async {
    ArgumentError.checkNotNull(vpcEndpointId, 'vpcEndpointId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies a connection notification for VPC endpoint or VPC endpoint
  /// service. You can change the SNS topic for the notification, or the events
  /// for which to be notified.
  ///
  /// Parameter [connectionNotificationId] :
  /// The ID of the notification.
  ///
  /// Parameter [connectionEvents] :
  /// One or more events for the endpoint. Valid values are <code>Accept</code>,
  /// <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
  ///
  /// Parameter [connectionNotificationArn] :
  /// The ARN for the SNS topic for the notification.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVpcEndpointConnectionNotificationResult>
      modifyVpcEndpointConnectionNotification({
    @_s.required String connectionNotificationId,
    List<String> connectionEvents,
    String connectionNotificationArn,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        connectionNotificationId, 'connectionNotificationId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the attributes of your VPC endpoint service configuration. You
  /// can change the Network Load Balancers for your service, and you can
  /// specify whether acceptance is required for requests to connect to your
  /// endpoint service through an interface VPC endpoint.
  ///
  /// If you set or modify the private DNS name, you must prove that you own the
  /// private DNS domain name. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC
  /// Endpoint Service Private DNS Name Verification</a> in the <i>Amazon
  /// Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [serviceId] :
  /// The ID of the service.
  ///
  /// Parameter [acceptanceRequired] :
  /// Indicates whether requests to create an endpoint to your service must be
  /// accepted.
  ///
  /// Parameter [addNetworkLoadBalancerArns] :
  /// The Amazon Resource Names (ARNs) of Network Load Balancers to add to your
  /// service configuration.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [privateDnsName] :
  /// The private DNS name to assign to the endpoint service.
  ///
  /// Parameter [removeNetworkLoadBalancerArns] :
  /// The Amazon Resource Names (ARNs) of Network Load Balancers to remove from
  /// your service configuration.
  ///
  /// Parameter [removePrivateDnsName] :
  /// Removes the private DNS name of the endpoint service.
  Future<ModifyVpcEndpointServiceConfigurationResult>
      modifyVpcEndpointServiceConfiguration({
    @_s.required String serviceId,
    bool acceptanceRequired,
    List<String> addNetworkLoadBalancerArns,
    bool dryRun,
    String privateDnsName,
    List<String> removeNetworkLoadBalancerArns,
    bool removePrivateDnsName,
  }) async {
    ArgumentError.checkNotNull(serviceId, 'serviceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the permissions for your <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC
  /// endpoint service</a>. You can add or remove permissions for service
  /// consumers (IAM users, IAM roles, and AWS accounts) to connect to your
  /// endpoint service.
  ///
  /// If you grant permissions to all principals, the service is public. Any
  /// users who know the name of a public service can send a request to attach
  /// an endpoint. If the service does not require manual approval, attachments
  /// are automatically approved.
  ///
  /// Parameter [serviceId] :
  /// The ID of the service.
  ///
  /// Parameter [addAllowedPrincipals] :
  /// The Amazon Resource Names (ARN) of one or more principals. Permissions are
  /// granted to the principals in this list. To grant permissions to all
  /// principals, specify an asterisk (*).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [removeAllowedPrincipals] :
  /// The Amazon Resource Names (ARN) of one or more principals. Permissions are
  /// revoked for principals in this list.
  Future<ModifyVpcEndpointServicePermissionsResult>
      modifyVpcEndpointServicePermissions({
    @_s.required String serviceId,
    List<String> addAllowedPrincipals,
    bool dryRun,
    List<String> removeAllowedPrincipals,
  }) async {
    ArgumentError.checkNotNull(serviceId, 'serviceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the VPC peering connection options on one side of a VPC peering
  /// connection. You can do the following:
  ///
  /// <ul>
  /// <li>
  /// Enable/disable communication over the peering connection between an
  /// EC2-Classic instance that's linked to your VPC (using ClassicLink) and
  /// instances in the peer VPC.
  /// </li>
  /// <li>
  /// Enable/disable communication over the peering connection between instances
  /// in your VPC and an EC2-Classic instance that's linked to the peer VPC.
  /// </li>
  /// <li>
  /// Enable/disable the ability to resolve public DNS hostnames to private IP
  /// addresses when queried from instances in the peer VPC.
  /// </li>
  /// </ul>
  /// If the peered VPCs are in the same AWS account, you can enable DNS
  /// resolution for queries from the local VPC. This ensures that queries from
  /// the local VPC resolve to private IP addresses in the peer VPC. This option
  /// is not available if the peered VPCs are in different AWS accounts or
  /// different Regions. For peered VPCs in different AWS accounts, each AWS
  /// account owner must initiate a separate request to modify the peering
  /// connection options. For inter-region peering connections, you must use the
  /// Region for the requester VPC to modify the requester VPC peering options
  /// and the Region for the accepter VPC to modify the accepter VPC peering
  /// options. To verify which VPCs are the accepter and the requester for a VPC
  /// peering connection, use the <a>DescribeVpcPeeringConnections</a> command.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of the VPC peering connection.
  ///
  /// Parameter [accepterPeeringConnectionOptions] :
  /// The VPC peering connection options for the accepter VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [requesterPeeringConnectionOptions] :
  /// The VPC peering connection options for the requester VPC.
  Future<ModifyVpcPeeringConnectionOptionsResult>
      modifyVpcPeeringConnectionOptions({
    @_s.required String vpcPeeringConnectionId,
    PeeringConnectionOptionsRequest accepterPeeringConnectionOptions,
    bool dryRun,
    PeeringConnectionOptionsRequest requesterPeeringConnectionOptions,
  }) async {
    ArgumentError.checkNotNull(
        vpcPeeringConnectionId, 'vpcPeeringConnectionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the instance tenancy attribute of the specified VPC. You can
  /// change the instance tenancy attribute of a VPC to <code>default</code>
  /// only. You cannot change the instance tenancy attribute to
  /// <code>dedicated</code>.
  ///
  /// After you modify the tenancy of the VPC, any new instances that you launch
  /// into the VPC have a tenancy of <code>default</code>, unless you specify
  /// otherwise during launch. The tenancy of any existing instances in the VPC
  /// is not affected.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated
  /// Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [instanceTenancy] :
  /// The instance tenancy attribute for the VPC.
  ///
  /// Parameter [vpcId] :
  /// The ID of the VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVpcTenancyResult> modifyVpcTenancy({
    @_s.required VpcTenancy instanceTenancy,
    @_s.required String vpcId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceTenancy, 'instanceTenancy');
    ArgumentError.checkNotNull(vpcId, 'vpcId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the target gateway of an AWS Site-to-Site VPN connection. The
  /// following migration options are available:
  ///
  /// <ul>
  /// <li>
  /// An existing virtual private gateway to a new virtual private gateway
  /// </li>
  /// <li>
  /// An existing virtual private gateway to a transit gateway
  /// </li>
  /// <li>
  /// An existing transit gateway to a new transit gateway
  /// </li>
  /// <li>
  /// An existing transit gateway to a virtual private gateway
  /// </li>
  /// </ul>
  /// Before you perform the migration to the new gateway, you must configure
  /// the new gateway. Use <a>CreateVpnGateway</a> to create a virtual private
  /// gateway, or <a>CreateTransitGateway</a> to create a transit gateway.
  ///
  /// This step is required when you migrate from a virtual private gateway with
  /// static routes to a transit gateway.
  ///
  /// You must delete the static routes before you migrate to the new gateway.
  ///
  /// Keep a copy of the static route before you delete it. You will need to add
  /// back these routes to the transit gateway after the VPN connection
  /// migration is complete.
  ///
  /// After you migrate to the new gateway, you might need to modify your VPC
  /// route table. Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the
  /// changes described in <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">VPN
  /// Gateway Target Modification Required VPC Route Table Updates</a> in the
  /// <i>AWS Site-to-Site VPN User Guide</i>.
  ///
  /// When the new gateway is a transit gateway, modify the transit gateway
  /// route table to allow traffic between the VPC and the AWS Site-to-Site VPN
  /// connection. Use <a>CreateTransitGatewayRoute</a> to add the routes.
  ///
  /// If you deleted VPN static routes, you must add the static routes to the
  /// transit gateway route table.
  ///
  /// After you perform this operation, the AWS VPN endpoint's IP addresses on
  /// the AWS side and the tunnel options remain intact. Your AWS Site-to-Site
  /// VPN connection will be temporarily unavailable for a brief period while we
  /// provision the new endpoints.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the VPN connection.
  ///
  /// Parameter [customerGatewayId] :
  /// The ID of the customer gateway at your end of the VPN connection.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of the transit gateway.
  ///
  /// Parameter [vpnGatewayId] :
  /// The ID of the virtual private gateway at the AWS side of the VPN
  /// connection.
  Future<ModifyVpnConnectionResult> modifyVpnConnection({
    @_s.required String vpnConnectionId,
    String customerGatewayId,
    bool dryRun,
    String transitGatewayId,
    String vpnGatewayId,
  }) async {
    ArgumentError.checkNotNull(vpnConnectionId, 'vpnConnectionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the VPN tunnel endpoint certificate.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the AWS Site-to-Site VPN connection.
  ///
  /// Parameter [vpnTunnelOutsideIpAddress] :
  /// The external IP address of the VPN tunnel.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVpnTunnelCertificateResult> modifyVpnTunnelCertificate({
    @_s.required String vpnConnectionId,
    @_s.required String vpnTunnelOutsideIpAddress,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(vpnConnectionId, 'vpnConnectionId');
    ArgumentError.checkNotNull(
        vpnTunnelOutsideIpAddress, 'vpnTunnelOutsideIpAddress');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Modifies the options for a VPN tunnel in an AWS Site-to-Site VPN
  /// connection. You can modify multiple options for a tunnel in a single
  /// request, but you can only modify one tunnel at a time. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html">Site-to-Site
  /// VPN Tunnel Options for Your Site-to-Site VPN Connection</a> in the <i>AWS
  /// Site-to-Site VPN User Guide</i>.
  ///
  /// Parameter [tunnelOptions] :
  /// The tunnel options to modify.
  ///
  /// Parameter [vpnConnectionId] :
  /// The ID of the AWS Site-to-Site VPN connection.
  ///
  /// Parameter [vpnTunnelOutsideIpAddress] :
  /// The external IP address of the VPN tunnel.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ModifyVpnTunnelOptionsResult> modifyVpnTunnelOptions({
    @_s.required ModifyVpnTunnelOptionsSpecification tunnelOptions,
    @_s.required String vpnConnectionId,
    @_s.required String vpnTunnelOutsideIpAddress,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(tunnelOptions, 'tunnelOptions');
    ArgumentError.checkNotNull(vpnConnectionId, 'vpnConnectionId');
    ArgumentError.checkNotNull(
        vpnTunnelOutsideIpAddress, 'vpnTunnelOutsideIpAddress');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Enables detailed monitoring for a running instance. Otherwise, basic
  /// monitoring is enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring
  /// Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// To disable detailed monitoring, see .
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<MonitorInstancesResult> monitorInstances({
    @_s.required List<String> instanceIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceIds, 'instanceIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC
  /// platform. The Elastic IP address must be allocated to your account for
  /// more than 24 hours, and it must not be associated with an instance. After
  /// the Elastic IP address is moved, it is no longer available for use in the
  /// EC2-Classic platform, unless you move it back using the
  /// <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP
  /// address that was originally allocated for use in the EC2-VPC platform to
  /// the EC2-Classic platform.
  ///
  /// Parameter [publicIp] :
  /// The Elastic IP address.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<MoveAddressToVpcResult> moveAddressToVpc({
    @_s.required String publicIp,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(publicIp, 'publicIp');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Provisions an IPv4 or IPv6 address range for use with your AWS resources
  /// through bring your own IP addresses (BYOIP) and creates a corresponding
  /// address pool. After the address range is provisioned, it is ready to be
  /// advertised using <a>AdvertiseByoipCidr</a>.
  ///
  /// AWS verifies that you own the address range and are authorized to
  /// advertise it. You must ensure that the address range is registered to you
  /// and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618
  /// to advertise the address range. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring
  /// Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// Provisioning an address range is an asynchronous operation, so the call
  /// returns immediately, but the address range is not ready to use until its
  /// status changes from <code>pending-provision</code> to
  /// <code>provisioned</code>. To monitor the status of an address range, use
  /// <a>DescribeByoipCidrs</a>. To allocate an Elastic IP address from your
  /// IPv4 address pool, use <a>AllocateAddress</a> with either the specific
  /// address from the address pool or the ID of the address pool.
  ///
  /// Parameter [cidr] :
  /// The public IPv4 or IPv6 address range, in CIDR notation. The most specific
  /// IPv4 prefix that you can specify is /24. The most specific IPv6 prefix you
  /// can specify is /56. The address range cannot overlap with another address
  /// range that you've brought to this or another Region.
  ///
  /// Parameter [cidrAuthorizationContext] :
  /// A signed document that proves that you are authorized to bring the
  /// specified IP address range to Amazon using BYOIP.
  ///
  /// Parameter [description] :
  /// A description for the address range and the address pool.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [publiclyAdvertisable] :
  /// (IPv6 only) Indicate whether the address range will be publicly advertised
  /// to the internet.
  ///
  /// Default: true
  Future<ProvisionByoipCidrResult> provisionByoipCidr({
    @_s.required String cidr,
    CidrAuthorizationContext cidrAuthorizationContext,
    String description,
    bool dryRun,
    bool publiclyAdvertisable,
  }) async {
    ArgumentError.checkNotNull(cidr, 'cidr');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Purchase a reservation with configurations that match those of your
  /// Dedicated Host. You must have active Dedicated Hosts in your account
  /// before you purchase a reservation. This action results in the specified
  /// reservation being purchased and charged to your account.
  ///
  /// Parameter [hostIdSet] :
  /// The IDs of the Dedicated Hosts with which the reservation will be
  /// associated.
  ///
  /// Parameter [offeringId] :
  /// The ID of the offering.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  ///
  /// Parameter [currencyCode] :
  /// The currency in which the <code>totalUpfrontPrice</code>,
  /// <code>LimitPrice</code>, and <code>totalHourlyPrice</code> amounts are
  /// specified. At this time, the only supported currency is <code>USD</code>.
  ///
  /// Parameter [limitPrice] :
  /// The specified limit is checked against the total upfront cost of the
  /// reservation (calculated as the offering's upfront cost multiplied by the
  /// host count). If the total upfront cost is greater than the specified price
  /// limit, the request fails. This is used to ensure that the purchase does
  /// not exceed the expected upfront cost of the purchase. At this time, the
  /// only supported currency is <code>USD</code>. For example, to indicate a
  /// limit price of USD 100, specify 100.00.
  Future<PurchaseHostReservationResult> purchaseHostReservation({
    @_s.required List<String> hostIdSet,
    @_s.required String offeringId,
    String clientToken,
    CurrencyCodeValues currencyCode,
    String limitPrice,
  }) async {
    ArgumentError.checkNotNull(hostIdSet, 'hostIdSet');
    ArgumentError.checkNotNull(offeringId, 'offeringId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Purchases a Reserved Instance for use with your account. With Reserved
  /// Instances, you pay a lower hourly rate compared to On-Demand instance
  /// pricing.
  ///
  /// Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved
  /// Instance offerings that match your specifications. After you've purchased
  /// a Reserved Instance, you can check for your new Reserved Instance with
  /// <a>DescribeReservedInstances</a>.
  ///
  /// To queue a purchase for a future date and time, specify a purchase time.
  /// If you do not specify a purchase time, the default is the current time.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved
  /// Instances</a> and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved
  /// Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [instanceCount] :
  /// The number of Reserved Instances to purchase.
  ///
  /// Parameter [reservedInstancesOfferingId] :
  /// The ID of the Reserved Instance offering to purchase.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [limitPrice] :
  /// Specified for Reserved Instance Marketplace offerings to limit the total
  /// order and ensure that the Reserved Instances are not purchased at
  /// unexpected prices.
  ///
  /// Parameter [purchaseTime] :
  /// The time at which to purchase the Reserved Instance, in UTC format (for
  /// example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  Future<PurchaseReservedInstancesOfferingResult>
      purchaseReservedInstancesOffering({
    @_s.required int instanceCount,
    @_s.required String reservedInstancesOfferingId,
    bool dryRun,
    ReservedInstanceLimitPrice limitPrice,
    DateTime purchaseTime,
  }) async {
    ArgumentError.checkNotNull(instanceCount, 'instanceCount');
    ArgumentError.checkNotNull(
        reservedInstancesOfferingId, 'reservedInstancesOfferingId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Purchases the Scheduled Instances with the specified schedule.
  ///
  /// Scheduled Instances enable you to purchase Amazon EC2 compute capacity by
  /// the hour for a one-year term. Before you can purchase a Scheduled
  /// Instance, you must call <a>DescribeScheduledInstanceAvailability</a> to
  /// check for available schedules and obtain a purchase token. After you
  /// purchase a Scheduled Instance, you must call <a>RunScheduledInstances</a>
  /// during each scheduled time period.
  ///
  /// After you purchase a Scheduled Instance, you can't cancel, modify, or
  /// resell your purchase.
  ///
  /// Parameter [purchaseRequests] :
  /// The purchase requests.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that ensures the idempotency of the
  /// request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<PurchaseScheduledInstancesResult> purchaseScheduledInstances({
    @_s.required List<PurchaseRequest> purchaseRequests,
    String clientToken,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(purchaseRequests, 'purchaseRequests');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Requests a reboot of the specified instances. This operation is
  /// asynchronous; it only queues a request to reboot the specified instances.
  /// The operation succeeds if the instances are valid and belong to you.
  /// Requests to reboot terminated instances are ignored.
  ///
  /// If an instance does not cleanly shut down within four minutes, Amazon EC2
  /// performs a hard reboot.
  ///
  /// For more information about troubleshooting, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Getting
  /// Console Output and Rebooting Instances</a> in the <i>Amazon Elastic
  /// Compute Cloud User Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The instance IDs.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> rebootInstances({
    @_s.required List<String> instanceIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceIds, 'instanceIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Registers an AMI. When you're creating an AMI, this is the final step you
  /// must complete before you can launch an instance from the AMI. For more
  /// information about creating AMIs, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Creating
  /// Your Own AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// <note>
  /// For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers
  /// the AMI in a single request, so you don't have to register the AMI
  /// yourself.
  /// </note>
  /// You can also use <code>RegisterImage</code> to create an Amazon EBS-backed
  /// Linux AMI from a snapshot of a root device volume. You specify the
  /// snapshot using the block device mapping. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-launch-snapshot.html">Launching
  /// a Linux Instance from a Backup</a> in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// You can't register an image where a secondary (non-root) snapshot has AWS
  /// Marketplace product codes.
  ///
  /// Windows and some Linux distributions, such as Red Hat Enterprise Linux
  /// (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing
  /// product code associated with an AMI to verify the subscription status for
  /// package updates. To create a new AMI for operating systems that require a
  /// billing product code, instead of registering the AMI, do the following to
  /// preserve the billing product code association:
  /// <ol>
  /// <li>
  /// Launch an instance from an existing AMI with that billing product code.
  /// </li>
  /// <li>
  /// Customize the instance.
  /// </li>
  /// <li>
  /// Create an AMI from the instance using <a>CreateImage</a>.
  /// </li> </ol>
  /// If you purchase a Reserved Instance to apply to an On-Demand Instance that
  /// was launched from an AMI with a billing product code, make sure that the
  /// Reserved Instance has the matching billing product code. If you purchase a
  /// Reserved Instance without the matching billing product code, the Reserved
  /// Instance will not be applied to the On-Demand Instance. For information
  /// about how to obtain the platform details and billing information of an
  /// AMI, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Obtaining
  /// Billing Information</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// If needed, you can deregister an AMI at any time. Any modifications you
  /// make to an AMI backed by an instance store volume invalidates its
  /// registration. If you make changes to an image, deregister the previous
  /// image and register the new image.
  ///
  /// Parameter [name] :
  /// A name for your AMI.
  ///
  /// Constraints: 3-128 alphanumeric characters, parentheses (()), square
  /// brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single
  /// quotes ('), at-signs (@), or underscores(_)
  ///
  /// Parameter [architecture] :
  /// The architecture of the AMI.
  ///
  /// Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance
  /// store-backed AMIs, the architecture specified in the manifest file.
  ///
  /// Parameter [billingProducts] :
  /// The billing product codes. Your account must be authorized to specify
  /// billing product codes. Otherwise, you can use the AWS Marketplace to bill
  /// for the use of an AMI.
  ///
  /// Parameter [blockDeviceMappings] :
  /// The block device mapping entries.
  ///
  /// Parameter [description] :
  /// A description for your AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [enaSupport] :
  /// Set to <code>true</code> to enable enhanced networking with ENA for the
  /// AMI and any instances that you launch from the AMI.
  ///
  /// This option is supported only for HVM AMIs. Specifying this option with a
  /// PV AMI can make instances launched from the AMI unreachable.
  ///
  /// Parameter [imageLocation] :
  /// The full path to your AMI manifest in Amazon S3 storage. The specified
  /// bucket must have the <code>aws-exec-read</code> canned access control list
  /// (ACL) to ensure that it can be accessed by Amazon EC2. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">Canned
  /// ACLs</a> in the <i>Amazon S3 Service Developer Guide</i>.
  ///
  /// Parameter [kernelId] :
  /// The ID of the kernel.
  ///
  /// Parameter [ramdiskId] :
  /// The ID of the RAM disk.
  ///
  /// Parameter [rootDeviceName] :
  /// The device name of the root device volume (for example,
  /// <code>/dev/sda1</code>).
  ///
  /// Parameter [sriovNetSupport] :
  /// Set to <code>simple</code> to enable enhanced networking with the Intel
  /// 82599 Virtual Function interface for the AMI and any instances that you
  /// launch from the AMI.
  ///
  /// There is no way to disable <code>sriovNetSupport</code> at this time.
  ///
  /// This option is supported only for HVM AMIs. Specifying this option with a
  /// PV AMI can make instances launched from the AMI unreachable.
  ///
  /// Parameter [virtualizationType] :
  /// The type of virtualization (<code>hvm</code> | <code>paravirtual</code>).
  ///
  /// Default: <code>paravirtual</code>
  Future<RegisterImageResult> registerImage({
    @_s.required String name,
    ArchitectureValues architecture,
    List<String> billingProducts,
    List<BlockDeviceMapping> blockDeviceMappings,
    String description,
    bool dryRun,
    bool enaSupport,
    String imageLocation,
    String kernelId,
    String ramdiskId,
    String rootDeviceName,
    String sriovNetSupport,
    String virtualizationType,
  }) async {
    ArgumentError.checkNotNull(name, 'name');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Registers a set of tag keys to include in scheduled event notifications
  /// for your resources.
  ///
  /// To remove tags, use .
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceTagAttribute] :
  /// Information about the tag keys to register.
  Future<RegisterInstanceEventNotificationAttributesResult>
      registerInstanceEventNotificationAttributes({
    bool dryRun,
    RegisterInstanceTagAttributeRequest instanceTagAttribute,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Registers members (network interfaces) with the transit gateway multicast
  /// group. A member is a network interface associated with a supported EC2
  /// instance that receives multicast traffic. For information about supported
  /// instances, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
  /// Consideration</a> in <i>Amazon VPC Transit Gateways</i>.
  ///
  /// After you add the members, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a>
  /// to verify that the members were added to the transit gateway multicast
  /// group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupIpAddress] :
  /// The IP address assigned to the transit gateway multicast group.
  ///
  /// Parameter [networkInterfaceIds] :
  /// The group members' network interface IDs to register with the transit
  /// gateway multicast group.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<RegisterTransitGatewayMulticastGroupMembersResult>
      registerTransitGatewayMulticastGroupMembers({
    bool dryRun,
    String groupIpAddress,
    List<String> networkInterfaceIds,
    String transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Registers sources (network interfaces) with the specified transit gateway
  /// multicast group.
  ///
  /// A multicast source is a network interface attached to a supported instance
  /// that sends multicast traffic. For information about supported instances,
  /// see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
  /// Considerations</a> in <i>Amazon VPC Transit Gateways</i>.
  ///
  /// After you add the source, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a>
  /// to verify that the source was added to the multicast group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupIpAddress] :
  /// The IP address assigned to the transit gateway multicast group.
  ///
  /// Parameter [networkInterfaceIds] :
  /// The group sources' network interface IDs to register with the transit
  /// gateway multicast group.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<RegisterTransitGatewayMulticastGroupSourcesResult>
      registerTransitGatewayMulticastGroupSources({
    bool dryRun,
    String groupIpAddress,
    List<String> networkInterfaceIds,
    String transitGatewayMulticastDomainId,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Rejects a transit gateway peering attachment request.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the transit gateway peering attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RejectTransitGatewayPeeringAttachmentResult>
      rejectTransitGatewayPeeringAttachment({
    @_s.required String transitGatewayAttachmentId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Rejects a request to attach a VPC to a transit gateway.
  ///
  /// The VPC attachment must be in the <code>pendingAcceptance</code> state.
  /// Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC
  /// attachment requests. Use <a>AcceptTransitGatewayVpcAttachment</a> to
  /// accept a VPC attachment request.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RejectTransitGatewayVpcAttachmentResult>
      rejectTransitGatewayVpcAttachment({
    @_s.required String transitGatewayAttachmentId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        transitGatewayAttachmentId, 'transitGatewayAttachmentId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Rejects one or more VPC endpoint connection requests to your VPC endpoint
  /// service.
  ///
  /// Parameter [serviceId] :
  /// The ID of the service.
  ///
  /// Parameter [vpcEndpointIds] :
  /// The IDs of one or more VPC endpoints.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RejectVpcEndpointConnectionsResult> rejectVpcEndpointConnections({
    @_s.required String serviceId,
    @_s.required List<String> vpcEndpointIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(serviceId, 'serviceId');
    ArgumentError.checkNotNull(vpcEndpointIds, 'vpcEndpointIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Rejects a VPC peering connection request. The VPC peering connection must
  /// be in the <code>pending-acceptance</code> state. Use the
  /// <a>DescribeVpcPeeringConnections</a> request to view your outstanding VPC
  /// peering connection requests. To delete an active VPC peering connection,
  /// or to delete a VPC peering connection request that you initiated, use
  /// <a>DeleteVpcPeeringConnection</a>.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of the VPC peering connection.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RejectVpcPeeringConnectionResult> rejectVpcPeeringConnection({
    @_s.required String vpcPeeringConnectionId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        vpcPeeringConnectionId, 'vpcPeeringConnectionId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Releases the specified Elastic IP address.
  ///
  /// [EC2-Classic, default VPC] Releasing an Elastic IP address automatically
  /// disassociates it from any instance that it's associated with. To
  /// disassociate an Elastic IP address without releasing it, use
  /// <a>DisassociateAddress</a>.
  ///
  /// [Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate
  /// the Elastic IP address before you can release it. Otherwise, Amazon EC2
  /// returns an error (<code>InvalidIPAddress.InUse</code>).
  ///
  /// After releasing an Elastic IP address, it is released to the IP address
  /// pool. Be sure to update your DNS records and any servers or devices that
  /// communicate with the address. If you attempt to release an Elastic IP
  /// address that you already released, you'll get an <code>AuthFailure</code>
  /// error if the address is already allocated to another AWS account.
  ///
  /// [EC2-VPC] After you release an Elastic IP address for use in a VPC, you
  /// might be able to recover it. For more information, see
  /// <a>AllocateAddress</a>.
  ///
  /// Parameter [allocationId] :
  /// [EC2-VPC] The allocation ID. Required for EC2-VPC.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [networkBorderGroup] :
  /// The location that the IP address is released from.
  ///
  /// If you provide an incorrect network border group, you will receive an
  /// <code>InvalidAddress.NotFound</code> error. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
  /// Codes</a>.
  /// <note>
  /// You cannot use a network border group with EC2 Classic. If you attempt
  /// this operation on EC2 classic, you will receive an
  /// <code>InvalidParameterCombination</code> error. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
  /// Codes</a>.
  /// </note>
  ///
  /// Parameter [publicIp] :
  /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
  Future<void> releaseAddress({
    String allocationId,
    bool dryRun,
    String networkBorderGroup,
    String publicIp,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// When you no longer want to use an On-Demand Dedicated Host it can be
  /// released. On-Demand billing is stopped and the host goes into
  /// <code>released</code> state. The host ID of Dedicated Hosts that have been
  /// released can no longer be specified in another request, for example, to
  /// modify the host. You must stop or terminate all instances on a host before
  /// it can be released.
  ///
  /// When Dedicated Hosts are released, it may take some time for them to stop
  /// counting toward your limit and you may receive capacity errors when trying
  /// to allocate new Dedicated Hosts. Wait a few minutes and then try again.
  ///
  /// Released hosts still appear in a <a>DescribeHosts</a> response.
  ///
  /// Parameter [hostIds] :
  /// The IDs of the Dedicated Hosts to release.
  Future<ReleaseHostsResult> releaseHosts({
    @_s.required List<String> hostIds,
  }) async {
    ArgumentError.checkNotNull(hostIds, 'hostIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Replaces an IAM instance profile for the specified running instance. You
  /// can use this action to change the IAM instance profile that's associated
  /// with an instance without having to disassociate the existing IAM instance
  /// profile first.
  ///
  /// Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
  /// ID.
  ///
  /// Parameter [associationId] :
  /// The ID of the existing IAM instance profile association.
  ///
  /// Parameter [iamInstanceProfile] :
  /// The IAM instance profile.
  Future<ReplaceIamInstanceProfileAssociationResult>
      replaceIamInstanceProfileAssociation({
    @_s.required String associationId,
    @_s.required IamInstanceProfileSpecification iamInstanceProfile,
  }) async {
    ArgumentError.checkNotNull(associationId, 'associationId');
    ArgumentError.checkNotNull(iamInstanceProfile, 'iamInstanceProfile');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Changes which network ACL a subnet is associated with. By default when you
  /// create a subnet, it's automatically associated with the default network
  /// ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network
  /// ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// This is an idempotent operation.
  ///
  /// Parameter [associationId] :
  /// The ID of the current association between the original network ACL and the
  /// subnet.
  ///
  /// Parameter [networkAclId] :
  /// The ID of the new network ACL to associate with the subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ReplaceNetworkAclAssociationResult> replaceNetworkAclAssociation({
    @_s.required String associationId,
    @_s.required String networkAclId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(associationId, 'associationId');
    ArgumentError.checkNotNull(networkAclId, 'networkAclId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Replaces an entry (rule) in a network ACL. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network
  /// ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [egress] :
  /// Indicates whether to replace the egress rule.
  ///
  /// Default: If no value is specified, we replace the ingress rule.
  ///
  /// Parameter [networkAclId] :
  /// The ID of the ACL.
  ///
  /// Parameter [protocol] :
  /// The protocol number. A value of "-1" means all protocols. If you specify
  /// "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP),
  /// traffic on all ports is allowed, regardless of any ports or ICMP types or
  /// codes that you specify. If you specify protocol "58" (ICMPv6) and specify
  /// an IPv4 CIDR block, traffic for all ICMP types and codes allowed,
  /// regardless of any that you specify. If you specify protocol "58" (ICMPv6)
  /// and specify an IPv6 CIDR block, you must specify an ICMP type and code.
  ///
  /// Parameter [ruleAction] :
  /// Indicates whether to allow or deny the traffic that matches the rule.
  ///
  /// Parameter [ruleNumber] :
  /// The rule number of the entry to replace.
  ///
  /// Parameter [cidrBlock] :
  /// The IPv4 network range to allow or deny, in CIDR notation (for example
  /// <code>172.16.0.0/24</code>).
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [icmpTypeCode] :
  /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying
  /// protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
  ///
  /// Parameter [ipv6CidrBlock] :
  /// The IPv6 network range to allow or deny, in CIDR notation (for example
  /// <code>2001:bd8:1234:1a00::/64</code>).
  ///
  /// Parameter [portRange] :
  /// TCP or UDP protocols: The range of ports the rule applies to. Required if
  /// specifying protocol 6 (TCP) or 17 (UDP).
  Future<void> replaceNetworkAclEntry({
    @_s.required bool egress,
    @_s.required String networkAclId,
    @_s.required String protocol,
    @_s.required RuleAction ruleAction,
    @_s.required int ruleNumber,
    String cidrBlock,
    bool dryRun,
    IcmpTypeCode icmpTypeCode,
    String ipv6CidrBlock,
    PortRange portRange,
  }) async {
    ArgumentError.checkNotNull(egress, 'egress');
    ArgumentError.checkNotNull(networkAclId, 'networkAclId');
    ArgumentError.checkNotNull(protocol, 'protocol');
    ArgumentError.checkNotNull(ruleAction, 'ruleAction');
    ArgumentError.checkNotNull(ruleNumber, 'ruleNumber');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Replaces an existing route within a route table in a VPC. You must provide
  /// only one of the following: internet gateway, virtual private gateway, NAT
  /// instance, NAT gateway, VPC peering connection, network interface,
  /// egress-only internet gateway, or transit gateway.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The IPv4 CIDR address block used for the destination match. The value that
  /// you provide must match the CIDR of an existing route in the table.
  ///
  /// Parameter [destinationIpv6CidrBlock] :
  /// The IPv6 CIDR address block used for the destination match. The value that
  /// you provide must match the CIDR of an existing route in the table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [egressOnlyInternetGatewayId] :
  /// [IPv6 traffic only] The ID of an egress-only internet gateway.
  ///
  /// Parameter [gatewayId] :
  /// The ID of an internet gateway or virtual private gateway.
  ///
  /// Parameter [instanceId] :
  /// The ID of a NAT instance in your VPC.
  ///
  /// Parameter [localGatewayId] :
  /// The ID of the local gateway.
  ///
  /// Parameter [localTarget] :
  /// Specifies whether to reset the local route to its default target
  /// (<code>local</code>).
  ///
  /// Parameter [natGatewayId] :
  /// [IPv4 traffic only] The ID of a NAT gateway.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of a network interface.
  ///
  /// Parameter [transitGatewayId] :
  /// The ID of a transit gateway.
  ///
  /// Parameter [vpcPeeringConnectionId] :
  /// The ID of a VPC peering connection.
  Future<void> replaceRoute({
    @_s.required String routeTableId,
    String destinationCidrBlock,
    String destinationIpv6CidrBlock,
    bool dryRun,
    String egressOnlyInternetGatewayId,
    String gatewayId,
    String instanceId,
    String localGatewayId,
    bool localTarget,
    String natGatewayId,
    String networkInterfaceId,
    String transitGatewayId,
    String vpcPeeringConnectionId,
  }) async {
    ArgumentError.checkNotNull(routeTableId, 'routeTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Changes the route table associated with a given subnet, internet gateway,
  /// or virtual private gateway in a VPC. After the operation completes, the
  /// subnet or gateway uses the routes in the new route table. For more
  /// information about route tables, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
  /// Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// You can also use this operation to change which table is the main route
  /// table in the VPC. Specify the main route table's association ID and the
  /// route table ID of the new main route table.
  ///
  /// Parameter [associationId] :
  /// The association ID.
  ///
  /// Parameter [routeTableId] :
  /// The ID of the new route table to associate with the subnet.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ReplaceRouteTableAssociationResult> replaceRouteTableAssociation({
    @_s.required String associationId,
    @_s.required String routeTableId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(associationId, 'associationId');
    ArgumentError.checkNotNull(routeTableId, 'routeTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Replaces the specified route in the specified transit gateway route table.
  ///
  /// Parameter [destinationCidrBlock] :
  /// The CIDR range used for the destination match. Routing decisions are based
  /// on the most specific match.
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the route table.
  ///
  /// Parameter [blackhole] :
  /// Indicates whether traffic matching this route is to be dropped.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [transitGatewayAttachmentId] :
  /// The ID of the attachment.
  Future<ReplaceTransitGatewayRouteResult> replaceTransitGatewayRoute({
    @_s.required String destinationCidrBlock,
    @_s.required String transitGatewayRouteTableId,
    bool blackhole,
    bool dryRun,
    String transitGatewayAttachmentId,
  }) async {
    ArgumentError.checkNotNull(destinationCidrBlock, 'destinationCidrBlock');
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Submits feedback about the status of an instance. The instance must be in
  /// the <code>running</code> state. If your experience with the instance
  /// differs from the instance status returned by
  /// <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report
  /// your experience with the instance. Amazon EC2 collects this information to
  /// improve the accuracy of status checks.
  ///
  /// Use of this action does not change the value returned by
  /// <a>DescribeInstanceStatus</a>.
  ///
  /// Parameter [instances] :
  /// The instances.
  ///
  /// Parameter [reasonCodes] :
  /// The reason codes that describe the health state of your instance.
  ///
  /// <ul>
  /// <li>
  /// <code>instance-stuck-in-state</code>: My instance is stuck in a state.
  /// </li>
  /// <li>
  /// <code>unresponsive</code>: My instance is unresponsive.
  /// </li>
  /// <li>
  /// <code>not-accepting-credentials</code>: My instance is not accepting my
  /// credentials.
  /// </li>
  /// <li>
  /// <code>password-not-available</code>: A password is not available for my
  /// instance.
  /// </li>
  /// <li>
  /// <code>performance-network</code>: My instance is experiencing performance
  /// problems that I believe are network related.
  /// </li>
  /// <li>
  /// <code>performance-instance-store</code>: My instance is experiencing
  /// performance problems that I believe are related to the instance stores.
  /// </li>
  /// <li>
  /// <code>performance-ebs-volume</code>: My instance is experiencing
  /// performance problems that I believe are related to an EBS volume.
  /// </li>
  /// <li>
  /// <code>performance-other</code>: My instance is experiencing performance
  /// problems.
  /// </li>
  /// <li>
  /// <code>other</code>: [explain using the description parameter]
  /// </li>
  /// </ul>
  ///
  /// Parameter [status] :
  /// The status of all instances listed.
  ///
  /// Parameter [description] :
  /// Descriptive text about the health state of your instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [endTime] :
  /// The time at which the reported instance health state ended.
  ///
  /// Parameter [startTime] :
  /// The time at which the reported instance health state began.
  Future<void> reportInstanceStatus({
    @_s.required List<String> instances,
    @_s.required List<String> reasonCodes,
    @_s.required ReportStatusType status,
    String description,
    bool dryRun,
    DateTime endTime,
    DateTime startTime,
  }) async {
    ArgumentError.checkNotNull(instances, 'instances');
    ArgumentError.checkNotNull(reasonCodes, 'reasonCodes');
    ArgumentError.checkNotNull(status, 'status');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Spot Fleet request.
  ///
  /// The Spot Fleet request specifies the total target capacity and the
  /// On-Demand target capacity. Amazon EC2 calculates the difference between
  /// the total capacity and On-Demand capacity, and launches the difference as
  /// Spot capacity.
  ///
  /// You can submit a single request that includes multiple launch
  /// specifications that vary by instance type, AMI, Availability Zone, or
  /// subnet.
  ///
  /// By default, the Spot Fleet requests Spot Instances in the Spot Instance
  /// pool where the price per unit is the lowest. Each launch specification can
  /// include its own instance weighting that reflects the value of the instance
  /// type to your application workload.
  ///
  /// Alternatively, you can specify that the Spot Fleet distribute the target
  /// capacity across the Spot pools included in its launch specifications. By
  /// ensuring that the Spot Instances in your Spot Fleet are in different Spot
  /// pools, you can improve the availability of your fleet.
  ///
  /// You can specify tags for the Spot Fleet request and instances launched by
  /// the fleet. You cannot tag other resource types in a Spot Fleet request
  /// because only the <code>spot-fleet-request</code> and <code>instance</code>
  /// resource types are supported.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot
  /// Fleet Requests</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// Parameter [spotFleetRequestConfig] :
  /// The configuration for the Spot Fleet request.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RequestSpotFleetResponse> requestSpotFleet({
    @_s.required SpotFleetRequestConfigData spotFleetRequestConfig,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(
        spotFleetRequestConfig, 'spotFleetRequestConfig');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Creates a Spot Instance request.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot
  /// Instance Requests</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// Parameter [availabilityZoneGroup] :
  /// The user-specified name for a logical grouping of requests.
  ///
  /// When you specify an Availability Zone group in a Spot Instance request,
  /// all Spot Instances in the request are launched in the same Availability
  /// Zone. Instance proximity is maintained with this parameter, but the choice
  /// of Availability Zone is not. The group applies only to requests for Spot
  /// Instances of the same instance type. Any additional Spot Instance requests
  /// that are specified with the same Availability Zone group name are launched
  /// in that same Availability Zone, as long as at least one instance from the
  /// group is still active.
  ///
  /// If there is no active instance running in the Availability Zone group that
  /// you specify for a new Spot Instance request (all instances are terminated,
  /// the request is expired, or the maximum price you specified falls below
  /// current Spot price), then Amazon EC2 launches the instance in any
  /// Availability Zone where the constraint can be met. Consequently, the
  /// subsequent set of Spot Instances could be placed in a different zone from
  /// the original request, even if you specified the same Availability Zone
  /// group.
  ///
  /// Default: Instances are launched in any available Availability Zone.
  ///
  /// Parameter [blockDurationMinutes] :
  /// The required duration for the Spot Instances (also known as Spot blocks),
  /// in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300,
  /// or 360).
  ///
  /// The duration period starts as soon as your Spot Instance receives its
  /// instance ID. At the end of the duration period, Amazon EC2 marks the Spot
  /// Instance for termination and provides a Spot Instance termination notice,
  /// which gives the instance a two-minute warning before it terminates.
  ///
  /// You can't specify an Availability Zone group or a launch group if you
  /// specify a duration.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceCount] :
  /// The maximum number of Spot Instances to launch.
  ///
  /// Default: 1
  ///
  /// Parameter [instanceInterruptionBehavior] :
  /// The behavior when a Spot Instance is interrupted. The default is
  /// <code>terminate</code>.
  ///
  /// Parameter [launchGroup] :
  /// The instance launch group. Launch groups are Spot Instances that launch
  /// together and terminate together.
  ///
  /// Default: Instances are launched and terminated individually
  ///
  /// Parameter [launchSpecification] :
  /// The launch specification.
  ///
  /// Parameter [spotPrice] :
  /// The maximum price per hour that you are willing to pay for a Spot
  /// Instance. The default is the On-Demand price.
  ///
  /// Parameter [type] :
  /// The Spot Instance request type.
  ///
  /// Default: <code>one-time</code>
  ///
  /// Parameter [validFrom] :
  /// The start date of the request. If this is a one-time request, the request
  /// becomes active at this date and time and remains active until all
  /// instances launch, the request expires, or the request is canceled. If the
  /// request is persistent, the request becomes active at this date and time
  /// and remains active until it expires or is canceled.
  ///
  /// The specified start date and time cannot be equal to the current date and
  /// time. You must specify a start date and time that occurs after the current
  /// date and time.
  ///
  /// Parameter [validUntil] :
  /// The end date of the request. If this is a one-time request, the request
  /// remains active until all instances launch, the request is canceled, or
  /// this date is reached. If the request is persistent, it remains active
  /// until it is canceled or this date is reached. The default end date is 7
  /// days from the current date.
  Future<RequestSpotInstancesResult> requestSpotInstances({
    String availabilityZoneGroup,
    int blockDurationMinutes,
    String clientToken,
    bool dryRun,
    int instanceCount,
    InstanceInterruptionBehavior instanceInterruptionBehavior,
    String launchGroup,
    RequestSpotLaunchSpecification launchSpecification,
    String spotPrice,
    SpotInstanceType type,
    DateTime validFrom,
    DateTime validUntil,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets the default customer master key (CMK) for EBS encryption for your
  /// account in this Region to the AWS managed CMK for EBS.
  ///
  /// After resetting the default CMK to the AWS managed CMK, you can continue
  /// to encrypt by a customer managed CMK by specifying it when you create the
  /// volume. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ResetEbsDefaultKmsKeyIdResult> resetEbsDefaultKmsKeyId({
    bool dryRun,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets the specified attribute of the specified Amazon FPGA Image (AFI) to
  /// its default value. You can only reset the load permission attribute.
  ///
  /// Parameter [fpgaImageId] :
  /// The ID of the AFI.
  ///
  /// Parameter [attribute] :
  /// The attribute.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<ResetFpgaImageAttributeResult> resetFpgaImageAttribute({
    @_s.required String fpgaImageId,
    ResetFpgaImageAttributeName attribute,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(fpgaImageId, 'fpgaImageId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets an attribute of an AMI to its default value.
  /// <note>
  /// The productCodes attribute can't be reset.
  /// </note>
  ///
  /// Parameter [attribute] :
  /// The attribute to reset (currently you can only reset the launch permission
  /// attribute).
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> resetImageAttribute({
    @_s.required ResetImageAttributeName attribute,
    @_s.required String imageId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(attribute, 'attribute');
    ArgumentError.checkNotNull(imageId, 'imageId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets an attribute of an instance to its default value. To reset the
  /// <code>kernel</code> or <code>ramdisk</code>, the instance must be in a
  /// stopped state. To reset the <code>sourceDestCheck</code>, the instance can
  /// be either running or stopped.
  ///
  /// The <code>sourceDestCheck</code> attribute controls whether
  /// source/destination checking is enabled. The default value is
  /// <code>true</code>, which means checking is enabled. This value must be
  /// <code>false</code> for a NAT instance to perform NAT. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT
  /// Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  ///
  /// Parameter [attribute] :
  /// The attribute to reset.
  /// <important>
  /// You can only reset the following attributes: <code>kernel</code> |
  /// <code>ramdisk</code> | <code>sourceDestCheck</code>. To change an instance
  /// attribute, use <a>ModifyInstanceAttribute</a>.
  /// </important>
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> resetInstanceAttribute({
    @_s.required InstanceAttributeName attribute,
    @_s.required String instanceId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(attribute, 'attribute');
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets a network interface attribute. You can specify only one attribute
  /// at a time.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [sourceDestCheck] :
  /// The source/destination checking attribute. Resets the value to
  /// <code>true</code>.
  Future<void> resetNetworkInterfaceAttribute({
    @_s.required String networkInterfaceId,
    bool dryRun,
    String sourceDestCheck,
  }) async {
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Resets permission settings for the specified snapshot.
  ///
  /// For more information about modifying snapshot permissions, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing
  /// Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [attribute] :
  /// The attribute to reset. Currently, only the attribute for permission to
  /// create volumes can be reset.
  ///
  /// Parameter [snapshotId] :
  /// The ID of the snapshot.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> resetSnapshotAttribute({
    @_s.required SnapshotAttributeName attribute,
    @_s.required String snapshotId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(attribute, 'attribute');
    ArgumentError.checkNotNull(snapshotId, 'snapshotId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Restores an Elastic IP address that was previously moved to the EC2-VPC
  /// platform back to the EC2-Classic platform. You cannot move an Elastic IP
  /// address that was originally allocated for use in EC2-VPC. The Elastic IP
  /// address must not be associated with an instance or network interface.
  ///
  /// Parameter [publicIp] :
  /// The Elastic IP address.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<RestoreAddressToClassicResult> restoreAddressToClassic({
    @_s.required String publicIp,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(publicIp, 'publicIp');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Removes an ingress authorization rule from a Client VPN endpoint.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint with which the authorization rule is
  /// associated.
  ///
  /// Parameter [targetNetworkCidr] :
  /// The IPv4 address range, in CIDR notation, of the network for which access
  /// is being removed.
  ///
  /// Parameter [accessGroupId] :
  /// The ID of the Active Directory group for which to revoke access.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [revokeAllGroups] :
  /// Indicates whether access should be revoked for all clients.
  Future<RevokeClientVpnIngressResult> revokeClientVpnIngress({
    @_s.required String clientVpnEndpointId,
    @_s.required String targetNetworkCidr,
    String accessGroupId,
    bool dryRun,
    bool revokeAllGroups,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
    ArgumentError.checkNotNull(targetNetworkCidr, 'targetNetworkCidr');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// [VPC only] Removes the specified egress rules from a security group for
  /// EC2-VPC. This action doesn't apply to security groups for use in
  /// EC2-Classic. To remove a rule, the values that you specify (for example,
  /// ports) must match the existing rule's values exactly.
  ///
  /// Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or
  /// source security group. For the TCP and UDP protocols, you must also
  /// specify the destination port or range of ports. For the ICMP protocol, you
  /// must also specify the ICMP type and code. If the security group rule has a
  /// description, you do not have to specify the description to revoke the
  /// rule.
  ///
  /// Rule changes are propagated to instances within the security group as
  /// quickly as possible. However, a small delay might occur.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group.
  ///
  /// Parameter [cidrIp] :
  /// Not supported. Use a set of IP permissions to specify the CIDR.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [fromPort] :
  /// Not supported. Use a set of IP permissions to specify the port.
  ///
  /// Parameter [ipPermissions] :
  /// The sets of IP permissions. You can't specify a destination security group
  /// and a CIDR IP address range in the same set of permissions.
  ///
  /// Parameter [ipProtocol] :
  /// Not supported. Use a set of IP permissions to specify the protocol name or
  /// number.
  ///
  /// Parameter [sourceSecurityGroupName] :
  /// Not supported. Use a set of IP permissions to specify a destination
  /// security group.
  ///
  /// Parameter [sourceSecurityGroupOwnerId] :
  /// Not supported. Use a set of IP permissions to specify a destination
  /// security group.
  ///
  /// Parameter [toPort] :
  /// Not supported. Use a set of IP permissions to specify the port.
  Future<void> revokeSecurityGroupEgress({
    @_s.required String groupId,
    String cidrIp,
    bool dryRun,
    int fromPort,
    List<IpPermission> ipPermissions,
    String ipProtocol,
    String sourceSecurityGroupName,
    String sourceSecurityGroupOwnerId,
    int toPort,
  }) async {
    ArgumentError.checkNotNull(groupId, 'groupId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Removes the specified ingress rules from a security group. To remove a
  /// rule, the values that you specify (for example, ports) must match the
  /// existing rule's values exactly.
  /// <note>
  /// [EC2-Classic only] If the values you specify do not match the existing
  /// rule's values, no error is returned. Use <a>DescribeSecurityGroups</a> to
  /// verify that the rule has been removed.
  /// </note>
  /// Each rule consists of the protocol and the CIDR range or source security
  /// group. For the TCP and UDP protocols, you must also specify the
  /// destination port or range of ports. For the ICMP protocol, you must also
  /// specify the ICMP type and code. If the security group rule has a
  /// description, you do not have to specify the description to revoke the
  /// rule.
  ///
  /// Rule changes are propagated to instances within the security group as
  /// quickly as possible. However, a small delay might occur.
  ///
  /// Parameter [cidrIp] :
  /// The CIDR IP address range. You can't specify this parameter when
  /// specifying a source security group.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [fromPort] :
  /// The start of port range for the TCP and UDP protocols, or an ICMP type
  /// number. For the ICMP type number, use <code>-1</code> to specify all ICMP
  /// types.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group. You must specify either the security group
  /// ID or the security group name in the request. For security groups in a
  /// nondefault VPC, you must specify the security group ID.
  ///
  /// Parameter [groupName] :
  /// [EC2-Classic, default VPC] The name of the security group. You must
  /// specify either the security group ID or the security group name in the
  /// request.
  ///
  /// Parameter [ipPermissions] :
  /// The sets of IP permissions. You can't specify a source security group and
  /// a CIDR IP address range in the same set of permissions.
  ///
  /// Parameter [ipProtocol] :
  /// The IP protocol name (<code>tcp</code>, <code>udp</code>,
  /// <code>icmp</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a>). Use <code>-1</code> to specify all.
  ///
  /// Parameter [sourceSecurityGroupName] :
  /// [EC2-Classic, default VPC] The name of the source security group. You
  /// can't specify this parameter in combination with the following parameters:
  /// the CIDR IP address range, the start of the port range, the IP protocol,
  /// and the end of the port range. For EC2-VPC, the source security group must
  /// be in the same VPC. To revoke a specific rule for an IP protocol and port
  /// range, use a set of IP permissions instead.
  ///
  /// Parameter [sourceSecurityGroupOwnerId] :
  /// [EC2-Classic] The AWS account ID of the source security group, if the
  /// source security group is in a different account. You can't specify this
  /// parameter in combination with the following parameters: the CIDR IP
  /// address range, the IP protocol, the start of the port range, and the end
  /// of the port range. To revoke a specific rule for an IP protocol and port
  /// range, use a set of IP permissions instead.
  ///
  /// Parameter [toPort] :
  /// The end of port range for the TCP and UDP protocols, or an ICMP code
  /// number. For the ICMP code number, use <code>-1</code> to specify all ICMP
  /// codes for the ICMP type.
  Future<void> revokeSecurityGroupIngress({
    String cidrIp,
    bool dryRun,
    int fromPort,
    String groupId,
    String groupName,
    List<IpPermission> ipPermissions,
    String ipProtocol,
    String sourceSecurityGroupName,
    String sourceSecurityGroupOwnerId,
    int toPort,
  }) async {
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Launches the specified number of instances using an AMI for which you have
  /// permissions.
  ///
  /// You can specify a number of options, or leave the default options. The
  /// following rules apply:
  ///
  /// <ul>
  /// <li>
  /// [EC2-VPC] If you don't specify a subnet ID, we choose a default subnet
  /// from your default VPC for you. If you don't have a default VPC, you must
  /// specify a subnet ID in the request.
  /// </li>
  /// <li>
  /// [EC2-Classic] If don't specify an Availability Zone, we choose one for
  /// you.
  /// </li>
  /// <li>
  /// Some instance types must be launched into a VPC. If you do not have a
  /// default VPC, or if you do not specify a subnet ID, the request fails. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types">Instance
  /// Types Available Only in a VPC</a>.
  /// </li>
  /// <li>
  /// [EC2-VPC] All instances have a network interface with a primary private
  /// IPv4 address. If you don't specify this address, we choose one from the
  /// IPv4 range of your subnet.
  /// </li>
  /// <li>
  /// Not all instance types support IPv6 addresses. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a>.
  /// </li>
  /// <li>
  /// If you don't specify a security group ID, we use the default security
  /// group. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security
  /// Groups</a>.
  /// </li>
  /// <li>
  /// If any of the AMIs have a product code attached for which the user has not
  /// subscribed, the request fails.
  /// </li>
  /// </ul>
  /// You can create a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch
  /// template</a>, which is a resource that contains the parameters to launch
  /// an instance. When you launch an instance using <a>RunInstances</a>, you
  /// can specify the launch template instead of specifying the launch
  /// parameters.
  ///
  /// To ensure faster instance launches, break up large requests into smaller
  /// batches. For example, create five separate launch requests for 100
  /// instances each instead of one launch request for 500 instances.
  ///
  /// An instance is ready for you to use when it's in the <code>running</code>
  /// state. You can check the state of your instance using
  /// <a>DescribeInstances</a>. You can tag instances and EBS volumes during
  /// launch, after launch, or both. For more information, see <a>CreateTags</a>
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging
  /// Your Amazon EC2 Resources</a>.
  ///
  /// Linux instances have access to the public key of the key pair at boot. You
  /// can use this key to provide secure access to the instance. Amazon EC2
  /// public images use this feature to provide secure access without passwords.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key
  /// Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// For troubleshooting, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What
  /// To Do If An Instance Immediately Terminates</a>, and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting
  /// Connecting to Your Instance</a> in the <i>Amazon Elastic Compute Cloud
  /// User Guide</i>.
  ///
  /// Parameter [maxCount] :
  /// The maximum number of instances to launch. If you specify more instances
  /// than Amazon EC2 can launch in the target Availability Zone, Amazon EC2
  /// launches the largest possible number of instances above
  /// <code>MinCount</code>.
  ///
  /// Constraints: Between 1 and the maximum number you're allowed for the
  /// specified instance type. For more information about the default limits,
  /// and how to request an increase, see <a
  /// href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How
  /// many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.
  ///
  /// Parameter [minCount] :
  /// The minimum number of instances to launch. If you specify a minimum that
  /// is more instances than Amazon EC2 can launch in the target Availability
  /// Zone, Amazon EC2 launches no instances.
  ///
  /// Constraints: Between 1 and the maximum number you're allowed for the
  /// specified instance type. For more information about the default limits,
  /// and how to request an increase, see <a
  /// href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How
  /// many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.
  ///
  /// Parameter [additionalInfo] :
  /// Reserved.
  ///
  /// Parameter [blockDeviceMappings] :
  /// The block device mapping entries.
  ///
  /// Parameter [capacityReservationSpecification] :
  /// Information about the Capacity Reservation targeting option. If you do not
  /// specify this parameter, the instance's Capacity Reservation preference
  /// defaults to <code>open</code>, which enables it to run in any open
  /// Capacity Reservation that has matching attributes (instance type,
  /// platform, Availability Zone).
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier you provide to ensure the idempotency of
  /// the request. If you do not specify a client token, a randomly generated
  /// token is used for the request to ensure idempotency.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Constraints: Maximum 64 ASCII characters
  ///
  /// Parameter [cpuOptions] :
  /// The CPU options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimizing
  /// CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [creditSpecification] :
  /// The credit option for CPU usage of the burstable performance instance.
  /// Valid values are <code>standard</code> and <code>unlimited</code>. To
  /// change this attribute after launch, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html">
  /// ModifyInstanceCreditSpecification</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
  /// Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Default: <code>standard</code> (T2 instances) or <code>unlimited</code>
  /// (T3/T3a instances)
  ///
  /// Parameter [disableApiTermination] :
  /// If you set this parameter to <code>true</code>, you can't terminate the
  /// instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To
  /// change this attribute after launch, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>.
  /// Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code>
  /// to <code>terminate</code>, you can terminate the instance by running the
  /// shutdown command from the instance.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [ebsOptimized] :
  /// Indicates whether the instance is optimized for Amazon EBS I/O. This
  /// optimization provides dedicated throughput to Amazon EBS and an optimized
  /// configuration stack to provide optimal Amazon EBS I/O performance. This
  /// optimization isn't available with all instance types. Additional usage
  /// charges apply when using an EBS-optimized instance.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [elasticGpuSpecification] :
  /// An elastic GPU to associate with the instance. An Elastic GPU is a GPU
  /// resource that you can attach to your Windows instance to accelerate the
  /// graphics performance of your applications. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">
  /// Amazon EC2 Elastic GPUs</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [elasticInferenceAccelerators] :
  /// An elastic inference accelerator to associate with the instance. Elastic
  /// inference accelerators are a resource you can attach to your Amazon EC2
  /// instances to accelerate your Deep Learning (DL) inference workloads.
  ///
  /// Parameter [hibernationOptions] :
  /// Indicates whether an instance is enabled for hibernation. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [iamInstanceProfile] :
  /// The IAM instance profile.
  ///
  /// Parameter [imageId] :
  /// The ID of the AMI. An AMI ID is required to launch an instance and must be
  /// specified here or in a launch template.
  ///
  /// Parameter [instanceInitiatedShutdownBehavior] :
  /// Indicates whether an instance stops or terminates when you initiate
  /// shutdown from the instance (using the operating system command for system
  /// shutdown).
  ///
  /// Default: <code>stop</code>
  ///
  /// Parameter [instanceMarketOptions] :
  /// The market (purchasing) option for the instances.
  ///
  /// For <a>RunInstances</a>, persistent Spot Instance requests are only
  /// supported when <b>InstanceInterruptionBehavior</b> is set to either
  /// <code>hibernate</code> or <code>stop</code>.
  ///
  /// Parameter [instanceType] :
  /// The instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Default: <code>m1.small</code>
  ///
  /// Parameter [ipv6AddressCount] :
  /// [EC2-VPC] The number of IPv6 addresses to associate with the primary
  /// network interface. Amazon EC2 chooses the IPv6 addresses from the range of
  /// your subnet. You cannot specify this option and the option to assign
  /// specific IPv6 addresses in the same request. You can specify this option
  /// if you've specified a minimum number of instances to launch.
  ///
  /// You cannot specify this option and the network interfaces option in the
  /// same request.
  ///
  /// Parameter [ipv6Addresses] :
  /// [EC2-VPC] The IPv6 addresses from the range of the subnet to associate
  /// with the primary network interface. You cannot specify this option and the
  /// option to assign a number of IPv6 addresses in the same request. You
  /// cannot specify this option if you've specified a minimum number of
  /// instances to launch.
  ///
  /// You cannot specify this option and the network interfaces option in the
  /// same request.
  ///
  /// Parameter [kernelId] :
  /// The ID of the kernel.
  /// <important>
  /// We recommend that you use PV-GRUB instead of kernels and RAM disks. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">
  /// PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// </important>
  ///
  /// Parameter [keyName] :
  /// The name of the key pair. You can create a key pair using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.
  /// <important>
  /// If you do not specify a key pair, you can't connect to the instance unless
  /// you choose an AMI that is configured to allow users another way to log in.
  /// </important>
  ///
  /// Parameter [launchTemplate] :
  /// The launch template to use to launch the instances. Any parameters that
  /// you specify in <a>RunInstances</a> override the same parameters in the
  /// launch template. You can specify either the name or ID of a launch
  /// template, but not both.
  ///
  /// Parameter [licenseSpecifications] :
  /// The license configurations.
  ///
  /// Parameter [metadataOptions] :
  /// The metadata options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
  /// Metadata and User Data</a>.
  ///
  /// Parameter [monitoring] :
  /// Specifies whether detailed monitoring is enabled for the instance.
  ///
  /// Parameter [networkInterfaces] :
  /// The network interfaces to associate with the instance. If you specify a
  /// network interface, you must specify any security groups and subnets as
  /// part of the network interface.
  ///
  /// Parameter [placement] :
  /// The placement for the instance.
  ///
  /// Parameter [privateIpAddress] :
  /// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4
  /// address range of the subnet.
  ///
  /// Only one private IP address can be designated as primary. You can't
  /// specify this option if you've specified the option to designate a private
  /// IP address as the primary IP address in a network interface specification.
  /// You cannot specify this option if you're launching more than one instance
  /// in the request.
  ///
  /// You cannot specify this option and the network interfaces option in the
  /// same request.
  ///
  /// Parameter [ramdiskId] :
  /// The ID of the RAM disk to select. Some kernels require additional drivers
  /// at launch. Check the kernel requirements for information about whether you
  /// need to specify a RAM disk. To find kernel requirements, go to the AWS
  /// Resource Center and search for the kernel ID.
  /// <important>
  /// We recommend that you use PV-GRUB instead of kernels and RAM disks. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">
  /// PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// </important>
  ///
  /// Parameter [securityGroupIds] :
  /// The IDs of the security groups. You can create a security group using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.
  ///
  /// If you specify a network interface, you must specify any security groups
  /// as part of the network interface.
  ///
  /// Parameter [securityGroups] :
  /// [EC2-Classic, default VPC] The names of the security groups. For a
  /// nondefault VPC, you must use security group IDs instead.
  ///
  /// If you specify a network interface, you must specify any security groups
  /// as part of the network interface.
  ///
  /// Default: Amazon EC2 uses the default security group.
  ///
  /// Parameter [subnetId] :
  /// [EC2-VPC] The ID of the subnet to launch the instance into.
  ///
  /// If you specify a network interface, you must specify any subnets as part
  /// of the network interface.
  ///
  /// Parameter [tagSpecifications] :
  /// The tags to apply to the resources during launch. You can only tag
  /// instances and volumes on launch. The specified tags are applied to all
  /// instances or volumes that are created during launch. To tag a resource
  /// after it has been created, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  ///
  /// Parameter [userData] :
  /// The user data to make available to the instance. For more information, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Running
  /// Commands on Your Linux Instance at Launch</a> (Linux) and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data">Adding
  /// User Data</a> (Windows). If you are using a command line tool,
  /// base64-encoding is performed for you, and you can load the text from a
  /// file. Otherwise, you must provide base64-encoded text. User data is
  /// limited to 16 KB.
  Future<Reservation> runInstances({
    @_s.required int maxCount,
    @_s.required int minCount,
    String additionalInfo,
    List<BlockDeviceMapping> blockDeviceMappings,
    CapacityReservationSpecification capacityReservationSpecification,
    String clientToken,
    CpuOptionsRequest cpuOptions,
    CreditSpecificationRequest creditSpecification,
    bool disableApiTermination,
    bool dryRun,
    bool ebsOptimized,
    List<ElasticGpuSpecification> elasticGpuSpecification,
    List<ElasticInferenceAccelerator> elasticInferenceAccelerators,
    HibernationOptionsRequest hibernationOptions,
    IamInstanceProfileSpecification iamInstanceProfile,
    String imageId,
    ShutdownBehavior instanceInitiatedShutdownBehavior,
    InstanceMarketOptionsRequest instanceMarketOptions,
    InstanceType instanceType,
    int ipv6AddressCount,
    List<InstanceIpv6Address> ipv6Addresses,
    String kernelId,
    String keyName,
    LaunchTemplateSpecification launchTemplate,
    List<LicenseConfigurationRequest> licenseSpecifications,
    InstanceMetadataOptionsRequest metadataOptions,
    RunInstancesMonitoringEnabled monitoring,
    List<InstanceNetworkInterfaceSpecification> networkInterfaces,
    Placement placement,
    String privateIpAddress,
    String ramdiskId,
    List<String> securityGroupIds,
    List<String> securityGroups,
    String subnetId,
    List<TagSpecification> tagSpecifications,
    String userData,
  }) async {
    ArgumentError.checkNotNull(maxCount, 'maxCount');
    ArgumentError.checkNotNull(minCount, 'minCount');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Launches the specified Scheduled Instances.
  ///
  /// Before you can launch a Scheduled Instance, you must purchase it and
  /// obtain an identifier using <a>PurchaseScheduledInstances</a>.
  ///
  /// You must launch a Scheduled Instance during its scheduled time period. You
  /// can't stop or reboot a Scheduled Instance, but you can terminate it as
  /// needed. If you terminate a Scheduled Instance before the current scheduled
  /// time period ends, you can launch it again after a few minutes. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled
  /// Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [launchSpecification] :
  /// The launch specification. You must match the instance type, Availability
  /// Zone, network, and platform of the schedule that you purchased.
  ///
  /// Parameter [scheduledInstanceId] :
  /// The Scheduled Instance ID.
  ///
  /// Parameter [clientToken] :
  /// Unique, case-sensitive identifier that ensures the idempotency of the
  /// request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [instanceCount] :
  /// The number of instances.
  ///
  /// Default: 1
  Future<RunScheduledInstancesResult> runScheduledInstances({
    @_s.required ScheduledInstancesLaunchSpecification launchSpecification,
    @_s.required String scheduledInstanceId,
    String clientToken,
    bool dryRun,
    int instanceCount,
  }) async {
    ArgumentError.checkNotNull(launchSpecification, 'launchSpecification');
    ArgumentError.checkNotNull(scheduledInstanceId, 'scheduledInstanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Searches for routes in the specified local gateway route table.
  ///
  /// Parameter [filters] :
  /// One or more filters.
  ///
  /// Parameter [localGatewayRouteTableId] :
  /// The ID of the local gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  Future<SearchLocalGatewayRoutesResult> searchLocalGatewayRoutes({
    @_s.required List<Filter> filters,
    @_s.required String localGatewayRouteTableId,
    bool dryRun,
    int maxResults,
    String nextToken,
  }) async {
    ArgumentError.checkNotNull(filters, 'filters');
    ArgumentError.checkNotNull(
        localGatewayRouteTableId, 'localGatewayRouteTableId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Searches one or more transit gateway multicast groups and returns the
  /// group membership information.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>group-ip-address</code> - The IP address of the transit gateway
  /// multicast group.
  /// </li>
  /// <li>
  /// <code>is-group-member</code> - The resource is a group member. Valid
  /// values are <code>true</code> | <code>false</code>.
  /// </li>
  /// <li>
  /// <code>is-group-source</code> - The resource is a group source. Valid
  /// values are <code>true</code> | <code>false</code>.
  /// </li>
  /// <li>
  /// <code>member-type</code> - The member type. Valid values are
  /// <code>igmp</code> | <code>static</code>.
  /// </li>
  /// <li>
  /// <code>resource-id</code> - The ID of the resource.
  /// </li>
  /// <li>
  /// <code>resource-type</code> - The type of resource. Valid values are
  /// <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code>
  /// | <code>tgw-peering</code>.
  /// </li>
  /// <li>
  /// <code>source-type</code> - The source type. Valid values are
  /// <code>igmp</code> | <code>static</code>.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the subnet association. Valid values are
  /// <code>associated</code> | <code>associated</code> |
  /// <code>disassociated</code> | <code>disassociating</code>.
  /// </li>
  /// <li>
  /// <code>subnet-id</code> - The ID of the subnet.
  /// </li>
  /// <li>
  /// <code>transit-gateway-attachment-id</code> - The id of the transit gateway
  /// attachment.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxResults] :
  /// The maximum number of results to return with a single call. To retrieve
  /// the remaining results, make another call with the returned
  /// <code>nextToken</code> value.
  ///
  /// Parameter [nextToken] :
  /// The token for the next page of results.
  ///
  /// Parameter [transitGatewayMulticastDomainId] :
  /// The ID of the transit gateway multicast domain.
  Future<SearchTransitGatewayMulticastGroupsResult>
      searchTransitGatewayMulticastGroups({
    bool dryRun,
    List<Filter> filters,
    int maxResults,
    String nextToken,
    String transitGatewayMulticastDomainId,
  }) async {
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Searches for routes in the specified transit gateway route table.
  ///
  /// Parameter [filters] :
  /// One or more filters. The possible values are:
  ///
  /// <ul>
  /// <li>
  /// <code>attachment.transit-gateway-attachment-id</code>- The id of the
  /// transit gateway attachment.
  /// </li>
  /// <li>
  /// <code>attachment.resource-id</code> - The resource id of the transit
  /// gateway attachment.
  /// </li>
  /// <li>
  /// <code>attachment.resource-type</code> - The attachment resource type
  /// (<code>vpc</code> | <code>vpn</code>).
  /// </li>
  /// <li>
  /// <code>route-search.exact-match</code> - The exact match of the specified
  /// filter.
  /// </li>
  /// <li>
  /// <code>route-search.longest-prefix-match</code> - The longest prefix that
  /// matches the route.
  /// </li>
  /// <li>
  /// <code>route-search.subnet-of-match</code> - The routes with a subnet that
  /// match the specified CIDR filter.
  /// </li>
  /// <li>
  /// <code>route-search.supernet-of-match</code> - The routes with a CIDR that
  /// encompass the CIDR filter. For example, if you have 10.0.1.0/29 and
  /// 10.0.1.0/31 routes in your route table and you specify supernet-of-match
  /// as 10.0.1.0/30, then the result returns 10.0.1.0/29.
  /// </li>
  /// <li>
  /// <code>state</code> - The state of the route (<code>active</code> |
  /// <code>blackhole</code>).
  /// </li>
  /// <li>
  /// <code>type</code> - The type of route (<code>propagated</code> |
  /// <code>static</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [transitGatewayRouteTableId] :
  /// The ID of the transit gateway route table.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [maxResults] :
  /// The maximum number of routes to return.
  Future<SearchTransitGatewayRoutesResult> searchTransitGatewayRoutes({
    @_s.required List<Filter> filters,
    @_s.required String transitGatewayRouteTableId,
    bool dryRun,
    int maxResults,
  }) async {
    ArgumentError.checkNotNull(filters, 'filters');
    ArgumentError.checkNotNull(
        transitGatewayRouteTableId, 'transitGatewayRouteTableId');
    _s.validateNumRange(
      'maxResults',
      maxResults,
      5,
      1000,
    );
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Sends a diagnostic interrupt to the specified Amazon EC2 instance to
  /// trigger a <i>kernel panic</i> (on Linux instances), or a <i>blue
  /// screen</i>/<i>stop error</i> (on Windows instances). For instances based
  /// on Intel and AMD processors, the interrupt is received as a
  /// <i>non-maskable interrupt</i> (NMI).
  ///
  /// In general, the operating system crashes and reboots when a kernel panic
  /// or stop error is triggered. The operating system can also be configured to
  /// perform diagnostic tasks, such as generating a memory dump file, loading a
  /// secondary kernel, or obtaining a call trace.
  ///
  /// Before sending a diagnostic interrupt to your instance, ensure that its
  /// operating system is configured to perform the required diagnostic tasks.
  ///
  /// For more information about configuring your operating system to generate a
  /// crash dump when a kernel panic or stop error occurs, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html">Send
  /// a Diagnostic Interrupt</a> (Linux instances) or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html">Send
  /// a Diagnostic Interrupt</a> (Windows instances).
  ///
  /// Parameter [instanceId] :
  /// The ID of the instance.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<void> sendDiagnosticInterrupt({
    @_s.required String instanceId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceId, 'instanceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Starts an Amazon EBS-backed instance that you've previously stopped.
  ///
  /// Instances that use Amazon EBS volumes as their root devices can be quickly
  /// stopped and started. When an instance is stopped, the compute resources
  /// are released and you are not billed for instance usage. However, your root
  /// partition Amazon EBS volume remains and continues to persist your data,
  /// and you are charged for Amazon EBS volume usage. You can restart your
  /// instance at any time. Every time you start your Windows instance, Amazon
  /// EC2 charges you for a full instance hour. If you stop and restart your
  /// Windows instance, a new instance hour begins and Amazon EC2 charges you
  /// for another full instance hour even if you are still within the same
  /// 60-minute period when it was stopped. Every time you start your Linux
  /// instance, Amazon EC2 charges a one-minute minimum for instance usage, and
  /// thereafter charges per second for instance usage.
  ///
  /// Before stopping an instance, make sure it is in a state from which it can
  /// be restarted. Stopping an instance does not preserve data stored in RAM.
  ///
  /// Performing this operation on an instance that uses an instance store as
  /// its root device returns an error.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stopping
  /// Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Parameter [additionalInfo] :
  /// Reserved.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<StartInstancesResult> startInstances({
    @_s.required List<String> instanceIds,
    String additionalInfo,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceIds, 'instanceIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Initiates the verification process to prove that the service provider owns
  /// the private DNS name domain for the endpoint service.
  ///
  /// The service provider must successfully perform the verification before the
  /// consumer can use the name to access the service.
  ///
  /// Before the service provider runs this command, they must add a record to
  /// the DNS server. For more information, see <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/ndpoint-services-dns-validation.html#add-dns-txt-record">Adding
  /// a TXT Record to Your Domain's DNS Server </a> in the <i>Amazon VPC User
  /// Guide</i>.
  ///
  /// Parameter [serviceId] :
  /// The ID of the endpoint service.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<StartVpcEndpointServicePrivateDnsVerificationResult>
      startVpcEndpointServicePrivateDnsVerification({
    @_s.required String serviceId,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(serviceId, 'serviceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Stops an Amazon EBS-backed instance.
  ///
  /// You can use the Stop action to hibernate an instance if the instance is <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation">enabled
  /// for hibernation</a> and it meets the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation
  /// prerequisites</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// We don't charge usage for a stopped instance, or data transfer fees;
  /// however, your root partition Amazon EBS volume remains and continues to
  /// persist your data, and you are charged for Amazon EBS volume usage. Every
  /// time you start your Windows instance, Amazon EC2 charges you for a full
  /// instance hour. If you stop and restart your Windows instance, a new
  /// instance hour begins and Amazon EC2 charges you for another full instance
  /// hour even if you are still within the same 60-minute period when it was
  /// stopped. Every time you start your Linux instance, Amazon EC2 charges a
  /// one-minute minimum for instance usage, and thereafter charges per second
  /// for instance usage.
  ///
  /// You can't stop or hibernate instance store-backed instances. You can't use
  /// the Stop action to hibernate Spot Instances, but you can specify that
  /// Amazon EC2 should hibernate Spot Instances when they are interrupted. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating
  /// Interrupted Spot Instances</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// When you stop or hibernate an instance, we shut it down. You can restart
  /// your instance at any time. Before stopping or hibernating an instance,
  /// make sure it is in a state from which it can be restarted. Stopping an
  /// instance does not preserve data stored in RAM, but hibernating an instance
  /// does preserve data stored in RAM. If an instance cannot hibernate
  /// successfully, a normal shutdown occurs.
  ///
  /// Stopping and hibernating an instance is different to rebooting or
  /// terminating it. For example, when you stop or hibernate an instance, the
  /// root device and any other devices attached to the instance persist. When
  /// you terminate an instance, the root device and any other devices attached
  /// during the instance launch are automatically deleted. For more information
  /// about the differences between rebooting, stopping, hibernating, and
  /// terminating instances, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance
  /// Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// When you stop an instance, we attempt to shut it down forcibly after a
  /// short while. If your instance appears stuck in the stopping state after a
  /// period of time, there may be an issue with the underlying host computer.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshooting
  /// Stopping Your Instance</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [force] :
  /// Forces the instances to stop. The instances do not have an opportunity to
  /// flush file system caches or file system metadata. If you use this option,
  /// you must perform file system check and repair procedures. This option is
  /// not recommended for Windows instances.
  ///
  /// Default: <code>false</code>
  ///
  /// Parameter [hibernate] :
  /// Hibernates the instance if the instance was enabled for hibernation at
  /// launch. If the instance cannot hibernate successfully, a normal shutdown
  /// occurs. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Default: <code>false</code>
  Future<StopInstancesResult> stopInstances({
    @_s.required List<String> instanceIds,
    bool dryRun,
    bool force,
    bool hibernate,
  }) async {
    ArgumentError.checkNotNull(instanceIds, 'instanceIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Terminates active Client VPN endpoint connections. This action can be used
  /// to terminate a specific client connection, or up to five connections
  /// established by a specific user.
  ///
  /// Parameter [clientVpnEndpointId] :
  /// The ID of the Client VPN endpoint to which the client is connected.
  ///
  /// Parameter [connectionId] :
  /// The ID of the client connection to be terminated.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [username] :
  /// The name of the user who initiated the connection. Use this option to
  /// terminate all active connections for the specified user. This option can
  /// only be used if the user has established up to five connections.
  Future<TerminateClientVpnConnectionsResult> terminateClientVpnConnections({
    @_s.required String clientVpnEndpointId,
    String connectionId,
    bool dryRun,
    String username,
  }) async {
    ArgumentError.checkNotNull(clientVpnEndpointId, 'clientVpnEndpointId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Shuts down the specified instances. This operation is idempotent; if you
  /// terminate an instance more than once, each call succeeds.
  ///
  /// If you specify multiple instances and the request fails (for example,
  /// because of a single incorrect instance ID), none of the instances are
  /// terminated.
  ///
  /// Terminated instances remain visible after termination (for approximately
  /// one hour).
  ///
  /// By default, Amazon EC2 deletes all EBS volumes that were attached when the
  /// instance launched. Volumes attached after instance launch continue
  /// running.
  ///
  /// You can stop, start, and terminate EBS-backed instances. You can only
  /// terminate instance store-backed instances. What happens to an instance
  /// differs if you stop it or terminate it. For example, when you stop an
  /// instance, the root device and any other devices attached to the instance
  /// persist. When you terminate an instance, any attached EBS volumes with the
  /// <code>DeleteOnTermination</code> block device mapping parameter set to
  /// <code>true</code> are automatically deleted. For more information about
  /// the differences between stopping and terminating instances, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance
  /// Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// For more information about troubleshooting, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting
  /// Terminating Your Instance</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Constraints: Up to 1000 instance IDs. We recommend breaking up this
  /// request into smaller batches.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<TerminateInstancesResult> terminateInstances({
    @_s.required List<String> instanceIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceIds, 'instanceIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Unassigns one or more IPv6 addresses from a network interface.
  ///
  /// Parameter [ipv6Addresses] :
  /// The IPv6 addresses to unassign from the network interface.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  Future<UnassignIpv6AddressesResult> unassignIpv6Addresses({
    @_s.required List<String> ipv6Addresses,
    @_s.required String networkInterfaceId,
  }) async {
    ArgumentError.checkNotNull(ipv6Addresses, 'ipv6Addresses');
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Unassigns one or more secondary private IP addresses from a network
  /// interface.
  ///
  /// Parameter [networkInterfaceId] :
  /// The ID of the network interface.
  ///
  /// Parameter [privateIpAddresses] :
  /// The secondary private IP addresses to unassign from the network interface.
  /// You can specify this option multiple times to unassign more than one IP
  /// address.
  Future<void> unassignPrivateIpAddresses({
    @_s.required String networkInterfaceId,
    @_s.required List<String> privateIpAddresses,
  }) async {
    ArgumentError.checkNotNull(networkInterfaceId, 'networkInterfaceId');
    ArgumentError.checkNotNull(privateIpAddresses, 'privateIpAddresses');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Disables detailed monitoring for a running instance. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring
  /// Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  ///
  /// Parameter [instanceIds] :
  /// The IDs of the instances.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<UnmonitorInstancesResult> unmonitorInstances({
    @_s.required List<String> instanceIds,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(instanceIds, 'instanceIds');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// [VPC only] Updates the description of an egress (outbound) security group
  /// rule. You can replace an existing description, or add a description to a
  /// rule that did not have one previously.
  ///
  /// You specify the description as part of the IP permissions structure. You
  /// can remove a description for a security group rule by omitting the
  /// description parameter in the request.
  ///
  /// Parameter [ipPermissions] :
  /// The IP permissions for the security group rule.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group. You must specify either the security group
  /// ID or the security group name in the request. For security groups in a
  /// nondefault VPC, you must specify the security group ID.
  ///
  /// Parameter [groupName] :
  /// [Default VPC] The name of the security group. You must specify either the
  /// security group ID or the security group name in the request.
  Future<UpdateSecurityGroupRuleDescriptionsEgressResult>
      updateSecurityGroupRuleDescriptionsEgress({
    @_s.required List<IpPermission> ipPermissions,
    bool dryRun,
    String groupId,
    String groupName,
  }) async {
    ArgumentError.checkNotNull(ipPermissions, 'ipPermissions');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Updates the description of an ingress (inbound) security group rule. You
  /// can replace an existing description, or add a description to a rule that
  /// did not have one previously.
  ///
  /// You specify the description as part of the IP permissions structure. You
  /// can remove a description for a security group rule by omitting the
  /// description parameter in the request.
  ///
  /// Parameter [ipPermissions] :
  /// The IP permissions for the security group rule.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  ///
  /// Parameter [groupId] :
  /// The ID of the security group. You must specify either the security group
  /// ID or the security group name in the request. For security groups in a
  /// nondefault VPC, you must specify the security group ID.
  ///
  /// Parameter [groupName] :
  /// [EC2-Classic, default VPC] The name of the security group. You must
  /// specify either the security group ID or the security group name in the
  /// request.
  Future<UpdateSecurityGroupRuleDescriptionsIngressResult>
      updateSecurityGroupRuleDescriptionsIngress({
    @_s.required List<IpPermission> ipPermissions,
    bool dryRun,
    String groupId,
    String groupName,
  }) async {
    ArgumentError.checkNotNull(ipPermissions, 'ipPermissions');
// TODO: implement ec2
    throw UnimplementedError();
  }

  /// Stops advertising an address range that is provisioned as an address pool.
  ///
  /// You can perform this operation at most once every 10 seconds, even if you
  /// specify different address ranges each time.
  ///
  /// It can take a few minutes before traffic to the specified addresses stops
  /// routing to AWS because of BGP propagation delays.
  ///
  /// Parameter [cidr] :
  /// The address range, in CIDR notation.
  ///
  /// Parameter [dryRun] :
  /// Checks whether you have the required permissions for the action, without
  /// actually making the request, and provides an error response. If you have
  /// the required permissions, the error response is
  /// <code>DryRunOperation</code>. Otherwise, it is
  /// <code>UnauthorizedOperation</code>.
  Future<WithdrawByoipCidrResult> withdrawByoipCidr({
    @_s.required String cidr,
    bool dryRun,
  }) async {
    ArgumentError.checkNotNull(cidr, 'cidr');
// TODO: implement ec2
    throw UnimplementedError();
  }
}

/// The result of the exchange and whether it was <code>successful</code>.
class AcceptReservedInstancesExchangeQuoteResult {
  /// The ID of the successful exchange.
  final String exchangeId;

  AcceptReservedInstancesExchangeQuoteResult({
    this.exchangeId,
  });
}

class AcceptTransitGatewayPeeringAttachmentResult {
  /// The transit gateway peering attachment.
  final TransitGatewayPeeringAttachment transitGatewayPeeringAttachment;

  AcceptTransitGatewayPeeringAttachmentResult({
    this.transitGatewayPeeringAttachment,
  });
}

class AcceptTransitGatewayVpcAttachmentResult {
  /// The VPC attachment.
  final TransitGatewayVpcAttachment transitGatewayVpcAttachment;

  AcceptTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });
}

class AcceptVpcEndpointConnectionsResult {
  /// Information about the interface endpoints that were not accepted, if
  /// applicable.
  final List<UnsuccessfulItem> unsuccessful;

  AcceptVpcEndpointConnectionsResult({
    this.unsuccessful,
  });
}

class AcceptVpcPeeringConnectionResult {
  /// Information about the VPC peering connection.
  final VpcPeeringConnection vpcPeeringConnection;

  AcceptVpcPeeringConnectionResult({
    this.vpcPeeringConnection,
  });
}

/// Describes an account attribute.
class AccountAttribute {
  /// The name of the account attribute.
  final String attributeName;

  /// The values for the account attribute.
  final List<AccountAttributeValue> attributeValues;

  AccountAttribute({
    this.attributeName,
    this.attributeValues,
  });
}

enum AccountAttributeName {
  supportedPlatforms,
  defaultVpc,
}

/// Describes a value of an account attribute.
class AccountAttributeValue {
  /// The value of the attribute.
  final String attributeValue;

  AccountAttributeValue({
    this.attributeValue,
  });
}

/// Describes a running instance in a Spot Fleet.
class ActiveInstance {
  /// The health status of the instance. If the status of either the instance
  /// status check or the system status check is <code>impaired</code>, the health
  /// status of the instance is <code>unhealthy</code>. Otherwise, the health
  /// status is <code>healthy</code>.
  final InstanceHealthStatus instanceHealth;

  /// The ID of the instance.
  final String instanceId;

  /// The instance type.
  final String instanceType;

  /// The ID of the Spot Instance request.
  final String spotInstanceRequestId;

  ActiveInstance({
    this.instanceHealth,
    this.instanceId,
    this.instanceType,
    this.spotInstanceRequestId,
  });
}

enum ActivityStatus {
  error,
  pendingFulfillment,
  pendingTermination,
  fulfilled,
}

/// Describes an Elastic IP address.
class Address {
  /// The ID representing the allocation of the address for use with EC2-VPC.
  final String allocationId;

  /// The ID representing the association of the address with an instance in a
  /// VPC.
  final String associationId;

  /// The customer-owned IP address.
  final String customerOwnedIp;

  /// The ID of the customer-owned address pool.
  final String customerOwnedIpv4Pool;

  /// Indicates whether this Elastic IP address is for use with instances in
  /// EC2-Classic (<code>standard</code>) or instances in a VPC
  /// (<code>vpc</code>).
  final DomainType domain;

  /// The ID of the instance that the address is associated with (if any).
  final String instanceId;

  /// The name of the location from which the IP address is advertised.
  final String networkBorderGroup;

  /// The ID of the network interface.
  final String networkInterfaceId;

  /// The ID of the AWS account that owns the network interface.
  final String networkInterfaceOwnerId;

  /// The private IP address associated with the Elastic IP address.
  final String privateIpAddress;

  /// The Elastic IP address.
  final String publicIp;

  /// The ID of an address pool.
  final String publicIpv4Pool;

  /// Any tags assigned to the Elastic IP address.
  final List<Tag> tags;

  Address({
    this.allocationId,
    this.associationId,
    this.customerOwnedIp,
    this.customerOwnedIpv4Pool,
    this.domain,
    this.instanceId,
    this.networkBorderGroup,
    this.networkInterfaceId,
    this.networkInterfaceOwnerId,
    this.privateIpAddress,
    this.publicIp,
    this.publicIpv4Pool,
    this.tags,
  });
}

class AdvertiseByoipCidrResult {
  /// Information about the address range.
  final ByoipCidr byoipCidr;

  AdvertiseByoipCidrResult({
    this.byoipCidr,
  });
}

enum Affinity {
  $default,
  host,
}

class AllocateAddressResult {
  /// [EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic
  /// IP address for use with instances in a VPC.
  final String allocationId;

  /// The customer-owned IP address.
  final String customerOwnedIp;

  /// The ID of the customer-owned address pool.
  final String customerOwnedIpv4Pool;

  /// Indicates whether this Elastic IP address is for use with instances in
  /// EC2-Classic (<code>standard</code>) or instances in a VPC
  /// (<code>vpc</code>).
  final DomainType domain;

  /// The location from which the IP address is advertised.
  final String networkBorderGroup;

  /// The Elastic IP address.
  final String publicIp;

  /// The ID of an address pool.
  final String publicIpv4Pool;

  AllocateAddressResult({
    this.allocationId,
    this.customerOwnedIp,
    this.customerOwnedIpv4Pool,
    this.domain,
    this.networkBorderGroup,
    this.publicIp,
    this.publicIpv4Pool,
  });
}

/// Contains the output of AllocateHosts.
class AllocateHostsResult {
  /// The ID of the allocated Dedicated Host. This is used to launch an instance
  /// onto a specific host.
  final List<String> hostIds;

  AllocateHostsResult({
    this.hostIds,
  });
}

enum AllocationState {
  available,
  underAssessment,
  permanentFailure,
  released,
  releasedPermanentFailure,
  pending,
}

enum AllocationStrategy {
  lowestPrice,
  diversified,
  capacityOptimized,
}

/// Describes a principal.
class AllowedPrincipal {
  /// The Amazon Resource Name (ARN) of the principal.
  final String principal;

  /// The type of principal.
  final PrincipalType principalType;

  AllowedPrincipal({
    this.principal,
    this.principalType,
  });
}

enum AllowsMultipleInstanceTypes {
  on,
  off,
}

class ApplySecurityGroupsToClientVpnTargetNetworkResult {
  /// The IDs of the applied security groups.
  final List<String> securityGroupIds;

  ApplySecurityGroupsToClientVpnTargetNetworkResult({
    this.securityGroupIds,
  });
}

enum ArchitectureType {
  i386,
  x86_64,
  arm64,
}

enum ArchitectureValues {
  i386,
  x86_64,
  arm64,
}

class AssignIpv6AddressesResult {
  /// The IPv6 addresses assigned to the network interface.
  final List<String> assignedIpv6Addresses;

  /// The ID of the network interface.
  final String networkInterfaceId;

  AssignIpv6AddressesResult({
    this.assignedIpv6Addresses,
    this.networkInterfaceId,
  });
}

class AssignPrivateIpAddressesResult {
  /// The private IP addresses assigned to the network interface.
  final List<AssignedPrivateIpAddress> assignedPrivateIpAddresses;

  /// The ID of the network interface.
  final String networkInterfaceId;

  AssignPrivateIpAddressesResult({
    this.assignedPrivateIpAddresses,
    this.networkInterfaceId,
  });
}

/// Describes the private IP addresses assigned to a network interface.
class AssignedPrivateIpAddress {
  /// The private IP address assigned to the network interface.
  final String privateIpAddress;

  AssignedPrivateIpAddress({
    this.privateIpAddress,
  });
}

class AssociateAddressResult {
  /// [EC2-VPC] The ID that represents the association of the Elastic IP address
  /// with an instance.
  final String associationId;

  AssociateAddressResult({
    this.associationId,
  });
}

class AssociateClientVpnTargetNetworkResult {
  /// The unique ID of the target network association.
  final String associationId;

  /// The current state of the target network association.
  final AssociationStatus status;

  AssociateClientVpnTargetNetworkResult({
    this.associationId,
    this.status,
  });
}

class AssociateIamInstanceProfileResult {
  /// Information about the IAM instance profile association.
  final IamInstanceProfileAssociation iamInstanceProfileAssociation;

  AssociateIamInstanceProfileResult({
    this.iamInstanceProfileAssociation,
  });
}

class AssociateRouteTableResult {
  /// The route table association ID. This ID is required for disassociating the
  /// route table.
  final String associationId;

  /// The state of the association.
  final RouteTableAssociationState associationState;

  AssociateRouteTableResult({
    this.associationId,
    this.associationState,
  });
}

class AssociateSubnetCidrBlockResult {
  /// Information about the IPv6 CIDR block association.
  final SubnetIpv6CidrBlockAssociation ipv6CidrBlockAssociation;

  /// The ID of the subnet.
  final String subnetId;

  AssociateSubnetCidrBlockResult({
    this.ipv6CidrBlockAssociation,
    this.subnetId,
  });
}

class AssociateTransitGatewayMulticastDomainResult {
  /// Information about the transit gateway multicast domain associations.
  final TransitGatewayMulticastDomainAssociations associations;

  AssociateTransitGatewayMulticastDomainResult({
    this.associations,
  });
}

class AssociateTransitGatewayRouteTableResult {
  /// The ID of the association.
  final TransitGatewayAssociation association;

  AssociateTransitGatewayRouteTableResult({
    this.association,
  });
}

class AssociateVpcCidrBlockResult {
  /// Information about the IPv4 CIDR block association.
  final VpcCidrBlockAssociation cidrBlockAssociation;

  /// Information about the IPv6 CIDR block association.
  final VpcIpv6CidrBlockAssociation ipv6CidrBlockAssociation;

  /// The ID of the VPC.
  final String vpcId;

  AssociateVpcCidrBlockResult({
    this.cidrBlockAssociation,
    this.ipv6CidrBlockAssociation,
    this.vpcId,
  });
}

enum AssociatedNetworkType {
  vpc,
}

/// Describes a target network that is associated with a Client VPN endpoint. A
/// target network is a subnet in a VPC.
class AssociatedTargetNetwork {
  /// The ID of the subnet.
  final String networkId;

  /// The target network type.
  final AssociatedNetworkType networkType;

  AssociatedTargetNetwork({
    this.networkId,
    this.networkType,
  });
}

/// Describes the state of a target network association.
class AssociationStatus {
  /// The state of the target network association.
  final AssociationStatusCode code;

  /// A message about the status of the target network association, if applicable.
  final String message;

  AssociationStatus({
    this.code,
    this.message,
  });
}

enum AssociationStatusCode {
  associating,
  associated,
  associationFailed,
  disassociating,
  disassociated,
}

class AttachClassicLinkVpcResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  AttachClassicLinkVpcResult({
    this.returnValue,
  });
}

/// Contains the output of AttachNetworkInterface.
class AttachNetworkInterfaceResult {
  /// The ID of the network interface attachment.
  final String attachmentId;

  AttachNetworkInterfaceResult({
    this.attachmentId,
  });
}

/// Contains the output of AttachVpnGateway.
class AttachVpnGatewayResult {
  /// Information about the attachment.
  final VpcAttachment vpcAttachment;

  AttachVpnGatewayResult({
    this.vpcAttachment,
  });
}

enum AttachmentStatus {
  attaching,
  attached,
  detaching,
  detached,
}

/// Describes a value for a resource attribute that is a Boolean value.
class AttributeBooleanValue {
  /// The attribute value. The valid values are <code>true</code> or
  /// <code>false</code>.
  final bool value;

  AttributeBooleanValue({
    this.value,
  });
}

/// Describes a value for a resource attribute that is a String.
class AttributeValue {
  /// The attribute value. The value is case-sensitive.
  final String value;

  AttributeValue({
    this.value,
  });
}

/// Information about an authorization rule.
class AuthorizationRule {
  /// Indicates whether the authorization rule grants access to all clients.
  final bool accessAll;

  /// The ID of the Client VPN endpoint with which the authorization rule is
  /// associated.
  final String clientVpnEndpointId;

  /// A brief description of the authorization rule.
  final String description;

  /// The IPv4 address range, in CIDR notation, of the network to which the
  /// authorization rule applies.
  final String destinationCidr;

  /// The ID of the Active Directory group to which the authorization rule grants
  /// access.
  final String groupId;

  /// The current state of the authorization rule.
  final ClientVpnAuthorizationRuleStatus status;

  AuthorizationRule({
    this.accessAll,
    this.clientVpnEndpointId,
    this.description,
    this.destinationCidr,
    this.groupId,
    this.status,
  });
}

class AuthorizeClientVpnIngressResult {
  /// The current state of the authorization rule.
  final ClientVpnAuthorizationRuleStatus status;

  AuthorizeClientVpnIngressResult({
    this.status,
  });
}

enum AutoAcceptSharedAttachmentsValue {
  enable,
  disable,
}

enum AutoPlacement {
  on,
  off,
}

/// Describes an Availability Zone or Local Zone.
class AvailabilityZone {
  /// For Availability Zones, this parameter has the same value as the Region
  /// name.
  ///
  /// For Local Zones, the name of the associated group, for example
  /// <code>us-west-2-lax-1</code>.
  final String groupName;

  /// Any messages about the Availability Zone or Local Zone.
  final List<AvailabilityZoneMessage> messages;

  /// The name of the location from which the address is advertised.
  final String networkBorderGroup;

  /// For Availability Zones, this parameter always has the value of
  /// <code>opt-in-not-required</code>.
  ///
  /// For Local Zones, this parameter is the opt in status. The possible values
  /// are <code>opted-in</code>, and <code>not-opted-in</code>.
  final AvailabilityZoneOptInStatus optInStatus;

  /// The name of the Region.
  final String regionName;

  /// The state of the Availability Zone or Local Zone.
  final AvailabilityZoneState state;

  /// The ID of the Availability Zone or Local Zone.
  final String zoneId;

  /// The name of the Availability Zone or Local Zone.
  final String zoneName;

  AvailabilityZone({
    this.groupName,
    this.messages,
    this.networkBorderGroup,
    this.optInStatus,
    this.regionName,
    this.state,
    this.zoneId,
    this.zoneName,
  });
}

/// Describes a message about an Availability Zone or Local Zone.
class AvailabilityZoneMessage {
  /// The message about the Availability Zone or Local Zone.
  final String message;

  AvailabilityZoneMessage({
    this.message,
  });
}

enum AvailabilityZoneOptInStatus {
  optInNotRequired,
  optedIn,
  notOptedIn,
}

enum AvailabilityZoneState {
  available,
  information,
  impaired,
  unavailable,
}

/// The capacity information for instances that can be launched onto the
/// Dedicated Host.
class AvailableCapacity {
  /// The number of instances that can be launched onto the Dedicated Host
  /// depending on the host's available capacity. For Dedicated Hosts that support
  /// multiple instance types, this parameter represents the number of instances
  /// for each instance size that is supported on the host.
  final List<InstanceCapacity> availableInstanceCapacity;

  /// The number of vCPUs available for launching instances onto the Dedicated
  /// Host.
  final int availableVCpus;

  AvailableCapacity({
    this.availableInstanceCapacity,
    this.availableVCpus,
  });
}

enum BatchState {
  submitted,
  active,
  cancelled,
  failed,
  cancelledRunning,
  cancelledTerminating,
  modifying,
}

class BlobAttributeValue {
  final Uint8List value;

  BlobAttributeValue({
    this.value,
  });
}

/// Describes a block device mapping.
class BlockDeviceMapping {
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  final String deviceName;

  /// Parameters used to automatically set up EBS volumes when the instance is
  /// launched.
  final EbsBlockDevice ebs;

  /// Suppresses the specified device included in the block device mapping of the
  /// AMI.
  final String noDevice;

  /// The virtual device name (<code>ephemeral</code>N). Instance store volumes
  /// are numbered starting from 0. An instance type with 2 available instance
  /// store volumes can specify mappings for <code>ephemeral0</code> and
  /// <code>ephemeral1</code>. The number of available instance store volumes
  /// depends on the instance type. After you connect to the instance, you must
  /// mount the volume.
  ///
  /// NVMe instance store volumes are automatically enumerated and assigned a
  /// device name. Including them in your block device mapping has no effect.
  ///
  /// Constraints: For M3 instances, you must specify instance store volumes in
  /// the block device mapping for the instance. When you launch an M3 instance,
  /// we ignore any instance store volumes specified in the block device mapping
  /// for the AMI.
  final String virtualName;

  BlockDeviceMapping({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });
}

/// Contains the output of BundleInstance.
class BundleInstanceResult {
  /// Information about the bundle task.
  final BundleTask bundleTask;

  BundleInstanceResult({
    this.bundleTask,
  });
}

/// Describes a bundle task.
class BundleTask {
  /// The ID of the bundle task.
  final String bundleId;

  /// If the task fails, a description of the error.
  final BundleTaskError bundleTaskError;

  /// The ID of the instance associated with this bundle task.
  final String instanceId;

  /// The level of task completion, as a percent (for example, 20%).
  final String progress;

  /// The time this task started.
  final DateTime startTime;

  /// The state of the task.
  final BundleTaskState state;

  /// The Amazon S3 storage locations.
  final Storage storage;

  /// The time of the most recent update for the task.
  final DateTime updateTime;

  BundleTask({
    this.bundleId,
    this.bundleTaskError,
    this.instanceId,
    this.progress,
    this.startTime,
    this.state,
    this.storage,
    this.updateTime,
  });
}

/// Describes an error for <a>BundleInstance</a>.
class BundleTaskError {
  /// The error code.
  final String code;

  /// The error message.
  final String message;

  BundleTaskError({
    this.code,
    this.message,
  });
}

enum BundleTaskState {
  pending,
  waitingForShutdown,
  bundling,
  storing,
  cancelling,
  complete,
  failed,
}

/// Information about an address range that is provisioned for use with your AWS
/// resources through bring your own IP addresses (BYOIP).
class ByoipCidr {
  /// The address range, in CIDR notation.
  final String cidr;

  /// The description of the address range.
  final String description;

  /// The state of the address pool.
  final ByoipCidrState state;

  /// Upon success, contains the ID of the address pool. Otherwise, contains an
  /// error message.
  final String statusMessage;

  ByoipCidr({
    this.cidr,
    this.description,
    this.state,
    this.statusMessage,
  });
}

enum ByoipCidrState {
  advertised,
  deprovisioned,
  failedDeprovision,
  failedProvision,
  pendingDeprovision,
  pendingProvision,
  provisioned,
  provisionedNotPubliclyAdvertisable,
}

enum CancelBatchErrorCode {
  fleetRequestIdDoesNotExist,
  fleetRequestIdMalformed,
  fleetRequestNotInCancellableState,
  unexpectedError,
}

/// Contains the output of CancelBundleTask.
class CancelBundleTaskResult {
  /// Information about the bundle task.
  final BundleTask bundleTask;

  CancelBundleTaskResult({
    this.bundleTask,
  });
}

class CancelCapacityReservationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  CancelCapacityReservationResult({
    this.returnValue,
  });
}

class CancelImportTaskResult {
  /// The ID of the task being canceled.
  final String importTaskId;

  /// The current state of the task being canceled.
  final String previousState;

  /// The current state of the task being canceled.
  final String state;

  CancelImportTaskResult({
    this.importTaskId,
    this.previousState,
    this.state,
  });
}

/// Contains the output of CancelReservedInstancesListing.
class CancelReservedInstancesListingResult {
  /// The Reserved Instance listing.
  final List<ReservedInstancesListing> reservedInstancesListings;

  CancelReservedInstancesListingResult({
    this.reservedInstancesListings,
  });
}

/// Describes a Spot Fleet error.
class CancelSpotFleetRequestsError {
  /// The error code.
  final CancelBatchErrorCode code;

  /// The description for the error code.
  final String message;

  CancelSpotFleetRequestsError({
    this.code,
    this.message,
  });
}

/// Describes a Spot Fleet request that was not successfully canceled.
class CancelSpotFleetRequestsErrorItem {
  /// The error.
  final CancelSpotFleetRequestsError error;

  /// The ID of the Spot Fleet request.
  final String spotFleetRequestId;

  CancelSpotFleetRequestsErrorItem({
    this.error,
    this.spotFleetRequestId,
  });
}

/// Contains the output of CancelSpotFleetRequests.
class CancelSpotFleetRequestsResponse {
  /// Information about the Spot Fleet requests that are successfully canceled.
  final List<CancelSpotFleetRequestsSuccessItem> successfulFleetRequests;

  /// Information about the Spot Fleet requests that are not successfully
  /// canceled.
  final List<CancelSpotFleetRequestsErrorItem> unsuccessfulFleetRequests;

  CancelSpotFleetRequestsResponse({
    this.successfulFleetRequests,
    this.unsuccessfulFleetRequests,
  });
}

/// Describes a Spot Fleet request that was successfully canceled.
class CancelSpotFleetRequestsSuccessItem {
  /// The current state of the Spot Fleet request.
  final BatchState currentSpotFleetRequestState;

  /// The previous state of the Spot Fleet request.
  final BatchState previousSpotFleetRequestState;

  /// The ID of the Spot Fleet request.
  final String spotFleetRequestId;

  CancelSpotFleetRequestsSuccessItem({
    this.currentSpotFleetRequestState,
    this.previousSpotFleetRequestState,
    this.spotFleetRequestId,
  });
}

enum CancelSpotInstanceRequestState {
  active,
  open,
  closed,
  cancelled,
  completed,
}

/// Contains the output of CancelSpotInstanceRequests.
class CancelSpotInstanceRequestsResult {
  /// One or more Spot Instance requests.
  final List<CancelledSpotInstanceRequest> cancelledSpotInstanceRequests;

  CancelSpotInstanceRequestsResult({
    this.cancelledSpotInstanceRequests,
  });
}

/// Describes a request to cancel a Spot Instance.
class CancelledSpotInstanceRequest {
  /// The ID of the Spot Instance request.
  final String spotInstanceRequestId;

  /// The state of the Spot Instance request.
  final CancelSpotInstanceRequestState state;

  CancelledSpotInstanceRequest({
    this.spotInstanceRequestId,
    this.state,
  });
}

/// Describes a Capacity Reservation.
class CapacityReservation {
  /// The Availability Zone in which the capacity is reserved.
  final String availabilityZone;

  /// The Availability Zone ID of the Capacity Reservation.
  final String availabilityZoneId;

  /// The remaining capacity. Indicates the number of instances that can be
  /// launched in the Capacity Reservation.
  final int availableInstanceCount;

  /// The Amazon Resource Name (ARN) of the Capacity Reservation.
  final String capacityReservationArn;

  /// The ID of the Capacity Reservation.
  final String capacityReservationId;

  /// The date and time at which the Capacity Reservation was created.
  final DateTime createDate;

  /// Indicates whether the Capacity Reservation supports EBS-optimized instances.
  /// This optimization provides dedicated throughput to Amazon EBS and an
  /// optimized configuration stack to provide optimal I/O performance. This
  /// optimization isn't available with all instance types. Additional usage
  /// charges apply when using an EBS- optimized instance.
  final bool ebsOptimized;

  /// The date and time at which the Capacity Reservation expires. When a Capacity
  /// Reservation expires, the reserved capacity is released and you can no longer
  /// launch instances into it. The Capacity Reservation's state changes to
  /// <code>expired</code> when it reaches its end date and time.
  final DateTime endDate;

  /// Indicates the way in which the Capacity Reservation ends. A Capacity
  /// Reservation can have one of the following end types:
  ///
  /// <ul>
  /// <li>
  /// <code>unlimited</code> - The Capacity Reservation remains active until you
  /// explicitly cancel it.
  /// </li>
  /// <li>
  /// <code>limited</code> - The Capacity Reservation expires automatically at a
  /// specified date and time.
  /// </li>
  /// </ul>
  final EndDateType endDateType;

  /// Indicates whether the Capacity Reservation supports instances with
  /// temporary, block-level storage.
  final bool ephemeralStorage;

  /// Indicates the type of instance launches that the Capacity Reservation
  /// accepts. The options include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The Capacity Reservation accepts all instances that have
  /// matching attributes (instance type, platform, and Availability Zone).
  /// Instances that have matching attributes launch into the Capacity Reservation
  /// automatically without specifying any additional parameters.
  /// </li>
  /// <li>
  /// <code>targeted</code> - The Capacity Reservation only accepts instances that
  /// have matching attributes (instance type, platform, and Availability Zone),
  /// and explicitly target the Capacity Reservation. This ensures that only
  /// permitted instances can use the reserved capacity.
  /// </li>
  /// </ul>
  final InstanceMatchCriteria instanceMatchCriteria;

  /// The type of operating system for which the Capacity Reservation reserves
  /// capacity.
  final CapacityReservationInstancePlatform instancePlatform;

  /// The type of instance for which the Capacity Reservation reserves capacity.
  final String instanceType;

  /// The ID of the AWS account that owns the Capacity Reservation.
  final String ownerId;

  /// The current state of the Capacity Reservation. A Capacity Reservation can be
  /// in one of the following states:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - The Capacity Reservation is active and the capacity is
  /// available for your use.
  /// </li>
  /// <li>
  /// <code>expired</code> - The Capacity Reservation expired automatically at the
  /// date and time specified in your request. The reserved capacity is no longer
  /// available for your use.
  /// </li>
  /// <li>
  /// <code>cancelled</code> - The Capacity Reservation was manually cancelled.
  /// The reserved capacity is no longer available for your use.
  /// </li>
  /// <li>
  /// <code>pending</code> - The Capacity Reservation request was successful but
  /// the capacity provisioning is still pending.
  /// </li>
  /// <li>
  /// <code>failed</code> - The Capacity Reservation request has failed. A request
  /// might fail due to invalid request parameters, capacity constraints, or
  /// instance limit constraints. Failed requests are retained for 60 minutes.
  /// </li>
  /// </ul>
  final CapacityReservationState state;

  /// Any tags assigned to the Capacity Reservation.
  final List<Tag> tags;

  /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation
  /// can have one of the following tenancy settings:
  ///
  /// <ul>
  /// <li>
  /// <code>default</code> - The Capacity Reservation is created on hardware that
  /// is shared with other AWS accounts.
  /// </li>
  /// <li>
  /// <code>dedicated</code> - The Capacity Reservation is created on
  /// single-tenant hardware that is dedicated to a single AWS account.
  /// </li>
  /// </ul>
  final CapacityReservationTenancy tenancy;

  /// The total number of instances for which the Capacity Reservation reserves
  /// capacity.
  final int totalInstanceCount;

  CapacityReservation({
    this.availabilityZone,
    this.availabilityZoneId,
    this.availableInstanceCount,
    this.capacityReservationArn,
    this.capacityReservationId,
    this.createDate,
    this.ebsOptimized,
    this.endDate,
    this.endDateType,
    this.ephemeralStorage,
    this.instanceMatchCriteria,
    this.instancePlatform,
    this.instanceType,
    this.ownerId,
    this.state,
    this.tags,
    this.tenancy,
    this.totalInstanceCount,
  });
}

enum CapacityReservationInstancePlatform {
  linuxUnix,
  redHatEnterpriseLinux,
  suseLinux,
  windows,
  windowsWithSqlServer,
  windowsWithSqlServerEnterprise,
  windowsWithSqlServerStandard,
  windowsWithSqlServerWeb,
  linuxWithSqlServerStandard,
  linuxWithSqlServerWeb,
  linuxWithSqlServerEnterprise,
}

/// Describes the strategy for using unused Capacity Reservations for fulfilling
/// On-Demand capacity.
/// <note>
/// This strategy can only be used if the EC2 Fleet is of type
/// <code>instant</code>.
/// </note>
/// For more information about Capacity Reservations, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">On-Demand
/// Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User
/// Guide</i>. For examples of using Capacity Reservations in an EC2 Fleet, see
/// <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html">EC2
/// Fleet Example Configurations</a> in the <i>Amazon Elastic Compute Cloud User
/// Guide</i>.
class CapacityReservationOptions {
  /// Indicates whether to use unused Capacity Reservations for fulfilling
  /// On-Demand capacity.
  ///
  /// If you specify <code>use-capacity-reservations-first</code>, the fleet uses
  /// unused Capacity Reservations to fulfill On-Demand capacity up to the target
  /// On-Demand capacity. If multiple instance pools have unused Capacity
  /// Reservations, the On-Demand allocation strategy (<code>lowest-price</code>
  /// or <code>prioritized</code>) is applied. If the number of unused Capacity
  /// Reservations is less than the On-Demand target capacity, the remaining
  /// On-Demand target capacity is launched according to the On-Demand allocation
  /// strategy (<code>lowest-price</code> or <code>prioritized</code>).
  ///
  /// If you do not specify a value, the fleet fulfils the On-Demand capacity
  /// according to the chosen On-Demand allocation strategy.
  final FleetCapacityReservationUsageStrategy usageStrategy;

  CapacityReservationOptions({
    this.usageStrategy,
  });
}

/// Describes the strategy for using unused Capacity Reservations for fulfilling
/// On-Demand capacity.
/// <note>
/// This strategy can only be used if the EC2 Fleet is of type
/// <code>instant</code>.
/// </note>
/// For more information about Capacity Reservations, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">On-Demand
/// Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User
/// Guide</i>. For examples of using Capacity Reservations in an EC2 Fleet, see
/// <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html">EC2
/// Fleet Example Configurations</a> in the <i>Amazon Elastic Compute Cloud User
/// Guide</i>.
class CapacityReservationOptionsRequest {
  /// Indicates whether to use unused Capacity Reservations for fulfilling
  /// On-Demand capacity.
  ///
  /// If you specify <code>use-capacity-reservations-first</code>, the fleet uses
  /// unused Capacity Reservations to fulfill On-Demand capacity up to the target
  /// On-Demand capacity. If multiple instance pools have unused Capacity
  /// Reservations, the On-Demand allocation strategy (<code>lowest-price</code>
  /// or <code>prioritized</code>) is applied. If the number of unused Capacity
  /// Reservations is less than the On-Demand target capacity, the remaining
  /// On-Demand target capacity is launched according to the On-Demand allocation
  /// strategy (<code>lowest-price</code> or <code>prioritized</code>).
  ///
  /// If you do not specify a value, the fleet fulfils the On-Demand capacity
  /// according to the chosen On-Demand allocation strategy.
  final FleetCapacityReservationUsageStrategy usageStrategy;

  CapacityReservationOptionsRequest({
    this.usageStrategy,
  });
}

enum CapacityReservationPreference {
  open,
  none,
}

/// Describes an instance's Capacity Reservation targeting option. You can
/// specify only one parameter at a time. If you specify
/// <code>CapacityReservationPreference</code> and
/// <code>CapacityReservationTarget</code>, the request fails.
///
/// Use the <code>CapacityReservationPreference</code> parameter to configure
/// the instance to run as an On-Demand Instance or to run in any
/// <code>open</code> Capacity Reservation that has matching attributes
/// (instance type, platform, Availability Zone). Use the
/// <code>CapacityReservationTarget</code> parameter to explicitly target a
/// specific Capacity Reservation.
class CapacityReservationSpecification {
  /// Indicates the instance's Capacity Reservation preferences. Possible
  /// preferences include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The instance can run in any <code>open</code> Capacity
  /// Reservation that has matching attributes (instance type, platform,
  /// Availability Zone).
  /// </li>
  /// <li>
  /// <code>none</code> - The instance avoids running in a Capacity Reservation
  /// even if one is available. The instance runs as an On-Demand Instance.
  /// </li>
  /// </ul>
  final CapacityReservationPreference capacityReservationPreference;

  /// Information about the target Capacity Reservation.
  final CapacityReservationTarget capacityReservationTarget;

  CapacityReservationSpecification({
    this.capacityReservationPreference,
    this.capacityReservationTarget,
  });
}

/// Describes the instance's Capacity Reservation targeting preferences. The
/// action returns the <code>capacityReservationPreference</code> response
/// element if the instance is configured to run in On-Demand capacity, or if it
/// is configured in run in any <code>open</code> Capacity Reservation that has
/// matching attributes (instance type, platform, Availability Zone). The action
/// returns the <code>capacityReservationTarget</code> response element if the
/// instance explicily targets a specific Capacity Reservation.
class CapacityReservationSpecificationResponse {
  /// Describes the instance's Capacity Reservation preferences. Possible
  /// preferences include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The instance can run in any <code>open</code> Capacity
  /// Reservation that has matching attributes (instance type, platform,
  /// Availability Zone).
  /// </li>
  /// <li>
  /// <code>none</code> - The instance avoids running in a Capacity Reservation
  /// even if one is available. The instance runs in On-Demand capacity.
  /// </li>
  /// </ul>
  final CapacityReservationPreference capacityReservationPreference;

  /// Information about the targeted Capacity Reservation.
  final CapacityReservationTargetResponse capacityReservationTarget;

  CapacityReservationSpecificationResponse({
    this.capacityReservationPreference,
    this.capacityReservationTarget,
  });
}

enum CapacityReservationState {
  active,
  expired,
  cancelled,
  pending,
  failed,
}

/// Describes a target Capacity Reservation.
class CapacityReservationTarget {
  /// The ID of the Capacity Reservation.
  final String capacityReservationId;

  CapacityReservationTarget({
    this.capacityReservationId,
  });
}

/// Describes a target Capacity Reservation.
class CapacityReservationTargetResponse {
  /// The ID of the Capacity Reservation.
  final String capacityReservationId;

  CapacityReservationTargetResponse({
    this.capacityReservationId,
  });
}

enum CapacityReservationTenancy {
  $default,
  dedicated,
}

/// Information about the client certificate used for authentication.
class CertificateAuthentication {
  /// The ARN of the client certificate.
  final String clientRootCertificateChain;

  CertificateAuthentication({
    this.clientRootCertificateChain,
  });
}

/// Information about the client certificate to be used for authentication.
class CertificateAuthenticationRequest {
  /// The ARN of the client certificate. The certificate must be signed by a
  /// certificate authority (CA) and it must be provisioned in AWS Certificate
  /// Manager (ACM).
  final String clientRootCertificateChainArn;

  CertificateAuthenticationRequest({
    this.clientRootCertificateChainArn,
  });
}

/// Provides authorization for Amazon to bring a specific IP address range to a
/// specific AWS account using bring your own IP addresses (BYOIP). For more
/// information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip">Prepare
/// to Bring Your Address Range to Your AWS Account</a> in the <i>Amazon Elastic
/// Compute Cloud User Guide</i>.
class CidrAuthorizationContext {
  /// The plain-text authorization message for the prefix and account.
  final String message;

  /// The signed authorization message for the prefix and account.
  final String signature;

  CidrAuthorizationContext({
    @_s.required this.message,
    @_s.required this.signature,
  });
}

/// Describes an IPv4 CIDR block.
class CidrBlock {
  /// The IPv4 CIDR block.
  final String cidrBlock;

  CidrBlock({
    this.cidrBlock,
  });
}

/// Describes the ClassicLink DNS support status of a VPC.
class ClassicLinkDnsSupport {
  /// Indicates whether ClassicLink DNS support is enabled for the VPC.
  final bool classicLinkDnsSupported;

  /// The ID of the VPC.
  final String vpcId;

  ClassicLinkDnsSupport({
    this.classicLinkDnsSupported,
    this.vpcId,
  });
}

/// Describes a linked EC2-Classic instance.
class ClassicLinkInstance {
  /// A list of security groups.
  final List<GroupIdentifier> groups;

  /// The ID of the instance.
  final String instanceId;

  /// Any tags assigned to the instance.
  final List<Tag> tags;

  /// The ID of the VPC.
  final String vpcId;

  ClassicLinkInstance({
    this.groups,
    this.instanceId,
    this.tags,
    this.vpcId,
  });
}

/// Describes a Classic Load Balancer.
class ClassicLoadBalancer {
  /// The name of the load balancer.
  final String name;

  ClassicLoadBalancer({
    this.name,
  });
}

/// Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet
/// registers the running Spot Instances with these Classic Load Balancers.
class ClassicLoadBalancersConfig {
  /// One or more Classic Load Balancers.
  final List<ClassicLoadBalancer> classicLoadBalancers;

  ClassicLoadBalancersConfig({
    this.classicLoadBalancers,
  });
}

/// Describes the state of a client certificate revocation list.
class ClientCertificateRevocationListStatus {
  /// The state of the client certificate revocation list.
  final ClientCertificateRevocationListStatusCode code;

  /// A message about the status of the client certificate revocation list, if
  /// applicable.
  final String message;

  ClientCertificateRevocationListStatus({
    this.code,
    this.message,
  });
}

enum ClientCertificateRevocationListStatusCode {
  pending,
  active,
}

/// Describes the client-specific data.
class ClientData {
  /// A user-defined comment about the disk upload.
  final String comment;

  /// The time that the disk upload ends.
  final DateTime uploadEnd;

  /// The size of the uploaded disk image, in GiB.
  final double uploadSize;

  /// The time that the disk upload starts.
  final DateTime uploadStart;

  ClientData({
    this.comment,
    this.uploadEnd,
    this.uploadSize,
    this.uploadStart,
  });
}

/// Describes the authentication methods used by a Client VPN endpoint. Client
/// VPN supports Active Directory and mutual authentication. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication">Authentication</a>
/// in the <i>AWS Client VPN Administrator Guide</i>.
class ClientVpnAuthentication {
  /// Information about the Active Directory, if applicable.
  final DirectoryServiceAuthentication activeDirectory;

  /// Information about the authentication certificates, if applicable.
  final CertificateAuthentication mutualAuthentication;

  /// The authentication type used.
  final ClientVpnAuthenticationType type;

  ClientVpnAuthentication({
    this.activeDirectory,
    this.mutualAuthentication,
    this.type,
  });
}

/// Describes the authentication method to be used by a Client VPN endpoint.
/// Client VPN supports Active Directory and mutual authentication. For more
/// information, see <a
/// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication">Authentication</a>
/// in the <i>AWS Client VPN Administrator Guide</i>.
class ClientVpnAuthenticationRequest {
  /// Information about the Active Directory to be used, if applicable. You must
  /// provide this information if <b>Type</b> is
  /// <code>directory-service-authentication</code>.
  final DirectoryServiceAuthenticationRequest activeDirectory;

  /// Information about the authentication certificates to be used, if applicable.
  /// You must provide this information if <b>Type</b> is
  /// <code>certificate-authentication</code>.
  final CertificateAuthenticationRequest mutualAuthentication;

  /// The type of client authentication to be used. Specify
  /// <code>certificate-authentication</code> to use certificate-based
  /// authentication, or <code>directory-service-authentication</code> to use
  /// Active Directory authentication.
  final ClientVpnAuthenticationType type;

  ClientVpnAuthenticationRequest({
    this.activeDirectory,
    this.mutualAuthentication,
    this.type,
  });
}

enum ClientVpnAuthenticationType {
  certificateAuthentication,
  directoryServiceAuthentication,
}

/// Describes the state of an authorization rule.
class ClientVpnAuthorizationRuleStatus {
  /// The state of the authorization rule.
  final ClientVpnAuthorizationRuleStatusCode code;

  /// A message about the status of the authorization rule, if applicable.
  final String message;

  ClientVpnAuthorizationRuleStatus({
    this.code,
    this.message,
  });
}

enum ClientVpnAuthorizationRuleStatusCode {
  authorizing,
  active,
  failed,
  revoking,
}

/// Describes a client connection.
class ClientVpnConnection {
  /// The IP address of the client.
  final String clientIp;

  /// The ID of the Client VPN endpoint to which the client is connected.
  final String clientVpnEndpointId;

  /// The common name associated with the client. This is either the name of the
  /// client certificate, or the Active Directory user name.
  final String commonName;

  /// The date and time the client connection was terminated.
  final String connectionEndTime;

  /// The date and time the client connection was established.
  final String connectionEstablishedTime;

  /// The ID of the client connection.
  final String connectionId;

  /// The number of bytes received by the client.
  final String egressBytes;

  /// The number of packets received by the client.
  final String egressPackets;

  /// The number of bytes sent by the client.
  final String ingressBytes;

  /// The number of packets sent by the client.
  final String ingressPackets;

  /// The current state of the client connection.
  final ClientVpnConnectionStatus status;

  /// The current date and time.
  final String timestamp;

  /// The username of the client who established the client connection. This
  /// information is only provided if Active Directory client authentication is
  /// used.
  final String username;

  ClientVpnConnection({
    this.clientIp,
    this.clientVpnEndpointId,
    this.commonName,
    this.connectionEndTime,
    this.connectionEstablishedTime,
    this.connectionId,
    this.egressBytes,
    this.egressPackets,
    this.ingressBytes,
    this.ingressPackets,
    this.status,
    this.timestamp,
    this.username,
  });
}

/// Describes the status of a client connection.
class ClientVpnConnectionStatus {
  /// The state of the client connection.
  final ClientVpnConnectionStatusCode code;

  /// A message about the status of the client connection, if applicable.
  final String message;

  ClientVpnConnectionStatus({
    this.code,
    this.message,
  });
}

enum ClientVpnConnectionStatusCode {
  active,
  failedToTerminate,
  terminating,
  terminated,
}

/// Describes a Client VPN endpoint.
class ClientVpnEndpoint {
  /// Information about the associated target networks. A target network is a
  /// subnet in a VPC.
  final List<AssociatedTargetNetwork> associatedTargetNetworks;

  /// Information about the authentication method used by the Client VPN endpoint.
  final List<ClientVpnAuthentication> authenticationOptions;

  /// The IPv4 address range, in CIDR notation, from which client IP addresses are
  /// assigned.
  final String clientCidrBlock;

  /// The ID of the Client VPN endpoint.
  final String clientVpnEndpointId;

  /// Information about the client connection logging options for the Client VPN
  /// endpoint.
  final ConnectionLogResponseOptions connectionLogOptions;

  /// The date and time the Client VPN endpoint was created.
  final String creationTime;

  /// The date and time the Client VPN endpoint was deleted, if applicable.
  final String deletionTime;

  /// A brief description of the endpoint.
  final String description;

  /// The DNS name to be used by clients when connecting to the Client VPN
  /// endpoint.
  final String dnsName;

  /// Information about the DNS servers to be used for DNS resolution.
  final List<String> dnsServers;

  /// The IDs of the security groups for the target network.
  final List<String> securityGroupIds;

  /// The ARN of the server certificate.
  final String serverCertificateArn;

  /// Indicates whether split-tunnel is enabled in the AWS Client VPN endpoint.
  ///
  /// For information about split-tunnel VPN endpoints, see <a
  /// href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-Tunnel
  /// AWS Client VPN Endpoint</a> in the <i>AWS Client VPN Administrator
  /// Guide</i>.
  final bool splitTunnel;

  /// The current state of the Client VPN endpoint.
  final ClientVpnEndpointStatus status;

  /// Any tags assigned to the Client VPN endpoint.
  final List<Tag> tags;

  /// The transport protocol used by the Client VPN endpoint.
  final TransportProtocol transportProtocol;

  /// The ID of the VPC.
  final String vpcId;

  /// The port number for the Client VPN endpoint.
  final int vpnPort;

  /// The protocol used by the VPN session.
  final VpnProtocol vpnProtocol;

  ClientVpnEndpoint({
    this.associatedTargetNetworks,
    this.authenticationOptions,
    this.clientCidrBlock,
    this.clientVpnEndpointId,
    this.connectionLogOptions,
    this.creationTime,
    this.deletionTime,
    this.description,
    this.dnsName,
    this.dnsServers,
    this.securityGroupIds,
    this.serverCertificateArn,
    this.splitTunnel,
    this.status,
    this.tags,
    this.transportProtocol,
    this.vpcId,
    this.vpnPort,
    this.vpnProtocol,
  });
}

/// Describes the state of a Client VPN endpoint.
class ClientVpnEndpointStatus {
  /// The state of the Client VPN endpoint. Possible states include:
  ///
  /// <ul>
  /// <li>
  /// <code>pending-associate</code> - The Client VPN endpoint has been created
  /// but no target networks have been associated. The Client VPN endpoint cannot
  /// accept connections.
  /// </li>
  /// <li>
  /// <code>available</code> - The Client VPN endpoint has been created and a
  /// target network has been associated. The Client VPN endpoint can accept
  /// connections.
  /// </li>
  /// <li>
  /// <code>deleting</code> - The Client VPN endpoint is being deleted. The Client
  /// VPN endpoint cannot accept connections.
  /// </li>
  /// <li>
  /// <code>deleted</code> - The Client VPN endpoint has been deleted. The Client
  /// VPN endpoint cannot accept connections.
  /// </li>
  /// </ul>
  final ClientVpnEndpointStatusCode code;

  /// A message about the status of the Client VPN endpoint.
  final String message;

  ClientVpnEndpointStatus({
    this.code,
    this.message,
  });
}

enum ClientVpnEndpointStatusCode {
  pendingAssociate,
  available,
  deleting,
  deleted,
}

/// Information about a Client VPN endpoint route.
class ClientVpnRoute {
  /// The ID of the Client VPN endpoint with which the route is associated.
  final String clientVpnEndpointId;

  /// A brief description of the route.
  final String description;

  /// The IPv4 address range, in CIDR notation, of the route destination.
  final String destinationCidr;

  /// Indicates how the route was associated with the Client VPN endpoint.
  /// <code>associate</code> indicates that the route was automatically added when
  /// the target network was associated with the Client VPN endpoint.
  /// <code>add-route</code> indicates that the route was manually added using the
  /// <b>CreateClientVpnRoute</b> action.
  final String origin;

  /// The current state of the route.
  final ClientVpnRouteStatus status;

  /// The ID of the subnet through which traffic is routed.
  final String targetSubnet;

  /// The route type.
  final String type;

  ClientVpnRoute({
    this.clientVpnEndpointId,
    this.description,
    this.destinationCidr,
    this.origin,
    this.status,
    this.targetSubnet,
    this.type,
  });
}

/// Describes the state of a Client VPN endpoint route.
class ClientVpnRouteStatus {
  /// The state of the Client VPN endpoint route.
  final ClientVpnRouteStatusCode code;

  /// A message about the status of the Client VPN endpoint route, if applicable.
  final String message;

  ClientVpnRouteStatus({
    this.code,
    this.message,
  });
}

enum ClientVpnRouteStatusCode {
  creating,
  active,
  failed,
  deleting,
}

/// Describes address usage for a customer-owned address pool.
class CoipAddressUsage {
  /// The allocation ID of the address.
  final String allocationId;

  /// The AWS account ID.
  final String awsAccountId;

  /// The AWS service.
  final String awsService;

  /// The customer-owned IP address.
  final String coIp;

  CoipAddressUsage({
    this.allocationId,
    this.awsAccountId,
    this.awsService,
    this.coIp,
  });
}

/// Describes a customer-owned address pool.
class CoipPool {
  /// The ID of the local gateway route table.
  final String localGatewayRouteTableId;

  /// The address ranges of the address pool.
  final List<String> poolCidrs;

  /// The ID of the address pool.
  final String poolId;

  /// The tags.
  final List<Tag> tags;

  CoipPool({
    this.localGatewayRouteTableId,
    this.poolCidrs,
    this.poolId,
    this.tags,
  });
}

class ConfirmProductInstanceResult {
  /// The AWS account ID of the instance owner. This is only present if the
  /// product code is attached to the instance.
  final String ownerId;

  /// The return value of the request. Returns <code>true</code> if the specified
  /// product code is owned by the requester and associated with the specified
  /// instance.
  final bool returnValue;

  ConfirmProductInstanceResult({
    this.ownerId,
    this.returnValue,
  });
}

/// Describes the client connection logging options for the Client VPN endpoint.
class ConnectionLogOptions {
  /// The name of the CloudWatch Logs log group.
  final String cloudwatchLogGroup;

  /// The name of the CloudWatch Logs log stream to which the connection data is
  /// published.
  final String cloudwatchLogStream;

  /// Indicates whether connection logging is enabled.
  final bool enabled;

  ConnectionLogOptions({
    this.cloudwatchLogGroup,
    this.cloudwatchLogStream,
    this.enabled,
  });
}

/// Information about the client connection logging options for a Client VPN
/// endpoint.
class ConnectionLogResponseOptions {
  /// The name of the Amazon CloudWatch Logs log group to which connection logging
  /// data is published.
  final String cloudwatchLogGroup;

  /// The name of the Amazon CloudWatch Logs log stream to which connection
  /// logging data is published.
  final String cloudwatchLogStream;

  /// Indicates whether client connection logging is enabled for the Client VPN
  /// endpoint.
  final bool enabled;

  ConnectionLogResponseOptions({
    this.cloudwatchLogGroup,
    this.cloudwatchLogStream,
    this.enabled,
  });
}

/// Describes a connection notification for a VPC endpoint or VPC endpoint
/// service.
class ConnectionNotification {
  /// The events for the notification. Valid values are <code>Accept</code>,
  /// <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
  final List<String> connectionEvents;

  /// The ARN of the SNS topic for the notification.
  final String connectionNotificationArn;

  /// The ID of the notification.
  final String connectionNotificationId;

  /// The state of the notification.
  final ConnectionNotificationState connectionNotificationState;

  /// The type of notification.
  final ConnectionNotificationType connectionNotificationType;

  /// The ID of the endpoint service.
  final String serviceId;

  /// The ID of the VPC endpoint.
  final String vpcEndpointId;

  ConnectionNotification({
    this.connectionEvents,
    this.connectionNotificationArn,
    this.connectionNotificationId,
    this.connectionNotificationState,
    this.connectionNotificationType,
    this.serviceId,
    this.vpcEndpointId,
  });
}

enum ConnectionNotificationState {
  enabled,
  disabled,
}

enum ConnectionNotificationType {
  topic,
}

enum ContainerFormat {
  ova,
}

/// Describes a conversion task.
class ConversionTask {
  /// The ID of the conversion task.
  final String conversionTaskId;

  /// The time when the task expires. If the upload isn't complete before the
  /// expiration time, we automatically cancel the task.
  final String expirationTime;

  /// If the task is for importing an instance, this contains information about
  /// the import instance task.
  final ImportInstanceTaskDetails importInstance;

  /// If the task is for importing a volume, this contains information about the
  /// import volume task.
  final ImportVolumeTaskDetails importVolume;

  /// The state of the conversion task.
  final ConversionTaskState state;

  /// The status message related to the conversion task.
  final String statusMessage;

  /// Any tags assigned to the task.
  final List<Tag> tags;

  ConversionTask({
    this.conversionTaskId,
    this.expirationTime,
    this.importInstance,
    this.importVolume,
    this.state,
    this.statusMessage,
    this.tags,
  });
}

enum ConversionTaskState {
  active,
  cancelling,
  cancelled,
  completed,
}

class CopyFpgaImageResult {
  /// The ID of the new AFI.
  final String fpgaImageId;

  CopyFpgaImageResult({
    this.fpgaImageId,
  });
}

/// Contains the output of CopyImage.
class CopyImageResult {
  /// The ID of the new AMI.
  final String imageId;

  CopyImageResult({
    this.imageId,
  });
}

class CopySnapshotResult {
  /// The ID of the new snapshot.
  final String snapshotId;

  /// Any tags applied to the new snapshot.
  final List<Tag> tags;

  CopySnapshotResult({
    this.snapshotId,
    this.tags,
  });
}

enum CopyTagsFromSource {
  volume,
}

/// The CPU options for the instance.
class CpuOptions {
  /// The number of CPU cores for the instance.
  final int coreCount;

  /// The number of threads per CPU core.
  final int threadsPerCore;

  CpuOptions({
    this.coreCount,
    this.threadsPerCore,
  });
}

/// The CPU options for the instance. Both the core count and threads per core
/// must be specified in the request.
class CpuOptionsRequest {
  /// The number of CPU cores for the instance.
  final int coreCount;

  /// The number of threads per CPU core. To disable multithreading for the
  /// instance, specify a value of <code>1</code>. Otherwise, specify the default
  /// value of <code>2</code>.
  final int threadsPerCore;

  CpuOptionsRequest({
    this.coreCount,
    this.threadsPerCore,
  });
}

class CreateCapacityReservationResult {
  /// Information about the Capacity Reservation.
  final CapacityReservation capacityReservation;

  CreateCapacityReservationResult({
    this.capacityReservation,
  });
}

class CreateClientVpnEndpointResult {
  /// The ID of the Client VPN endpoint.
  final String clientVpnEndpointId;

  /// The DNS name to be used by clients when establishing their VPN session.
  final String dnsName;

  /// The current state of the Client VPN endpoint.
  final ClientVpnEndpointStatus status;

  CreateClientVpnEndpointResult({
    this.clientVpnEndpointId,
    this.dnsName,
    this.status,
  });
}

class CreateClientVpnRouteResult {
  /// The current state of the route.
  final ClientVpnRouteStatus status;

  CreateClientVpnRouteResult({
    this.status,
  });
}

/// Contains the output of CreateCustomerGateway.
class CreateCustomerGatewayResult {
  /// Information about the customer gateway.
  final CustomerGateway customerGateway;

  CreateCustomerGatewayResult({
    this.customerGateway,
  });
}

class CreateDefaultSubnetResult {
  /// Information about the subnet.
  final Subnet subnet;

  CreateDefaultSubnetResult({
    this.subnet,
  });
}

class CreateDefaultVpcResult {
  /// Information about the VPC.
  final Vpc vpc;

  CreateDefaultVpcResult({
    this.vpc,
  });
}

class CreateDhcpOptionsResult {
  /// A set of DHCP options.
  final DhcpOptions dhcpOptions;

  CreateDhcpOptionsResult({
    this.dhcpOptions,
  });
}

class CreateEgressOnlyInternetGatewayResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String clientToken;

  /// Information about the egress-only internet gateway.
  final EgressOnlyInternetGateway egressOnlyInternetGateway;

  CreateEgressOnlyInternetGatewayResult({
    this.clientToken,
    this.egressOnlyInternetGateway,
  });
}

/// Describes the instances that could not be launched by the fleet.
class CreateFleetError {
  /// The error code that indicates why the instance could not be launched. For
  /// more information about error codes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error
  /// Codes</a>.
  final String errorCode;

  /// The error message that describes why the instance could not be launched. For
  /// more information about error messages, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error
  /// Codes</a>.
  final String errorMessage;

  /// The launch templates and overrides that were used for launching the
  /// instances. The values that you specify in the Overrides replace the values
  /// in the launch template.
  final LaunchTemplateAndOverridesResponse launchTemplateAndOverrides;

  /// Indicates if the instance that could not be launched was a Spot Instance or
  /// On-Demand Instance.
  final InstanceLifecycle lifecycle;

  CreateFleetError({
    this.errorCode,
    this.errorMessage,
    this.launchTemplateAndOverrides,
    this.lifecycle,
  });
}

/// Describes the instances that were launched by the fleet.
class CreateFleetInstance {
  /// The IDs of the instances.
  final List<String> instanceIds;

  /// The instance type.
  final InstanceType instanceType;

  /// The launch templates and overrides that were used for launching the
  /// instances. The values that you specify in the Overrides replace the values
  /// in the launch template.
  final LaunchTemplateAndOverridesResponse launchTemplateAndOverrides;

  /// Indicates if the instance that was launched is a Spot Instance or On-Demand
  /// Instance.
  final InstanceLifecycle lifecycle;

  /// The value is <code>Windows</code> for Windows instances. Otherwise, the
  /// value is blank.
  final PlatformValues platform;

  CreateFleetInstance({
    this.instanceIds,
    this.instanceType,
    this.launchTemplateAndOverrides,
    this.lifecycle,
    this.platform,
  });
}

class CreateFleetResult {
  /// Information about the instances that could not be launched by the fleet.
  /// Valid only when <b>Type</b> is set to <code>instant</code>.
  final List<CreateFleetError> errors;

  /// The ID of the EC2 Fleet.
  final String fleetId;

  /// Information about the instances that were launched by the fleet. Valid only
  /// when <b>Type</b> is set to <code>instant</code>.
  final List<CreateFleetInstance> instances;

  CreateFleetResult({
    this.errors,
    this.fleetId,
    this.instances,
  });
}

class CreateFlowLogsResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String clientToken;

  /// The IDs of the flow logs.
  final List<String> flowLogIds;

  /// Information about the flow logs that could not be created successfully.
  final List<UnsuccessfulItem> unsuccessful;

  CreateFlowLogsResult({
    this.clientToken,
    this.flowLogIds,
    this.unsuccessful,
  });
}

class CreateFpgaImageResult {
  /// The global FPGA image identifier (AGFI ID).
  final String fpgaImageGlobalId;

  /// The FPGA image identifier (AFI ID).
  final String fpgaImageId;

  CreateFpgaImageResult({
    this.fpgaImageGlobalId,
    this.fpgaImageId,
  });
}

class CreateImageResult {
  /// The ID of the new AMI.
  final String imageId;

  CreateImageResult({
    this.imageId,
  });
}

class CreateInstanceExportTaskResult {
  /// Information about the instance export task.
  final ExportTask exportTask;

  CreateInstanceExportTaskResult({
    this.exportTask,
  });
}

class CreateInternetGatewayResult {
  /// Information about the internet gateway.
  final InternetGateway internetGateway;

  CreateInternetGatewayResult({
    this.internetGateway,
  });
}

class CreateLaunchTemplateResult {
  /// Information about the launch template.
  final LaunchTemplate launchTemplate;

  CreateLaunchTemplateResult({
    this.launchTemplate,
  });
}

class CreateLaunchTemplateVersionResult {
  /// Information about the launch template version.
  final LaunchTemplateVersion launchTemplateVersion;

  CreateLaunchTemplateVersionResult({
    this.launchTemplateVersion,
  });
}

class CreateLocalGatewayRouteResult {
  /// Information about the route.
  final LocalGatewayRoute route;

  CreateLocalGatewayRouteResult({
    this.route,
  });
}

class CreateLocalGatewayRouteTableVpcAssociationResult {
  /// Information about the association.
  final LocalGatewayRouteTableVpcAssociation
      localGatewayRouteTableVpcAssociation;

  CreateLocalGatewayRouteTableVpcAssociationResult({
    this.localGatewayRouteTableVpcAssociation,
  });
}

class CreateNatGatewayResult {
  /// Unique, case-sensitive identifier to ensure the idempotency of the request.
  /// Only returned if a client token was provided in the request.
  final String clientToken;

  /// Information about the NAT gateway.
  final NatGateway natGateway;

  CreateNatGatewayResult({
    this.clientToken,
    this.natGateway,
  });
}

class CreateNetworkAclResult {
  /// Information about the network ACL.
  final NetworkAcl networkAcl;

  CreateNetworkAclResult({
    this.networkAcl,
  });
}

/// Contains the output of CreateNetworkInterfacePermission.
class CreateNetworkInterfacePermissionResult {
  /// Information about the permission for the network interface.
  final NetworkInterfacePermission interfacePermission;

  CreateNetworkInterfacePermissionResult({
    this.interfacePermission,
  });
}

/// Contains the output of CreateNetworkInterface.
class CreateNetworkInterfaceResult {
  /// Information about the network interface.
  final NetworkInterface networkInterface;

  CreateNetworkInterfaceResult({
    this.networkInterface,
  });
}

class CreatePlacementGroupResult {
  final PlacementGroup placementGroup;

  CreatePlacementGroupResult({
    this.placementGroup,
  });
}

/// Contains the output of CreateReservedInstancesListing.
class CreateReservedInstancesListingResult {
  /// Information about the Standard Reserved Instance listing.
  final List<ReservedInstancesListing> reservedInstancesListings;

  CreateReservedInstancesListingResult({
    this.reservedInstancesListings,
  });
}

class CreateRouteResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  CreateRouteResult({
    this.returnValue,
  });
}

class CreateRouteTableResult {
  /// Information about the route table.
  final RouteTable routeTable;

  CreateRouteTableResult({
    this.routeTable,
  });
}

class CreateSecurityGroupResult {
  /// The ID of the security group.
  final String groupId;

  CreateSecurityGroupResult({
    this.groupId,
  });
}

class CreateSnapshotsResult {
  /// List of snapshots.
  final List<SnapshotInfo> snapshots;

  CreateSnapshotsResult({
    this.snapshots,
  });
}

/// Contains the output of CreateSpotDatafeedSubscription.
class CreateSpotDatafeedSubscriptionResult {
  /// The Spot Instance data feed subscription.
  final SpotDatafeedSubscription spotDatafeedSubscription;

  CreateSpotDatafeedSubscriptionResult({
    this.spotDatafeedSubscription,
  });
}

class CreateSubnetResult {
  /// Information about the subnet.
  final Subnet subnet;

  CreateSubnetResult({
    this.subnet,
  });
}

class CreateTrafficMirrorFilterResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  final String clientToken;

  /// Information about the Traffic Mirror filter.
  final TrafficMirrorFilter trafficMirrorFilter;

  CreateTrafficMirrorFilterResult({
    this.clientToken,
    this.trafficMirrorFilter,
  });
}

class CreateTrafficMirrorFilterRuleResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  final String clientToken;

  /// The Traffic Mirror rule.
  final TrafficMirrorFilterRule trafficMirrorFilterRule;

  CreateTrafficMirrorFilterRuleResult({
    this.clientToken,
    this.trafficMirrorFilterRule,
  });
}

class CreateTrafficMirrorSessionResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  final String clientToken;

  /// Information about the Traffic Mirror session.
  final TrafficMirrorSession trafficMirrorSession;

  CreateTrafficMirrorSessionResult({
    this.clientToken,
    this.trafficMirrorSession,
  });
}

class CreateTrafficMirrorTargetResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  final String clientToken;

  /// Information about the Traffic Mirror target.
  final TrafficMirrorTarget trafficMirrorTarget;

  CreateTrafficMirrorTargetResult({
    this.clientToken,
    this.trafficMirrorTarget,
  });
}

class CreateTransitGatewayMulticastDomainResult {
  /// Information about the transit gateway multicast domain.
  final TransitGatewayMulticastDomain transitGatewayMulticastDomain;

  CreateTransitGatewayMulticastDomainResult({
    this.transitGatewayMulticastDomain,
  });
}

class CreateTransitGatewayPeeringAttachmentResult {
  /// The transit gateway peering attachment.
  final TransitGatewayPeeringAttachment transitGatewayPeeringAttachment;

  CreateTransitGatewayPeeringAttachmentResult({
    this.transitGatewayPeeringAttachment,
  });
}

class CreateTransitGatewayResult {
  /// Information about the transit gateway.
  final TransitGateway transitGateway;

  CreateTransitGatewayResult({
    this.transitGateway,
  });
}

class CreateTransitGatewayRouteResult {
  /// Information about the route.
  final TransitGatewayRoute route;

  CreateTransitGatewayRouteResult({
    this.route,
  });
}

class CreateTransitGatewayRouteTableResult {
  /// Information about the transit gateway route table.
  final TransitGatewayRouteTable transitGatewayRouteTable;

  CreateTransitGatewayRouteTableResult({
    this.transitGatewayRouteTable,
  });
}

/// Describes the options for a VPC attachment.
class CreateTransitGatewayVpcAttachmentRequestOptions {
  /// Enable or disable DNS support. The default is <code>enable</code>.
  final DnsSupportValue dnsSupport;

  /// Enable or disable IPv6 support. The default is <code>enable</code>.
  final Ipv6SupportValue ipv6Support;

  CreateTransitGatewayVpcAttachmentRequestOptions({
    this.dnsSupport,
    this.ipv6Support,
  });
}

class CreateTransitGatewayVpcAttachmentResult {
  /// Information about the VPC attachment.
  final TransitGatewayVpcAttachment transitGatewayVpcAttachment;

  CreateTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });
}

/// Describes the user or group to be added or removed from the list of create
/// volume permissions for a volume.
class CreateVolumePermission {
  /// The group to be added or removed. The possible value is <code>all</code>.
  final PermissionGroup group;

  /// The AWS account ID to be added or removed.
  final String userId;

  CreateVolumePermission({
    this.group,
    this.userId,
  });
}

/// Describes modifications to the list of create volume permissions for a
/// volume.
class CreateVolumePermissionModifications {
  /// Adds the specified AWS account ID or group to the list.
  final List<CreateVolumePermission> add;

  /// Removes the specified AWS account ID or group from the list.
  final List<CreateVolumePermission> remove;

  CreateVolumePermissionModifications({
    this.add,
    this.remove,
  });
}

class CreateVpcEndpointConnectionNotificationResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String clientToken;

  /// Information about the notification.
  final ConnectionNotification connectionNotification;

  CreateVpcEndpointConnectionNotificationResult({
    this.clientToken,
    this.connectionNotification,
  });
}

/// Contains the output of CreateVpcEndpoint.
class CreateVpcEndpointResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String clientToken;

  /// Information about the endpoint.
  final VpcEndpoint vpcEndpoint;

  CreateVpcEndpointResult({
    this.clientToken,
    this.vpcEndpoint,
  });
}

class CreateVpcEndpointServiceConfigurationResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request.
  final String clientToken;

  /// Information about the service configuration.
  final ServiceConfiguration serviceConfiguration;

  CreateVpcEndpointServiceConfigurationResult({
    this.clientToken,
    this.serviceConfiguration,
  });
}

class CreateVpcPeeringConnectionResult {
  /// Information about the VPC peering connection.
  final VpcPeeringConnection vpcPeeringConnection;

  CreateVpcPeeringConnectionResult({
    this.vpcPeeringConnection,
  });
}

class CreateVpcResult {
  /// Information about the VPC.
  final Vpc vpc;

  CreateVpcResult({
    this.vpc,
  });
}

/// Contains the output of CreateVpnConnection.
class CreateVpnConnectionResult {
  /// Information about the VPN connection.
  final VpnConnection vpnConnection;

  CreateVpnConnectionResult({
    this.vpnConnection,
  });
}

/// Contains the output of CreateVpnGateway.
class CreateVpnGatewayResult {
  /// Information about the virtual private gateway.
  final VpnGateway vpnGateway;

  CreateVpnGatewayResult({
    this.vpnGateway,
  });
}

/// Describes the credit option for CPU usage of a T2 or T3 instance.
class CreditSpecification {
  /// The credit option for CPU usage of a T2 or T3 instance. Valid values are
  /// <code>standard</code> and <code>unlimited</code>.
  final String cpuCredits;

  CreditSpecification({
    this.cpuCredits,
  });
}

/// The credit option for CPU usage of a T2 or T3 instance.
class CreditSpecificationRequest {
  /// The credit option for CPU usage of a T2 or T3 instance. Valid values are
  /// <code>standard</code> and <code>unlimited</code>.
  final String cpuCredits;

  CreditSpecificationRequest({
    @_s.required this.cpuCredits,
  });
}

enum CurrencyCodeValues {
  usd,
}

/// Describes a customer gateway.
class CustomerGateway {
  /// The customer gateway's Border Gateway Protocol (BGP) Autonomous System
  /// Number (ASN).
  final String bgpAsn;

  /// The Amazon Resource Name (ARN) for the customer gateway certificate.
  final String certificateArn;

  /// The ID of the customer gateway.
  final String customerGatewayId;

  /// The name of customer gateway device.
  final String deviceName;

  /// The Internet-routable IP address of the customer gateway's outside
  /// interface.
  final String ipAddress;

  /// The current state of the customer gateway (<code>pending | available |
  /// deleting | deleted</code>).
  final String state;

  /// Any tags assigned to the customer gateway.
  final List<Tag> tags;

  /// The type of VPN connection the customer gateway supports
  /// (<code>ipsec.1</code>).
  final String type;

  CustomerGateway({
    this.bgpAsn,
    this.certificateArn,
    this.customerGatewayId,
    this.deviceName,
    this.ipAddress,
    this.state,
    this.tags,
    this.type,
  });
}

enum DatafeedSubscriptionState {
  active,
  inactive,
}

enum DefaultRouteTableAssociationValue {
  enable,
  disable,
}

enum DefaultRouteTablePropagationValue {
  enable,
  disable,
}

enum DefaultTargetCapacityType {
  spot,
  onDemand,
}

class DeleteClientVpnEndpointResult {
  /// The current state of the Client VPN endpoint.
  final ClientVpnEndpointStatus status;

  DeleteClientVpnEndpointResult({
    this.status,
  });
}

class DeleteClientVpnRouteResult {
  /// The current state of the route.
  final ClientVpnRouteStatus status;

  DeleteClientVpnRouteResult({
    this.status,
  });
}

class DeleteEgressOnlyInternetGatewayResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnCode;

  DeleteEgressOnlyInternetGatewayResult({
    this.returnCode,
  });
}

/// Describes an EC2 Fleet error.
class DeleteFleetError {
  /// The error code.
  final DeleteFleetErrorCode code;

  /// The description for the error code.
  final String message;

  DeleteFleetError({
    this.code,
    this.message,
  });
}

enum DeleteFleetErrorCode {
  fleetIdDoesNotExist,
  fleetIdMalformed,
  fleetNotInDeletableState,
  unexpectedError,
}

/// Describes an EC2 Fleet that was not successfully deleted.
class DeleteFleetErrorItem {
  /// The error.
  final DeleteFleetError error;

  /// The ID of the EC2 Fleet.
  final String fleetId;

  DeleteFleetErrorItem({
    this.error,
    this.fleetId,
  });
}

/// Describes an EC2 Fleet that was successfully deleted.
class DeleteFleetSuccessItem {
  /// The current state of the EC2 Fleet.
  final FleetStateCode currentFleetState;

  /// The ID of the EC2 Fleet.
  final String fleetId;

  /// The previous state of the EC2 Fleet.
  final FleetStateCode previousFleetState;

  DeleteFleetSuccessItem({
    this.currentFleetState,
    this.fleetId,
    this.previousFleetState,
  });
}

class DeleteFleetsResult {
  /// Information about the EC2 Fleets that are successfully deleted.
  final List<DeleteFleetSuccessItem> successfulFleetDeletions;

  /// Information about the EC2 Fleets that are not successfully deleted.
  final List<DeleteFleetErrorItem> unsuccessfulFleetDeletions;

  DeleteFleetsResult({
    this.successfulFleetDeletions,
    this.unsuccessfulFleetDeletions,
  });
}

class DeleteFlowLogsResult {
  /// Information about the flow logs that could not be deleted successfully.
  final List<UnsuccessfulItem> unsuccessful;

  DeleteFlowLogsResult({
    this.unsuccessful,
  });
}

class DeleteFpgaImageResult {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool returnValue;

  DeleteFpgaImageResult({
    this.returnValue,
  });
}

class DeleteLaunchTemplateResult {
  /// Information about the launch template.
  final LaunchTemplate launchTemplate;

  DeleteLaunchTemplateResult({
    this.launchTemplate,
  });
}

/// Describes a launch template version that could not be deleted.
class DeleteLaunchTemplateVersionsResponseErrorItem {
  /// The ID of the launch template.
  final String launchTemplateId;

  /// The name of the launch template.
  final String launchTemplateName;

  /// Information about the error.
  final ResponseError responseError;

  /// The version number of the launch template.
  final int versionNumber;

  DeleteLaunchTemplateVersionsResponseErrorItem({
    this.launchTemplateId,
    this.launchTemplateName,
    this.responseError,
    this.versionNumber,
  });
}

/// Describes a launch template version that was successfully deleted.
class DeleteLaunchTemplateVersionsResponseSuccessItem {
  /// The ID of the launch template.
  final String launchTemplateId;

  /// The name of the launch template.
  final String launchTemplateName;

  /// The version number of the launch template.
  final int versionNumber;

  DeleteLaunchTemplateVersionsResponseSuccessItem({
    this.launchTemplateId,
    this.launchTemplateName,
    this.versionNumber,
  });
}

class DeleteLaunchTemplateVersionsResult {
  /// Information about the launch template versions that were successfully
  /// deleted.
  final List<DeleteLaunchTemplateVersionsResponseSuccessItem>
      successfullyDeletedLaunchTemplateVersions;

  /// Information about the launch template versions that could not be deleted.
  final List<DeleteLaunchTemplateVersionsResponseErrorItem>
      unsuccessfullyDeletedLaunchTemplateVersions;

  DeleteLaunchTemplateVersionsResult({
    this.successfullyDeletedLaunchTemplateVersions,
    this.unsuccessfullyDeletedLaunchTemplateVersions,
  });
}

class DeleteLocalGatewayRouteResult {
  /// Information about the route.
  final LocalGatewayRoute route;

  DeleteLocalGatewayRouteResult({
    this.route,
  });
}

class DeleteLocalGatewayRouteTableVpcAssociationResult {
  /// Information about the association.
  final LocalGatewayRouteTableVpcAssociation
      localGatewayRouteTableVpcAssociation;

  DeleteLocalGatewayRouteTableVpcAssociationResult({
    this.localGatewayRouteTableVpcAssociation,
  });
}

class DeleteNatGatewayResult {
  /// The ID of the NAT gateway.
  final String natGatewayId;

  DeleteNatGatewayResult({
    this.natGatewayId,
  });
}

/// Contains the output for DeleteNetworkInterfacePermission.
class DeleteNetworkInterfacePermissionResult {
  /// Returns <code>true</code> if the request succeeds, otherwise returns an
  /// error.
  final bool returnValue;

  DeleteNetworkInterfacePermissionResult({
    this.returnValue,
  });
}

/// Describes the error for a Reserved Instance whose queued purchase could not
/// be deleted.
class DeleteQueuedReservedInstancesError {
  /// The error code.
  final DeleteQueuedReservedInstancesErrorCode code;

  /// The error message.
  final String message;

  DeleteQueuedReservedInstancesError({
    this.code,
    this.message,
  });
}

enum DeleteQueuedReservedInstancesErrorCode {
  reservedInstancesIdInvalid,
  reservedInstancesNotInQueuedState,
  unexpectedError,
}

class DeleteQueuedReservedInstancesResult {
  /// Information about the queued purchases that could not be deleted.
  final List<FailedQueuedPurchaseDeletion> failedQueuedPurchaseDeletions;

  /// Information about the queued purchases that were successfully deleted.
  final List<SuccessfulQueuedPurchaseDeletion>
      successfulQueuedPurchaseDeletions;

  DeleteQueuedReservedInstancesResult({
    this.failedQueuedPurchaseDeletions,
    this.successfulQueuedPurchaseDeletions,
  });
}

class DeleteTrafficMirrorFilterResult {
  /// The ID of the Traffic Mirror filter.
  final String trafficMirrorFilterId;

  DeleteTrafficMirrorFilterResult({
    this.trafficMirrorFilterId,
  });
}

class DeleteTrafficMirrorFilterRuleResult {
  /// The ID of the deleted Traffic Mirror rule.
  final String trafficMirrorFilterRuleId;

  DeleteTrafficMirrorFilterRuleResult({
    this.trafficMirrorFilterRuleId,
  });
}

class DeleteTrafficMirrorSessionResult {
  /// The ID of the deleted Traffic Mirror session.
  final String trafficMirrorSessionId;

  DeleteTrafficMirrorSessionResult({
    this.trafficMirrorSessionId,
  });
}

class DeleteTrafficMirrorTargetResult {
  /// The ID of the deleted Traffic Mirror target.
  final String trafficMirrorTargetId;

  DeleteTrafficMirrorTargetResult({
    this.trafficMirrorTargetId,
  });
}

class DeleteTransitGatewayMulticastDomainResult {
  /// Information about the deleted transit gateway multicast domain.
  final TransitGatewayMulticastDomain transitGatewayMulticastDomain;

  DeleteTransitGatewayMulticastDomainResult({
    this.transitGatewayMulticastDomain,
  });
}

class DeleteTransitGatewayPeeringAttachmentResult {
  /// The transit gateway peering attachment.
  final TransitGatewayPeeringAttachment transitGatewayPeeringAttachment;

  DeleteTransitGatewayPeeringAttachmentResult({
    this.transitGatewayPeeringAttachment,
  });
}

class DeleteTransitGatewayResult {
  /// Information about the deleted transit gateway.
  final TransitGateway transitGateway;

  DeleteTransitGatewayResult({
    this.transitGateway,
  });
}

class DeleteTransitGatewayRouteResult {
  /// Information about the route.
  final TransitGatewayRoute route;

  DeleteTransitGatewayRouteResult({
    this.route,
  });
}

class DeleteTransitGatewayRouteTableResult {
  /// Information about the deleted transit gateway route table.
  final TransitGatewayRouteTable transitGatewayRouteTable;

  DeleteTransitGatewayRouteTableResult({
    this.transitGatewayRouteTable,
  });
}

class DeleteTransitGatewayVpcAttachmentResult {
  /// Information about the deleted VPC attachment.
  final TransitGatewayVpcAttachment transitGatewayVpcAttachment;

  DeleteTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });
}

class DeleteVpcEndpointConnectionNotificationsResult {
  /// Information about the notifications that could not be deleted successfully.
  final List<UnsuccessfulItem> unsuccessful;

  DeleteVpcEndpointConnectionNotificationsResult({
    this.unsuccessful,
  });
}

class DeleteVpcEndpointServiceConfigurationsResult {
  /// Information about the service configurations that were not deleted, if
  /// applicable.
  final List<UnsuccessfulItem> unsuccessful;

  DeleteVpcEndpointServiceConfigurationsResult({
    this.unsuccessful,
  });
}

/// Contains the output of DeleteVpcEndpoints.
class DeleteVpcEndpointsResult {
  /// Information about the VPC endpoints that were not successfully deleted.
  final List<UnsuccessfulItem> unsuccessful;

  DeleteVpcEndpointsResult({
    this.unsuccessful,
  });
}

class DeleteVpcPeeringConnectionResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  DeleteVpcPeeringConnectionResult({
    this.returnValue,
  });
}

class DeprovisionByoipCidrResult {
  /// Information about the address range.
  final ByoipCidr byoipCidr;

  DeprovisionByoipCidrResult({
    this.byoipCidr,
  });
}

class DeregisterInstanceEventNotificationAttributesResult {
  /// The resulting set of tag keys.
  final InstanceTagNotificationAttribute instanceTagAttribute;

  DeregisterInstanceEventNotificationAttributesResult({
    this.instanceTagAttribute,
  });
}

/// Information about the tag keys to deregister for the current Region. You can
/// either specify individual tag keys or deregister all tag keys in the current
/// Region. You must specify either <code>IncludeAllTagsOfInstance</code> or
/// <code>InstanceTagKeys</code> in the request
class DeregisterInstanceTagAttributeRequest {
  /// Indicates whether to deregister all tag keys in the current Region. Specify
  /// <code>false</code> to deregister all tag keys.
  final bool includeAllTagsOfInstance;

  /// Information about the tag keys to deregister.
  final List<String> instanceTagKeys;

  DeregisterInstanceTagAttributeRequest({
    this.includeAllTagsOfInstance,
    this.instanceTagKeys,
  });
}

class DeregisterTransitGatewayMulticastGroupMembersResult {
  /// Information about the deregistered members.
  final TransitGatewayMulticastDeregisteredGroupMembers
      deregisteredMulticastGroupMembers;

  DeregisterTransitGatewayMulticastGroupMembersResult({
    this.deregisteredMulticastGroupMembers,
  });
}

class DeregisterTransitGatewayMulticastGroupSourcesResult {
  /// Information about the deregistered group sources.
  final TransitGatewayMulticastDeregisteredGroupSources
      deregisteredMulticastGroupSources;

  DeregisterTransitGatewayMulticastGroupSourcesResult({
    this.deregisteredMulticastGroupSources,
  });
}

class DescribeAccountAttributesResult {
  /// Information about the account attributes.
  final List<AccountAttribute> accountAttributes;

  DescribeAccountAttributesResult({
    this.accountAttributes,
  });
}

class DescribeAddressesResult {
  /// Information about the Elastic IP addresses.
  final List<Address> addresses;

  DescribeAddressesResult({
    this.addresses,
  });
}

class DescribeAggregateIdFormatResult {
  /// Information about each resource's ID format.
  final List<IdFormat> statuses;

  /// Indicates whether all resource types in the Region are configured to use
  /// longer IDs. This value is only <code>true</code> if all users are configured
  /// to use longer IDs for all resources types in the Region.
  final bool useLongIdsAggregated;

  DescribeAggregateIdFormatResult({
    this.statuses,
    this.useLongIdsAggregated,
  });
}

class DescribeAvailabilityZonesResult {
  /// Information about the Availability Zones and Local Zones.
  final List<AvailabilityZone> availabilityZones;

  DescribeAvailabilityZonesResult({
    this.availabilityZones,
  });
}

class DescribeBundleTasksResult {
  /// Information about the bundle tasks.
  final List<BundleTask> bundleTasks;

  DescribeBundleTasksResult({
    this.bundleTasks,
  });
}

class DescribeByoipCidrsResult {
  /// Information about your address ranges.
  final List<ByoipCidr> byoipCidrs;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeByoipCidrsResult({
    this.byoipCidrs,
    this.nextToken,
  });
}

class DescribeCapacityReservationsResult {
  /// Information about the Capacity Reservations.
  final List<CapacityReservation> capacityReservations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeCapacityReservationsResult({
    this.capacityReservations,
    this.nextToken,
  });
}

class DescribeClassicLinkInstancesResult {
  /// Information about one or more linked EC2-Classic instances.
  final List<ClassicLinkInstance> instances;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeClassicLinkInstancesResult({
    this.instances,
    this.nextToken,
  });
}

class DescribeClientVpnAuthorizationRulesResult {
  /// Information about the authorization rules.
  final List<AuthorizationRule> authorizationRules;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeClientVpnAuthorizationRulesResult({
    this.authorizationRules,
    this.nextToken,
  });
}

class DescribeClientVpnConnectionsResult {
  /// Information about the active and terminated client connections.
  final List<ClientVpnConnection> connections;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeClientVpnConnectionsResult({
    this.connections,
    this.nextToken,
  });
}

class DescribeClientVpnEndpointsResult {
  /// Information about the Client VPN endpoints.
  final List<ClientVpnEndpoint> clientVpnEndpoints;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeClientVpnEndpointsResult({
    this.clientVpnEndpoints,
    this.nextToken,
  });
}

class DescribeClientVpnRoutesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the Client VPN endpoint routes.
  final List<ClientVpnRoute> routes;

  DescribeClientVpnRoutesResult({
    this.nextToken,
    this.routes,
  });
}

class DescribeClientVpnTargetNetworksResult {
  /// Information about the associated target networks.
  final List<TargetNetwork> clientVpnTargetNetworks;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeClientVpnTargetNetworksResult({
    this.clientVpnTargetNetworks,
    this.nextToken,
  });
}

class DescribeCoipPoolsResult {
  /// Information about the address pools.
  final List<CoipPool> coipPools;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeCoipPoolsResult({
    this.coipPools,
    this.nextToken,
  });
}

class DescribeConversionTasksResult {
  /// Information about the conversion tasks.
  final List<ConversionTask> conversionTasks;

  DescribeConversionTasksResult({
    this.conversionTasks,
  });
}

/// Contains the output of DescribeCustomerGateways.
class DescribeCustomerGatewaysResult {
  /// Information about one or more customer gateways.
  final List<CustomerGateway> customerGateways;

  DescribeCustomerGatewaysResult({
    this.customerGateways,
  });
}

class DescribeDhcpOptionsResult {
  /// Information about one or more DHCP options sets.
  final List<DhcpOptions> dhcpOptions;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeDhcpOptionsResult({
    this.dhcpOptions,
    this.nextToken,
  });
}

class DescribeEgressOnlyInternetGatewaysResult {
  /// Information about the egress-only internet gateways.
  final List<EgressOnlyInternetGateway> egressOnlyInternetGateways;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeEgressOnlyInternetGatewaysResult({
    this.egressOnlyInternetGateways,
    this.nextToken,
  });
}

class DescribeElasticGpusResult {
  /// Information about the Elastic Graphics accelerators.
  final List<ElasticGpus> elasticGpuSet;

  /// The total number of items to return. If the total number of items available
  /// is more than the value specified in max-items then a Next-Token will be
  /// provided in the output that you can use to resume pagination.
  final int maxResults;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeElasticGpusResult({
    this.elasticGpuSet,
    this.maxResults,
    this.nextToken,
  });
}

class DescribeExportImageTasksResult {
  /// Information about the export image tasks.
  final List<ExportImageTask> exportImageTasks;

  /// The token to use to get the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeExportImageTasksResult({
    this.exportImageTasks,
    this.nextToken,
  });
}

class DescribeExportTasksResult {
  /// Information about the export tasks.
  final List<ExportTask> exportTasks;

  DescribeExportTasksResult({
    this.exportTasks,
  });
}

/// Describes fast snapshot restores for a snapshot.
class DescribeFastSnapshotRestoreSuccessItem {
  /// The Availability Zone.
  final String availabilityZone;

  /// The time at which fast snapshot restores entered the <code>disabled</code>
  /// state.
  final DateTime disabledTime;

  /// The time at which fast snapshot restores entered the <code>disabling</code>
  /// state.
  final DateTime disablingTime;

  /// The time at which fast snapshot restores entered the <code>enabled</code>
  /// state.
  final DateTime enabledTime;

  /// The time at which fast snapshot restores entered the <code>enabling</code>
  /// state.
  final DateTime enablingTime;

  /// The time at which fast snapshot restores entered the <code>optimizing</code>
  /// state.
  final DateTime optimizingTime;

  /// The alias of the snapshot owner.
  final String ownerAlias;

  /// The ID of the AWS account that owns the snapshot.
  final String ownerId;

  /// The ID of the snapshot.
  final String snapshotId;

  /// The state of fast snapshot restores.
  final FastSnapshotRestoreStateCode state;

  /// The reason for the state transition. The possible values are as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>Client.UserInitiated</code> - The state successfully transitioned to
  /// <code>enabling</code> or <code>disabling</code>.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiated - Lifecycle state transition</code> - The state
  /// successfully transitioned to <code>optimizing</code>, <code>enabled</code>,
  /// or <code>disabled</code>.
  /// </li>
  /// </ul>
  final String stateTransitionReason;

  DescribeFastSnapshotRestoreSuccessItem({
    this.availabilityZone,
    this.disabledTime,
    this.disablingTime,
    this.enabledTime,
    this.enablingTime,
    this.optimizingTime,
    this.ownerAlias,
    this.ownerId,
    this.snapshotId,
    this.state,
    this.stateTransitionReason,
  });
}

class DescribeFastSnapshotRestoresResult {
  /// Information about the state of fast snapshot restores.
  final List<DescribeFastSnapshotRestoreSuccessItem> fastSnapshotRestores;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeFastSnapshotRestoresResult({
    this.fastSnapshotRestores,
    this.nextToken,
  });
}

/// Describes the instances that could not be launched by the fleet.
class DescribeFleetError {
  /// The error code that indicates why the instance could not be launched. For
  /// more information about error codes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error
  /// Codes</a>.
  final String errorCode;

  /// The error message that describes why the instance could not be launched. For
  /// more information about error messages, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error
  /// Codes</a>.
  final String errorMessage;

  /// The launch templates and overrides that were used for launching the
  /// instances. The values that you specify in the Overrides replace the values
  /// in the launch template.
  final LaunchTemplateAndOverridesResponse launchTemplateAndOverrides;

  /// Indicates if the instance that could not be launched was a Spot Instance or
  /// On-Demand Instance.
  final InstanceLifecycle lifecycle;

  DescribeFleetError({
    this.errorCode,
    this.errorMessage,
    this.launchTemplateAndOverrides,
    this.lifecycle,
  });
}

class DescribeFleetHistoryResult {
  /// The ID of the EC Fleet.
  final String fleetId;

  /// Information about the events in the history of the EC2 Fleet.
  final List<HistoryRecordEntry> historyRecords;

  /// The last date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records
  /// up to this time were retrieved.
  ///
  /// If <code>nextToken</code> indicates that there are more results, this value
  /// is not present.
  final DateTime lastEvaluatedTime;

  /// The token for the next set of results.
  final String nextToken;

  /// The start date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime startTime;

  DescribeFleetHistoryResult({
    this.fleetId,
    this.historyRecords,
    this.lastEvaluatedTime,
    this.nextToken,
    this.startTime,
  });
}

class DescribeFleetInstancesResult {
  /// The running instances. This list is refreshed periodically and might be out
  /// of date.
  final List<ActiveInstance> activeInstances;

  /// The ID of the EC2 Fleet.
  final String fleetId;

  /// The token for the next set of results.
  final String nextToken;

  DescribeFleetInstancesResult({
    this.activeInstances,
    this.fleetId,
    this.nextToken,
  });
}

/// Describes the instances that were launched by the fleet.
class DescribeFleetsInstances {
  /// The IDs of the instances.
  final List<String> instanceIds;

  /// The instance type.
  final InstanceType instanceType;

  /// The launch templates and overrides that were used for launching the
  /// instances. The values that you specify in the Overrides replace the values
  /// in the launch template.
  final LaunchTemplateAndOverridesResponse launchTemplateAndOverrides;

  /// Indicates if the instance that was launched is a Spot Instance or On-Demand
  /// Instance.
  final InstanceLifecycle lifecycle;

  /// The value is <code>Windows</code> for Windows instances. Otherwise, the
  /// value is blank.
  final PlatformValues platform;

  DescribeFleetsInstances({
    this.instanceIds,
    this.instanceType,
    this.launchTemplateAndOverrides,
    this.lifecycle,
    this.platform,
  });
}

class DescribeFleetsResult {
  /// Information about the EC2 Fleets.
  final List<FleetData> fleets;

  /// The token for the next set of results.
  final String nextToken;

  DescribeFleetsResult({
    this.fleets,
    this.nextToken,
  });
}

class DescribeFlowLogsResult {
  /// Information about the flow logs.
  final List<FlowLog> flowLogs;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeFlowLogsResult({
    this.flowLogs,
    this.nextToken,
  });
}

class DescribeFpgaImageAttributeResult {
  /// Information about the attribute.
  final FpgaImageAttribute fpgaImageAttribute;

  DescribeFpgaImageAttributeResult({
    this.fpgaImageAttribute,
  });
}

class DescribeFpgaImagesResult {
  /// Information about the FPGA images.
  final List<FpgaImage> fpgaImages;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeFpgaImagesResult({
    this.fpgaImages,
    this.nextToken,
  });
}

class DescribeHostReservationOfferingsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the offerings.
  final List<HostOffering> offeringSet;

  DescribeHostReservationOfferingsResult({
    this.nextToken,
    this.offeringSet,
  });
}

class DescribeHostReservationsResult {
  /// Details about the reservation's configuration.
  final List<HostReservation> hostReservationSet;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeHostReservationsResult({
    this.hostReservationSet,
    this.nextToken,
  });
}

class DescribeHostsResult {
  /// Information about the Dedicated Hosts.
  final List<Host> hosts;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeHostsResult({
    this.hosts,
    this.nextToken,
  });
}

class DescribeIamInstanceProfileAssociationsResult {
  /// Information about the IAM instance profile associations.
  final List<IamInstanceProfileAssociation> iamInstanceProfileAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeIamInstanceProfileAssociationsResult({
    this.iamInstanceProfileAssociations,
    this.nextToken,
  });
}

class DescribeIdFormatResult {
  /// Information about the ID format for the resource.
  final List<IdFormat> statuses;

  DescribeIdFormatResult({
    this.statuses,
  });
}

class DescribeIdentityIdFormatResult {
  /// Information about the ID format for the resources.
  final List<IdFormat> statuses;

  DescribeIdentityIdFormatResult({
    this.statuses,
  });
}

class DescribeImagesResult {
  /// Information about the images.
  final List<Image> images;

  DescribeImagesResult({
    this.images,
  });
}

class DescribeImportImageTasksResult {
  /// A list of zero or more import image tasks that are currently active or were
  /// completed or canceled in the previous 7 days.
  final List<ImportImageTask> importImageTasks;

  /// The token to use to get the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeImportImageTasksResult({
    this.importImageTasks,
    this.nextToken,
  });
}

class DescribeImportSnapshotTasksResult {
  /// A list of zero or more import snapshot tasks that are currently active or
  /// were completed or canceled in the previous 7 days.
  final List<ImportSnapshotTask> importSnapshotTasks;

  /// The token to use to get the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeImportSnapshotTasksResult({
    this.importSnapshotTasks,
    this.nextToken,
  });
}

class DescribeInstanceCreditSpecificationsResult {
  /// Information about the credit option for CPU usage of an instance.
  final List<InstanceCreditSpecification> instanceCreditSpecifications;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeInstanceCreditSpecificationsResult({
    this.instanceCreditSpecifications,
    this.nextToken,
  });
}

class DescribeInstanceEventNotificationAttributesResult {
  /// Information about the registered tag keys.
  final InstanceTagNotificationAttribute instanceTagAttribute;

  DescribeInstanceEventNotificationAttributesResult({
    this.instanceTagAttribute,
  });
}

class DescribeInstanceStatusResult {
  /// Information about the status of the instances.
  final List<InstanceStatus> instanceStatuses;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeInstanceStatusResult({
    this.instanceStatuses,
    this.nextToken,
  });
}

class DescribeInstanceTypeOfferingsResult {
  /// The instance types offered.
  final List<InstanceTypeOffering> instanceTypeOfferings;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeInstanceTypeOfferingsResult({
    this.instanceTypeOfferings,
    this.nextToken,
  });
}

class DescribeInstanceTypesResult {
  /// The instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final List<InstanceTypeInfo> instanceTypes;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeInstanceTypesResult({
    this.instanceTypes,
    this.nextToken,
  });
}

class DescribeInstancesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the reservations.
  final List<Reservation> reservations;

  DescribeInstancesResult({
    this.nextToken,
    this.reservations,
  });
}

class DescribeInternetGatewaysResult {
  /// Information about one or more internet gateways.
  final List<InternetGateway> internetGateways;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeInternetGatewaysResult({
    this.internetGateways,
    this.nextToken,
  });
}

class DescribeIpv6PoolsResult {
  /// Information about the IPv6 address pools.
  final List<Ipv6Pool> ipv6Pools;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeIpv6PoolsResult({
    this.ipv6Pools,
    this.nextToken,
  });
}

class DescribeKeyPairsResult {
  /// Information about the key pairs.
  final List<KeyPairInfo> keyPairs;

  DescribeKeyPairsResult({
    this.keyPairs,
  });
}

class DescribeLaunchTemplateVersionsResult {
  /// Information about the launch template versions.
  final List<LaunchTemplateVersion> launchTemplateVersions;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeLaunchTemplateVersionsResult({
    this.launchTemplateVersions,
    this.nextToken,
  });
}

class DescribeLaunchTemplatesResult {
  /// Information about the launch templates.
  final List<LaunchTemplate> launchTemplates;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeLaunchTemplatesResult({
    this.launchTemplates,
    this.nextToken,
  });
}

class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult {
  /// Information about the associations.
  final List<LocalGatewayRouteTableVirtualInterfaceGroupAssociation>
      localGatewayRouteTableVirtualInterfaceGroupAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult({
    this.localGatewayRouteTableVirtualInterfaceGroupAssociations,
    this.nextToken,
  });
}

class DescribeLocalGatewayRouteTableVpcAssociationsResult {
  /// Information about the associations.
  final List<LocalGatewayRouteTableVpcAssociation>
      localGatewayRouteTableVpcAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeLocalGatewayRouteTableVpcAssociationsResult({
    this.localGatewayRouteTableVpcAssociations,
    this.nextToken,
  });
}

class DescribeLocalGatewayRouteTablesResult {
  /// Information about the local gateway route tables.
  final List<LocalGatewayRouteTable> localGatewayRouteTables;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeLocalGatewayRouteTablesResult({
    this.localGatewayRouteTables,
    this.nextToken,
  });
}

class DescribeLocalGatewayVirtualInterfaceGroupsResult {
  /// The virtual interface groups.
  final List<LocalGatewayVirtualInterfaceGroup>
      localGatewayVirtualInterfaceGroups;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeLocalGatewayVirtualInterfaceGroupsResult({
    this.localGatewayVirtualInterfaceGroups,
    this.nextToken,
  });
}

class DescribeLocalGatewayVirtualInterfacesResult {
  /// Information about the virtual interfaces.
  final List<LocalGatewayVirtualInterface> localGatewayVirtualInterfaces;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeLocalGatewayVirtualInterfacesResult({
    this.localGatewayVirtualInterfaces,
    this.nextToken,
  });
}

class DescribeLocalGatewaysResult {
  /// Information about the local gateways.
  final List<LocalGateway> localGateways;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeLocalGatewaysResult({
    this.localGateways,
    this.nextToken,
  });
}

class DescribeMovingAddressesResult {
  /// The status for each Elastic IP address.
  final List<MovingAddressStatus> movingAddressStatuses;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeMovingAddressesResult({
    this.movingAddressStatuses,
    this.nextToken,
  });
}

class DescribeNatGatewaysResult {
  /// Information about the NAT gateways.
  final List<NatGateway> natGateways;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeNatGatewaysResult({
    this.natGateways,
    this.nextToken,
  });
}

class DescribeNetworkAclsResult {
  /// Information about one or more network ACLs.
  final List<NetworkAcl> networkAcls;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeNetworkAclsResult({
    this.networkAcls,
    this.nextToken,
  });
}

/// Contains the output of DescribeNetworkInterfaceAttribute.
class DescribeNetworkInterfaceAttributeResult {
  /// The attachment (if any) of the network interface.
  final NetworkInterfaceAttachment attachment;

  /// The description of the network interface.
  final AttributeValue description;

  /// The security groups associated with the network interface.
  final List<GroupIdentifier> groups;

  /// The ID of the network interface.
  final String networkInterfaceId;

  /// Indicates whether source/destination checking is enabled.
  final AttributeBooleanValue sourceDestCheck;

  DescribeNetworkInterfaceAttributeResult({
    this.attachment,
    this.description,
    this.groups,
    this.networkInterfaceId,
    this.sourceDestCheck,
  });
}

/// Contains the output for DescribeNetworkInterfacePermissions.
class DescribeNetworkInterfacePermissionsResult {
  /// The network interface permissions.
  final List<NetworkInterfacePermission> networkInterfacePermissions;

  /// The token to use to retrieve the next page of results.
  final String nextToken;

  DescribeNetworkInterfacePermissionsResult({
    this.networkInterfacePermissions,
    this.nextToken,
  });
}

/// Contains the output of DescribeNetworkInterfaces.
class DescribeNetworkInterfacesResult {
  /// Information about one or more network interfaces.
  final List<NetworkInterface> networkInterfaces;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeNetworkInterfacesResult({
    this.networkInterfaces,
    this.nextToken,
  });
}

class DescribePlacementGroupsResult {
  /// Information about the placement groups.
  final List<PlacementGroup> placementGroups;

  DescribePlacementGroupsResult({
    this.placementGroups,
  });
}

class DescribePrefixListsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// All available prefix lists.
  final List<PrefixList> prefixLists;

  DescribePrefixListsResult({
    this.nextToken,
    this.prefixLists,
  });
}

class DescribePrincipalIdFormatResult {
  /// The token to use to retrieve the next page of results. This value is null
  /// when there are no more results to return.
  final String nextToken;

  /// Information about the ID format settings for the ARN.
  final List<PrincipalIdFormat> principals;

  DescribePrincipalIdFormatResult({
    this.nextToken,
    this.principals,
  });
}

class DescribePublicIpv4PoolsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the address pools.
  final List<PublicIpv4Pool> publicIpv4Pools;

  DescribePublicIpv4PoolsResult({
    this.nextToken,
    this.publicIpv4Pools,
  });
}

class DescribeRegionsResult {
  /// Information about the Regions.
  final List<Region> regions;

  DescribeRegionsResult({
    this.regions,
  });
}

/// Contains the output of DescribeReservedInstancesListings.
class DescribeReservedInstancesListingsResult {
  /// Information about the Reserved Instance listing.
  final List<ReservedInstancesListing> reservedInstancesListings;

  DescribeReservedInstancesListingsResult({
    this.reservedInstancesListings,
  });
}

/// Contains the output of DescribeReservedInstancesModifications.
class DescribeReservedInstancesModificationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// The Reserved Instance modification information.
  final List<ReservedInstancesModification> reservedInstancesModifications;

  DescribeReservedInstancesModificationsResult({
    this.nextToken,
    this.reservedInstancesModifications,
  });
}

/// Contains the output of DescribeReservedInstancesOfferings.
class DescribeReservedInstancesOfferingsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// A list of Reserved Instances offerings.
  final List<ReservedInstancesOffering> reservedInstancesOfferings;

  DescribeReservedInstancesOfferingsResult({
    this.nextToken,
    this.reservedInstancesOfferings,
  });
}

/// Contains the output for DescribeReservedInstances.
class DescribeReservedInstancesResult {
  /// A list of Reserved Instances.
  final List<ReservedInstances> reservedInstances;

  DescribeReservedInstancesResult({
    this.reservedInstances,
  });
}

/// Contains the output of DescribeRouteTables.
class DescribeRouteTablesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about one or more route tables.
  final List<RouteTable> routeTables;

  DescribeRouteTablesResult({
    this.nextToken,
    this.routeTables,
  });
}

/// Contains the output of DescribeScheduledInstanceAvailability.
class DescribeScheduledInstanceAvailabilityResult {
  /// The token required to retrieve the next set of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the available Scheduled Instances.
  final List<ScheduledInstanceAvailability> scheduledInstanceAvailabilitySet;

  DescribeScheduledInstanceAvailabilityResult({
    this.nextToken,
    this.scheduledInstanceAvailabilitySet,
  });
}

/// Contains the output of DescribeScheduledInstances.
class DescribeScheduledInstancesResult {
  /// The token required to retrieve the next set of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the Scheduled Instances.
  final List<ScheduledInstance> scheduledInstanceSet;

  DescribeScheduledInstancesResult({
    this.nextToken,
    this.scheduledInstanceSet,
  });
}

class DescribeSecurityGroupReferencesResult {
  /// Information about the VPCs with the referencing security groups.
  final List<SecurityGroupReference> securityGroupReferenceSet;

  DescribeSecurityGroupReferencesResult({
    this.securityGroupReferenceSet,
  });
}

class DescribeSecurityGroupsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the security groups.
  final List<SecurityGroup> securityGroups;

  DescribeSecurityGroupsResult({
    this.nextToken,
    this.securityGroups,
  });
}

class DescribeSnapshotAttributeResult {
  /// The users and groups that have the permissions for creating volumes from the
  /// snapshot.
  final List<CreateVolumePermission> createVolumePermissions;

  /// The product codes.
  final List<ProductCode> productCodes;

  /// The ID of the EBS snapshot.
  final String snapshotId;

  DescribeSnapshotAttributeResult({
    this.createVolumePermissions,
    this.productCodes,
    this.snapshotId,
  });
}

class DescribeSnapshotsResult {
  /// The <code>NextToken</code> value to include in a future
  /// <code>DescribeSnapshots</code> request. When the results of a
  /// <code>DescribeSnapshots</code> request exceed <code>MaxResults</code>, this
  /// value can be used to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the snapshots.
  final List<Snapshot> snapshots;

  DescribeSnapshotsResult({
    this.nextToken,
    this.snapshots,
  });
}

/// Contains the output of DescribeSpotDatafeedSubscription.
class DescribeSpotDatafeedSubscriptionResult {
  /// The Spot Instance data feed subscription.
  final SpotDatafeedSubscription spotDatafeedSubscription;

  DescribeSpotDatafeedSubscriptionResult({
    this.spotDatafeedSubscription,
  });
}

/// Contains the output of DescribeSpotFleetInstances.
class DescribeSpotFleetInstancesResponse {
  /// The running instances. This list is refreshed periodically and might be out
  /// of date.
  final List<ActiveInstance> activeInstances;

  /// The token required to retrieve the next set of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// The ID of the Spot Fleet request.
  final String spotFleetRequestId;

  DescribeSpotFleetInstancesResponse({
    this.activeInstances,
    this.nextToken,
    this.spotFleetRequestId,
  });
}

/// Contains the output of DescribeSpotFleetRequestHistory.
class DescribeSpotFleetRequestHistoryResponse {
  /// Information about the events in the history of the Spot Fleet request.
  final List<HistoryRecord> historyRecords;

  /// The last date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records
  /// up to this time were retrieved.
  ///
  /// If <code>nextToken</code> indicates that there are more results, this value
  /// is not present.
  final DateTime lastEvaluatedTime;

  /// The token required to retrieve the next set of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// The ID of the Spot Fleet request.
  final String spotFleetRequestId;

  /// The starting date and time for the events, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime startTime;

  DescribeSpotFleetRequestHistoryResponse({
    this.historyRecords,
    this.lastEvaluatedTime,
    this.nextToken,
    this.spotFleetRequestId,
    this.startTime,
  });
}

/// Contains the output of DescribeSpotFleetRequests.
class DescribeSpotFleetRequestsResponse {
  /// The token required to retrieve the next set of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the configuration of your Spot Fleet.
  final List<SpotFleetRequestConfig> spotFleetRequestConfigs;

  DescribeSpotFleetRequestsResponse({
    this.nextToken,
    this.spotFleetRequestConfigs,
  });
}

/// Contains the output of DescribeSpotInstanceRequests.
class DescribeSpotInstanceRequestsResult {
  /// The token to use to retrieve the next set of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// One or more Spot Instance requests.
  final List<SpotInstanceRequest> spotInstanceRequests;

  DescribeSpotInstanceRequestsResult({
    this.nextToken,
    this.spotInstanceRequests,
  });
}

/// Contains the output of DescribeSpotPriceHistory.
class DescribeSpotPriceHistoryResult {
  /// The token required to retrieve the next set of results. This value is null
  /// or an empty string when there are no more results to return.
  final String nextToken;

  /// The historical Spot prices.
  final List<SpotPrice> spotPriceHistory;

  DescribeSpotPriceHistoryResult({
    this.nextToken,
    this.spotPriceHistory,
  });
}

class DescribeStaleSecurityGroupsResult {
  /// The token to use when requesting the next set of items. If there are no
  /// additional items to return, the string is empty.
  final String nextToken;

  /// Information about the stale security groups.
  final List<StaleSecurityGroup> staleSecurityGroupSet;

  DescribeStaleSecurityGroupsResult({
    this.nextToken,
    this.staleSecurityGroupSet,
  });
}

class DescribeSubnetsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about one or more subnets.
  final List<Subnet> subnets;

  DescribeSubnetsResult({
    this.nextToken,
    this.subnets,
  });
}

class DescribeTagsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// The tags.
  final List<TagDescription> tags;

  DescribeTagsResult({
    this.nextToken,
    this.tags,
  });
}

class DescribeTrafficMirrorFiltersResult {
  /// The token to use to retrieve the next page of results. The value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about one or more Traffic Mirror filters.
  final List<TrafficMirrorFilter> trafficMirrorFilters;

  DescribeTrafficMirrorFiltersResult({
    this.nextToken,
    this.trafficMirrorFilters,
  });
}

class DescribeTrafficMirrorSessionsResult {
  /// The token to use to retrieve the next page of results. The value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Describes one or more Traffic Mirror sessions. By default, all Traffic
  /// Mirror sessions are described. Alternatively, you can filter the results.
  final List<TrafficMirrorSession> trafficMirrorSessions;

  DescribeTrafficMirrorSessionsResult({
    this.nextToken,
    this.trafficMirrorSessions,
  });
}

class DescribeTrafficMirrorTargetsResult {
  /// The token to use to retrieve the next page of results. The value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about one or more Traffic Mirror targets.
  final List<TrafficMirrorTarget> trafficMirrorTargets;

  DescribeTrafficMirrorTargetsResult({
    this.nextToken,
    this.trafficMirrorTargets,
  });
}

class DescribeTransitGatewayAttachmentsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the attachments.
  final List<TransitGatewayAttachment> transitGatewayAttachments;

  DescribeTransitGatewayAttachmentsResult({
    this.nextToken,
    this.transitGatewayAttachments,
  });
}

class DescribeTransitGatewayMulticastDomainsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the transit gateway multicast domains.
  final List<TransitGatewayMulticastDomain> transitGatewayMulticastDomains;

  DescribeTransitGatewayMulticastDomainsResult({
    this.nextToken,
    this.transitGatewayMulticastDomains,
  });
}

class DescribeTransitGatewayPeeringAttachmentsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// The transit gateway peering attachments.
  final List<TransitGatewayPeeringAttachment> transitGatewayPeeringAttachments;

  DescribeTransitGatewayPeeringAttachmentsResult({
    this.nextToken,
    this.transitGatewayPeeringAttachments,
  });
}

class DescribeTransitGatewayRouteTablesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the transit gateway route tables.
  final List<TransitGatewayRouteTable> transitGatewayRouteTables;

  DescribeTransitGatewayRouteTablesResult({
    this.nextToken,
    this.transitGatewayRouteTables,
  });
}

class DescribeTransitGatewayVpcAttachmentsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the VPC attachments.
  final List<TransitGatewayVpcAttachment> transitGatewayVpcAttachments;

  DescribeTransitGatewayVpcAttachmentsResult({
    this.nextToken,
    this.transitGatewayVpcAttachments,
  });
}

class DescribeTransitGatewaysResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the transit gateways.
  final List<TransitGateway> transitGateways;

  DescribeTransitGatewaysResult({
    this.nextToken,
    this.transitGateways,
  });
}

class DescribeVolumeAttributeResult {
  /// The state of <code>autoEnableIO</code> attribute.
  final AttributeBooleanValue autoEnableIO;

  /// A list of product codes.
  final List<ProductCode> productCodes;

  /// The ID of the volume.
  final String volumeId;

  DescribeVolumeAttributeResult({
    this.autoEnableIO,
    this.productCodes,
    this.volumeId,
  });
}

class DescribeVolumeStatusResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the status of the volumes.
  final List<VolumeStatusItem> volumeStatuses;

  DescribeVolumeStatusResult({
    this.nextToken,
    this.volumeStatuses,
  });
}

class DescribeVolumesModificationsResult {
  /// Token for pagination, null if there are no more results
  final String nextToken;

  /// Information about the volume modifications.
  final List<VolumeModification> volumesModifications;

  DescribeVolumesModificationsResult({
    this.nextToken,
    this.volumesModifications,
  });
}

class DescribeVolumesResult {
  /// The <code>NextToken</code> value to include in a future
  /// <code>DescribeVolumes</code> request. When the results of a
  /// <code>DescribeVolumes</code> request exceed <code>MaxResults</code>, this
  /// value can be used to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the volumes.
  final List<Volume> volumes;

  DescribeVolumesResult({
    this.nextToken,
    this.volumes,
  });
}

class DescribeVpcAttributeResult {
  /// Indicates whether the instances launched in the VPC get DNS hostnames. If
  /// this attribute is <code>true</code>, instances in the VPC get DNS hostnames;
  /// otherwise, they do not.
  final AttributeBooleanValue enableDnsHostnames;

  /// Indicates whether DNS resolution is enabled for the VPC. If this attribute
  /// is <code>true</code>, the Amazon DNS server resolves DNS hostnames for your
  /// instances to their corresponding IP addresses; otherwise, it does not.
  final AttributeBooleanValue enableDnsSupport;

  /// The ID of the VPC.
  final String vpcId;

  DescribeVpcAttributeResult({
    this.enableDnsHostnames,
    this.enableDnsSupport,
    this.vpcId,
  });
}

class DescribeVpcClassicLinkDnsSupportResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the ClassicLink DNS support status of the VPCs.
  final List<ClassicLinkDnsSupport> vpcs;

  DescribeVpcClassicLinkDnsSupportResult({
    this.nextToken,
    this.vpcs,
  });
}

class DescribeVpcClassicLinkResult {
  /// The ClassicLink status of one or more VPCs.
  final List<VpcClassicLink> vpcs;

  DescribeVpcClassicLinkResult({
    this.vpcs,
  });
}

class DescribeVpcEndpointConnectionNotificationsResult {
  /// One or more notifications.
  final List<ConnectionNotification> connectionNotificationSet;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeVpcEndpointConnectionNotificationsResult({
    this.connectionNotificationSet,
    this.nextToken,
  });
}

class DescribeVpcEndpointConnectionsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about one or more VPC endpoint connections.
  final List<VpcEndpointConnection> vpcEndpointConnections;

  DescribeVpcEndpointConnectionsResult({
    this.nextToken,
    this.vpcEndpointConnections,
  });
}

class DescribeVpcEndpointServiceConfigurationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about one or more services.
  final List<ServiceConfiguration> serviceConfigurations;

  DescribeVpcEndpointServiceConfigurationsResult({
    this.nextToken,
    this.serviceConfigurations,
  });
}

class DescribeVpcEndpointServicePermissionsResult {
  /// Information about one or more allowed principals.
  final List<AllowedPrincipal> allowedPrincipals;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  DescribeVpcEndpointServicePermissionsResult({
    this.allowedPrincipals,
    this.nextToken,
  });
}

/// Contains the output of DescribeVpcEndpointServices.
class DescribeVpcEndpointServicesResult {
  /// The token to use when requesting the next set of items. If there are no
  /// additional items to return, the string is empty.
  final String nextToken;

  /// Information about the service.
  final List<ServiceDetail> serviceDetails;

  /// A list of supported services.
  final List<String> serviceNames;

  DescribeVpcEndpointServicesResult({
    this.nextToken,
    this.serviceDetails,
    this.serviceNames,
  });
}

/// Contains the output of DescribeVpcEndpoints.
class DescribeVpcEndpointsResult {
  /// The token to use when requesting the next set of items. If there are no
  /// additional items to return, the string is empty.
  final String nextToken;

  /// Information about the endpoints.
  final List<VpcEndpoint> vpcEndpoints;

  DescribeVpcEndpointsResult({
    this.nextToken,
    this.vpcEndpoints,
  });
}

class DescribeVpcPeeringConnectionsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the VPC peering connections.
  final List<VpcPeeringConnection> vpcPeeringConnections;

  DescribeVpcPeeringConnectionsResult({
    this.nextToken,
    this.vpcPeeringConnections,
  });
}

class DescribeVpcsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about one or more VPCs.
  final List<Vpc> vpcs;

  DescribeVpcsResult({
    this.nextToken,
    this.vpcs,
  });
}

/// Contains the output of DescribeVpnConnections.
class DescribeVpnConnectionsResult {
  /// Information about one or more VPN connections.
  final List<VpnConnection> vpnConnections;

  DescribeVpnConnectionsResult({
    this.vpnConnections,
  });
}

/// Contains the output of DescribeVpnGateways.
class DescribeVpnGatewaysResult {
  /// Information about one or more virtual private gateways.
  final List<VpnGateway> vpnGateways;

  DescribeVpnGatewaysResult({
    this.vpnGateways,
  });
}

class DetachClassicLinkVpcResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  DetachClassicLinkVpcResult({
    this.returnValue,
  });
}

enum DeviceType {
  ebs,
  instanceStore,
}

/// Describes a DHCP configuration option.
class DhcpConfiguration {
  /// The name of a DHCP option.
  final String key;

  /// One or more values for the DHCP option.
  final List<AttributeValue> values;

  DhcpConfiguration({
    this.key,
    this.values,
  });
}

/// Describes a set of DHCP options.
class DhcpOptions {
  /// One or more DHCP options in the set.
  final List<DhcpConfiguration> dhcpConfigurations;

  /// The ID of the set of DHCP options.
  final String dhcpOptionsId;

  /// The ID of the AWS account that owns the DHCP options set.
  final String ownerId;

  /// Any tags assigned to the DHCP options set.
  final List<Tag> tags;

  DhcpOptions({
    this.dhcpConfigurations,
    this.dhcpOptionsId,
    this.ownerId,
    this.tags,
  });
}

/// Describes an Active Directory.
class DirectoryServiceAuthentication {
  /// The ID of the Active Directory used for authentication.
  final String directoryId;

  DirectoryServiceAuthentication({
    this.directoryId,
  });
}

/// Describes the Active Directory to be used for client authentication.
class DirectoryServiceAuthenticationRequest {
  /// The ID of the Active Directory to be used for authentication.
  final String directoryId;

  DirectoryServiceAuthenticationRequest({
    this.directoryId,
  });
}

class DisableEbsEncryptionByDefaultResult {
  /// The updated status of encryption by default.
  final bool ebsEncryptionByDefault;

  DisableEbsEncryptionByDefaultResult({
    this.ebsEncryptionByDefault,
  });
}

/// Contains information about the errors that occurred when disabling fast
/// snapshot restores.
class DisableFastSnapshotRestoreErrorItem {
  /// The errors.
  final List<DisableFastSnapshotRestoreStateErrorItem>
      fastSnapshotRestoreStateErrors;

  /// The ID of the snapshot.
  final String snapshotId;

  DisableFastSnapshotRestoreErrorItem({
    this.fastSnapshotRestoreStateErrors,
    this.snapshotId,
  });
}

/// Describes an error that occurred when disabling fast snapshot restores.
class DisableFastSnapshotRestoreStateError {
  /// The error code.
  final String code;

  /// The error message.
  final String message;

  DisableFastSnapshotRestoreStateError({
    this.code,
    this.message,
  });
}

/// Contains information about an error that occurred when disabling fast
/// snapshot restores.
class DisableFastSnapshotRestoreStateErrorItem {
  /// The Availability Zone.
  final String availabilityZone;

  /// The error.
  final DisableFastSnapshotRestoreStateError error;

  DisableFastSnapshotRestoreStateErrorItem({
    this.availabilityZone,
    this.error,
  });
}

/// Describes fast snapshot restores that were successfully disabled.
class DisableFastSnapshotRestoreSuccessItem {
  /// The Availability Zone.
  final String availabilityZone;

  /// The time at which fast snapshot restores entered the <code>disabled</code>
  /// state.
  final DateTime disabledTime;

  /// The time at which fast snapshot restores entered the <code>disabling</code>
  /// state.
  final DateTime disablingTime;

  /// The time at which fast snapshot restores entered the <code>enabled</code>
  /// state.
  final DateTime enabledTime;

  /// The time at which fast snapshot restores entered the <code>enabling</code>
  /// state.
  final DateTime enablingTime;

  /// The time at which fast snapshot restores entered the <code>optimizing</code>
  /// state.
  final DateTime optimizingTime;

  /// The alias of the snapshot owner.
  final String ownerAlias;

  /// The ID of the AWS account that owns the snapshot.
  final String ownerId;

  /// The ID of the snapshot.
  final String snapshotId;

  /// The state of fast snapshot restores for the snapshot.
  final FastSnapshotRestoreStateCode state;

  /// The reason for the state transition. The possible values are as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>Client.UserInitiated</code> - The state successfully transitioned to
  /// <code>enabling</code> or <code>disabling</code>.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiated - Lifecycle state transition</code> - The state
  /// successfully transitioned to <code>optimizing</code>, <code>enabled</code>,
  /// or <code>disabled</code>.
  /// </li>
  /// </ul>
  final String stateTransitionReason;

  DisableFastSnapshotRestoreSuccessItem({
    this.availabilityZone,
    this.disabledTime,
    this.disablingTime,
    this.enabledTime,
    this.enablingTime,
    this.optimizingTime,
    this.ownerAlias,
    this.ownerId,
    this.snapshotId,
    this.state,
    this.stateTransitionReason,
  });
}

class DisableFastSnapshotRestoresResult {
  /// Information about the snapshots for which fast snapshot restores were
  /// successfully disabled.
  final List<DisableFastSnapshotRestoreSuccessItem> successful;

  /// Information about the snapshots for which fast snapshot restores could not
  /// be disabled.
  final List<DisableFastSnapshotRestoreErrorItem> unsuccessful;

  DisableFastSnapshotRestoresResult({
    this.successful,
    this.unsuccessful,
  });
}

class DisableTransitGatewayRouteTablePropagationResult {
  /// Information about route propagation.
  final TransitGatewayPropagation propagation;

  DisableTransitGatewayRouteTablePropagationResult({
    this.propagation,
  });
}

class DisableVpcClassicLinkDnsSupportResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  DisableVpcClassicLinkDnsSupportResult({
    this.returnValue,
  });
}

class DisableVpcClassicLinkResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  DisableVpcClassicLinkResult({
    this.returnValue,
  });
}

class DisassociateClientVpnTargetNetworkResult {
  /// The ID of the target network association.
  final String associationId;

  /// The current state of the target network association.
  final AssociationStatus status;

  DisassociateClientVpnTargetNetworkResult({
    this.associationId,
    this.status,
  });
}

class DisassociateIamInstanceProfileResult {
  /// Information about the IAM instance profile association.
  final IamInstanceProfileAssociation iamInstanceProfileAssociation;

  DisassociateIamInstanceProfileResult({
    this.iamInstanceProfileAssociation,
  });
}

class DisassociateSubnetCidrBlockResult {
  /// Information about the IPv6 CIDR block association.
  final SubnetIpv6CidrBlockAssociation ipv6CidrBlockAssociation;

  /// The ID of the subnet.
  final String subnetId;

  DisassociateSubnetCidrBlockResult({
    this.ipv6CidrBlockAssociation,
    this.subnetId,
  });
}

class DisassociateTransitGatewayMulticastDomainResult {
  /// Information about the association.
  final TransitGatewayMulticastDomainAssociations associations;

  DisassociateTransitGatewayMulticastDomainResult({
    this.associations,
  });
}

class DisassociateTransitGatewayRouteTableResult {
  /// Information about the association.
  final TransitGatewayAssociation association;

  DisassociateTransitGatewayRouteTableResult({
    this.association,
  });
}

class DisassociateVpcCidrBlockResult {
  /// Information about the IPv4 CIDR block association.
  final VpcCidrBlockAssociation cidrBlockAssociation;

  /// Information about the IPv6 CIDR block association.
  final VpcIpv6CidrBlockAssociation ipv6CidrBlockAssociation;

  /// The ID of the VPC.
  final String vpcId;

  DisassociateVpcCidrBlockResult({
    this.cidrBlockAssociation,
    this.ipv6CidrBlockAssociation,
    this.vpcId,
  });
}

/// Describes a disk image.
class DiskImage {
  /// A description of the disk image.
  final String description;

  /// Information about the disk image.
  final DiskImageDetail image;

  /// Information about the volume.
  final VolumeDetail volume;

  DiskImage({
    this.description,
    this.image,
    this.volume,
  });
}

/// Describes a disk image.
class DiskImageDescription {
  /// The checksum computed for the disk image.
  final String checksum;

  /// The disk image format.
  final DiskImageFormat format;

  /// A presigned URL for the import manifest stored in Amazon S3. For information
  /// about creating a presigned URL for an Amazon S3 object, read the "Query
  /// String Request Authentication Alternative" section of the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating
  /// REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer
  /// Guide</i>.
  ///
  /// For information about the import manifest referenced by this API action, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  final String importManifestUrl;

  /// The size of the disk image, in GiB.
  final int size;

  DiskImageDescription({
    this.checksum,
    this.format,
    this.importManifestUrl,
    this.size,
  });
}

/// Describes a disk image.
class DiskImageDetail {
  /// The size of the disk image, in GiB.
  final int bytes;

  /// The disk image format.
  final DiskImageFormat format;

  /// A presigned URL for the import manifest stored in Amazon S3 and presented
  /// here as an Amazon S3 presigned URL. For information about creating a
  /// presigned URL for an Amazon S3 object, read the "Query String Request
  /// Authentication Alternative" section of the <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating
  /// REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer
  /// Guide</i>.
  ///
  /// For information about the import manifest referenced by this API action, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM
  /// Import Manifest</a>.
  final String importManifestUrl;

  DiskImageDetail({
    @_s.required this.bytes,
    @_s.required this.format,
    @_s.required this.importManifestUrl,
  });
}

enum DiskImageFormat {
  vmdk,
  raw,
  vhd,
}

/// Describes a disk image volume.
class DiskImageVolumeDescription {
  /// The volume identifier.
  final String id;

  /// The size of the volume, in GiB.
  final int size;

  DiskImageVolumeDescription({
    this.id,
    this.size,
  });
}

/// Describes the disk.
class DiskInfo {
  /// The number of disks with this configuration.
  final int count;

  /// The size of the disk in GB.
  final int sizeInGB;

  /// The type of disk.
  final DiskType type;

  DiskInfo({
    this.count,
    this.sizeInGB,
    this.type,
  });
}

enum DiskType {
  hdd,
  ssd,
}

/// Describes a DNS entry.
class DnsEntry {
  /// The DNS name.
  final String dnsName;

  /// The ID of the private hosted zone.
  final String hostedZoneId;

  DnsEntry({
    this.dnsName,
    this.hostedZoneId,
  });
}

enum DnsNameState {
  pendingVerification,
  verified,
  failed,
}

/// Information about the DNS server to be used.
class DnsServersOptionsModifyStructure {
  /// The IPv4 address range, in CIDR notation, of the DNS servers to be used. You
  /// can specify up to two DNS servers. Ensure that the DNS servers can be
  /// reached by the clients. The specified values overwrite the existing values.
  final List<String> customDnsServers;

  /// Indicates whether DNS servers should be used. Specify <code>False</code> to
  /// delete the existing DNS servers.
  final bool enabled;

  DnsServersOptionsModifyStructure({
    this.customDnsServers,
    this.enabled,
  });
}

enum DnsSupportValue {
  enable,
  disable,
}

enum DomainType {
  vpc,
  standard,
}

/// Describes a block device for an EBS volume.
class EbsBlockDevice {
  /// Indicates whether the EBS volume is deleted on instance termination. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination">Preserving
  /// Amazon EBS Volumes on Instance Termination</a> in the Amazon Elastic Compute
  /// Cloud User Guide.
  final bool deleteOnTermination;

  /// Indicates whether the encryption state of an EBS volume is changed while
  /// being restored from a backing snapshot. The effect of setting the encryption
  /// state to <code>true</code> depends on the volume origin (new or from a
  /// snapshot), starting encryption state, ownership, and whether encryption by
  /// default is enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-parameters">Amazon
  /// EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// In no case can you remove encryption from an encrypted volume.
  ///
  /// Encrypted volumes can only be attached to instances that support Amazon EBS
  /// encryption. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported
  /// Instance Types</a>.
  ///
  /// This parameter is not returned by .
  final bool encrypted;

  /// The number of I/O operations per second (IOPS) that the volume supports. For
  /// <code>io1</code> volumes, this represents the number of IOPS that are
  /// provisioned for the volume. For <code>gp2</code> volumes, this represents
  /// the baseline performance of the volume and the rate at which the volume
  /// accumulates I/O credits for bursting. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon
  /// EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Constraints: Range is 100-16,000 IOPS for <code>gp2</code> volumes and 100
  /// to 64,000IOPS for <code>io1</code> volumes in most Regions. Maximum
  /// <code>io1</code> IOPS of 64,000 is guaranteed only on <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
  /// instances</a>. Other instance families guarantee performance up to 32,000
  /// IOPS. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon
  /// EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Condition: This parameter is required for requests to create
  /// <code>io1</code> volumes; it is not used in requests to create
  /// <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or
  /// <code>standard</code> volumes.
  final int iops;

  /// Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed
  /// CMK under which the EBS volume is encrypted.
  ///
  /// This parameter is only supported on <code>BlockDeviceMapping</code> objects
  /// called by <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>,
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html">RequestSpotFleet</a>,
  /// and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html">RequestSpotInstances</a>.
  final String kmsKeyId;

  /// The ID of the snapshot.
  final String snapshotId;

  /// The size of the volume, in GiB.
  ///
  /// Default: If you're creating the volume from a snapshot and don't specify a
  /// volume size, the default is the snapshot size.
  ///
  /// Constraints: 1-16384 for General Purpose SSD (<code>gp2</code>), 4-16384 for
  /// Provisioned IOPS SSD (<code>io1</code>), 500-16384 for Throughput Optimized
  /// HDD (<code>st1</code>), 500-16384 for Cold HDD (<code>sc1</code>), and
  /// 1-1024 for Magnetic (<code>standard</code>) volumes. If you specify a
  /// snapshot, the volume size must be equal to or larger than the snapshot size.
  final int volumeSize;

  /// The volume type. If you set the type to <code>io1</code>, you must also
  /// specify the <b>Iops</b> parameter. If you set the type to <code>gp2</code>,
  /// <code>st1</code>, <code>sc1</code>, or <code>standard</code>, you must omit
  /// the <b>Iops</b> parameter.
  ///
  /// Default: <code>gp2</code>
  final VolumeType volumeType;

  EbsBlockDevice({
    this.deleteOnTermination,
    this.encrypted,
    this.iops,
    this.kmsKeyId,
    this.snapshotId,
    this.volumeSize,
    this.volumeType,
  });
}

enum EbsEncryptionSupport {
  unsupported,
  supported,
}

/// Describes the Amazon EBS features supported by the instance type.
class EbsInfo {
  /// Indicates that the instance type is Amazon EBS-optimized. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon
  /// EBS-Optimized Instances</a> in <i>Amazon EC2 User Guide for Linux
  /// Instances</i>.
  final EbsOptimizedSupport ebsOptimizedSupport;

  /// Indicates whether Amazon EBS encryption is supported.
  final EbsEncryptionSupport encryptionSupport;

  EbsInfo({
    this.ebsOptimizedSupport,
    this.encryptionSupport,
  });
}

/// Describes a parameter used to set up an EBS volume in a block device
/// mapping.
class EbsInstanceBlockDevice {
  /// The time stamp when the attachment initiated.
  final DateTime attachTime;

  /// Indicates whether the volume is deleted on instance termination.
  final bool deleteOnTermination;

  /// The attachment state.
  final AttachmentStatus status;

  /// The ID of the EBS volume.
  final String volumeId;

  EbsInstanceBlockDevice({
    this.attachTime,
    this.deleteOnTermination,
    this.status,
    this.volumeId,
  });
}

/// Describes information used to set up an EBS volume specified in a block
/// device mapping.
class EbsInstanceBlockDeviceSpecification {
  /// Indicates whether the volume is deleted on instance termination.
  final bool deleteOnTermination;

  /// The ID of the EBS volume.
  final String volumeId;

  EbsInstanceBlockDeviceSpecification({
    this.deleteOnTermination,
    this.volumeId,
  });
}

enum EbsOptimizedSupport {
  unsupported,
  supported,
  $default,
}

/// Describes an egress-only internet gateway.
class EgressOnlyInternetGateway {
  /// Information about the attachment of the egress-only internet gateway.
  final List<InternetGatewayAttachment> attachments;

  /// The ID of the egress-only internet gateway.
  final String egressOnlyInternetGatewayId;

  /// The tags assigned to the egress-only internet gateway.
  final List<Tag> tags;

  EgressOnlyInternetGateway({
    this.attachments,
    this.egressOnlyInternetGatewayId,
    this.tags,
  });
}

/// Describes the association between an instance and an Elastic Graphics
/// accelerator.
class ElasticGpuAssociation {
  /// The ID of the association.
  final String elasticGpuAssociationId;

  /// The state of the association between the instance and the Elastic Graphics
  /// accelerator.
  final String elasticGpuAssociationState;

  /// The time the Elastic Graphics accelerator was associated with the instance.
  final String elasticGpuAssociationTime;

  /// The ID of the Elastic Graphics accelerator.
  final String elasticGpuId;

  ElasticGpuAssociation({
    this.elasticGpuAssociationId,
    this.elasticGpuAssociationState,
    this.elasticGpuAssociationTime,
    this.elasticGpuId,
  });
}

/// Describes the status of an Elastic Graphics accelerator.
class ElasticGpuHealth {
  /// The health status.
  final ElasticGpuStatus status;

  ElasticGpuHealth({
    this.status,
  });
}

/// A specification for an Elastic Graphics accelerator.
class ElasticGpuSpecification {
  /// The type of Elastic Graphics accelerator. For more information about the
  /// values to specify for <code>Type</code>, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html#elastic-graphics-basics">Elastic
  /// Graphics Basics</a>, specifically the Elastic Graphics accelerator column,
  /// in the <i>Amazon Elastic Compute Cloud User Guide for Windows Instances</i>.
  final String type;

  ElasticGpuSpecification({
    @_s.required this.type,
  });
}

/// Describes an elastic GPU.
class ElasticGpuSpecificationResponse {
  /// The elastic GPU type.
  final String type;

  ElasticGpuSpecificationResponse({
    this.type,
  });
}

enum ElasticGpuState {
  attached,
}

enum ElasticGpuStatus {
  ok,
  impaired,
}

/// Describes an Elastic Graphics accelerator.
class ElasticGpus {
  /// The Availability Zone in the which the Elastic Graphics accelerator resides.
  final String availabilityZone;

  /// The status of the Elastic Graphics accelerator.
  final ElasticGpuHealth elasticGpuHealth;

  /// The ID of the Elastic Graphics accelerator.
  final String elasticGpuId;

  /// The state of the Elastic Graphics accelerator.
  final ElasticGpuState elasticGpuState;

  /// The type of Elastic Graphics accelerator.
  final String elasticGpuType;

  /// The ID of the instance to which the Elastic Graphics accelerator is
  /// attached.
  final String instanceId;

  /// The tags assigned to the Elastic Graphics accelerator.
  final List<Tag> tags;

  ElasticGpus({
    this.availabilityZone,
    this.elasticGpuHealth,
    this.elasticGpuId,
    this.elasticGpuState,
    this.elasticGpuType,
    this.instanceId,
    this.tags,
  });
}

/// Describes an elastic inference accelerator.
class ElasticInferenceAccelerator {
  /// The type of elastic inference accelerator. The possible values are
  /// <code>eia1.medium</code>, <code>eia1.large</code>, and
  /// <code>eia1.xlarge</code>.
  final String type;

  /// The number of elastic inference accelerators to attach to the instance.
  ///
  /// Default: 1
  final int count;

  ElasticInferenceAccelerator({
    @_s.required this.type,
    this.count,
  });
}

/// Describes the association between an instance and an elastic inference
/// accelerator.
class ElasticInferenceAcceleratorAssociation {
  /// The Amazon Resource Name (ARN) of the elastic inference accelerator.
  final String elasticInferenceAcceleratorArn;

  /// The ID of the association.
  final String elasticInferenceAcceleratorAssociationId;

  /// The state of the elastic inference accelerator.
  final String elasticInferenceAcceleratorAssociationState;

  /// The time at which the elastic inference accelerator is associated with an
  /// instance.
  final DateTime elasticInferenceAcceleratorAssociationTime;

  ElasticInferenceAcceleratorAssociation({
    this.elasticInferenceAcceleratorArn,
    this.elasticInferenceAcceleratorAssociationId,
    this.elasticInferenceAcceleratorAssociationState,
    this.elasticInferenceAcceleratorAssociationTime,
  });
}

enum EnaSupport {
  unsupported,
  supported,
  required,
}

class EnableEbsEncryptionByDefaultResult {
  /// The updated status of encryption by default.
  final bool ebsEncryptionByDefault;

  EnableEbsEncryptionByDefaultResult({
    this.ebsEncryptionByDefault,
  });
}

/// Contains information about the errors that occurred when enabling fast
/// snapshot restores.
class EnableFastSnapshotRestoreErrorItem {
  /// The errors.
  final List<EnableFastSnapshotRestoreStateErrorItem>
      fastSnapshotRestoreStateErrors;

  /// The ID of the snapshot.
  final String snapshotId;

  EnableFastSnapshotRestoreErrorItem({
    this.fastSnapshotRestoreStateErrors,
    this.snapshotId,
  });
}

/// Describes an error that occurred when enabling fast snapshot restores.
class EnableFastSnapshotRestoreStateError {
  /// The error code.
  final String code;

  /// The error message.
  final String message;

  EnableFastSnapshotRestoreStateError({
    this.code,
    this.message,
  });
}

/// Contains information about an error that occurred when enabling fast
/// snapshot restores.
class EnableFastSnapshotRestoreStateErrorItem {
  /// The Availability Zone.
  final String availabilityZone;

  /// The error.
  final EnableFastSnapshotRestoreStateError error;

  EnableFastSnapshotRestoreStateErrorItem({
    this.availabilityZone,
    this.error,
  });
}

/// Describes fast snapshot restores that were successfully enabled.
class EnableFastSnapshotRestoreSuccessItem {
  /// The Availability Zone.
  final String availabilityZone;

  /// The time at which fast snapshot restores entered the <code>disabled</code>
  /// state.
  final DateTime disabledTime;

  /// The time at which fast snapshot restores entered the <code>disabling</code>
  /// state.
  final DateTime disablingTime;

  /// The time at which fast snapshot restores entered the <code>enabled</code>
  /// state.
  final DateTime enabledTime;

  /// The time at which fast snapshot restores entered the <code>enabling</code>
  /// state.
  final DateTime enablingTime;

  /// The time at which fast snapshot restores entered the <code>optimizing</code>
  /// state.
  final DateTime optimizingTime;

  /// The alias of the snapshot owner.
  final String ownerAlias;

  /// The ID of the AWS account that owns the snapshot.
  final String ownerId;

  /// The ID of the snapshot.
  final String snapshotId;

  /// The state of fast snapshot restores.
  final FastSnapshotRestoreStateCode state;

  /// The reason for the state transition. The possible values are as follows:
  ///
  /// <ul>
  /// <li>
  /// <code>Client.UserInitiated</code> - The state successfully transitioned to
  /// <code>enabling</code> or <code>disabling</code>.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiated - Lifecycle state transition</code> - The state
  /// successfully transitioned to <code>optimizing</code>, <code>enabled</code>,
  /// or <code>disabled</code>.
  /// </li>
  /// </ul>
  final String stateTransitionReason;

  EnableFastSnapshotRestoreSuccessItem({
    this.availabilityZone,
    this.disabledTime,
    this.disablingTime,
    this.enabledTime,
    this.enablingTime,
    this.optimizingTime,
    this.ownerAlias,
    this.ownerId,
    this.snapshotId,
    this.state,
    this.stateTransitionReason,
  });
}

class EnableFastSnapshotRestoresResult {
  /// Information about the snapshots for which fast snapshot restores were
  /// successfully enabled.
  final List<EnableFastSnapshotRestoreSuccessItem> successful;

  /// Information about the snapshots for which fast snapshot restores could not
  /// be enabled.
  final List<EnableFastSnapshotRestoreErrorItem> unsuccessful;

  EnableFastSnapshotRestoresResult({
    this.successful,
    this.unsuccessful,
  });
}

class EnableTransitGatewayRouteTablePropagationResult {
  /// Information about route propagation.
  final TransitGatewayPropagation propagation;

  EnableTransitGatewayRouteTablePropagationResult({
    this.propagation,
  });
}

class EnableVpcClassicLinkDnsSupportResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  EnableVpcClassicLinkDnsSupportResult({
    this.returnValue,
  });
}

class EnableVpcClassicLinkResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  EnableVpcClassicLinkResult({
    this.returnValue,
  });
}

enum EndDateType {
  unlimited,
  limited,
}

enum EventCode {
  instanceReboot,
  systemReboot,
  systemMaintenance,
  instanceRetirement,
  instanceStop,
}

/// Describes an EC2 Fleet or Spot Fleet event.
class EventInformation {
  /// The description of the event.
  final String eventDescription;

  /// The event.
  ///
  /// The following are the <code>error</code> events:
  ///
  /// <ul>
  /// <li>
  /// <code>iamFleetRoleInvalid</code> - The EC2 Fleet or Spot Fleet did not have
  /// the required permissions either to launch or terminate an instance.
  /// </li>
  /// <li>
  /// <code>spotFleetRequestConfigurationInvalid</code> - The configuration is not
  /// valid. For more information, see the description of the event.
  /// </li>
  /// <li>
  /// <code>spotInstanceCountLimitExceeded</code> - You've reached the limit on
  /// the number of Spot Instances that you can launch.
  /// </li>
  /// </ul>
  /// The following are the <code>fleetRequestChange</code> events:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - The EC2 Fleet or Spot Fleet request has been validated
  /// and Amazon EC2 is attempting to maintain the target number of running Spot
  /// Instances.
  /// </li>
  /// <li>
  /// <code>cancelled</code> - The EC2 Fleet or Spot Fleet request is canceled and
  /// has no running Spot Instances. The EC2 Fleet or Spot Fleet will be deleted
  /// two days after its instances were terminated.
  /// </li>
  /// <li>
  /// <code>cancelled_running</code> - The EC2 Fleet or Spot Fleet request is
  /// canceled and does not launch additional Spot Instances. Existing Spot
  /// Instances continue to run until they are interrupted or terminated.
  /// </li>
  /// <li>
  /// <code>cancelled_terminating</code> - The EC2 Fleet or Spot Fleet request is
  /// canceled and its Spot Instances are terminating.
  /// </li>
  /// <li>
  /// <code>expired</code> - The EC2 Fleet or Spot Fleet request has expired. A
  /// subsequent event indicates that the instances were terminated, if the
  /// request was created with <code>TerminateInstancesWithExpiration</code> set.
  /// </li>
  /// <li>
  /// <code>modify_in_progress</code> - A request to modify the EC2 Fleet or Spot
  /// Fleet request was accepted and is in progress.
  /// </li>
  /// <li>
  /// <code>modify_successful</code> - The EC2 Fleet or Spot Fleet request was
  /// modified.
  /// </li>
  /// <li>
  /// <code>price_update</code> - The price for a launch configuration was
  /// adjusted because it was too high. This change is permanent.
  /// </li>
  /// <li>
  /// <code>submitted</code> - The EC2 Fleet or Spot Fleet request is being
  /// evaluated and Amazon EC2 is preparing to launch the target number of Spot
  /// Instances.
  /// </li>
  /// </ul>
  /// The following are the <code>instanceChange</code> events:
  ///
  /// <ul>
  /// <li>
  /// <code>launched</code> - A request was fulfilled and a new instance was
  /// launched.
  /// </li>
  /// <li>
  /// <code>terminated</code> - An instance was terminated by the user.
  /// </li>
  /// </ul>
  /// The following are the <code>Information</code> events:
  ///
  /// <ul>
  /// <li>
  /// <code>launchSpecTemporarilyBlacklisted</code> - The configuration is not
  /// valid and several attempts to launch instances have failed. For more
  /// information, see the description of the event.
  /// </li>
  /// <li>
  /// <code>launchSpecUnusable</code> - The price in a launch specification is not
  /// valid because it is below the Spot price or the Spot price is above the
  /// On-Demand price.
  /// </li>
  /// <li>
  /// <code>fleetProgressHalted</code> - The price in every launch specification
  /// is not valid. A launch specification might become valid if the Spot price
  /// changes.
  /// </li>
  /// </ul>
  final String eventSubType;

  /// The ID of the instance. This information is available only for
  /// <code>instanceChange</code> events.
  final String instanceId;

  EventInformation({
    this.eventDescription,
    this.eventSubType,
    this.instanceId,
  });
}

enum EventType {
  instanceChange,
  fleetRequestChange,
  error,
  information,
}

enum ExcessCapacityTerminationPolicy {
  noTermination,
  $default,
}

class ExportClientVpnClientCertificateRevocationListResult {
  /// Information about the client certificate revocation list.
  final String certificateRevocationList;

  /// The current state of the client certificate revocation list.
  final ClientCertificateRevocationListStatus status;

  ExportClientVpnClientCertificateRevocationListResult({
    this.certificateRevocationList,
    this.status,
  });
}

class ExportClientVpnClientConfigurationResult {
  /// The contents of the Client VPN endpoint configuration file.
  final String clientConfiguration;

  ExportClientVpnClientConfigurationResult({
    this.clientConfiguration,
  });
}

enum ExportEnvironment {
  citrix,
  vmware,
  microsoft,
}

class ExportImageResult {
  /// A description of the image being exported.
  final String description;

  /// The disk image format for the exported image.
  final DiskImageFormat diskImageFormat;

  /// The ID of the export image task.
  final String exportImageTaskId;

  /// The ID of the image.
  final String imageId;

  /// The percent complete of the export image task.
  final String progress;

  /// The name of the role that grants VM Import/Export permission to export
  /// images to your S3 bucket.
  final String roleName;

  /// Information about the destination S3 bucket.
  final ExportTaskS3Location s3ExportLocation;

  /// The status of the export image task. The possible values are
  /// <code>active</code>, <code>completed</code>, <code>deleting</code>, and
  /// <code>deleted</code>.
  final String status;

  /// The status message for the export image task.
  final String statusMessage;

  ExportImageResult({
    this.description,
    this.diskImageFormat,
    this.exportImageTaskId,
    this.imageId,
    this.progress,
    this.roleName,
    this.s3ExportLocation,
    this.status,
    this.statusMessage,
  });
}

/// Describes an export image task.
class ExportImageTask {
  /// A description of the image being exported.
  final String description;

  /// The ID of the export image task.
  final String exportImageTaskId;

  /// The ID of the image.
  final String imageId;

  /// The percent complete of the export image task.
  final String progress;

  /// Information about the destination S3 bucket.
  final ExportTaskS3Location s3ExportLocation;

  /// The status of the export image task. The possible values are
  /// <code>active</code>, <code>completed</code>, <code>deleting</code>, and
  /// <code>deleted</code>.
  final String status;

  /// The status message for the export image task.
  final String statusMessage;

  ExportImageTask({
    this.description,
    this.exportImageTaskId,
    this.imageId,
    this.progress,
    this.s3ExportLocation,
    this.status,
    this.statusMessage,
  });
}

/// Describes an instance export task.
class ExportTask {
  /// A description of the resource being exported.
  final String description;

  /// The ID of the export task.
  final String exportTaskId;

  /// Information about the export task.
  final ExportToS3Task exportToS3Task;

  /// Information about the instance to export.
  final InstanceExportDetails instanceExportDetails;

  /// The state of the export task.
  final ExportTaskState state;

  /// The status message related to the export task.
  final String statusMessage;

  /// The tags for the export task.
  final List<Tag> tags;

  ExportTask({
    this.description,
    this.exportTaskId,
    this.exportToS3Task,
    this.instanceExportDetails,
    this.state,
    this.statusMessage,
    this.tags,
  });
}

/// Describes the destination for an export image task.
class ExportTaskS3Location {
  /// The destination S3 bucket.
  final String s3Bucket;

  /// The prefix (logical hierarchy) in the bucket.
  final String s3Prefix;

  ExportTaskS3Location({
    this.s3Bucket,
    this.s3Prefix,
  });
}

/// Describes the destination for an export image task.
class ExportTaskS3LocationRequest {
  /// The destination S3 bucket.
  final String s3Bucket;

  /// The prefix (logical hierarchy) in the bucket.
  final String s3Prefix;

  ExportTaskS3LocationRequest({
    @_s.required this.s3Bucket,
    this.s3Prefix,
  });
}

enum ExportTaskState {
  active,
  cancelling,
  cancelled,
  completed,
}

/// Describes the format and location for an instance export task.
class ExportToS3Task {
  /// The container format used to combine disk images with metadata (such as
  /// OVF). If absent, only the disk image is exported.
  final ContainerFormat containerFormat;

  /// The format for the exported image.
  final DiskImageFormat diskImageFormat;

  /// The S3 bucket for the destination image. The destination bucket must exist
  /// and grant WRITE and READ_ACP permissions to the AWS account
  /// <code>vm-import-export@amazon.com</code>.
  final String s3Bucket;

  /// The encryption key for your S3 bucket.
  final String s3Key;

  ExportToS3Task({
    this.containerFormat,
    this.diskImageFormat,
    this.s3Bucket,
    this.s3Key,
  });
}

/// Describes an instance export task.
class ExportToS3TaskSpecification {
  /// The container format used to combine disk images with metadata (such as
  /// OVF). If absent, only the disk image is exported.
  final ContainerFormat containerFormat;

  /// The format for the exported image.
  final DiskImageFormat diskImageFormat;

  /// The S3 bucket for the destination image. The destination bucket must exist
  /// and grant WRITE and READ_ACP permissions to the AWS account
  /// <code>vm-import-export@amazon.com</code>.
  final String s3Bucket;

  /// The image is written to a single object in the S3 bucket at the S3 key
  /// s3prefix + exportTaskId + '.' + diskImageFormat.
  final String s3Prefix;

  ExportToS3TaskSpecification({
    this.containerFormat,
    this.diskImageFormat,
    this.s3Bucket,
    this.s3Prefix,
  });
}

class ExportTransitGatewayRoutesResult {
  /// The URL of the exported file in Amazon S3. For example,
  /// s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.
  final String s3Location;

  ExportTransitGatewayRoutesResult({
    this.s3Location,
  });
}

/// Describes a Reserved Instance whose queued purchase was not deleted.
class FailedQueuedPurchaseDeletion {
  /// The error.
  final DeleteQueuedReservedInstancesError error;

  /// The ID of the Reserved Instance.
  final String reservedInstancesId;

  FailedQueuedPurchaseDeletion({
    this.error,
    this.reservedInstancesId,
  });
}

enum FastSnapshotRestoreStateCode {
  enabling,
  optimizing,
  enabled,
  disabling,
  disabled,
}

/// A filter name and value pair that is used to return a more specific list of
/// results from a describe operation. Filters can be used to match a set of
/// resources by specific criteria, such as tags, attributes, or IDs. The
/// filters supported by a describe operation are documented with the describe
/// operation. For example:
///
/// <ul>
/// <li>
/// <a>DescribeAvailabilityZones</a>
/// </li>
/// <li>
/// <a>DescribeImages</a>
/// </li>
/// <li>
/// <a>DescribeInstances</a>
/// </li>
/// <li>
/// <a>DescribeKeyPairs</a>
/// </li>
/// <li>
/// <a>DescribeSecurityGroups</a>
/// </li>
/// <li>
/// <a>DescribeSnapshots</a>
/// </li>
/// <li>
/// <a>DescribeSubnets</a>
/// </li>
/// <li>
/// <a>DescribeTags</a>
/// </li>
/// <li>
/// <a>DescribeVolumes</a>
/// </li>
/// <li>
/// <a>DescribeVpcs</a>
/// </li>
/// </ul>
class Filter {
  /// The name of the filter. Filter names are case-sensitive.
  final String name;

  /// The filter values. Filter values are case-sensitive.
  final List<String> values;

  Filter({
    this.name,
    this.values,
  });
}

enum FleetActivityStatus {
  error,
  pendingFulfillment,
  pendingTermination,
  fulfilled,
}

enum FleetCapacityReservationUsageStrategy {
  useCapacityReservationsFirst,
}

/// Describes an EC2 Fleet.
class FleetData {
  /// The progress of the EC2 Fleet. If there is an error, the status is
  /// <code>error</code>. After all requests are placed, the status is
  /// <code>pending_fulfillment</code>. If the size of the EC2 Fleet is equal to
  /// or greater than its target capacity, the status is <code>fulfilled</code>.
  /// If the size of the EC2 Fleet is decreased, the status is
  /// <code>pending_termination</code> while instances are terminating.
  final FleetActivityStatus activityStatus;

  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  ///
  /// Constraints: Maximum 64 ASCII characters
  final String clientToken;

  /// The creation date and time of the EC2 Fleet.
  final DateTime createTime;

  /// Information about the instances that could not be launched by the fleet.
  /// Valid only when <b>Type</b> is set to <code>instant</code>.
  final List<DescribeFleetError> errors;

  /// Indicates whether running instances should be terminated if the target
  /// capacity of the EC2 Fleet is decreased below the current size of the EC2
  /// Fleet.
  final FleetExcessCapacityTerminationPolicy excessCapacityTerminationPolicy;

  /// The ID of the EC2 Fleet.
  final String fleetId;

  /// The state of the EC2 Fleet.
  final FleetStateCode fleetState;

  /// The number of units fulfilled by this request compared to the set target
  /// capacity.
  final double fulfilledCapacity;

  /// The number of units fulfilled by this request compared to the set target
  /// On-Demand capacity.
  final double fulfilledOnDemandCapacity;

  /// Information about the instances that were launched by the fleet. Valid only
  /// when <b>Type</b> is set to <code>instant</code>.
  final List<DescribeFleetsInstances> instances;

  /// The launch template and overrides.
  final List<FleetLaunchTemplateConfig> launchTemplateConfigs;

  /// The allocation strategy of On-Demand Instances in an EC2 Fleet.
  final OnDemandOptions onDemandOptions;

  /// Indicates whether EC2 Fleet should replace unhealthy instances.
  final bool replaceUnhealthyInstances;

  /// The configuration of Spot Instances in an EC2 Fleet.
  final SpotOptions spotOptions;

  /// The tags for an EC2 Fleet resource.
  final List<Tag> tags;

  /// The number of units to request. You can choose to set the target capacity in
  /// terms of instances or a performance characteristic that is important to your
  /// application workload, such as vCPUs, memory, or I/O. If the request type is
  /// <code>maintain</code>, you can specify a target capacity of 0 and add
  /// capacity later.
  final TargetCapacitySpecification targetCapacitySpecification;

  /// Indicates whether running instances should be terminated when the EC2 Fleet
  /// expires.
  final bool terminateInstancesWithExpiration;

  /// The type of request. Indicates whether the EC2 Fleet only
  /// <code>requests</code> the target capacity, or also attempts to
  /// <code>maintain</code> it. If you request a certain target capacity, EC2
  /// Fleet only places the required requests; it does not attempt to replenish
  /// instances if capacity is diminished, and it does not submit requests in
  /// alternative capacity pools if capacity is unavailable. To maintain a certain
  /// target capacity, EC2 Fleet places the required requests to meet this target
  /// capacity. It also automatically replenishes any interrupted Spot Instances.
  /// Default: <code>maintain</code>.
  final FleetType type;

  /// The start date and time of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The default
  /// is to start fulfilling the request immediately.
  final DateTime validFrom;

  /// The end date and time of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this
  /// point, no new instance requests are placed or able to fulfill the request.
  /// The default end date is 7 days from the current date.
  final DateTime validUntil;

  FleetData({
    this.activityStatus,
    this.clientToken,
    this.createTime,
    this.errors,
    this.excessCapacityTerminationPolicy,
    this.fleetId,
    this.fleetState,
    this.fulfilledCapacity,
    this.fulfilledOnDemandCapacity,
    this.instances,
    this.launchTemplateConfigs,
    this.onDemandOptions,
    this.replaceUnhealthyInstances,
    this.spotOptions,
    this.tags,
    this.targetCapacitySpecification,
    this.terminateInstancesWithExpiration,
    this.type,
    this.validFrom,
    this.validUntil,
  });
}

enum FleetEventType {
  instanceChange,
  fleetChange,
  serviceError,
}

enum FleetExcessCapacityTerminationPolicy {
  noTermination,
  termination,
}

/// Describes a launch template and overrides.
class FleetLaunchTemplateConfig {
  /// The launch template.
  final FleetLaunchTemplateSpecification launchTemplateSpecification;

  /// Any parameters that you specify override the same parameters in the launch
  /// template.
  final List<FleetLaunchTemplateOverrides> overrides;

  FleetLaunchTemplateConfig({
    this.launchTemplateSpecification,
    this.overrides,
  });
}

/// Describes a launch template and overrides.
class FleetLaunchTemplateConfigRequest {
  /// The launch template to use. You must specify either the launch template ID
  /// or launch template name in the request.
  final FleetLaunchTemplateSpecificationRequest launchTemplateSpecification;

  /// Any parameters that you specify override the same parameters in the launch
  /// template.
  final List<FleetLaunchTemplateOverridesRequest> overrides;

  FleetLaunchTemplateConfigRequest({
    this.launchTemplateSpecification,
    this.overrides,
  });
}

/// Describes overrides for a launch template.
class FleetLaunchTemplateOverrides {
  /// The Availability Zone in which to launch the instances.
  final String availabilityZone;

  /// The instance type.
  final InstanceType instanceType;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance.
  final String maxPrice;

  /// The location where the instance launched, if applicable.
  final PlacementResponse placement;

  /// The priority for the launch template override. If <b>AllocationStrategy</b>
  /// is set to <code>prioritized</code>, EC2 Fleet uses priority to determine
  /// which launch template override to use first in fulfilling On-Demand
  /// capacity. The highest priority is launched first. Valid values are whole
  /// numbers starting at <code>0</code>. The lower the number, the higher the
  /// priority. If no number is set, the override has the lowest priority.
  final double priority;

  /// The ID of the subnet in which to launch the instances.
  final String subnetId;

  /// The number of units provided by the specified instance type.
  final double weightedCapacity;

  FleetLaunchTemplateOverrides({
    this.availabilityZone,
    this.instanceType,
    this.maxPrice,
    this.placement,
    this.priority,
    this.subnetId,
    this.weightedCapacity,
  });
}

/// Describes overrides for a launch template.
class FleetLaunchTemplateOverridesRequest {
  /// The Availability Zone in which to launch the instances.
  final String availabilityZone;

  /// The instance type.
  final InstanceType instanceType;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance.
  final String maxPrice;

  /// The location where the instance launched, if applicable.
  final Placement placement;

  /// The priority for the launch template override. If <b>AllocationStrategy</b>
  /// is set to <code>prioritized</code>, EC2 Fleet uses priority to determine
  /// which launch template override to use first in fulfilling On-Demand
  /// capacity. The highest priority is launched first. Valid values are whole
  /// numbers starting at <code>0</code>. The lower the number, the higher the
  /// priority. If no number is set, the launch template override has the lowest
  /// priority.
  final double priority;

  /// The IDs of the subnets in which to launch the instances. Separate multiple
  /// subnet IDs using commas (for example, <code>subnet-1234abcdeexample1,
  /// subnet-0987cdef6example2</code>). A request of type <code>instant</code> can
  /// have only one subnet ID.
  final String subnetId;

  /// The number of units provided by the specified instance type.
  final double weightedCapacity;

  FleetLaunchTemplateOverridesRequest({
    this.availabilityZone,
    this.instanceType,
    this.maxPrice,
    this.placement,
    this.priority,
    this.subnetId,
    this.weightedCapacity,
  });
}

/// Describes a launch template.
class FleetLaunchTemplateSpecification {
  /// The ID of the launch template. You must specify either a template ID or a
  /// template name.
  final String launchTemplateId;

  /// The name of the launch template. You must specify either a template name or
  /// a template ID.
  final String launchTemplateName;

  /// The version number of the launch template. You must specify a version
  /// number.
  final String version;

  FleetLaunchTemplateSpecification({
    this.launchTemplateId,
    this.launchTemplateName,
    this.version,
  });
}

/// The launch template to use. You must specify either the launch template ID
/// or launch template name in the request.
class FleetLaunchTemplateSpecificationRequest {
  /// The ID of the launch template.
  final String launchTemplateId;

  /// The name of the launch template.
  final String launchTemplateName;

  /// The version number of the launch template. Note: This is a required
  /// parameter and will be updated soon.
  final String version;

  FleetLaunchTemplateSpecificationRequest({
    this.launchTemplateId,
    this.launchTemplateName,
    this.version,
  });
}

enum FleetOnDemandAllocationStrategy {
  lowestPrice,
  prioritized,
}

enum FleetStateCode {
  submitted,
  active,
  deleted,
  failed,
  deletedRunning,
  deletedTerminating,
  modifying,
}

enum FleetType {
  request,
  maintain,
  instant,
}

/// Describes a flow log.
class FlowLog {
  /// The date and time the flow log was created.
  final DateTime creationTime;

  /// Information about the error that occurred. <code>Rate limited</code>
  /// indicates that CloudWatch Logs throttling has been applied for one or more
  /// network interfaces, or that you've reached the limit on the number of log
  /// groups that you can create. <code>Access error</code> indicates that the IAM
  /// role associated with the flow log does not have sufficient permissions to
  /// publish to CloudWatch Logs. <code>Unknown error</code> indicates an internal
  /// error.
  final String deliverLogsErrorMessage;

  /// The ARN of the IAM role that posts logs to CloudWatch Logs.
  final String deliverLogsPermissionArn;

  /// The status of the logs delivery (<code>SUCCESS</code> |
  /// <code>FAILED</code>).
  final String deliverLogsStatus;

  /// The flow log ID.
  final String flowLogId;

  /// The status of the flow log (<code>ACTIVE</code>).
  final String flowLogStatus;

  /// Specifies the destination to which the flow log data is published. Flow log
  /// data can be published to an CloudWatch Logs log group or an Amazon S3
  /// bucket. If the flow log publishes to CloudWatch Logs, this element indicates
  /// the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which the
  /// data is published. If the flow log publishes to Amazon S3, this element
  /// indicates the ARN of the Amazon S3 bucket to which the data is published.
  final String logDestination;

  /// Specifies the type of destination to which the flow log data is published.
  /// Flow log data can be published to CloudWatch Logs or Amazon S3.
  final LogDestinationType logDestinationType;

  /// The format of the flow log record.
  final String logFormat;

  /// The name of the flow log group.
  final String logGroupName;

  /// The maximum interval of time, in seconds, during which a flow of packets is
  /// captured and aggregated into a flow log record.
  ///
  /// When a network interface is attached to a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
  /// instance</a>, the aggregation interval is always 60 seconds (1 minute) or
  /// less, regardless of the specified value.
  ///
  /// Valid Values: <code>60</code> | <code>600</code>
  final int maxAggregationInterval;

  /// The ID of the resource on which the flow log was created.
  final String resourceId;

  /// The tags for the flow log.
  final List<Tag> tags;

  /// The type of traffic captured for the flow log.
  final TrafficType trafficType;

  FlowLog({
    this.creationTime,
    this.deliverLogsErrorMessage,
    this.deliverLogsPermissionArn,
    this.deliverLogsStatus,
    this.flowLogId,
    this.flowLogStatus,
    this.logDestination,
    this.logDestinationType,
    this.logFormat,
    this.logGroupName,
    this.maxAggregationInterval,
    this.resourceId,
    this.tags,
    this.trafficType,
  });
}

enum FlowLogsResourceType {
  vpc,
  subnet,
  networkInterface,
}

/// Describes the FPGA accelerator for the instance type.
class FpgaDeviceInfo {
  /// The count of FPGA accelerators for the instance type.
  final int count;

  /// The manufacturer of the FPGA accelerator.
  final String manufacturer;

  /// Describes the memory for the FPGA accelerator for the instance type.
  final FpgaDeviceMemoryInfo memoryInfo;

  /// The name of the FPGA accelerator.
  final String name;

  FpgaDeviceInfo({
    this.count,
    this.manufacturer,
    this.memoryInfo,
    this.name,
  });
}

/// Describes the memory for the FPGA accelerator for the instance type.
class FpgaDeviceMemoryInfo {
  /// The size (in MiB) for the memory available to the FPGA accelerator.
  final int sizeInMiB;

  FpgaDeviceMemoryInfo({
    this.sizeInMiB,
  });
}

/// Describes an Amazon FPGA image (AFI).
class FpgaImage {
  /// The date and time the AFI was created.
  final DateTime createTime;

  /// Indicates whether data retention support is enabled for the AFI.
  final bool dataRetentionSupport;

  /// The description of the AFI.
  final String description;

  /// The global FPGA image identifier (AGFI ID).
  final String fpgaImageGlobalId;

  /// The FPGA image identifier (AFI ID).
  final String fpgaImageId;

  /// The name of the AFI.
  final String name;

  /// The alias of the AFI owner. Possible values include <code>self</code>,
  /// <code>amazon</code>, and <code>aws-marketplace</code>.
  final String ownerAlias;

  /// The AWS account ID of the AFI owner.
  final String ownerId;

  /// Information about the PCI bus.
  final PciId pciId;

  /// The product codes for the AFI.
  final List<ProductCode> productCodes;

  /// Indicates whether the AFI is public.
  final bool public;

  /// The version of the AWS Shell that was used to create the bitstream.
  final String shellVersion;

  /// Information about the state of the AFI.
  final FpgaImageState state;

  /// Any tags assigned to the AFI.
  final List<Tag> tags;

  /// The time of the most recent update to the AFI.
  final DateTime updateTime;

  FpgaImage({
    this.createTime,
    this.dataRetentionSupport,
    this.description,
    this.fpgaImageGlobalId,
    this.fpgaImageId,
    this.name,
    this.ownerAlias,
    this.ownerId,
    this.pciId,
    this.productCodes,
    this.public,
    this.shellVersion,
    this.state,
    this.tags,
    this.updateTime,
  });
}

/// Describes an Amazon FPGA image (AFI) attribute.
class FpgaImageAttribute {
  /// The description of the AFI.
  final String description;

  /// The ID of the AFI.
  final String fpgaImageId;

  /// The load permissions.
  final List<LoadPermission> loadPermissions;

  /// The name of the AFI.
  final String name;

  /// The product codes.
  final List<ProductCode> productCodes;

  FpgaImageAttribute({
    this.description,
    this.fpgaImageId,
    this.loadPermissions,
    this.name,
    this.productCodes,
  });
}

enum FpgaImageAttributeName {
  description,
  name,
  loadPermission,
  productCodes,
}

/// Describes the state of the bitstream generation process for an Amazon FPGA
/// image (AFI).
class FpgaImageState {
  /// The state. The following are the possible values:
  ///
  /// <ul>
  /// <li>
  /// <code>pending</code> - AFI bitstream generation is in progress.
  /// </li>
  /// <li>
  /// <code>available</code> - The AFI is available for use.
  /// </li>
  /// <li>
  /// <code>failed</code> - AFI bitstream generation failed.
  /// </li>
  /// <li>
  /// <code>unavailable</code> - The AFI is no longer available for use.
  /// </li>
  /// </ul>
  final FpgaImageStateCode code;

  /// If the state is <code>failed</code>, this is the error message.
  final String message;

  FpgaImageState({
    this.code,
    this.message,
  });
}

enum FpgaImageStateCode {
  pending,
  failed,
  available,
  unavailable,
}

/// Describes the FPGAs for the instance type.
class FpgaInfo {
  /// Describes the FPGAs for the instance type.
  final List<FpgaDeviceInfo> fpgas;

  /// The total memory of all FPGA accelerators for the instance type.
  final int totalFpgaMemoryInMiB;

  FpgaInfo({
    this.fpgas,
    this.totalFpgaMemoryInMiB,
  });
}

enum GatewayType {
  ipsec_1,
}

class GetAssociatedIpv6PoolCidrsResult {
  /// Information about the IPv6 CIDR block associations.
  final List<Ipv6CidrAssociation> ipv6CidrAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  GetAssociatedIpv6PoolCidrsResult({
    this.ipv6CidrAssociations,
    this.nextToken,
  });
}

class GetCapacityReservationUsageResult {
  /// The remaining capacity. Indicates the number of instances that can be
  /// launched in the Capacity Reservation.
  final int availableInstanceCount;

  /// The ID of the Capacity Reservation.
  final String capacityReservationId;

  /// The type of instance for which the Capacity Reservation reserves capacity.
  final String instanceType;

  /// Information about the Capacity Reservation usage.
  final List<InstanceUsage> instanceUsages;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// The current state of the Capacity Reservation. A Capacity Reservation can be
  /// in one of the following states:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - The Capacity Reservation is active and the capacity is
  /// available for your use.
  /// </li>
  /// <li>
  /// <code>expired</code> - The Capacity Reservation expired automatically at the
  /// date and time specified in your request. The reserved capacity is no longer
  /// available for your use.
  /// </li>
  /// <li>
  /// <code>cancelled</code> - The Capacity Reservation was manually cancelled.
  /// The reserved capacity is no longer available for your use.
  /// </li>
  /// <li>
  /// <code>pending</code> - The Capacity Reservation request was successful but
  /// the capacity provisioning is still pending.
  /// </li>
  /// <li>
  /// <code>failed</code> - The Capacity Reservation request has failed. A request
  /// might fail due to invalid request parameters, capacity constraints, or
  /// instance limit constraints. Failed requests are retained for 60 minutes.
  /// </li>
  /// </ul>
  final CapacityReservationState state;

  /// The number of instances for which the Capacity Reservation reserves
  /// capacity.
  final int totalInstanceCount;

  GetCapacityReservationUsageResult({
    this.availableInstanceCount,
    this.capacityReservationId,
    this.instanceType,
    this.instanceUsages,
    this.nextToken,
    this.state,
    this.totalInstanceCount,
  });
}

class GetCoipPoolUsageResult {
  /// Information about the address usage.
  final List<CoipAddressUsage> coipAddressUsages;

  /// The ID of the customer-owned address pool.
  final String coipPoolId;

  /// The ID of the local gateway route table.
  final String localGatewayRouteTableId;

  GetCoipPoolUsageResult({
    this.coipAddressUsages,
    this.coipPoolId,
    this.localGatewayRouteTableId,
  });
}

class GetConsoleOutputResult {
  /// The ID of the instance.
  final String instanceId;

  /// The console output, base64-encoded. If you are using a command line tool,
  /// the tool decodes the output for you.
  final String output;

  /// The time at which the output was last updated.
  final DateTime timestamp;

  GetConsoleOutputResult({
    this.instanceId,
    this.output,
    this.timestamp,
  });
}

class GetConsoleScreenshotResult {
  /// The data that comprises the image.
  final String imageData;

  /// The ID of the instance.
  final String instanceId;

  GetConsoleScreenshotResult({
    this.imageData,
    this.instanceId,
  });
}

class GetDefaultCreditSpecificationResult {
  /// The default credit option for CPU usage of the instance family.
  final InstanceFamilyCreditSpecification instanceFamilyCreditSpecification;

  GetDefaultCreditSpecificationResult({
    this.instanceFamilyCreditSpecification,
  });
}

class GetEbsDefaultKmsKeyIdResult {
  /// The Amazon Resource Name (ARN) of the default CMK for encryption by default.
  final String kmsKeyId;

  GetEbsDefaultKmsKeyIdResult({
    this.kmsKeyId,
  });
}

class GetEbsEncryptionByDefaultResult {
  /// Indicates whether encryption by default is enabled.
  final bool ebsEncryptionByDefault;

  GetEbsEncryptionByDefaultResult({
    this.ebsEncryptionByDefault,
  });
}

class GetHostReservationPurchasePreviewResult {
  /// The currency in which the <code>totalUpfrontPrice</code> and
  /// <code>totalHourlyPrice</code> amounts are specified. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues currencyCode;

  /// The purchase information of the Dedicated Host reservation and the Dedicated
  /// Hosts associated with it.
  final List<Purchase> purchase;

  /// The potential total hourly price of the reservation per hour.
  final String totalHourlyPrice;

  /// The potential total upfront price. This is billed immediately.
  final String totalUpfrontPrice;

  GetHostReservationPurchasePreviewResult({
    this.currencyCode,
    this.purchase,
    this.totalHourlyPrice,
    this.totalUpfrontPrice,
  });
}

class GetLaunchTemplateDataResult {
  /// The instance data.
  final ResponseLaunchTemplateData launchTemplateData;

  GetLaunchTemplateDataResult({
    this.launchTemplateData,
  });
}

class GetPasswordDataResult {
  /// The ID of the Windows instance.
  final String instanceId;

  /// The password of the instance. Returns an empty string if the password is not
  /// available.
  final String passwordData;

  /// The time the data was last updated.
  final DateTime timestamp;

  GetPasswordDataResult({
    this.instanceId,
    this.passwordData,
    this.timestamp,
  });
}

/// Contains the output of GetReservedInstancesExchangeQuote.
class GetReservedInstancesExchangeQuoteResult {
  /// The currency of the transaction.
  final String currencyCode;

  /// If <code>true</code>, the exchange is valid. If <code>false</code>, the
  /// exchange cannot be completed.
  final bool isValidExchange;

  /// The new end date of the reservation term.
  final DateTime outputReservedInstancesWillExpireAt;

  /// The total true upfront charge for the exchange.
  final String paymentDue;

  /// The cost associated with the Reserved Instance.
  final ReservationValue reservedInstanceValueRollup;

  /// The configuration of your Convertible Reserved Instances.
  final List<ReservedInstanceReservationValue> reservedInstanceValueSet;

  /// The cost associated with the Reserved Instance.
  final ReservationValue targetConfigurationValueRollup;

  /// The values of the target Convertible Reserved Instances.
  final List<TargetReservationValue> targetConfigurationValueSet;

  /// Describes the reason why the exchange cannot be completed.
  final String validationFailureReason;

  GetReservedInstancesExchangeQuoteResult({
    this.currencyCode,
    this.isValidExchange,
    this.outputReservedInstancesWillExpireAt,
    this.paymentDue,
    this.reservedInstanceValueRollup,
    this.reservedInstanceValueSet,
    this.targetConfigurationValueRollup,
    this.targetConfigurationValueSet,
    this.validationFailureReason,
  });
}

class GetTransitGatewayAttachmentPropagationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the propagation route tables.
  final List<TransitGatewayAttachmentPropagation>
      transitGatewayAttachmentPropagations;

  GetTransitGatewayAttachmentPropagationsResult({
    this.nextToken,
    this.transitGatewayAttachmentPropagations,
  });
}

class GetTransitGatewayMulticastDomainAssociationsResult {
  /// Information about the multicast domain associations.
  final List<TransitGatewayMulticastDomainAssociation>
      multicastDomainAssociations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  GetTransitGatewayMulticastDomainAssociationsResult({
    this.multicastDomainAssociations,
    this.nextToken,
  });
}

class GetTransitGatewayRouteTableAssociationsResult {
  /// Information about the associations.
  final List<TransitGatewayRouteTableAssociation> associations;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  GetTransitGatewayRouteTableAssociationsResult({
    this.associations,
    this.nextToken,
  });
}

class GetTransitGatewayRouteTablePropagationsResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the route table propagations.
  final List<TransitGatewayRouteTablePropagation>
      transitGatewayRouteTablePropagations;

  GetTransitGatewayRouteTablePropagationsResult({
    this.nextToken,
    this.transitGatewayRouteTablePropagations,
  });
}

/// Describes the GPU accelerators for the instance type.
class GpuDeviceInfo {
  /// The number of GPUs for the instance type.
  final int count;

  /// The manufacturer of the GPU accelerator.
  final String manufacturer;

  /// Describes the memory available to the GPU accelerator.
  final GpuDeviceMemoryInfo memoryInfo;

  /// The name of the GPU accelerator.
  final String name;

  GpuDeviceInfo({
    this.count,
    this.manufacturer,
    this.memoryInfo,
    this.name,
  });
}

/// Describes the memory available to the GPU accelerator.
class GpuDeviceMemoryInfo {
  /// The size (in MiB) for the memory available to the GPU accelerator.
  final int sizeInMiB;

  GpuDeviceMemoryInfo({
    this.sizeInMiB,
  });
}

/// Describes the GPU accelerators for the instance type.
class GpuInfo {
  /// Describes the GPU accelerators for the instance type.
  final List<GpuDeviceInfo> gpus;

  /// The total size of the memory for the GPU accelerators for the instance type.
  final int totalGpuMemoryInMiB;

  GpuInfo({
    this.gpus,
    this.totalGpuMemoryInMiB,
  });
}

/// Describes a security group.
class GroupIdentifier {
  /// The ID of the security group.
  final String groupId;

  /// The name of the security group.
  final String groupName;

  GroupIdentifier({
    this.groupId,
    this.groupName,
  });
}

/// Indicates whether your instance is configured for hibernation. This
/// parameter is valid only if the instance meets the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation
/// prerequisites</a>. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
/// Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
class HibernationOptions {
  /// If this parameter is set to <code>true</code>, your instance is enabled for
  /// hibernation; otherwise, it is not enabled for hibernation.
  final bool configured;

  HibernationOptions({
    this.configured,
  });
}

/// Indicates whether your instance is configured for hibernation. This
/// parameter is valid only if the instance meets the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation
/// prerequisites</a>. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
/// Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
class HibernationOptionsRequest {
  /// If you set this parameter to <code>true</code>, your instance is enabled for
  /// hibernation.
  ///
  /// Default: <code>false</code>
  final bool configured;

  HibernationOptionsRequest({
    this.configured,
  });
}

/// Describes an event in the history of the Spot Fleet request.
class HistoryRecord {
  /// Information about the event.
  final EventInformation eventInformation;

  /// The event type.
  ///
  /// <ul>
  /// <li>
  /// <code>error</code> - An error with the Spot Fleet request.
  /// </li>
  /// <li>
  /// <code>fleetRequestChange</code> - A change in the status or configuration of
  /// the Spot Fleet request.
  /// </li>
  /// <li>
  /// <code>instanceChange</code> - An instance was launched or terminated.
  /// </li>
  /// <li>
  /// <code>Information</code> - An informational event.
  /// </li>
  /// </ul>
  final EventType eventType;

  /// The date and time of the event, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime timestamp;

  HistoryRecord({
    this.eventInformation,
    this.eventType,
    this.timestamp,
  });
}

/// Describes an event in the history of an EC2 Fleet.
class HistoryRecordEntry {
  /// Information about the event.
  final EventInformation eventInformation;

  /// The event type.
  final FleetEventType eventType;

  /// The date and time of the event, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime timestamp;

  HistoryRecordEntry({
    this.eventInformation,
    this.eventType,
    this.timestamp,
  });
}

/// Describes the properties of the Dedicated Host.
class Host {
  /// The time that the Dedicated Host was allocated.
  final DateTime allocationTime;

  /// Indicates whether the Dedicated Host supports multiple instance types of the
  /// same instance family, or a specific instance type only. <code>one</code>
  /// indicates that the Dedicated Host supports multiple instance types in the
  /// instance family. <code>off</code> indicates that the Dedicated Host supports
  /// a single instance type only.
  final AllowsMultipleInstanceTypes allowsMultipleInstanceTypes;

  /// Whether auto-placement is on or off.
  final AutoPlacement autoPlacement;

  /// The Availability Zone of the Dedicated Host.
  final String availabilityZone;

  /// The ID of the Availability Zone in which the Dedicated Host is allocated.
  final String availabilityZoneId;

  /// Information about the instances running on the Dedicated Host.
  final AvailableCapacity availableCapacity;

  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  final String clientToken;

  /// The ID of the Dedicated Host.
  final String hostId;

  /// The hardware specifications of the Dedicated Host.
  final HostProperties hostProperties;

  /// Indicates whether host recovery is enabled or disabled for the Dedicated
  /// Host.
  final HostRecovery hostRecovery;

  /// The reservation ID of the Dedicated Host. This returns a <code>null</code>
  /// response if the Dedicated Host doesn't have an associated reservation.
  final String hostReservationId;

  /// The IDs and instance type that are currently running on the Dedicated Host.
  final List<HostInstance> instances;

  /// Indicates whether the Dedicated Host is in a host resource group. If
  /// <b>memberOfServiceLinkedResourceGroup</b> is <code>true</code>, the host is
  /// in a host resource group; otherwise, it is not.
  final bool memberOfServiceLinkedResourceGroup;

  /// The ID of the AWS account that owns the Dedicated Host.
  final String ownerId;

  /// The time that the Dedicated Host was released.
  final DateTime releaseTime;

  /// The Dedicated Host's state.
  final AllocationState state;

  /// Any tags assigned to the Dedicated Host.
  final List<Tag> tags;

  Host({
    this.allocationTime,
    this.allowsMultipleInstanceTypes,
    this.autoPlacement,
    this.availabilityZone,
    this.availabilityZoneId,
    this.availableCapacity,
    this.clientToken,
    this.hostId,
    this.hostProperties,
    this.hostRecovery,
    this.hostReservationId,
    this.instances,
    this.memberOfServiceLinkedResourceGroup,
    this.ownerId,
    this.releaseTime,
    this.state,
    this.tags,
  });
}

/// Describes an instance running on a Dedicated Host.
class HostInstance {
  /// The ID of instance that is running on the Dedicated Host.
  final String instanceId;

  /// The instance type (for example, <code>m3.medium</code>) of the running
  /// instance.
  final String instanceType;

  /// The ID of the AWS account that owns the instance.
  final String ownerId;

  HostInstance({
    this.instanceId,
    this.instanceType,
    this.ownerId,
  });
}

/// Details about the Dedicated Host Reservation offering.
class HostOffering {
  /// The currency of the offering.
  final CurrencyCodeValues currencyCode;

  /// The duration of the offering (in seconds).
  final int duration;

  /// The hourly price of the offering.
  final String hourlyPrice;

  /// The instance family of the offering.
  final String instanceFamily;

  /// The ID of the offering.
  final String offeringId;

  /// The available payment option.
  final PaymentOption paymentOption;

  /// The upfront price of the offering. Does not apply to No Upfront offerings.
  final String upfrontPrice;

  HostOffering({
    this.currencyCode,
    this.duration,
    this.hourlyPrice,
    this.instanceFamily,
    this.offeringId,
    this.paymentOption,
    this.upfrontPrice,
  });
}

/// Describes the properties of a Dedicated Host.
class HostProperties {
  /// The number of cores on the Dedicated Host.
  final int cores;

  /// The instance family supported by the Dedicated Host. For example,
  /// <code>m5</code>.
  final String instanceFamily;

  /// The instance type supported by the Dedicated Host. For example,
  /// <code>m5.large</code>. If the host supports multiple instance types, no
  /// <b>instanceType</b> is returned.
  final String instanceType;

  /// The number of sockets on the Dedicated Host.
  final int sockets;

  /// The total number of vCPUs on the Dedicated Host.
  final int totalVCpus;

  HostProperties({
    this.cores,
    this.instanceFamily,
    this.instanceType,
    this.sockets,
    this.totalVCpus,
  });
}

enum HostRecovery {
  on,
  off,
}

/// Details about the Dedicated Host Reservation and associated Dedicated Hosts.
class HostReservation {
  /// The number of Dedicated Hosts the reservation is associated with.
  final int count;

  /// The currency in which the <code>upfrontPrice</code> and
  /// <code>hourlyPrice</code> amounts are specified. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues currencyCode;

  /// The length of the reservation's term, specified in seconds. Can be
  /// <code>31536000 (1 year)</code> | <code>94608000 (3 years)</code>.
  final int duration;

  /// The date and time that the reservation ends.
  final DateTime end;

  /// The IDs of the Dedicated Hosts associated with the reservation.
  final List<String> hostIdSet;

  /// The ID of the reservation that specifies the associated Dedicated Hosts.
  final String hostReservationId;

  /// The hourly price of the reservation.
  final String hourlyPrice;

  /// The instance family of the Dedicated Host Reservation. The instance family
  /// on the Dedicated Host must be the same in order for it to benefit from the
  /// reservation.
  final String instanceFamily;

  /// The ID of the reservation. This remains the same regardless of which
  /// Dedicated Hosts are associated with it.
  final String offeringId;

  /// The payment option selected for this reservation.
  final PaymentOption paymentOption;

  /// The date and time that the reservation started.
  final DateTime start;

  /// The state of the reservation.
  final ReservationState state;

  /// Any tags assigned to the Dedicated Host Reservation.
  final List<Tag> tags;

  /// The upfront price of the reservation.
  final String upfrontPrice;

  HostReservation({
    this.count,
    this.currencyCode,
    this.duration,
    this.end,
    this.hostIdSet,
    this.hostReservationId,
    this.hourlyPrice,
    this.instanceFamily,
    this.offeringId,
    this.paymentOption,
    this.start,
    this.state,
    this.tags,
    this.upfrontPrice,
  });
}

enum HostTenancy {
  dedicated,
  host,
}

enum HttpTokensState {
  optional,
  required,
}

enum HypervisorType {
  ovm,
  xen,
}

/// The internet key exchange (IKE) version permitted for the VPN tunnel.
class IKEVersionsListValue {
  /// The IKE version.
  final String value;

  IKEVersionsListValue({
    this.value,
  });
}

/// The IKE version that is permitted for the VPN tunnel.
class IKEVersionsRequestListValue {
  /// The IKE version.
  final String value;

  IKEVersionsRequestListValue({
    this.value,
  });
}

/// Describes an IAM instance profile.
class IamInstanceProfile {
  /// The Amazon Resource Name (ARN) of the instance profile.
  final String arn;

  /// The ID of the instance profile.
  final String id;

  IamInstanceProfile({
    this.arn,
    this.id,
  });
}

/// Describes an association between an IAM instance profile and an instance.
class IamInstanceProfileAssociation {
  /// The ID of the association.
  final String associationId;

  /// The IAM instance profile.
  final IamInstanceProfile iamInstanceProfile;

  /// The ID of the instance.
  final String instanceId;

  /// The state of the association.
  final IamInstanceProfileAssociationState state;

  /// The time the IAM instance profile was associated with the instance.
  final DateTime timestamp;

  IamInstanceProfileAssociation({
    this.associationId,
    this.iamInstanceProfile,
    this.instanceId,
    this.state,
    this.timestamp,
  });
}

enum IamInstanceProfileAssociationState {
  associating,
  associated,
  disassociating,
  disassociated,
}

/// Describes an IAM instance profile.
class IamInstanceProfileSpecification {
  /// The Amazon Resource Name (ARN) of the instance profile.
  final String arn;

  /// The name of the instance profile.
  final String name;

  IamInstanceProfileSpecification({
    this.arn,
    this.name,
  });
}

/// Describes the ICMP type and code.
class IcmpTypeCode {
  /// The ICMP code. A value of -1 means all codes for the specified ICMP type.
  final int code;

  /// The ICMP type. A value of -1 means all types.
  final int type;

  IcmpTypeCode({
    this.code,
    this.type,
  });
}

/// Describes the ID format for a resource.
class IdFormat {
  /// The date in UTC at which you are permanently switched over to using longer
  /// IDs. If a deadline is not yet available for this resource type, this field
  /// is not returned.
  final DateTime deadline;

  /// The type of resource.
  final String resource;

  /// Indicates whether longer IDs (17-character IDs) are enabled for the
  /// resource.
  final bool useLongIds;

  IdFormat({
    this.deadline,
    this.resource,
    this.useLongIds,
  });
}

/// Describes an image.
class Image {
  /// The architecture of the image.
  final ArchitectureValues architecture;

  /// Any block device mapping entries.
  final List<BlockDeviceMapping> blockDeviceMappings;

  /// The date and time the image was created.
  final String creationDate;

  /// The description of the AMI that was provided during image creation.
  final String description;

  /// Specifies whether enhanced networking with ENA is enabled.
  final bool enaSupport;

  /// The hypervisor type of the image.
  final HypervisorType hypervisor;

  /// The ID of the AMI.
  final String imageId;

  /// The location of the AMI.
  final String imageLocation;

  /// The AWS account alias (for example, <code>amazon</code>, <code>self</code>)
  /// or the AWS account ID of the AMI owner.
  final String imageOwnerAlias;

  /// The type of image.
  final ImageTypeValues imageType;

  /// The kernel associated with the image, if any. Only applicable for machine
  /// images.
  final String kernelId;

  /// The name of the AMI that was provided during image creation.
  final String name;

  /// The AWS account ID of the image owner.
  final String ownerId;

  /// This value is set to <code>windows</code> for Windows AMIs; otherwise, it is
  /// blank.
  final PlatformValues platform;

  /// The platform details associated with the billing code of the AMI. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Obtaining
  /// Billing Information</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  final String platformDetails;

  /// Any product codes associated with the AMI.
  final List<ProductCode> productCodes;

  /// Indicates whether the image has public launch permissions. The value is
  /// <code>true</code> if this image has public launch permissions or
  /// <code>false</code> if it has only implicit and explicit launch permissions.
  final bool public;

  /// The RAM disk associated with the image, if any. Only applicable for machine
  /// images.
  final String ramdiskId;

  /// The device name of the root device volume (for example,
  /// <code>/dev/sda1</code>).
  final String rootDeviceName;

  /// The type of root device used by the AMI. The AMI can use an EBS volume or an
  /// instance store volume.
  final DeviceType rootDeviceType;

  /// Specifies whether enhanced networking with the Intel 82599 Virtual Function
  /// interface is enabled.
  final String sriovNetSupport;

  /// The current state of the AMI. If the state is <code>available</code>, the
  /// image is successfully registered and can be used to launch an instance.
  final ImageState state;

  /// The reason for the state change.
  final StateReason stateReason;

  /// Any tags assigned to the image.
  final List<Tag> tags;

  /// The operation of the Amazon EC2 instance and the billing code that is
  /// associated with the AMI. <code>usageOperation</code> corresponds to the <a
  /// href="https://docs.aws.amazon.com/cur/latest/userguide/Lineitem-columns.html#Lineitem-details-O-Operation">lineitem/Operation</a>
  /// column on your AWS Cost and Usage Report and in the <a
  /// href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html">AWS
  /// Price List API</a>. For the list of <code>UsageOperation</code> codes, see
  /// <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html#billing-info">Platform
  /// Details and Usage Operation Billing Codes</a> in the <i>Amazon Elastic
  /// Compute Cloud User Guide</i>.
  final String usageOperation;

  /// The type of virtualization of the AMI.
  final VirtualizationType virtualizationType;

  Image({
    this.architecture,
    this.blockDeviceMappings,
    this.creationDate,
    this.description,
    this.enaSupport,
    this.hypervisor,
    this.imageId,
    this.imageLocation,
    this.imageOwnerAlias,
    this.imageType,
    this.kernelId,
    this.name,
    this.ownerId,
    this.platform,
    this.platformDetails,
    this.productCodes,
    this.public,
    this.ramdiskId,
    this.rootDeviceName,
    this.rootDeviceType,
    this.sriovNetSupport,
    this.state,
    this.stateReason,
    this.tags,
    this.usageOperation,
    this.virtualizationType,
  });
}

/// Describes an image attribute.
class ImageAttribute {
  /// The block device mapping entries.
  final List<BlockDeviceMapping> blockDeviceMappings;

  /// A description for the AMI.
  final AttributeValue description;

  /// The ID of the AMI.
  final String imageId;

  /// The kernel ID.
  final AttributeValue kernelId;

  /// The launch permissions.
  final List<LaunchPermission> launchPermissions;

  /// The product codes.
  final List<ProductCode> productCodes;

  /// The RAM disk ID.
  final AttributeValue ramdiskId;

  /// Indicates whether enhanced networking with the Intel 82599 Virtual Function
  /// interface is enabled.
  final AttributeValue sriovNetSupport;

  ImageAttribute({
    this.blockDeviceMappings,
    this.description,
    this.imageId,
    this.kernelId,
    this.launchPermissions,
    this.productCodes,
    this.ramdiskId,
    this.sriovNetSupport,
  });
}

enum ImageAttributeName {
  description,
  kernel,
  ramdisk,
  launchPermission,
  productCodes,
  blockDeviceMapping,
  sriovNetSupport,
}

/// Describes the disk container object for an import image task.
class ImageDiskContainer {
  /// The description of the disk image.
  final String description;

  /// The block device mapping for the disk.
  final String deviceName;

  /// The format of the disk image being imported.
  ///
  /// Valid values: <code>VHD</code> | <code>VMDK</code> | <code>OVA</code>
  final String format;

  /// The ID of the EBS snapshot to be used for importing the snapshot.
  final String snapshotId;

  /// The URL to the Amazon S3-based disk image being imported. The URL can either
  /// be a https URL (https://..) or an Amazon S3 URL (s3://..)
  final String url;

  /// The S3 bucket for the disk image.
  final UserBucket userBucket;

  ImageDiskContainer({
    this.description,
    this.deviceName,
    this.format,
    this.snapshotId,
    this.url,
    this.userBucket,
  });
}

enum ImageState {
  pending,
  available,
  invalid,
  deregistered,
  transient,
  failed,
  error,
}

enum ImageTypeValues {
  machine,
  kernel,
  ramdisk,
}

class ImportClientVpnClientCertificateRevocationListResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  ImportClientVpnClientCertificateRevocationListResult({
    this.returnValue,
  });
}

/// The request information of license configurations.
class ImportImageLicenseConfigurationRequest {
  /// The ARN of a license configuration.
  final String licenseConfigurationArn;

  ImportImageLicenseConfigurationRequest({
    this.licenseConfigurationArn,
  });
}

/// The response information for license configurations.
class ImportImageLicenseConfigurationResponse {
  /// The ARN of a license configuration.
  final String licenseConfigurationArn;

  ImportImageLicenseConfigurationResponse({
    this.licenseConfigurationArn,
  });
}

class ImportImageResult {
  /// The architecture of the virtual machine.
  final String architecture;

  /// A description of the import task.
  final String description;

  /// Indicates whether the AMI is encypted.
  final bool encrypted;

  /// The target hypervisor of the import task.
  final String hypervisor;

  /// The ID of the Amazon Machine Image (AMI) created by the import task.
  final String imageId;

  /// The task ID of the import image task.
  final String importTaskId;

  /// The identifier for the symmetric AWS Key Management Service (AWS KMS)
  /// customer master key (CMK) that was used to create the encrypted AMI.
  final String kmsKeyId;

  /// The ARNs of the license configurations.
  final List<ImportImageLicenseConfigurationResponse> licenseSpecifications;

  /// The license type of the virtual machine.
  final String licenseType;

  /// The operating system of the virtual machine.
  final String platform;

  /// The progress of the task.
  final String progress;

  /// Information about the snapshots.
  final List<SnapshotDetail> snapshotDetails;

  /// A brief status of the task.
  final String status;

  /// A detailed status message of the import task.
  final String statusMessage;

  ImportImageResult({
    this.architecture,
    this.description,
    this.encrypted,
    this.hypervisor,
    this.imageId,
    this.importTaskId,
    this.kmsKeyId,
    this.licenseSpecifications,
    this.licenseType,
    this.platform,
    this.progress,
    this.snapshotDetails,
    this.status,
    this.statusMessage,
  });
}

/// Describes an import image task.
class ImportImageTask {
  /// The architecture of the virtual machine.
  ///
  /// Valid values: <code>i386</code> | <code>x86_64</code> | <code>arm64</code>
  final String architecture;

  /// A description of the import task.
  final String description;

  /// Indicates whether the image is encrypted.
  final bool encrypted;

  /// The target hypervisor for the import task.
  ///
  /// Valid values: <code>xen</code>
  final String hypervisor;

  /// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
  final String imageId;

  /// The ID of the import image task.
  final String importTaskId;

  /// The identifier for the AWS Key Management Service (AWS KMS) customer master
  /// key (CMK) that was used to create the encrypted image.
  final String kmsKeyId;

  /// The ARNs of the license configurations that are associated with the import
  /// image task.
  final List<ImportImageLicenseConfigurationResponse> licenseSpecifications;

  /// The license type of the virtual machine.
  final String licenseType;

  /// The description string for the import image task.
  final String platform;

  /// The percentage of progress of the import image task.
  final String progress;

  /// Information about the snapshots.
  final List<SnapshotDetail> snapshotDetails;

  /// A brief status for the import image task.
  final String status;

  /// A descriptive status message for the import image task.
  final String statusMessage;

  /// The tags for the import image task.
  final List<Tag> tags;

  ImportImageTask({
    this.architecture,
    this.description,
    this.encrypted,
    this.hypervisor,
    this.imageId,
    this.importTaskId,
    this.kmsKeyId,
    this.licenseSpecifications,
    this.licenseType,
    this.platform,
    this.progress,
    this.snapshotDetails,
    this.status,
    this.statusMessage,
    this.tags,
  });
}

/// Describes the launch specification for VM import.
class ImportInstanceLaunchSpecification {
  /// Reserved.
  final String additionalInfo;

  /// The architecture of the instance.
  final ArchitectureValues architecture;

  /// The security group IDs.
  final List<String> groupIds;

  /// The security group names.
  final List<String> groupNames;

  /// Indicates whether an instance stops or terminates when you initiate shutdown
  /// from the instance (using the operating system command for system shutdown).
  final ShutdownBehavior instanceInitiatedShutdownBehavior;

  /// The instance type. For more information about the instance types that you
  /// can import, see <a
  /// href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types">Instance
  /// Types</a> in the VM Import/Export User Guide.
  final InstanceType instanceType;

  /// Indicates whether monitoring is enabled.
  final bool monitoring;

  /// The placement information for the instance.
  final Placement placement;

  /// [EC2-VPC] An available IP address from the IP address range of the subnet.
  final String privateIpAddress;

  /// [EC2-VPC] The ID of the subnet in which to launch the instance.
  final String subnetId;

  /// The Base64-encoded user data to make available to the instance.
  final UserData userData;

  ImportInstanceLaunchSpecification({
    this.additionalInfo,
    this.architecture,
    this.groupIds,
    this.groupNames,
    this.instanceInitiatedShutdownBehavior,
    this.instanceType,
    this.monitoring,
    this.placement,
    this.privateIpAddress,
    this.subnetId,
    this.userData,
  });
}

class ImportInstanceResult {
  /// Information about the conversion task.
  final ConversionTask conversionTask;

  ImportInstanceResult({
    this.conversionTask,
  });
}

/// Describes an import instance task.
class ImportInstanceTaskDetails {
  /// A description of the task.
  final String description;

  /// The ID of the instance.
  final String instanceId;

  /// The instance operating system.
  final PlatformValues platform;

  /// The volumes.
  final List<ImportInstanceVolumeDetailItem> volumes;

  ImportInstanceTaskDetails({
    this.description,
    this.instanceId,
    this.platform,
    this.volumes,
  });
}

/// Describes an import volume task.
class ImportInstanceVolumeDetailItem {
  /// The Availability Zone where the resulting instance will reside.
  final String availabilityZone;

  /// The number of bytes converted so far.
  final int bytesConverted;

  /// A description of the task.
  final String description;

  /// The image.
  final DiskImageDescription image;

  /// The status of the import of this particular disk image.
  final String status;

  /// The status information or errors related to the disk image.
  final String statusMessage;

  /// The volume.
  final DiskImageVolumeDescription volume;

  ImportInstanceVolumeDetailItem({
    this.availabilityZone,
    this.bytesConverted,
    this.description,
    this.image,
    this.status,
    this.statusMessage,
    this.volume,
  });
}

class ImportKeyPairResult {
  /// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
  final String keyFingerprint;

  /// The key pair name you provided.
  final String keyName;

  /// The ID of the resulting key pair.
  final String keyPairId;

  /// The tags applied to the imported key pair.
  final List<Tag> tags;

  ImportKeyPairResult({
    this.keyFingerprint,
    this.keyName,
    this.keyPairId,
    this.tags,
  });
}

class ImportSnapshotResult {
  /// A description of the import snapshot task.
  final String description;

  /// The ID of the import snapshot task.
  final String importTaskId;

  /// Information about the import snapshot task.
  final SnapshotTaskDetail snapshotTaskDetail;

  ImportSnapshotResult({
    this.description,
    this.importTaskId,
    this.snapshotTaskDetail,
  });
}

/// Describes an import snapshot task.
class ImportSnapshotTask {
  /// A description of the import snapshot task.
  final String description;

  /// The ID of the import snapshot task.
  final String importTaskId;

  /// Describes an import snapshot task.
  final SnapshotTaskDetail snapshotTaskDetail;

  /// The tags for the import snapshot task.
  final List<Tag> tags;

  ImportSnapshotTask({
    this.description,
    this.importTaskId,
    this.snapshotTaskDetail,
    this.tags,
  });
}

class ImportVolumeResult {
  /// Information about the conversion task.
  final ConversionTask conversionTask;

  ImportVolumeResult({
    this.conversionTask,
  });
}

/// Describes an import volume task.
class ImportVolumeTaskDetails {
  /// The Availability Zone where the resulting volume will reside.
  final String availabilityZone;

  /// The number of bytes converted so far.
  final int bytesConverted;

  /// The description you provided when starting the import volume task.
  final String description;

  /// The image.
  final DiskImageDescription image;

  /// The volume.
  final DiskImageVolumeDescription volume;

  ImportVolumeTaskDetails({
    this.availabilityZone,
    this.bytesConverted,
    this.description,
    this.image,
    this.volume,
  });
}

/// Describes the Inference accelerators for the instance type.
class InferenceAcceleratorInfo {
  /// Describes the Inference accelerators for the instance type.
  final List<InferenceDeviceInfo> accelerators;

  InferenceAcceleratorInfo({
    this.accelerators,
  });
}

/// Describes the Inference accelerators for the instance type.
class InferenceDeviceInfo {
  /// The number of Inference accelerators for the instance type.
  final int count;

  /// The manufacturer of the Inference accelerator.
  final String manufacturer;

  /// The name of the Inference accelerator.
  final String name;

  InferenceDeviceInfo({
    this.count,
    this.manufacturer,
    this.name,
  });
}

/// Describes an instance.
class Instance {
  /// The AMI launch index, which can be used to find this instance in the launch
  /// group.
  final int amiLaunchIndex;

  /// The architecture of the image.
  final ArchitectureValues architecture;

  /// Any block device mapping entries for the instance.
  final List<InstanceBlockDeviceMapping> blockDeviceMappings;

  /// The ID of the Capacity Reservation.
  final String capacityReservationId;

  /// Information about the Capacity Reservation targeting option.
  final CapacityReservationSpecificationResponse
      capacityReservationSpecification;

  /// The idempotency token you provided when you launched the instance, if
  /// applicable.
  final String clientToken;

  /// The CPU options for the instance.
  final CpuOptions cpuOptions;

  /// Indicates whether the instance is optimized for Amazon EBS I/O. This
  /// optimization provides dedicated throughput to Amazon EBS and an optimized
  /// configuration stack to provide optimal I/O performance. This optimization
  /// isn't available with all instance types. Additional usage charges apply when
  /// using an EBS Optimized instance.
  final bool ebsOptimized;

  /// The Elastic GPU associated with the instance.
  final List<ElasticGpuAssociation> elasticGpuAssociations;

  /// The elastic inference accelerator associated with the instance.
  final List<ElasticInferenceAcceleratorAssociation>
      elasticInferenceAcceleratorAssociations;

  /// Specifies whether enhanced networking with ENA is enabled.
  final bool enaSupport;

  /// Indicates whether the instance is enabled for hibernation.
  final HibernationOptions hibernationOptions;

  /// The hypervisor type of the instance. The value <code>xen</code> is used for
  /// both Xen and Nitro hypervisors.
  final HypervisorType hypervisor;

  /// The IAM instance profile associated with the instance, if applicable.
  final IamInstanceProfile iamInstanceProfile;

  /// The ID of the AMI used to launch the instance.
  final String imageId;

  /// The ID of the instance.
  final String instanceId;

  /// Indicates whether this is a Spot Instance or a Scheduled Instance.
  final InstanceLifecycleType instanceLifecycle;

  /// The instance type.
  final InstanceType instanceType;

  /// The kernel associated with this instance, if applicable.
  final String kernelId;

  /// The name of the key pair, if this instance was launched with an associated
  /// key pair.
  final String keyName;

  /// The time the instance was launched.
  final DateTime launchTime;

  /// The license configurations.
  final List<LicenseConfiguration> licenses;

  /// The metadata options for the instance.
  final InstanceMetadataOptionsResponse metadataOptions;

  /// The monitoring for the instance.
  final Monitoring monitoring;

  /// [EC2-VPC] The network interfaces for the instance.
  final List<InstanceNetworkInterface> networkInterfaces;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String outpostArn;

  /// The location where the instance launched, if applicable.
  final Placement placement;

  /// The value is <code>Windows</code> for Windows instances; otherwise blank.
  final PlatformValues platform;

  /// (IPv4 only) The private DNS hostname name assigned to the instance. This DNS
  /// hostname can only be used inside the Amazon EC2 network. This name is not
  /// available until the instance enters the <code>running</code> state.
  ///
  /// [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private
  /// DNS hostnames if you've enabled DNS resolution and DNS hostnames in your
  /// VPC. If you are not using the Amazon-provided DNS server in your VPC, your
  /// custom domain name servers must resolve the hostname as appropriate.
  final String privateDnsName;

  /// The private IPv4 address assigned to the instance.
  final String privateIpAddress;

  /// The product codes attached to this instance, if applicable.
  final List<ProductCode> productCodes;

  /// (IPv4 only) The public DNS name assigned to the instance. This name is not
  /// available until the instance enters the <code>running</code> state. For
  /// EC2-VPC, this name is only available if you've enabled DNS hostnames for
  /// your VPC.
  final String publicDnsName;

  /// The public IPv4 address assigned to the instance, if applicable.
  final String publicIpAddress;

  /// The RAM disk associated with this instance, if applicable.
  final String ramdiskId;

  /// The device name of the root device volume (for example,
  /// <code>/dev/sda1</code>).
  final String rootDeviceName;

  /// The root device type used by the AMI. The AMI can use an EBS volume or an
  /// instance store volume.
  final DeviceType rootDeviceType;

  /// The security groups for the instance.
  final List<GroupIdentifier> securityGroups;

  /// Specifies whether to enable an instance launched in a VPC to perform NAT.
  /// This controls whether source/destination checking is enabled on the
  /// instance. A value of <code>true</code> means that checking is enabled, and
  /// <code>false</code> means that checking is disabled. The value must be
  /// <code>false</code> for the instance to perform NAT. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT
  /// Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
  final bool sourceDestCheck;

  /// If the request is a Spot Instance request, the ID of the request.
  final String spotInstanceRequestId;

  /// Specifies whether enhanced networking with the Intel 82599 Virtual Function
  /// interface is enabled.
  final String sriovNetSupport;

  /// The current state of the instance.
  final InstanceState state;

  /// The reason for the most recent state transition.
  final StateReason stateReason;

  /// The reason for the most recent state transition. This might be an empty
  /// string.
  final String stateTransitionReason;

  /// [EC2-VPC] The ID of the subnet in which the instance is running.
  final String subnetId;

  /// Any tags assigned to the instance.
  final List<Tag> tags;

  /// The virtualization type of the instance.
  final VirtualizationType virtualizationType;

  /// [EC2-VPC] The ID of the VPC in which the instance is running.
  final String vpcId;

  Instance({
    this.amiLaunchIndex,
    this.architecture,
    this.blockDeviceMappings,
    this.capacityReservationId,
    this.capacityReservationSpecification,
    this.clientToken,
    this.cpuOptions,
    this.ebsOptimized,
    this.elasticGpuAssociations,
    this.elasticInferenceAcceleratorAssociations,
    this.enaSupport,
    this.hibernationOptions,
    this.hypervisor,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceId,
    this.instanceLifecycle,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.launchTime,
    this.licenses,
    this.metadataOptions,
    this.monitoring,
    this.networkInterfaces,
    this.outpostArn,
    this.placement,
    this.platform,
    this.privateDnsName,
    this.privateIpAddress,
    this.productCodes,
    this.publicDnsName,
    this.publicIpAddress,
    this.ramdiskId,
    this.rootDeviceName,
    this.rootDeviceType,
    this.securityGroups,
    this.sourceDestCheck,
    this.spotInstanceRequestId,
    this.sriovNetSupport,
    this.state,
    this.stateReason,
    this.stateTransitionReason,
    this.subnetId,
    this.tags,
    this.virtualizationType,
    this.vpcId,
  });
}

/// Describes an instance attribute.
class InstanceAttribute {
  /// The block device mapping of the instance.
  final List<InstanceBlockDeviceMapping> blockDeviceMappings;

  /// If the value is <code>true</code>, you can't terminate the instance through
  /// the Amazon EC2 console, CLI, or API; otherwise, you can.
  final AttributeBooleanValue disableApiTermination;

  /// Indicates whether the instance is optimized for Amazon EBS I/O.
  final AttributeBooleanValue ebsOptimized;

  /// Indicates whether enhanced networking with ENA is enabled.
  final AttributeBooleanValue enaSupport;

  /// The security groups associated with the instance.
  final List<GroupIdentifier> groups;

  /// The ID of the instance.
  final String instanceId;

  /// Indicates whether an instance stops or terminates when you initiate shutdown
  /// from the instance (using the operating system command for system shutdown).
  final AttributeValue instanceInitiatedShutdownBehavior;

  /// The instance type.
  final AttributeValue instanceType;

  /// The kernel ID.
  final AttributeValue kernelId;

  /// A list of product codes.
  final List<ProductCode> productCodes;

  /// The RAM disk ID.
  final AttributeValue ramdiskId;

  /// The device name of the root device volume (for example,
  /// <code>/dev/sda1</code>).
  final AttributeValue rootDeviceName;

  /// Indicates whether source/destination checking is enabled. A value of
  /// <code>true</code> means that checking is enabled, and <code>false</code>
  /// means that checking is disabled. This value must be <code>false</code> for a
  /// NAT instance to perform NAT.
  final AttributeBooleanValue sourceDestCheck;

  /// Indicates whether enhanced networking with the Intel 82599 Virtual Function
  /// interface is enabled.
  final AttributeValue sriovNetSupport;

  /// The user data.
  final AttributeValue userData;

  InstanceAttribute({
    this.blockDeviceMappings,
    this.disableApiTermination,
    this.ebsOptimized,
    this.enaSupport,
    this.groups,
    this.instanceId,
    this.instanceInitiatedShutdownBehavior,
    this.instanceType,
    this.kernelId,
    this.productCodes,
    this.ramdiskId,
    this.rootDeviceName,
    this.sourceDestCheck,
    this.sriovNetSupport,
    this.userData,
  });
}

enum InstanceAttributeName {
  instanceType,
  kernel,
  ramdisk,
  userData,
  disableApiTermination,
  instanceInitiatedShutdownBehavior,
  rootDeviceName,
  blockDeviceMapping,
  productCodes,
  sourceDestCheck,
  groupSet,
  ebsOptimized,
  sriovNetSupport,
  enaSupport,
}

/// Describes a block device mapping.
class InstanceBlockDeviceMapping {
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  final String deviceName;

  /// Parameters used to automatically set up EBS volumes when the instance is
  /// launched.
  final EbsInstanceBlockDevice ebs;

  InstanceBlockDeviceMapping({
    this.deviceName,
    this.ebs,
  });
}

/// Describes a block device mapping entry.
class InstanceBlockDeviceMappingSpecification {
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  final String deviceName;

  /// Parameters used to automatically set up EBS volumes when the instance is
  /// launched.
  final EbsInstanceBlockDeviceSpecification ebs;

  /// suppress the specified device included in the block device mapping.
  final String noDevice;

  /// The virtual device name.
  final String virtualName;

  InstanceBlockDeviceMappingSpecification({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });
}

/// Information about the number of instances that can be launched onto the
/// Dedicated Host.
class InstanceCapacity {
  /// The number of instances that can be launched onto the Dedicated Host based
  /// on the host's available capacity.
  final int availableCapacity;

  /// The instance type supported by the Dedicated Host.
  final String instanceType;

  /// The total number of instances that can be launched onto the Dedicated Host
  /// if there are no instances running on it.
  final int totalCapacity;

  InstanceCapacity({
    this.availableCapacity,
    this.instanceType,
    this.totalCapacity,
  });
}

/// Describes a Reserved Instance listing state.
class InstanceCount {
  /// The number of listed Reserved Instances in the state specified by the
  /// <code>state</code>.
  final int instanceCount;

  /// The states of the listed Reserved Instances.
  final ListingState state;

  InstanceCount({
    this.instanceCount,
    this.state,
  });
}

/// Describes the credit option for CPU usage of a burstable performance
/// instance.
class InstanceCreditSpecification {
  /// The credit option for CPU usage of the instance. Valid values are
  /// <code>standard</code> and <code>unlimited</code>.
  final String cpuCredits;

  /// The ID of the instance.
  final String instanceId;

  InstanceCreditSpecification({
    this.cpuCredits,
    this.instanceId,
  });
}

/// Describes the credit option for CPU usage of a burstable performance
/// instance.
class InstanceCreditSpecificationRequest {
  /// The credit option for CPU usage of the instance. Valid values are
  /// <code>standard</code> and <code>unlimited</code>.
  final String cpuCredits;

  /// The ID of the instance.
  final String instanceId;

  InstanceCreditSpecificationRequest({
    this.cpuCredits,
    this.instanceId,
  });
}

/// Describes an instance to export.
class InstanceExportDetails {
  /// The ID of the resource being exported.
  final String instanceId;

  /// The target virtualization environment.
  final ExportEnvironment targetEnvironment;

  InstanceExportDetails({
    this.instanceId,
    this.targetEnvironment,
  });
}

/// Describes the default credit option for CPU usage of a burstable performance
/// instance family.
class InstanceFamilyCreditSpecification {
  /// The default credit option for CPU usage of the instance family. Valid values
  /// are <code>standard</code> and <code>unlimited</code>.
  final String cpuCredits;

  /// The instance family.
  final UnlimitedSupportedInstanceFamily instanceFamily;

  InstanceFamilyCreditSpecification({
    this.cpuCredits,
    this.instanceFamily,
  });
}

enum InstanceHealthStatus {
  healthy,
  unhealthy,
}

enum InstanceInterruptionBehavior {
  hibernate,
  stop,
  terminate,
}

/// Describes an IPv6 address.
class InstanceIpv6Address {
  /// The IPv6 address.
  final String ipv6Address;

  InstanceIpv6Address({
    this.ipv6Address,
  });
}

/// Describes an IPv6 address.
class InstanceIpv6AddressRequest {
  /// The IPv6 address.
  final String ipv6Address;

  InstanceIpv6AddressRequest({
    this.ipv6Address,
  });
}

enum InstanceLifecycle {
  spot,
  onDemand,
}

enum InstanceLifecycleType {
  spot,
  scheduled,
}

/// Describes the market (purchasing) option for the instances.
class InstanceMarketOptionsRequest {
  /// The market type.
  final MarketType marketType;

  /// The options for Spot Instances.
  final SpotMarketOptions spotOptions;

  InstanceMarketOptionsRequest({
    this.marketType,
    this.spotOptions,
  });
}

enum InstanceMatchCriteria {
  open,
  targeted,
}

enum InstanceMetadataEndpointState {
  disabled,
  enabled,
}

/// The metadata options for the instance.
class InstanceMetadataOptionsRequest {
  /// This parameter enables or disables the HTTP metadata endpoint on your
  /// instances. If the parameter is not specified, the default state is
  /// <code>enabled</code>.
  /// <note>
  /// If you specify a value of <code>disabled</code>, you will not be able to
  /// access your instance metadata.
  /// </note>
  final InstanceMetadataEndpointState httpEndpoint;

  /// The desired HTTP PUT response hop limit for instance metadata requests. The
  /// larger the number, the further instance metadata requests can travel.
  ///
  /// Default: 1
  ///
  /// Possible values: Integers from 1 to 64
  final int httpPutResponseHopLimit;

  /// The state of token usage for your instance metadata requests. If the
  /// parameter is not specified in the request, the default state is
  /// <code>optional</code>.
  ///
  /// If the state is <code>optional</code>, you can choose to retrieve instance
  /// metadata with or without a signed token header on your request. If you
  /// retrieve the IAM role credentials without a token, the version 1.0 role
  /// credentials are returned. If you retrieve the IAM role credentials using a
  /// valid signed token, the version 2.0 role credentials are returned.
  ///
  /// If the state is <code>required</code>, you must send a signed token header
  /// with any instance metadata retrieval requests. In this state, retrieving the
  /// IAM role credentials always returns the version 2.0 credentials; the version
  /// 1.0 credentials are not available.
  final HttpTokensState httpTokens;

  InstanceMetadataOptionsRequest({
    this.httpEndpoint,
    this.httpPutResponseHopLimit,
    this.httpTokens,
  });
}

/// The metadata options for the instance.
class InstanceMetadataOptionsResponse {
  /// This parameter enables or disables the HTTP metadata endpoint on your
  /// instances. If the parameter is not specified, the default state is
  /// <code>enabled</code>.
  /// <note>
  /// If you specify a value of <code>disabled</code>, you will not be able to
  /// access your instance metadata.
  /// </note>
  final InstanceMetadataEndpointState httpEndpoint;

  /// The desired HTTP PUT response hop limit for instance metadata requests. The
  /// larger the number, the further instance metadata requests can travel.
  ///
  /// Default: 1
  ///
  /// Possible values: Integers from 1 to 64
  final int httpPutResponseHopLimit;

  /// The state of token usage for your instance metadata requests. If the
  /// parameter is not specified in the request, the default state is
  /// <code>optional</code>.
  ///
  /// If the state is <code>optional</code>, you can choose to retrieve instance
  /// metadata with or without a signed token header on your request. If you
  /// retrieve the IAM role credentials without a token, the version 1.0 role
  /// credentials are returned. If you retrieve the IAM role credentials using a
  /// valid signed token, the version 2.0 role credentials are returned.
  ///
  /// If the state is <code>required</code>, you must send a signed token header
  /// with any instance metadata retrieval requests. In this state, retrieving the
  /// IAM role credential always returns the version 2.0 credentials; the version
  /// 1.0 credentials are not available.
  final HttpTokensState httpTokens;

  /// The state of the metadata option changes.
  ///
  /// <code>pending</code> - The metadata options are being updated and the
  /// instance is not ready to process metadata traffic with the new selection.
  ///
  /// <code>applied</code> - The metadata options have been successfully applied
  /// on the instance.
  final InstanceMetadataOptionsState state;

  InstanceMetadataOptionsResponse({
    this.httpEndpoint,
    this.httpPutResponseHopLimit,
    this.httpTokens,
    this.state,
  });
}

enum InstanceMetadataOptionsState {
  pending,
  applied,
}

/// Describes the monitoring of an instance.
class InstanceMonitoring {
  /// The ID of the instance.
  final String instanceId;

  /// The monitoring for the instance.
  final Monitoring monitoring;

  InstanceMonitoring({
    this.instanceId,
    this.monitoring,
  });
}

/// Describes a network interface.
class InstanceNetworkInterface {
  /// The association information for an Elastic IPv4 associated with the network
  /// interface.
  final InstanceNetworkInterfaceAssociation association;

  /// The network interface attachment.
  final InstanceNetworkInterfaceAttachment attachment;

  /// The description.
  final String description;

  /// One or more security groups.
  final List<GroupIdentifier> groups;

  /// Describes the type of network interface.
  ///
  /// Valid values: <code>interface</code> | <code>efa</code>
  final String interfaceType;

  /// One or more IPv6 addresses associated with the network interface.
  final List<InstanceIpv6Address> ipv6Addresses;

  /// The MAC address.
  final String macAddress;

  /// The ID of the network interface.
  final String networkInterfaceId;

  /// The ID of the AWS account that created the network interface.
  final String ownerId;

  /// The private DNS name.
  final String privateDnsName;

  /// The IPv4 address of the network interface within the subnet.
  final String privateIpAddress;

  /// One or more private IPv4 addresses associated with the network interface.
  final List<InstancePrivateIpAddress> privateIpAddresses;

  /// Indicates whether to validate network traffic to or from this network
  /// interface.
  final bool sourceDestCheck;

  /// The status of the network interface.
  final NetworkInterfaceStatus status;

  /// The ID of the subnet.
  final String subnetId;

  /// The ID of the VPC.
  final String vpcId;

  InstanceNetworkInterface({
    this.association,
    this.attachment,
    this.description,
    this.groups,
    this.interfaceType,
    this.ipv6Addresses,
    this.macAddress,
    this.networkInterfaceId,
    this.ownerId,
    this.privateDnsName,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.sourceDestCheck,
    this.status,
    this.subnetId,
    this.vpcId,
  });
}

/// Describes association information for an Elastic IP address (IPv4).
class InstanceNetworkInterfaceAssociation {
  /// The ID of the owner of the Elastic IP address.
  final String ipOwnerId;

  /// The public DNS name.
  final String publicDnsName;

  /// The public IP address or Elastic IP address bound to the network interface.
  final String publicIp;

  InstanceNetworkInterfaceAssociation({
    this.ipOwnerId,
    this.publicDnsName,
    this.publicIp,
  });
}

/// Describes a network interface attachment.
class InstanceNetworkInterfaceAttachment {
  /// The time stamp when the attachment initiated.
  final DateTime attachTime;

  /// The ID of the network interface attachment.
  final String attachmentId;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool deleteOnTermination;

  /// The index of the device on the instance for the network interface
  /// attachment.
  final int deviceIndex;

  /// The attachment state.
  final AttachmentStatus status;

  InstanceNetworkInterfaceAttachment({
    this.attachTime,
    this.attachmentId,
    this.deleteOnTermination,
    this.deviceIndex,
    this.status,
  });
}

/// Describes a network interface.
class InstanceNetworkInterfaceSpecification {
  /// Indicates whether to assign a public IPv4 address to an instance you launch
  /// in a VPC. The public IP address can only be assigned to a network interface
  /// for eth0, and can only be assigned to a new network interface, not an
  /// existing one. You cannot specify more than one network interface in the
  /// request. If launching into a default subnet, the default value is
  /// <code>true</code>.
  final bool associatePublicIpAddress;

  /// If set to <code>true</code>, the interface is deleted when the instance is
  /// terminated. You can specify <code>true</code> only if creating a new network
  /// interface when launching an instance.
  final bool deleteOnTermination;

  /// The description of the network interface. Applies only if creating a network
  /// interface when launching an instance.
  final String description;

  /// The position of the network interface in the attachment order. A primary
  /// network interface has a device index of 0.
  ///
  /// If you specify a network interface when launching an instance, you must
  /// specify the device index.
  final int deviceIndex;

  /// The IDs of the security groups for the network interface. Applies only if
  /// creating a network interface when launching an instance.
  final List<String> groups;

  /// The type of network interface. To create an Elastic Fabric Adapter (EFA),
  /// specify <code>efa</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html">Elastic
  /// Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// If you are not creating an EFA, specify <code>interface</code> or omit this
  /// parameter.
  ///
  /// Valid values: <code>interface</code> | <code>efa</code>
  final String interfaceType;

  /// A number of IPv6 addresses to assign to the network interface. Amazon EC2
  /// chooses the IPv6 addresses from the range of the subnet. You cannot specify
  /// this option and the option to assign specific IPv6 addresses in the same
  /// request. You can specify this option if you've specified a minimum number of
  /// instances to launch.
  final int ipv6AddressCount;

  /// One or more IPv6 addresses to assign to the network interface. You cannot
  /// specify this option and the option to assign a number of IPv6 addresses in
  /// the same request. You cannot specify this option if you've specified a
  /// minimum number of instances to launch.
  final List<InstanceIpv6Address> ipv6Addresses;

  /// The ID of the network interface.
  ///
  /// If you are creating a Spot Fleet, omit this parameter because you can’t
  /// specify a network interface ID in a launch specification.
  final String networkInterfaceId;

  /// The private IPv4 address of the network interface. Applies only if creating
  /// a network interface when launching an instance. You cannot specify this
  /// option if you're launching more than one instance in a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>
  /// request.
  final String privateIpAddress;

  /// One or more private IPv4 addresses to assign to the network interface. Only
  /// one private IPv4 address can be designated as primary. You cannot specify
  /// this option if you're launching more than one instance in a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>
  /// request.
  final List<PrivateIpAddressSpecification> privateIpAddresses;

  /// The number of secondary private IPv4 addresses. You can't specify this
  /// option and specify more than one private IP address using the private IP
  /// addresses option. You cannot specify this option if you're launching more
  /// than one instance in a <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>
  /// request.
  final int secondaryPrivateIpAddressCount;

  /// The ID of the subnet associated with the network interface. Applies only if
  /// creating a network interface when launching an instance.
  final String subnetId;

  InstanceNetworkInterfaceSpecification({
    this.associatePublicIpAddress,
    this.deleteOnTermination,
    this.description,
    this.deviceIndex,
    this.groups,
    this.interfaceType,
    this.ipv6AddressCount,
    this.ipv6Addresses,
    this.networkInterfaceId,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.secondaryPrivateIpAddressCount,
    this.subnetId,
  });
}

/// Describes a private IPv4 address.
class InstancePrivateIpAddress {
  /// The association information for an Elastic IP address for the network
  /// interface.
  final InstanceNetworkInterfaceAssociation association;

  /// Indicates whether this IPv4 address is the primary private IP address of the
  /// network interface.
  final bool primary;

  /// The private IPv4 DNS name.
  final String privateDnsName;

  /// The private IPv4 address of the network interface.
  final String privateIpAddress;

  InstancePrivateIpAddress({
    this.association,
    this.primary,
    this.privateDnsName,
    this.privateIpAddress,
  });
}

/// The instance details to specify which volumes should be snapshotted.
class InstanceSpecification {
  /// Excludes the root volume from being snapshotted.
  final bool excludeBootVolume;

  /// The instance to specify which volumes should be snapshotted.
  final String instanceId;

  InstanceSpecification({
    this.excludeBootVolume,
    this.instanceId,
  });
}

/// Describes the current state of an instance.
class InstanceState {
  /// The state of the instance as a 16-bit unsigned integer.
  ///
  /// The high byte is all of the bits between 2^8 and (2^16)-1, which equals
  /// decimal values between 256 and 65,535. These numerical values are used for
  /// internal purposes and should be ignored.
  ///
  /// The low byte is all of the bits between 2^0 and (2^8)-1, which equals
  /// decimal values between 0 and 255.
  ///
  /// The valid values for instance-state-code will all be in the range of the low
  /// byte and they are:
  ///
  /// <ul>
  /// <li>
  /// <code>0</code> : <code>pending</code>
  /// </li>
  /// <li>
  /// <code>16</code> : <code>running</code>
  /// </li>
  /// <li>
  /// <code>32</code> : <code>shutting-down</code>
  /// </li>
  /// <li>
  /// <code>48</code> : <code>terminated</code>
  /// </li>
  /// <li>
  /// <code>64</code> : <code>stopping</code>
  /// </li>
  /// <li>
  /// <code>80</code> : <code>stopped</code>
  /// </li>
  /// </ul>
  /// You can ignore the high byte value by zeroing out all of the bits above 2^8
  /// or 256 in decimal.
  final int code;

  /// The current state of the instance.
  final InstanceStateName name;

  InstanceState({
    this.code,
    this.name,
  });
}

/// Describes an instance state change.
class InstanceStateChange {
  /// The current state of the instance.
  final InstanceState currentState;

  /// The ID of the instance.
  final String instanceId;

  /// The previous state of the instance.
  final InstanceState previousState;

  InstanceStateChange({
    this.currentState,
    this.instanceId,
    this.previousState,
  });
}

enum InstanceStateName {
  pending,
  running,
  shuttingDown,
  terminated,
  stopping,
  stopped,
}

/// Describes the status of an instance.
class InstanceStatus {
  /// The Availability Zone of the instance.
  final String availabilityZone;

  /// Any scheduled events associated with the instance.
  final List<InstanceStatusEvent> events;

  /// The ID of the instance.
  final String instanceId;

  /// The intended state of the instance. <a>DescribeInstanceStatus</a> requires
  /// that an instance be in the <code>running</code> state.
  final InstanceState instanceState;

  /// Reports impaired functionality that stems from issues internal to the
  /// instance, such as impaired reachability.
  final InstanceStatusSummary instanceStatus;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String outpostArn;

  /// Reports impaired functionality that stems from issues related to the systems
  /// that support an instance, such as hardware failures and network connectivity
  /// problems.
  final InstanceStatusSummary systemStatus;

  InstanceStatus({
    this.availabilityZone,
    this.events,
    this.instanceId,
    this.instanceState,
    this.instanceStatus,
    this.outpostArn,
    this.systemStatus,
  });
}

/// Describes the instance status.
class InstanceStatusDetails {
  /// The time when a status check failed. For an instance that was launched and
  /// impaired, this is the time when the instance was launched.
  final DateTime impairedSince;

  /// The type of instance status.
  final StatusName name;

  /// The status.
  final StatusType status;

  InstanceStatusDetails({
    this.impairedSince,
    this.name,
    this.status,
  });
}

/// Describes a scheduled event for an instance.
class InstanceStatusEvent {
  /// The event code.
  final EventCode code;

  /// A description of the event.
  ///
  /// After a scheduled event is completed, it can still be described for up to a
  /// week. If the event has been completed, this description starts with the
  /// following text: [Completed].
  final String description;

  /// The ID of the event.
  final String instanceEventId;

  /// The latest scheduled end time for the event.
  final DateTime notAfter;

  /// The earliest scheduled start time for the event.
  final DateTime notBefore;

  /// The deadline for starting the event.
  final DateTime notBeforeDeadline;

  InstanceStatusEvent({
    this.code,
    this.description,
    this.instanceEventId,
    this.notAfter,
    this.notBefore,
    this.notBeforeDeadline,
  });
}

/// Describes the status of an instance.
class InstanceStatusSummary {
  /// The system instance health or application instance health.
  final List<InstanceStatusDetails> details;

  /// The status.
  final SummaryStatus status;

  InstanceStatusSummary({
    this.details,
    this.status,
  });
}

/// Describes the disks that are available for the instance type.
class InstanceStorageInfo {
  /// Array describing the disks that are available for the instance type.
  final List<DiskInfo> disks;

  /// The total size of the disks, in GB.
  final int totalSizeInGB;

  InstanceStorageInfo({
    this.disks,
    this.totalSizeInGB,
  });
}

/// Describes the registered tag keys for the current Region.
class InstanceTagNotificationAttribute {
  /// Indicates wheter all tag keys in the current Region are registered to appear
  /// in scheduled event notifications. <code>true</code> indicates that all tag
  /// keys in the current Region are registered.
  final bool includeAllTagsOfInstance;

  /// The registered tag keys.
  final List<String> instanceTagKeys;

  InstanceTagNotificationAttribute({
    this.includeAllTagsOfInstance,
    this.instanceTagKeys,
  });
}

enum InstanceType {
  t1Micro,
  t2Nano,
  t2Micro,
  t2Small,
  t2Medium,
  t2Large,
  t2Xlarge,
  t2_2xlarge,
  t3Nano,
  t3Micro,
  t3Small,
  t3Medium,
  t3Large,
  t3Xlarge,
  t3_2xlarge,
  t3aNano,
  t3aMicro,
  t3aSmall,
  t3aMedium,
  t3aLarge,
  t3aXlarge,
  t3a_2xlarge,
  m1Small,
  m1Medium,
  m1Large,
  m1Xlarge,
  m3Medium,
  m3Large,
  m3Xlarge,
  m3_2xlarge,
  m4Large,
  m4Xlarge,
  m4_2xlarge,
  m4_4xlarge,
  m4_10xlarge,
  m4_16xlarge,
  m2Xlarge,
  m2_2xlarge,
  m2_4xlarge,
  cr1_8xlarge,
  r3Large,
  r3Xlarge,
  r3_2xlarge,
  r3_4xlarge,
  r3_8xlarge,
  r4Large,
  r4Xlarge,
  r4_2xlarge,
  r4_4xlarge,
  r4_8xlarge,
  r4_16xlarge,
  r5Large,
  r5Xlarge,
  r5_2xlarge,
  r5_4xlarge,
  r5_8xlarge,
  r5_12xlarge,
  r5_16xlarge,
  r5_24xlarge,
  r5Metal,
  r5aLarge,
  r5aXlarge,
  r5a_2xlarge,
  r5a_4xlarge,
  r5a_8xlarge,
  r5a_12xlarge,
  r5a_16xlarge,
  r5a_24xlarge,
  r5dLarge,
  r5dXlarge,
  r5d_2xlarge,
  r5d_4xlarge,
  r5d_8xlarge,
  r5d_12xlarge,
  r5d_16xlarge,
  r5d_24xlarge,
  r5dMetal,
  r5adLarge,
  r5adXlarge,
  r5ad_2xlarge,
  r5ad_4xlarge,
  r5ad_8xlarge,
  r5ad_12xlarge,
  r5ad_16xlarge,
  r5ad_24xlarge,
  x1_16xlarge,
  x1_32xlarge,
  x1eXlarge,
  x1e_2xlarge,
  x1e_4xlarge,
  x1e_8xlarge,
  x1e_16xlarge,
  x1e_32xlarge,
  i2Xlarge,
  i2_2xlarge,
  i2_4xlarge,
  i2_8xlarge,
  i3Large,
  i3Xlarge,
  i3_2xlarge,
  i3_4xlarge,
  i3_8xlarge,
  i3_16xlarge,
  i3Metal,
  i3enLarge,
  i3enXlarge,
  i3en_2xlarge,
  i3en_3xlarge,
  i3en_6xlarge,
  i3en_12xlarge,
  i3en_24xlarge,
  i3enMetal,
  hi1_4xlarge,
  hs1_8xlarge,
  c1Medium,
  c1Xlarge,
  c3Large,
  c3Xlarge,
  c3_2xlarge,
  c3_4xlarge,
  c3_8xlarge,
  c4Large,
  c4Xlarge,
  c4_2xlarge,
  c4_4xlarge,
  c4_8xlarge,
  c5Large,
  c5Xlarge,
  c5_2xlarge,
  c5_4xlarge,
  c5_9xlarge,
  c5_12xlarge,
  c5_18xlarge,
  c5_24xlarge,
  c5Metal,
  c5dLarge,
  c5dXlarge,
  c5d_2xlarge,
  c5d_4xlarge,
  c5d_9xlarge,
  c5d_12xlarge,
  c5d_18xlarge,
  c5d_24xlarge,
  c5dMetal,
  c5nLarge,
  c5nXlarge,
  c5n_2xlarge,
  c5n_4xlarge,
  c5n_9xlarge,
  c5n_18xlarge,
  cc1_4xlarge,
  cc2_8xlarge,
  g2_2xlarge,
  g2_8xlarge,
  g3_4xlarge,
  g3_8xlarge,
  g3_16xlarge,
  g3sXlarge,
  g4dnXlarge,
  g4dn_2xlarge,
  g4dn_4xlarge,
  g4dn_8xlarge,
  g4dn_12xlarge,
  g4dn_16xlarge,
  cg1_4xlarge,
  p2Xlarge,
  p2_8xlarge,
  p2_16xlarge,
  p3_2xlarge,
  p3_8xlarge,
  p3_16xlarge,
  p3dn_24xlarge,
  d2Xlarge,
  d2_2xlarge,
  d2_4xlarge,
  d2_8xlarge,
  f1_2xlarge,
  f1_4xlarge,
  f1_16xlarge,
  m5Large,
  m5Xlarge,
  m5_2xlarge,
  m5_4xlarge,
  m5_8xlarge,
  m5_12xlarge,
  m5_16xlarge,
  m5_24xlarge,
  m5Metal,
  m5aLarge,
  m5aXlarge,
  m5a_2xlarge,
  m5a_4xlarge,
  m5a_8xlarge,
  m5a_12xlarge,
  m5a_16xlarge,
  m5a_24xlarge,
  m5dLarge,
  m5dXlarge,
  m5d_2xlarge,
  m5d_4xlarge,
  m5d_8xlarge,
  m5d_12xlarge,
  m5d_16xlarge,
  m5d_24xlarge,
  m5dMetal,
  m5adLarge,
  m5adXlarge,
  m5ad_2xlarge,
  m5ad_4xlarge,
  m5ad_8xlarge,
  m5ad_12xlarge,
  m5ad_16xlarge,
  m5ad_24xlarge,
  h1_2xlarge,
  h1_4xlarge,
  h1_8xlarge,
  h1_16xlarge,
  z1dLarge,
  z1dXlarge,
  z1d_2xlarge,
  z1d_3xlarge,
  z1d_6xlarge,
  z1d_12xlarge,
  z1dMetal,
  u_6tb1Metal,
  u_9tb1Metal,
  u_12tb1Metal,
  u_18tb1Metal,
  u_24tb1Metal,
  a1Medium,
  a1Large,
  a1Xlarge,
  a1_2xlarge,
  a1_4xlarge,
  a1Metal,
  m5dnLarge,
  m5dnXlarge,
  m5dn_2xlarge,
  m5dn_4xlarge,
  m5dn_8xlarge,
  m5dn_12xlarge,
  m5dn_16xlarge,
  m5dn_24xlarge,
  m5nLarge,
  m5nXlarge,
  m5n_2xlarge,
  m5n_4xlarge,
  m5n_8xlarge,
  m5n_12xlarge,
  m5n_16xlarge,
  m5n_24xlarge,
  r5dnLarge,
  r5dnXlarge,
  r5dn_2xlarge,
  r5dn_4xlarge,
  r5dn_8xlarge,
  r5dn_12xlarge,
  r5dn_16xlarge,
  r5dn_24xlarge,
  r5nLarge,
  r5nXlarge,
  r5n_2xlarge,
  r5n_4xlarge,
  r5n_8xlarge,
  r5n_12xlarge,
  r5n_16xlarge,
  r5n_24xlarge,
  inf1Xlarge,
  inf1_2xlarge,
  inf1_6xlarge,
  inf1_24xlarge,
}

enum InstanceTypeHypervisor {
  nitro,
  xen,
}

/// Describes the instance type.
class InstanceTypeInfo {
  /// Indicates whether auto recovery is supported.
  final bool autoRecoverySupported;

  /// Indicates whether the instance is bare metal.
  final bool bareMetal;

  /// Indicates whether the instance type is a burstable performance instance
  /// type.
  final bool burstablePerformanceSupported;

  /// Indicates whether the instance type is a current generation.
  final bool currentGeneration;

  /// Indicates whether Dedicated Hosts are supported on the instance type.
  final bool dedicatedHostsSupported;

  /// Describes the Amazon EBS settings for the instance type.
  final EbsInfo ebsInfo;

  /// Describes the FPGA accelerator settings for the instance type.
  final FpgaInfo fpgaInfo;

  /// Indicates whether the instance type is eligible for the free tier.
  final bool freeTierEligible;

  /// Describes the GPU accelerator settings for the instance type.
  final GpuInfo gpuInfo;

  /// Indicates whether On-Demand hibernation is supported.
  final bool hibernationSupported;

  /// Indicates the hypervisor used for the instance type.
  final InstanceTypeHypervisor hypervisor;

  /// Describes the Inference accelerator settings for the instance type.
  final InferenceAcceleratorInfo inferenceAcceleratorInfo;

  /// Describes the disks for the instance type.
  final InstanceStorageInfo instanceStorageInfo;

  /// Indicates whether instance storage is supported.
  final bool instanceStorageSupported;

  /// The instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final InstanceType instanceType;

  /// Describes the memory for the instance type.
  final MemoryInfo memoryInfo;

  /// Describes the network settings for the instance type.
  final NetworkInfo networkInfo;

  /// Describes the placement group settings for the instance type.
  final PlacementGroupInfo placementGroupInfo;

  /// Describes the processor.
  final ProcessorInfo processorInfo;

  /// Indicates the supported root device types.
  final List<String> supportedRootDeviceTypes;

  /// Indicates whether the instance type is offered for spot or On-Demand.
  final List<String> supportedUsageClasses;

  /// Describes the vCPU configurations for the instance type.
  final VCpuInfo vCpuInfo;

  InstanceTypeInfo({
    this.autoRecoverySupported,
    this.bareMetal,
    this.burstablePerformanceSupported,
    this.currentGeneration,
    this.dedicatedHostsSupported,
    this.ebsInfo,
    this.fpgaInfo,
    this.freeTierEligible,
    this.gpuInfo,
    this.hibernationSupported,
    this.hypervisor,
    this.inferenceAcceleratorInfo,
    this.instanceStorageInfo,
    this.instanceStorageSupported,
    this.instanceType,
    this.memoryInfo,
    this.networkInfo,
    this.placementGroupInfo,
    this.processorInfo,
    this.supportedRootDeviceTypes,
    this.supportedUsageClasses,
    this.vCpuInfo,
  });
}

/// The instance types offered.
class InstanceTypeOffering {
  /// The instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final InstanceType instanceType;

  /// The identifier for the location. This depends on the location type. For
  /// example, if the location type is <code>region</code>, the location is the
  /// Region code (for example, <code>us-east-2</code>.)
  final String location;

  /// The location type.
  final LocationType locationType;

  InstanceTypeOffering({
    this.instanceType,
    this.location,
    this.locationType,
  });
}

/// Information about the Capacity Reservation usage.
class InstanceUsage {
  /// The ID of the AWS account that is making use of the Capacity Reservation.
  final String accountId;

  /// The number of instances the AWS account currently has in the Capacity
  /// Reservation.
  final int usedInstanceCount;

  InstanceUsage({
    this.accountId,
    this.usedInstanceCount,
  });
}

enum InterfacePermissionType {
  instanceAttach,
  eipAssociate,
}

/// Describes an internet gateway.
class InternetGateway {
  /// Any VPCs attached to the internet gateway.
  final List<InternetGatewayAttachment> attachments;

  /// The ID of the internet gateway.
  final String internetGatewayId;

  /// The ID of the AWS account that owns the internet gateway.
  final String ownerId;

  /// Any tags assigned to the internet gateway.
  final List<Tag> tags;

  InternetGateway({
    this.attachments,
    this.internetGatewayId,
    this.ownerId,
    this.tags,
  });
}

/// Describes the attachment of a VPC to an internet gateway or an egress-only
/// internet gateway.
class InternetGatewayAttachment {
  /// The current state of the attachment. For an internet gateway, the state is
  /// <code>available</code> when attached to a VPC; otherwise, this value is not
  /// returned.
  final AttachmentStatus state;

  /// The ID of the VPC.
  final String vpcId;

  InternetGatewayAttachment({
    this.state,
    this.vpcId,
  });
}

/// Describes a set of permissions for a security group rule.
class IpPermission {
  /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6
  /// type number. A value of <code>-1</code> indicates all ICMP/ICMPv6 types. If
  /// you specify all ICMP/ICMPv6 types, you must specify all codes.
  final int fromPort;

  /// The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>,
  /// <code>icmpv6</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers</a>).
  ///
  /// [VPC only] Use <code>-1</code> to specify all protocols. When authorizing
  /// security group rules, specifying <code>-1</code> or a protocol number other
  /// than <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or
  /// <code>icmpv6</code> allows traffic on all ports, regardless of any port
  /// range you specify. For <code>tcp</code>, <code>udp</code>, and
  /// <code>icmp</code>, you must specify a port range. For <code>icmpv6</code>,
  /// the port range is optional; if you omit the port range, traffic for all
  /// types and codes is allowed.
  final String ipProtocol;

  /// The IPv4 ranges.
  final List<IpRange> ipRanges;

  /// [VPC only] The IPv6 ranges.
  final List<Ipv6Range> ipv6Ranges;

  /// [VPC only] The prefix list IDs for an AWS service. With outbound rules, this
  /// is the AWS service to access through a VPC endpoint from instances
  /// associated with the security group.
  final List<PrefixListId> prefixListIds;

  /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
  /// A value of <code>-1</code> indicates all ICMP/ICMPv6 codes. If you specify
  /// all ICMP/ICMPv6 types, you must specify all codes.
  final int toPort;

  /// The security group and AWS account ID pairs.
  final List<UserIdGroupPair> userIdGroupPairs;

  IpPermission({
    this.fromPort,
    this.ipProtocol,
    this.ipRanges,
    this.ipv6Ranges,
    this.prefixListIds,
    this.toPort,
    this.userIdGroupPairs,
  });
}

/// Describes an IPv4 range.
class IpRange {
  /// The IPv4 CIDR range. You can either specify a CIDR range or a source
  /// security group, not both. To specify a single IPv4 address, use the /32
  /// prefix length.
  final String cidrIp;

  /// A description for the security group rule that references this IPv4 address
  /// range.
  ///
  /// Constraints: Up to 255 characters in length. Allowed characters are a-z,
  /// A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
  final String description;

  IpRange({
    this.cidrIp,
    this.description,
  });
}

/// Describes an IPv6 CIDR block association.
class Ipv6CidrAssociation {
  /// The resource that's associated with the IPv6 CIDR block.
  final String associatedResource;

  /// The IPv6 CIDR block.
  final String ipv6Cidr;

  Ipv6CidrAssociation({
    this.associatedResource,
    this.ipv6Cidr,
  });
}

/// Describes an IPv6 CIDR block.
class Ipv6CidrBlock {
  /// The IPv6 CIDR block.
  final String ipv6CidrBlock;

  Ipv6CidrBlock({
    this.ipv6CidrBlock,
  });
}

/// Describes an IPv6 address pool.
class Ipv6Pool {
  /// The description for the address pool.
  final String description;

  /// The CIDR blocks for the address pool.
  final List<PoolCidrBlock> poolCidrBlocks;

  /// The ID of the address pool.
  final String poolId;

  /// Any tags for the address pool.
  final List<Tag> tags;

  Ipv6Pool({
    this.description,
    this.poolCidrBlocks,
    this.poolId,
    this.tags,
  });
}

/// [EC2-VPC only] Describes an IPv6 range.
class Ipv6Range {
  /// The IPv6 CIDR range. You can either specify a CIDR range or a source
  /// security group, not both. To specify a single IPv6 address, use the /128
  /// prefix length.
  final String cidrIpv6;

  /// A description for the security group rule that references this IPv6 address
  /// range.
  ///
  /// Constraints: Up to 255 characters in length. Allowed characters are a-z,
  /// A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
  final String description;

  Ipv6Range({
    this.cidrIpv6,
    this.description,
  });
}

enum Ipv6SupportValue {
  enable,
  disable,
}

/// Describes a key pair.
class KeyPair {
  /// The SHA-1 digest of the DER encoded private key.
  final String keyFingerprint;

  /// An unencrypted PEM encoded RSA private key.
  final String keyMaterial;

  /// The name of the key pair.
  final String keyName;

  /// The ID of the key pair.
  final String keyPairId;

  /// Any tags applied to the key pair.
  final List<Tag> tags;

  KeyPair({
    this.keyFingerprint,
    this.keyMaterial,
    this.keyName,
    this.keyPairId,
    this.tags,
  });
}

/// Describes a key pair.
class KeyPairInfo {
  /// If you used <a>CreateKeyPair</a> to create the key pair, this is the SHA-1
  /// digest of the DER encoded private key. If you used <a>ImportKeyPair</a> to
  /// provide AWS the public key, this is the MD5 public key fingerprint as
  /// specified in section 4 of RFC4716.
  final String keyFingerprint;

  /// The name of the key pair.
  final String keyName;

  /// The ID of the key pair.
  final String keyPairId;

  /// Any tags applied to the key pair.
  final List<Tag> tags;

  KeyPairInfo({
    this.keyFingerprint,
    this.keyName,
    this.keyPairId,
    this.tags,
  });
}

/// The last error that occurred for a VPC endpoint.
class LastError {
  /// The error code for the VPC endpoint error.
  final String code;

  /// The error message for the VPC endpoint error.
  final String message;

  LastError({
    this.code,
    this.message,
  });
}

/// Describes a launch permission.
class LaunchPermission {
  /// The name of the group.
  final PermissionGroup group;

  /// The AWS account ID.
  final String userId;

  LaunchPermission({
    this.group,
    this.userId,
  });
}

/// Describes a launch permission modification.
class LaunchPermissionModifications {
  /// The AWS account ID to add to the list of launch permissions for the AMI.
  final List<LaunchPermission> add;

  /// The AWS account ID to remove from the list of launch permissions for the
  /// AMI.
  final List<LaunchPermission> remove;

  LaunchPermissionModifications({
    this.add,
    this.remove,
  });
}

/// Describes the launch specification for an instance.
class LaunchSpecification {
  /// Deprecated.
  final String addressingType;

  /// One or more block device mapping entries.
  final List<BlockDeviceMapping> blockDeviceMappings;

  /// Indicates whether the instance is optimized for EBS I/O. This optimization
  /// provides dedicated throughput to Amazon EBS and an optimized configuration
  /// stack to provide optimal EBS I/O performance. This optimization isn't
  /// available with all instance types. Additional usage charges apply when using
  /// an EBS Optimized instance.
  ///
  /// Default: <code>false</code>
  final bool ebsOptimized;

  /// The IAM instance profile.
  final IamInstanceProfileSpecification iamInstanceProfile;

  /// The ID of the AMI.
  final String imageId;

  /// The instance type.
  final InstanceType instanceType;

  /// The ID of the kernel.
  final String kernelId;

  /// The name of the key pair.
  final String keyName;
  final RunInstancesMonitoringEnabled monitoring;

  /// One or more network interfaces. If you specify a network interface, you must
  /// specify subnet IDs and security group IDs using the network interface.
  final List<InstanceNetworkInterfaceSpecification> networkInterfaces;

  /// The placement information for the instance.
  final SpotPlacement placement;

  /// The ID of the RAM disk.
  final String ramdiskId;

  /// One or more security groups. When requesting instances in a VPC, you must
  /// specify the IDs of the security groups. When requesting instances in
  /// EC2-Classic, you can specify the names or the IDs of the security groups.
  final List<GroupIdentifier> securityGroups;

  /// The ID of the subnet in which to launch the instance.
  final String subnetId;

  /// The Base64-encoded user data for the instance.
  final String userData;

  LaunchSpecification({
    this.addressingType,
    this.blockDeviceMappings,
    this.ebsOptimized,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramdiskId,
    this.securityGroups,
    this.subnetId,
    this.userData,
  });
}

/// Describes a launch template.
class LaunchTemplate {
  /// The time launch template was created.
  final DateTime createTime;

  /// The principal that created the launch template.
  final String createdBy;

  /// The version number of the default version of the launch template.
  final int defaultVersionNumber;

  /// The version number of the latest version of the launch template.
  final int latestVersionNumber;

  /// The ID of the launch template.
  final String launchTemplateId;

  /// The name of the launch template.
  final String launchTemplateName;

  /// The tags for the launch template.
  final List<Tag> tags;

  LaunchTemplate({
    this.createTime,
    this.createdBy,
    this.defaultVersionNumber,
    this.latestVersionNumber,
    this.launchTemplateId,
    this.launchTemplateName,
    this.tags,
  });
}

/// Describes a launch template and overrides.
class LaunchTemplateAndOverridesResponse {
  /// The launch template.
  final FleetLaunchTemplateSpecification launchTemplateSpecification;

  /// Any parameters that you specify override the same parameters in the launch
  /// template.
  final FleetLaunchTemplateOverrides overrides;

  LaunchTemplateAndOverridesResponse({
    this.launchTemplateSpecification,
    this.overrides,
  });
}

/// Describes a block device mapping.
class LaunchTemplateBlockDeviceMapping {
  /// The device name.
  final String deviceName;

  /// Information about the block device for an EBS volume.
  final LaunchTemplateEbsBlockDevice ebs;

  /// Suppresses the specified device included in the block device mapping of the
  /// AMI.
  final String noDevice;

  /// The virtual device name (ephemeralN).
  final String virtualName;

  LaunchTemplateBlockDeviceMapping({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });
}

/// Describes a block device mapping.
class LaunchTemplateBlockDeviceMappingRequest {
  /// The device name (for example, /dev/sdh or xvdh).
  final String deviceName;

  /// Parameters used to automatically set up EBS volumes when the instance is
  /// launched.
  final LaunchTemplateEbsBlockDeviceRequest ebs;

  /// Suppresses the specified device included in the block device mapping of the
  /// AMI.
  final String noDevice;

  /// The virtual device name (ephemeralN). Instance store volumes are numbered
  /// starting from 0. An instance type with 2 available instance store volumes
  /// can specify mappings for ephemeral0 and ephemeral1. The number of available
  /// instance store volumes depends on the instance type. After you connect to
  /// the instance, you must mount the volume.
  final String virtualName;

  LaunchTemplateBlockDeviceMappingRequest({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });
}

/// Describes an instance's Capacity Reservation targeting option. You can
/// specify only one option at a time. Use the
/// <code>CapacityReservationPreference</code> parameter to configure the
/// instance to run in On-Demand capacity or to run in any <code>open</code>
/// Capacity Reservation that has matching attributes (instance type, platform,
/// Availability Zone). Use the <code>CapacityReservationTarget</code> parameter
/// to explicitly target a specific Capacity Reservation.
class LaunchTemplateCapacityReservationSpecificationRequest {
  /// Indicates the instance's Capacity Reservation preferences. Possible
  /// preferences include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The instance can run in any <code>open</code> Capacity
  /// Reservation that has matching attributes (instance type, platform,
  /// Availability Zone).
  /// </li>
  /// <li>
  /// <code>none</code> - The instance avoids running in a Capacity Reservation
  /// even if one is available. The instance runs in On-Demand capacity.
  /// </li>
  /// </ul>
  final CapacityReservationPreference capacityReservationPreference;

  /// Information about the target Capacity Reservation.
  final CapacityReservationTarget capacityReservationTarget;

  LaunchTemplateCapacityReservationSpecificationRequest({
    this.capacityReservationPreference,
    this.capacityReservationTarget,
  });
}

/// Information about the Capacity Reservation targeting option.
class LaunchTemplateCapacityReservationSpecificationResponse {
  /// Indicates the instance's Capacity Reservation preferences. Possible
  /// preferences include:
  ///
  /// <ul>
  /// <li>
  /// <code>open</code> - The instance can run in any <code>open</code> Capacity
  /// Reservation that has matching attributes (instance type, platform,
  /// Availability Zone).
  /// </li>
  /// <li>
  /// <code>none</code> - The instance avoids running in a Capacity Reservation
  /// even if one is available. The instance runs in On-Demand capacity.
  /// </li>
  /// </ul>
  final CapacityReservationPreference capacityReservationPreference;

  /// Information about the target Capacity Reservation.
  final CapacityReservationTargetResponse capacityReservationTarget;

  LaunchTemplateCapacityReservationSpecificationResponse({
    this.capacityReservationPreference,
    this.capacityReservationTarget,
  });
}

/// Describes a launch template and overrides.
class LaunchTemplateConfig {
  /// The launch template.
  final FleetLaunchTemplateSpecification launchTemplateSpecification;

  /// Any parameters that you specify override the same parameters in the launch
  /// template.
  final List<LaunchTemplateOverrides> overrides;

  LaunchTemplateConfig({
    this.launchTemplateSpecification,
    this.overrides,
  });
}

/// The CPU options for the instance.
class LaunchTemplateCpuOptions {
  /// The number of CPU cores for the instance.
  final int coreCount;

  /// The number of threads per CPU core.
  final int threadsPerCore;

  LaunchTemplateCpuOptions({
    this.coreCount,
    this.threadsPerCore,
  });
}

/// The CPU options for the instance. Both the core count and threads per core
/// must be specified in the request.
class LaunchTemplateCpuOptionsRequest {
  /// The number of CPU cores for the instance.
  final int coreCount;

  /// The number of threads per CPU core. To disable multithreading for the
  /// instance, specify a value of 1. Otherwise, specify the default value of 2.
  final int threadsPerCore;

  LaunchTemplateCpuOptionsRequest({
    this.coreCount,
    this.threadsPerCore,
  });
}

/// Describes a block device for an EBS volume.
class LaunchTemplateEbsBlockDevice {
  /// Indicates whether the EBS volume is deleted on instance termination.
  final bool deleteOnTermination;

  /// Indicates whether the EBS volume is encrypted.
  final bool encrypted;

  /// The number of I/O operations per second (IOPS) that the volume supports.
  final int iops;

  /// The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.
  final String kmsKeyId;

  /// The ID of the snapshot.
  final String snapshotId;

  /// The size of the volume, in GiB.
  final int volumeSize;

  /// The volume type.
  final VolumeType volumeType;

  LaunchTemplateEbsBlockDevice({
    this.deleteOnTermination,
    this.encrypted,
    this.iops,
    this.kmsKeyId,
    this.snapshotId,
    this.volumeSize,
    this.volumeType,
  });
}

/// The parameters for a block device for an EBS volume.
class LaunchTemplateEbsBlockDeviceRequest {
  /// Indicates whether the EBS volume is deleted on instance termination.
  final bool deleteOnTermination;

  /// Indicates whether the EBS volume is encrypted. Encrypted volumes can only be
  /// attached to instances that support Amazon EBS encryption. If you are
  /// creating a volume from a snapshot, you can't specify an encryption value.
  final bool encrypted;

  /// The number of I/O operations per second (IOPS) that the volume supports. For
  /// io1, this represents the number of IOPS that are provisioned for the volume.
  /// For gp2, this represents the baseline performance of the volume and the rate
  /// at which the volume accumulates I/O credits for bursting. For more
  /// information about General Purpose SSD baseline performance, I/O credits, and
  /// bursting, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon
  /// EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Condition: This parameter is required for requests to create io1 volumes; it
  /// is not used in requests to create gp2, st1, sc1, or standard volumes.
  final int iops;

  /// The ARN of the symmetric AWS Key Management Service (AWS KMS) CMK used for
  /// encryption.
  final String kmsKeyId;

  /// The ID of the snapshot.
  final String snapshotId;

  /// The size of the volume, in GiB.
  ///
  /// Default: If you're creating the volume from a snapshot and don't specify a
  /// volume size, the default is the snapshot size.
  final int volumeSize;

  /// The volume type.
  final VolumeType volumeType;

  LaunchTemplateEbsBlockDeviceRequest({
    this.deleteOnTermination,
    this.encrypted,
    this.iops,
    this.kmsKeyId,
    this.snapshotId,
    this.volumeSize,
    this.volumeType,
  });
}

/// Describes an elastic inference accelerator.
class LaunchTemplateElasticInferenceAccelerator {
  /// The type of elastic inference accelerator. The possible values are
  /// eia1.medium, eia1.large, and eia1.xlarge.
  final String type;

  /// The number of elastic inference accelerators to attach to the instance.
  ///
  /// Default: 1
  final int count;

  LaunchTemplateElasticInferenceAccelerator({
    @_s.required this.type,
    this.count,
  });
}

/// Describes an elastic inference accelerator.
class LaunchTemplateElasticInferenceAcceleratorResponse {
  /// The number of elastic inference accelerators to attach to the instance.
  ///
  /// Default: 1
  final int count;

  /// The type of elastic inference accelerator. The possible values are
  /// eia1.medium, eia1.large, and eia1.xlarge.
  final String type;

  LaunchTemplateElasticInferenceAcceleratorResponse({
    this.count,
    this.type,
  });
}

enum LaunchTemplateErrorCode {
  launchTemplateIdDoesNotExist,
  launchTemplateIdMalformed,
  launchTemplateNameDoesNotExist,
  launchTemplateNameMalformed,
  launchTemplateVersionDoesNotExist,
  unexpectedError,
}

/// Indicates whether an instance is configured for hibernation.
class LaunchTemplateHibernationOptions {
  /// If this parameter is set to <code>true</code>, the instance is enabled for
  /// hibernation; otherwise, it is not enabled for hibernation.
  final bool configured;

  LaunchTemplateHibernationOptions({
    this.configured,
  });
}

/// Indicates whether the instance is configured for hibernation. This parameter
/// is valid only if the instance meets the <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation
/// prerequisites</a>.
class LaunchTemplateHibernationOptionsRequest {
  /// If you set this parameter to <code>true</code>, the instance is enabled for
  /// hibernation.
  ///
  /// Default: <code>false</code>
  final bool configured;

  LaunchTemplateHibernationOptionsRequest({
    this.configured,
  });
}

enum LaunchTemplateHttpTokensState {
  optional,
  required,
}

/// Describes an IAM instance profile.
class LaunchTemplateIamInstanceProfileSpecification {
  /// The Amazon Resource Name (ARN) of the instance profile.
  final String arn;

  /// The name of the instance profile.
  final String name;

  LaunchTemplateIamInstanceProfileSpecification({
    this.arn,
    this.name,
  });
}

/// An IAM instance profile.
class LaunchTemplateIamInstanceProfileSpecificationRequest {
  /// The Amazon Resource Name (ARN) of the instance profile.
  final String arn;

  /// The name of the instance profile.
  final String name;

  LaunchTemplateIamInstanceProfileSpecificationRequest({
    this.arn,
    this.name,
  });
}

/// The market (purchasing) option for the instances.
class LaunchTemplateInstanceMarketOptions {
  /// The market type.
  final MarketType marketType;

  /// The options for Spot Instances.
  final LaunchTemplateSpotMarketOptions spotOptions;

  LaunchTemplateInstanceMarketOptions({
    this.marketType,
    this.spotOptions,
  });
}

/// The market (purchasing) option for the instances.
class LaunchTemplateInstanceMarketOptionsRequest {
  /// The market type.
  final MarketType marketType;

  /// The options for Spot Instances.
  final LaunchTemplateSpotMarketOptionsRequest spotOptions;

  LaunchTemplateInstanceMarketOptionsRequest({
    this.marketType,
    this.spotOptions,
  });
}

enum LaunchTemplateInstanceMetadataEndpointState {
  disabled,
  enabled,
}

/// The metadata options for the instance. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
/// Metadata and User Data</a> in the <i>Amazon Elastic Compute Cloud User
/// Guide</i>.
class LaunchTemplateInstanceMetadataOptions {
  /// This parameter enables or disables the HTTP metadata endpoint on your
  /// instances. If the parameter is not specified, the default state is
  /// <code>enabled</code>.
  /// <note>
  /// If you specify a value of <code>disabled</code>, you will not be able to
  /// access your instance metadata.
  /// </note>
  final LaunchTemplateInstanceMetadataEndpointState httpEndpoint;

  /// The desired HTTP PUT response hop limit for instance metadata requests. The
  /// larger the number, the further instance metadata requests can travel.
  ///
  /// Default: 1
  ///
  /// Possible values: Integers from 1 to 64
  final int httpPutResponseHopLimit;

  /// The state of token usage for your instance metadata requests. If the
  /// parameter is not specified in the request, the default state is
  /// <code>optional</code>.
  ///
  /// If the state is <code>optional</code>, you can choose to retrieve instance
  /// metadata with or without a signed token header on your request. If you
  /// retrieve the IAM role credentials without a token, the version 1.0 role
  /// credentials are returned. If you retrieve the IAM role credentials using a
  /// valid signed token, the version 2.0 role credentials are returned.
  ///
  /// If the state is <code>required</code>, you must send a signed token header
  /// with any instance metadata retrieval requests. In this state, retrieving the
  /// IAM role credentials always returns the version 2.0 credentials; the version
  /// 1.0 credentials are not available.
  final LaunchTemplateHttpTokensState httpTokens;

  /// The state of the metadata option changes.
  ///
  /// <code>pending</code> - The metadata options are being updated and the
  /// instance is not ready to process metadata traffic with the new selection.
  ///
  /// <code>applied</code> - The metadata options have been successfully applied
  /// on the instance.
  final LaunchTemplateInstanceMetadataOptionsState state;

  LaunchTemplateInstanceMetadataOptions({
    this.httpEndpoint,
    this.httpPutResponseHopLimit,
    this.httpTokens,
    this.state,
  });
}

/// The metadata options for the instance. For more information, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
/// Metadata and User Data</a> in the <i>Amazon Elastic Compute Cloud User
/// Guide</i>.
class LaunchTemplateInstanceMetadataOptionsRequest {
  /// This parameter enables or disables the HTTP metadata endpoint on your
  /// instances. If the parameter is not specified, the default state is
  /// <code>enabled</code>.
  /// <note>
  /// If you specify a value of <code>disabled</code>, you will not be able to
  /// access your instance metadata.
  /// </note>
  final LaunchTemplateInstanceMetadataEndpointState httpEndpoint;

  /// The desired HTTP PUT response hop limit for instance metadata requests. The
  /// larger the number, the further instance metadata requests can travel.
  ///
  /// Default: 1
  ///
  /// Possible values: Integers from 1 to 64
  final int httpPutResponseHopLimit;

  /// The state of token usage for your instance metadata requests. If the
  /// parameter is not specified in the request, the default state is
  /// <code>optional</code>.
  ///
  /// If the state is <code>optional</code>, you can choose to retrieve instance
  /// metadata with or without a signed token header on your request. If you
  /// retrieve the IAM role credentials without a token, the version 1.0 role
  /// credentials are returned. If you retrieve the IAM role credentials using a
  /// valid signed token, the version 2.0 role credentials are returned.
  ///
  /// If the state is <code>required</code>, you must send a signed token header
  /// with any instance metadata retrieval requests. In this state, retrieving the
  /// IAM role credentials always returns the version 2.0 credentials; the version
  /// 1.0 credentials are not available.
  final LaunchTemplateHttpTokensState httpTokens;

  LaunchTemplateInstanceMetadataOptionsRequest({
    this.httpEndpoint,
    this.httpPutResponseHopLimit,
    this.httpTokens,
  });
}

enum LaunchTemplateInstanceMetadataOptionsState {
  pending,
  applied,
}

/// Describes a network interface.
class LaunchTemplateInstanceNetworkInterfaceSpecification {
  /// Indicates whether to associate a public IPv4 address with eth0 for a new
  /// network interface.
  final bool associatePublicIpAddress;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool deleteOnTermination;

  /// A description for the network interface.
  final String description;

  /// The device index for the network interface attachment.
  final int deviceIndex;

  /// The IDs of one or more security groups.
  final List<String> groups;

  /// The type of network interface.
  final String interfaceType;

  /// The number of IPv6 addresses for the network interface.
  final int ipv6AddressCount;

  /// The IPv6 addresses for the network interface.
  final List<InstanceIpv6Address> ipv6Addresses;

  /// The ID of the network interface.
  final String networkInterfaceId;

  /// The primary private IPv4 address of the network interface.
  final String privateIpAddress;

  /// One or more private IPv4 addresses.
  final List<PrivateIpAddressSpecification> privateIpAddresses;

  /// The number of secondary private IPv4 addresses for the network interface.
  final int secondaryPrivateIpAddressCount;

  /// The ID of the subnet for the network interface.
  final String subnetId;

  LaunchTemplateInstanceNetworkInterfaceSpecification({
    this.associatePublicIpAddress,
    this.deleteOnTermination,
    this.description,
    this.deviceIndex,
    this.groups,
    this.interfaceType,
    this.ipv6AddressCount,
    this.ipv6Addresses,
    this.networkInterfaceId,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.secondaryPrivateIpAddressCount,
    this.subnetId,
  });
}

/// The parameters for a network interface.
class LaunchTemplateInstanceNetworkInterfaceSpecificationRequest {
  /// Associates a public IPv4 address with eth0 for a new network interface.
  final bool associatePublicIpAddress;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool deleteOnTermination;

  /// A description for the network interface.
  final String description;

  /// The device index for the network interface attachment.
  final int deviceIndex;

  /// The IDs of one or more security groups.
  final List<String> groups;

  /// The type of network interface. To create an Elastic Fabric Adapter (EFA),
  /// specify <code>efa</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html">Elastic
  /// Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// If you are not creating an EFA, specify <code>interface</code> or omit this
  /// parameter.
  ///
  /// Valid values: <code>interface</code> | <code>efa</code>
  final String interfaceType;

  /// The number of IPv6 addresses to assign to a network interface. Amazon EC2
  /// automatically selects the IPv6 addresses from the subnet range. You can't
  /// use this option if specifying specific IPv6 addresses.
  final int ipv6AddressCount;

  /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your
  /// subnet. You can't use this option if you're specifying a number of IPv6
  /// addresses.
  final List<InstanceIpv6AddressRequest> ipv6Addresses;

  /// The ID of the network interface.
  final String networkInterfaceId;

  /// The primary private IPv4 address of the network interface.
  final String privateIpAddress;

  /// One or more private IPv4 addresses.
  final List<PrivateIpAddressSpecification> privateIpAddresses;

  /// The number of secondary private IPv4 addresses to assign to a network
  /// interface.
  final int secondaryPrivateIpAddressCount;

  /// The ID of the subnet for the network interface.
  final String subnetId;

  LaunchTemplateInstanceNetworkInterfaceSpecificationRequest({
    this.associatePublicIpAddress,
    this.deleteOnTermination,
    this.description,
    this.deviceIndex,
    this.groups,
    this.interfaceType,
    this.ipv6AddressCount,
    this.ipv6Addresses,
    this.networkInterfaceId,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.secondaryPrivateIpAddressCount,
    this.subnetId,
  });
}

/// Describes a license configuration.
class LaunchTemplateLicenseConfiguration {
  /// The Amazon Resource Name (ARN) of the license configuration.
  final String licenseConfigurationArn;

  LaunchTemplateLicenseConfiguration({
    this.licenseConfigurationArn,
  });
}

/// Describes a license configuration.
class LaunchTemplateLicenseConfigurationRequest {
  /// The Amazon Resource Name (ARN) of the license configuration.
  final String licenseConfigurationArn;

  LaunchTemplateLicenseConfigurationRequest({
    this.licenseConfigurationArn,
  });
}

/// Describes overrides for a launch template.
class LaunchTemplateOverrides {
  /// The Availability Zone in which to launch the instances.
  final String availabilityZone;

  /// The instance type.
  final InstanceType instanceType;

  /// The priority for the launch template override. If
  /// <b>OnDemandAllocationStrategy</b> is set to <code>prioritized</code>, Spot
  /// Fleet uses priority to determine which launch template override to use first
  /// in fulfilling On-Demand capacity. The highest priority is launched first.
  /// Valid values are whole numbers starting at <code>0</code>. The lower the
  /// number, the higher the priority. If no number is set, the launch template
  /// override has the lowest priority.
  final double priority;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance.
  final String spotPrice;

  /// The ID of the subnet in which to launch the instances.
  final String subnetId;

  /// The number of units provided by the specified instance type.
  final double weightedCapacity;

  LaunchTemplateOverrides({
    this.availabilityZone,
    this.instanceType,
    this.priority,
    this.spotPrice,
    this.subnetId,
    this.weightedCapacity,
  });
}

/// Describes the placement of an instance.
class LaunchTemplatePlacement {
  /// The affinity setting for the instance on the Dedicated Host.
  final String affinity;

  /// The Availability Zone of the instance.
  final String availabilityZone;

  /// The name of the placement group for the instance.
  final String groupName;

  /// The ID of the Dedicated Host for the instance.
  final String hostId;

  /// The ARN of the host resource group in which to launch the instances.
  final String hostResourceGroupArn;

  /// The number of the partition the instance should launch in. Valid only if the
  /// placement group strategy is set to <code>partition</code>.
  final int partitionNumber;

  /// Reserved for future use.
  final String spreadDomain;

  /// The tenancy of the instance (if the instance is running in a VPC). An
  /// instance with a tenancy of <code>dedicated</code> runs on single-tenant
  /// hardware.
  final Tenancy tenancy;

  LaunchTemplatePlacement({
    this.affinity,
    this.availabilityZone,
    this.groupName,
    this.hostId,
    this.hostResourceGroupArn,
    this.partitionNumber,
    this.spreadDomain,
    this.tenancy,
  });
}

/// Describes the placement of an instance.
class LaunchTemplatePlacementRequest {
  /// The affinity setting for an instance on a Dedicated Host.
  final String affinity;

  /// The Availability Zone for the instance.
  final String availabilityZone;

  /// The name of the placement group for the instance.
  final String groupName;

  /// The ID of the Dedicated Host for the instance.
  final String hostId;

  /// The ARN of the host resource group in which to launch the instances. If you
  /// specify a host resource group ARN, omit the <b>Tenancy</b> parameter or set
  /// it to <code>host</code>.
  final String hostResourceGroupArn;

  /// The number of the partition the instance should launch in. Valid only if the
  /// placement group strategy is set to <code>partition</code>.
  final int partitionNumber;

  /// Reserved for future use.
  final String spreadDomain;

  /// The tenancy of the instance (if the instance is running in a VPC). An
  /// instance with a tenancy of dedicated runs on single-tenant hardware.
  final Tenancy tenancy;

  LaunchTemplatePlacementRequest({
    this.affinity,
    this.availabilityZone,
    this.groupName,
    this.hostId,
    this.hostResourceGroupArn,
    this.partitionNumber,
    this.spreadDomain,
    this.tenancy,
  });
}

/// The launch template to use. You must specify either the launch template ID
/// or launch template name in the request, but not both.
class LaunchTemplateSpecification {
  /// The ID of the launch template.
  final String launchTemplateId;

  /// The name of the launch template.
  final String launchTemplateName;

  /// The version number of the launch template.
  ///
  /// Default: The default version for the launch template.
  final String version;

  LaunchTemplateSpecification({
    this.launchTemplateId,
    this.launchTemplateName,
    this.version,
  });
}

/// The options for Spot Instances.
class LaunchTemplateSpotMarketOptions {
  /// The required duration for the Spot Instances (also known as Spot blocks), in
  /// minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or
  /// 360).
  final int blockDurationMinutes;

  /// The behavior when a Spot Instance is interrupted.
  final InstanceInterruptionBehavior instanceInterruptionBehavior;

  /// The maximum hourly price you're willing to pay for the Spot Instances.
  final String maxPrice;

  /// The Spot Instance request type.
  final SpotInstanceType spotInstanceType;

  /// The end date of the request. For a one-time request, the request remains
  /// active until all instances launch, the request is canceled, or this date is
  /// reached. If the request is persistent, it remains active until it is
  /// canceled or this date and time is reached.
  final DateTime validUntil;

  LaunchTemplateSpotMarketOptions({
    this.blockDurationMinutes,
    this.instanceInterruptionBehavior,
    this.maxPrice,
    this.spotInstanceType,
    this.validUntil,
  });
}

/// The options for Spot Instances.
class LaunchTemplateSpotMarketOptionsRequest {
  /// The required duration for the Spot Instances (also known as Spot blocks), in
  /// minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or
  /// 360).
  final int blockDurationMinutes;

  /// The behavior when a Spot Instance is interrupted. The default is
  /// <code>terminate</code>.
  final InstanceInterruptionBehavior instanceInterruptionBehavior;

  /// The maximum hourly price you're willing to pay for the Spot Instances.
  final String maxPrice;

  /// The Spot Instance request type.
  final SpotInstanceType spotInstanceType;

  /// The end date of the request. For a one-time request, the request remains
  /// active until all instances launch, the request is canceled, or this date is
  /// reached. If the request is persistent, it remains active until it is
  /// canceled or this date and time is reached. The default end date is 7 days
  /// from the current date.
  final DateTime validUntil;

  LaunchTemplateSpotMarketOptionsRequest({
    this.blockDurationMinutes,
    this.instanceInterruptionBehavior,
    this.maxPrice,
    this.spotInstanceType,
    this.validUntil,
  });
}

/// The tag specification for the launch template.
class LaunchTemplateTagSpecification {
  /// The type of resource.
  final ResourceType resourceType;

  /// The tags for the resource.
  final List<Tag> tags;

  LaunchTemplateTagSpecification({
    this.resourceType,
    this.tags,
  });
}

/// The tags specification for the launch template.
class LaunchTemplateTagSpecificationRequest {
  /// The type of resource to tag. Currently, the resource types that support
  /// tagging on creation are <code>instance</code> and <code>volume</code>. To
  /// tag a resource after it has been created, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  final ResourceType resourceType;

  /// The tags to apply to the resource.
  final List<Tag> tags;

  LaunchTemplateTagSpecificationRequest({
    this.resourceType,
    this.tags,
  });
}

/// Describes a launch template version.
class LaunchTemplateVersion {
  /// The time the version was created.
  final DateTime createTime;

  /// The principal that created the version.
  final String createdBy;

  /// Indicates whether the version is the default version.
  final bool defaultVersion;

  /// Information about the launch template.
  final ResponseLaunchTemplateData launchTemplateData;

  /// The ID of the launch template.
  final String launchTemplateId;

  /// The name of the launch template.
  final String launchTemplateName;

  /// The description for the version.
  final String versionDescription;

  /// The version number.
  final int versionNumber;

  LaunchTemplateVersion({
    this.createTime,
    this.createdBy,
    this.defaultVersion,
    this.launchTemplateData,
    this.launchTemplateId,
    this.launchTemplateName,
    this.versionDescription,
    this.versionNumber,
  });
}

/// Describes the monitoring for the instance.
class LaunchTemplatesMonitoring {
  /// Indicates whether detailed monitoring is enabled. Otherwise, basic
  /// monitoring is enabled.
  final bool enabled;

  LaunchTemplatesMonitoring({
    this.enabled,
  });
}

/// Describes the monitoring for the instance.
class LaunchTemplatesMonitoringRequest {
  /// Specify <code>true</code> to enable detailed monitoring. Otherwise, basic
  /// monitoring is enabled.
  final bool enabled;

  LaunchTemplatesMonitoringRequest({
    this.enabled,
  });
}

/// Describes a license configuration.
class LicenseConfiguration {
  /// The Amazon Resource Name (ARN) of the license configuration.
  final String licenseConfigurationArn;

  LicenseConfiguration({
    this.licenseConfigurationArn,
  });
}

/// Describes a license configuration.
class LicenseConfigurationRequest {
  /// The Amazon Resource Name (ARN) of the license configuration.
  final String licenseConfigurationArn;

  LicenseConfigurationRequest({
    this.licenseConfigurationArn,
  });
}

enum ListingState {
  available,
  sold,
  cancelled,
  pending,
}

enum ListingStatus {
  active,
  pending,
  cancelled,
  closed,
}

/// Describes the Classic Load Balancers and target groups to attach to a Spot
/// Fleet request.
class LoadBalancersConfig {
  /// The Classic Load Balancers.
  final ClassicLoadBalancersConfig classicLoadBalancersConfig;

  /// The target groups.
  final TargetGroupsConfig targetGroupsConfig;

  LoadBalancersConfig({
    this.classicLoadBalancersConfig,
    this.targetGroupsConfig,
  });
}

/// Describes a load permission.
class LoadPermission {
  /// The name of the group.
  final PermissionGroup group;

  /// The AWS account ID.
  final String userId;

  LoadPermission({
    this.group,
    this.userId,
  });
}

/// Describes modifications to the load permissions of an Amazon FPGA image
/// (AFI).
class LoadPermissionModifications {
  /// The load permissions to add.
  final List<LoadPermissionRequest> add;

  /// The load permissions to remove.
  final List<LoadPermissionRequest> remove;

  LoadPermissionModifications({
    this.add,
    this.remove,
  });
}

/// Describes a load permission.
class LoadPermissionRequest {
  /// The name of the group.
  final PermissionGroup group;

  /// The AWS account ID.
  final String userId;

  LoadPermissionRequest({
    this.group,
    this.userId,
  });
}

/// Describes a local gateway.
class LocalGateway {
  /// The ID of the local gateway.
  final String localGatewayId;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String outpostArn;

  /// The ID of the AWS account ID that owns the local gateway.
  final String ownerId;

  /// The state of the local gateway.
  final String state;

  /// The tags assigned to the local gateway.
  final List<Tag> tags;

  LocalGateway({
    this.localGatewayId,
    this.outpostArn,
    this.ownerId,
    this.state,
    this.tags,
  });
}

/// Describes a route for a local gateway route table.
class LocalGatewayRoute {
  /// The CIDR block used for destination matches.
  final String destinationCidrBlock;

  /// The ID of the local gateway route table.
  final String localGatewayRouteTableId;

  /// The ID of the virtual interface group.
  final String localGatewayVirtualInterfaceGroupId;

  /// The state of the route.
  final LocalGatewayRouteState state;

  /// The route type.
  final LocalGatewayRouteType type;

  LocalGatewayRoute({
    this.destinationCidrBlock,
    this.localGatewayRouteTableId,
    this.localGatewayVirtualInterfaceGroupId,
    this.state,
    this.type,
  });
}

enum LocalGatewayRouteState {
  pending,
  active,
  blackhole,
  deleting,
  deleted,
}

/// Describes a local gateway route table.
class LocalGatewayRouteTable {
  /// The ID of the local gateway.
  final String localGatewayId;

  /// The ID of the local gateway route table.
  final String localGatewayRouteTableId;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String outpostArn;

  /// The state of the local gateway route table.
  final String state;

  /// The tags assigned to the local gateway route table.
  final List<Tag> tags;

  LocalGatewayRouteTable({
    this.localGatewayId,
    this.localGatewayRouteTableId,
    this.outpostArn,
    this.state,
    this.tags,
  });
}

/// Describes an association between a local gateway route table and a virtual
/// interface group.
class LocalGatewayRouteTableVirtualInterfaceGroupAssociation {
  /// The ID of the local gateway.
  final String localGatewayId;

  /// The ID of the local gateway route table.
  final String localGatewayRouteTableId;

  /// The ID of the association.
  final String localGatewayRouteTableVirtualInterfaceGroupAssociationId;

  /// The ID of the virtual interface group.
  final String localGatewayVirtualInterfaceGroupId;

  /// The state of the association.
  final String state;

  /// The tags assigned to the association.
  final List<Tag> tags;

  LocalGatewayRouteTableVirtualInterfaceGroupAssociation({
    this.localGatewayId,
    this.localGatewayRouteTableId,
    this.localGatewayRouteTableVirtualInterfaceGroupAssociationId,
    this.localGatewayVirtualInterfaceGroupId,
    this.state,
    this.tags,
  });
}

/// Describes an association between a local gateway route table and a VPC.
class LocalGatewayRouteTableVpcAssociation {
  /// The ID of the local gateway.
  final String localGatewayId;

  /// The ID of the local gateway route table.
  final String localGatewayRouteTableId;

  /// The ID of the association.
  final String localGatewayRouteTableVpcAssociationId;

  /// The state of the association.
  final String state;

  /// The tags assigned to the association.
  final List<Tag> tags;

  /// The ID of the VPC.
  final String vpcId;

  LocalGatewayRouteTableVpcAssociation({
    this.localGatewayId,
    this.localGatewayRouteTableId,
    this.localGatewayRouteTableVpcAssociationId,
    this.state,
    this.tags,
    this.vpcId,
  });
}

enum LocalGatewayRouteType {
  static,
  propagated,
}

/// Describes a local gateway virtual interface.
class LocalGatewayVirtualInterface {
  /// The local address.
  final String localAddress;

  /// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of the
  /// local gateway.
  final int localBgpAsn;

  /// The ID of the local gateway.
  final String localGatewayId;

  /// The ID of the virtual interface.
  final String localGatewayVirtualInterfaceId;

  /// The peer address.
  final String peerAddress;

  /// The peer BGP ASN.
  final int peerBgpAsn;

  /// The tags assigned to the virtual interface.
  final List<Tag> tags;

  /// The ID of the VLAN.
  final int vlan;

  LocalGatewayVirtualInterface({
    this.localAddress,
    this.localBgpAsn,
    this.localGatewayId,
    this.localGatewayVirtualInterfaceId,
    this.peerAddress,
    this.peerBgpAsn,
    this.tags,
    this.vlan,
  });
}

/// Describes a local gateway virtual interface group.
class LocalGatewayVirtualInterfaceGroup {
  /// The ID of the local gateway.
  final String localGatewayId;

  /// The ID of the virtual interface group.
  final String localGatewayVirtualInterfaceGroupId;

  /// The IDs of the virtual interfaces.
  final List<String> localGatewayVirtualInterfaceIds;

  /// The tags assigned to the virtual interface group.
  final List<Tag> tags;

  LocalGatewayVirtualInterfaceGroup({
    this.localGatewayId,
    this.localGatewayVirtualInterfaceGroupId,
    this.localGatewayVirtualInterfaceIds,
    this.tags,
  });
}

enum LocationType {
  region,
  availabilityZone,
  availabilityZoneId,
}

enum LogDestinationType {
  cloudWatchLogs,
  s3,
}

enum MarketType {
  spot,
}

enum MembershipType {
  static,
  igmp,
}

/// Describes the memory for the instance type.
class MemoryInfo {
  /// Size of the memory, in MiB.
  final int sizeInMiB;

  MemoryInfo({
    this.sizeInMiB,
  });
}

class ModifyAvailabilityZoneGroupResult {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool returnValue;

  ModifyAvailabilityZoneGroupResult({
    this.returnValue,
  });
}

enum ModifyAvailabilityZoneOptInStatus {
  optedIn,
  notOptedIn,
}

class ModifyCapacityReservationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  ModifyCapacityReservationResult({
    this.returnValue,
  });
}

class ModifyClientVpnEndpointResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  ModifyClientVpnEndpointResult({
    this.returnValue,
  });
}

class ModifyDefaultCreditSpecificationResult {
  /// The default credit option for CPU usage of the instance family.
  final InstanceFamilyCreditSpecification instanceFamilyCreditSpecification;

  ModifyDefaultCreditSpecificationResult({
    this.instanceFamilyCreditSpecification,
  });
}

class ModifyEbsDefaultKmsKeyIdResult {
  /// The Amazon Resource Name (ARN) of the default CMK for encryption by default.
  final String kmsKeyId;

  ModifyEbsDefaultKmsKeyIdResult({
    this.kmsKeyId,
  });
}

class ModifyFleetResult {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool returnValue;

  ModifyFleetResult({
    this.returnValue,
  });
}

class ModifyFpgaImageAttributeResult {
  /// Information about the attribute.
  final FpgaImageAttribute fpgaImageAttribute;

  ModifyFpgaImageAttributeResult({
    this.fpgaImageAttribute,
  });
}

class ModifyHostsResult {
  /// The IDs of the Dedicated Hosts that were successfully modified.
  final List<String> successful;

  /// The IDs of the Dedicated Hosts that could not be modified. Check whether the
  /// setting you requested can be used.
  final List<UnsuccessfulItem> unsuccessful;

  ModifyHostsResult({
    this.successful,
    this.unsuccessful,
  });
}

class ModifyInstanceCapacityReservationAttributesResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  ModifyInstanceCapacityReservationAttributesResult({
    this.returnValue,
  });
}

class ModifyInstanceCreditSpecificationResult {
  /// Information about the instances whose credit option for CPU usage was
  /// successfully modified.
  final List<SuccessfulInstanceCreditSpecificationItem>
      successfulInstanceCreditSpecifications;

  /// Information about the instances whose credit option for CPU usage was not
  /// modified.
  final List<UnsuccessfulInstanceCreditSpecificationItem>
      unsuccessfulInstanceCreditSpecifications;

  ModifyInstanceCreditSpecificationResult({
    this.successfulInstanceCreditSpecifications,
    this.unsuccessfulInstanceCreditSpecifications,
  });
}

class ModifyInstanceEventStartTimeResult {
  final InstanceStatusEvent event;

  ModifyInstanceEventStartTimeResult({
    this.event,
  });
}

class ModifyInstanceMetadataOptionsResult {
  /// The ID of the instance.
  final String instanceId;

  /// The metadata options for the instance.
  final InstanceMetadataOptionsResponse instanceMetadataOptions;

  ModifyInstanceMetadataOptionsResult({
    this.instanceId,
    this.instanceMetadataOptions,
  });
}

class ModifyInstancePlacementResult {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool returnValue;

  ModifyInstancePlacementResult({
    this.returnValue,
  });
}

class ModifyLaunchTemplateResult {
  /// Information about the launch template.
  final LaunchTemplate launchTemplate;

  ModifyLaunchTemplateResult({
    this.launchTemplate,
  });
}

/// Contains the output of ModifyReservedInstances.
class ModifyReservedInstancesResult {
  /// The ID for the modification.
  final String reservedInstancesModificationId;

  ModifyReservedInstancesResult({
    this.reservedInstancesModificationId,
  });
}

/// Contains the output of ModifySpotFleetRequest.
class ModifySpotFleetRequestResponse {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool returnValue;

  ModifySpotFleetRequestResponse({
    this.returnValue,
  });
}

class ModifyTrafficMirrorFilterNetworkServicesResult {
  /// The Traffic Mirror filter that the network service is associated with.
  final TrafficMirrorFilter trafficMirrorFilter;

  ModifyTrafficMirrorFilterNetworkServicesResult({
    this.trafficMirrorFilter,
  });
}

class ModifyTrafficMirrorFilterRuleResult {
  /// Modifies a Traffic Mirror rule.
  final TrafficMirrorFilterRule trafficMirrorFilterRule;

  ModifyTrafficMirrorFilterRuleResult({
    this.trafficMirrorFilterRule,
  });
}

class ModifyTrafficMirrorSessionResult {
  /// Information about the Traffic Mirror session.
  final TrafficMirrorSession trafficMirrorSession;

  ModifyTrafficMirrorSessionResult({
    this.trafficMirrorSession,
  });
}

/// Describes the options for a VPC attachment.
class ModifyTransitGatewayVpcAttachmentRequestOptions {
  /// Enable or disable DNS support. The default is <code>enable</code>.
  final DnsSupportValue dnsSupport;

  /// Enable or disable IPv6 support. The default is <code>enable</code>.
  final Ipv6SupportValue ipv6Support;

  ModifyTransitGatewayVpcAttachmentRequestOptions({
    this.dnsSupport,
    this.ipv6Support,
  });
}

class ModifyTransitGatewayVpcAttachmentResult {
  /// Information about the modified attachment.
  final TransitGatewayVpcAttachment transitGatewayVpcAttachment;

  ModifyTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });
}

class ModifyVolumeResult {
  /// Information about the volume modification.
  final VolumeModification volumeModification;

  ModifyVolumeResult({
    this.volumeModification,
  });
}

class ModifyVpcEndpointConnectionNotificationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  ModifyVpcEndpointConnectionNotificationResult({
    this.returnValue,
  });
}

class ModifyVpcEndpointResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  ModifyVpcEndpointResult({
    this.returnValue,
  });
}

class ModifyVpcEndpointServiceConfigurationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  ModifyVpcEndpointServiceConfigurationResult({
    this.returnValue,
  });
}

class ModifyVpcEndpointServicePermissionsResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  ModifyVpcEndpointServicePermissionsResult({
    this.returnValue,
  });
}

class ModifyVpcPeeringConnectionOptionsResult {
  /// Information about the VPC peering connection options for the accepter VPC.
  final PeeringConnectionOptions accepterPeeringConnectionOptions;

  /// Information about the VPC peering connection options for the requester VPC.
  final PeeringConnectionOptions requesterPeeringConnectionOptions;

  ModifyVpcPeeringConnectionOptionsResult({
    this.accepterPeeringConnectionOptions,
    this.requesterPeeringConnectionOptions,
  });
}

class ModifyVpcTenancyResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool returnValue;

  ModifyVpcTenancyResult({
    this.returnValue,
  });
}

class ModifyVpnConnectionResult {
  final VpnConnection vpnConnection;

  ModifyVpnConnectionResult({
    this.vpnConnection,
  });
}

class ModifyVpnTunnelCertificateResult {
  final VpnConnection vpnConnection;

  ModifyVpnTunnelCertificateResult({
    this.vpnConnection,
  });
}

class ModifyVpnTunnelOptionsResult {
  final VpnConnection vpnConnection;

  ModifyVpnTunnelOptionsResult({
    this.vpnConnection,
  });
}

/// The AWS Site-to-Site VPN tunnel options to modify.
class ModifyVpnTunnelOptionsSpecification {
  /// The number of seconds after which a DPD timeout occurs.
  ///
  /// Constraints: A value between 0 and 30.
  ///
  /// Default: <code>30</code>
  final int dPDTimeoutSeconds;

  /// The IKE versions that are permitted for the VPN tunnel.
  ///
  /// Valid values: <code>ikev1</code> | <code>ikev2</code>
  final List<IKEVersionsRequestListValue> iKEVersions;

  /// One or more Diffie-Hellman group numbers that are permitted for the VPN
  /// tunnel for phase 1 IKE negotiations.
  ///
  /// Valid values: <code>2</code> | <code>14</code> | <code>15</code> |
  /// <code>16</code> | <code>17</code> | <code>18</code> | <code>22</code> |
  /// <code>23</code> | <code>24</code>
  final List<Phase1DHGroupNumbersRequestListValue> phase1DHGroupNumbers;

  /// One or more encryption algorithms that are permitted for the VPN tunnel for
  /// phase 1 IKE negotiations.
  ///
  /// Valid values: <code>AES128</code> | <code>AES256</code>
  final List<Phase1EncryptionAlgorithmsRequestListValue>
      phase1EncryptionAlgorithms;

  /// One or more integrity algorithms that are permitted for the VPN tunnel for
  /// phase 1 IKE negotiations.
  ///
  /// Valid values: <code>SHA1</code> | <code>SHA2-256</code>
  final List<Phase1IntegrityAlgorithmsRequestListValue>
      phase1IntegrityAlgorithms;

  /// The lifetime for phase 1 of the IKE negotiation, in seconds.
  ///
  /// Constraints: A value between 900 and 28,800.
  ///
  /// Default: <code>28800</code>
  final int phase1LifetimeSeconds;

  /// One or more Diffie-Hellman group numbers that are permitted for the VPN
  /// tunnel for phase 2 IKE negotiations.
  ///
  /// Valid values: <code>2</code> | <code>5</code> | <code>14</code> |
  /// <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> |
  /// <code>22</code> | <code>23</code> | <code>24</code>
  final List<Phase2DHGroupNumbersRequestListValue> phase2DHGroupNumbers;

  /// One or more encryption algorithms that are permitted for the VPN tunnel for
  /// phase 2 IKE negotiations.
  ///
  /// Valid values: <code>AES128</code> | <code>AES256</code>
  final List<Phase2EncryptionAlgorithmsRequestListValue>
      phase2EncryptionAlgorithms;

  /// One or more integrity algorithms that are permitted for the VPN tunnel for
  /// phase 2 IKE negotiations.
  ///
  /// Valid values: <code>SHA1</code> | <code>SHA2-256</code>
  final List<Phase2IntegrityAlgorithmsRequestListValue>
      phase2IntegrityAlgorithms;

  /// The lifetime for phase 2 of the IKE negotiation, in seconds.
  ///
  /// Constraints: A value between 900 and 3,600. The value must be less than the
  /// value for <code>Phase1LifetimeSeconds</code>.
  ///
  /// Default: <code>3600</code>
  final int phase2LifetimeSeconds;

  /// The pre-shared key (PSK) to establish initial authentication between the
  /// virtual private gateway and the customer gateway.
  ///
  /// Constraints: Allowed characters are alphanumeric characters, periods (.),
  /// and underscores (_). Must be between 8 and 64 characters in length and
  /// cannot start with zero (0).
  final String preSharedKey;

  /// The percentage of the rekey window (determined by
  /// <code>RekeyMarginTimeSeconds</code>) during which the rekey time is randomly
  /// selected.
  ///
  /// Constraints: A value between 0 and 100.
  ///
  /// Default: <code>100</code>
  final int rekeyFuzzPercentage;

  /// The margin time, in seconds, before the phase 2 lifetime expires, during
  /// which the AWS side of the VPN connection performs an IKE rekey. The exact
  /// time of the rekey is randomly selected based on the value for
  /// <code>RekeyFuzzPercentage</code>.
  ///
  /// Constraints: A value between 60 and half of
  /// <code>Phase2LifetimeSeconds</code>.
  ///
  /// Default: <code>540</code>
  final int rekeyMarginTimeSeconds;

  /// The number of packets in an IKE replay window.
  ///
  /// Constraints: A value between 64 and 2048.
  ///
  /// Default: <code>1024</code>
  final int replayWindowSize;

  /// The range of inside IP addresses for the tunnel. Any specified CIDR blocks
  /// must be unique across all VPN connections that use the same virtual private
  /// gateway.
  ///
  /// Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code>
  /// range. The following CIDR blocks are reserved and cannot be used:
  ///
  /// <ul>
  /// <li>
  /// <code>169.254.0.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.1.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.2.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.3.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.4.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.5.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.169.252/30</code>
  /// </li>
  /// </ul>
  final String tunnelInsideCidr;

  ModifyVpnTunnelOptionsSpecification({
    this.dPDTimeoutSeconds,
    this.iKEVersions,
    this.phase1DHGroupNumbers,
    this.phase1EncryptionAlgorithms,
    this.phase1IntegrityAlgorithms,
    this.phase1LifetimeSeconds,
    this.phase2DHGroupNumbers,
    this.phase2EncryptionAlgorithms,
    this.phase2IntegrityAlgorithms,
    this.phase2LifetimeSeconds,
    this.preSharedKey,
    this.rekeyFuzzPercentage,
    this.rekeyMarginTimeSeconds,
    this.replayWindowSize,
    this.tunnelInsideCidr,
  });
}

class MonitorInstancesResult {
  /// The monitoring information.
  final List<InstanceMonitoring> instanceMonitorings;

  MonitorInstancesResult({
    this.instanceMonitorings,
  });
}

/// Describes the monitoring of an instance.
class Monitoring {
  /// Indicates whether detailed monitoring is enabled. Otherwise, basic
  /// monitoring is enabled.
  final MonitoringState state;

  Monitoring({
    this.state,
  });
}

enum MonitoringState {
  disabled,
  disabling,
  enabled,
  pending,
}

class MoveAddressToVpcResult {
  /// The allocation ID for the Elastic IP address.
  final String allocationId;

  /// The status of the move of the IP address.
  final Status status;

  MoveAddressToVpcResult({
    this.allocationId,
    this.status,
  });
}

enum MoveStatus {
  movingToVpc,
  restoringToClassic,
}

/// Describes the status of a moving Elastic IP address.
class MovingAddressStatus {
  /// The status of the Elastic IP address that's being moved to the EC2-VPC
  /// platform, or restored to the EC2-Classic platform.
  final MoveStatus moveStatus;

  /// The Elastic IP address.
  final String publicIp;

  MovingAddressStatus({
    this.moveStatus,
    this.publicIp,
  });
}

enum MulticastSupportValue {
  enable,
  disable,
}

/// Describes a NAT gateway.
class NatGateway {
  /// The date and time the NAT gateway was created.
  final DateTime createTime;

  /// The date and time the NAT gateway was deleted, if applicable.
  final DateTime deleteTime;

  /// If the NAT gateway could not be created, specifies the error code for the
  /// failure. (<code>InsufficientFreeAddressesInSubnet</code> |
  /// <code>Gateway.NotAttached</code> | <code>InvalidAllocationID.NotFound</code>
  /// | <code>Resource.AlreadyAssociated</code> | <code>InternalError</code> |
  /// <code>InvalidSubnetID.NotFound</code>)
  final String failureCode;

  /// If the NAT gateway could not be created, specifies the error message for the
  /// failure, that corresponds to the error code.
  ///
  /// <ul>
  /// <li>
  /// For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free
  /// addresses to create this NAT gateway"
  /// </li>
  /// <li>
  /// For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway
  /// attached"
  /// </li>
  /// <li>
  /// For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx
  /// could not be associated with this NAT gateway"
  /// </li>
  /// <li>
  /// For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is
  /// already associated"
  /// </li>
  /// <li>
  /// For InternalError: "Network interface eni-xxxxxxxx, created and used
  /// internally by this NAT gateway is in an invalid state. Please try again."
  /// </li>
  /// <li>
  /// For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not
  /// exist or could not be found."
  /// </li>
  /// </ul>
  final String failureMessage;

  /// Information about the IP addresses and network interface associated with the
  /// NAT gateway.
  final List<NatGatewayAddress> natGatewayAddresses;

  /// The ID of the NAT gateway.
  final String natGatewayId;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final ProvisionedBandwidth provisionedBandwidth;

  /// The state of the NAT gateway.
  ///
  /// <ul>
  /// <li>
  /// <code>pending</code>: The NAT gateway is being created and is not ready to
  /// process traffic.
  /// </li>
  /// <li>
  /// <code>failed</code>: The NAT gateway could not be created. Check the
  /// <code>failureCode</code> and <code>failureMessage</code> fields for the
  /// reason.
  /// </li>
  /// <li>
  /// <code>available</code>: The NAT gateway is able to process traffic. This
  /// status remains until you delete the NAT gateway, and does not indicate the
  /// health of the NAT gateway.
  /// </li>
  /// <li>
  /// <code>deleting</code>: The NAT gateway is in the process of being terminated
  /// and may still be processing traffic.
  /// </li>
  /// <li>
  /// <code>deleted</code>: The NAT gateway has been terminated and is no longer
  /// processing traffic.
  /// </li>
  /// </ul>
  final NatGatewayState state;

  /// The ID of the subnet in which the NAT gateway is located.
  final String subnetId;

  /// The tags for the NAT gateway.
  final List<Tag> tags;

  /// The ID of the VPC in which the NAT gateway is located.
  final String vpcId;

  NatGateway({
    this.createTime,
    this.deleteTime,
    this.failureCode,
    this.failureMessage,
    this.natGatewayAddresses,
    this.natGatewayId,
    this.provisionedBandwidth,
    this.state,
    this.subnetId,
    this.tags,
    this.vpcId,
  });
}

/// Describes the IP addresses and network interface associated with a NAT
/// gateway.
class NatGatewayAddress {
  /// The allocation ID of the Elastic IP address that's associated with the NAT
  /// gateway.
  final String allocationId;

  /// The ID of the network interface associated with the NAT gateway.
  final String networkInterfaceId;

  /// The private IP address associated with the Elastic IP address.
  final String privateIp;

  /// The Elastic IP address associated with the NAT gateway.
  final String publicIp;

  NatGatewayAddress({
    this.allocationId,
    this.networkInterfaceId,
    this.privateIp,
    this.publicIp,
  });
}

enum NatGatewayState {
  pending,
  failed,
  available,
  deleting,
  deleted,
}

/// Describes a network ACL.
class NetworkAcl {
  /// Any associations between the network ACL and one or more subnets
  final List<NetworkAclAssociation> associations;

  /// One or more entries (rules) in the network ACL.
  final List<NetworkAclEntry> entries;

  /// Indicates whether this is the default network ACL for the VPC.
  final bool isDefault;

  /// The ID of the network ACL.
  final String networkAclId;

  /// The ID of the AWS account that owns the network ACL.
  final String ownerId;

  /// Any tags assigned to the network ACL.
  final List<Tag> tags;

  /// The ID of the VPC for the network ACL.
  final String vpcId;

  NetworkAcl({
    this.associations,
    this.entries,
    this.isDefault,
    this.networkAclId,
    this.ownerId,
    this.tags,
    this.vpcId,
  });
}

/// Describes an association between a network ACL and a subnet.
class NetworkAclAssociation {
  /// The ID of the association between a network ACL and a subnet.
  final String networkAclAssociationId;

  /// The ID of the network ACL.
  final String networkAclId;

  /// The ID of the subnet.
  final String subnetId;

  NetworkAclAssociation({
    this.networkAclAssociationId,
    this.networkAclId,
    this.subnetId,
  });
}

/// Describes an entry in a network ACL.
class NetworkAclEntry {
  /// The IPv4 network range to allow or deny, in CIDR notation.
  final String cidrBlock;

  /// Indicates whether the rule is an egress rule (applied to traffic leaving the
  /// subnet).
  final bool egress;

  /// ICMP protocol: The ICMP type and code.
  final IcmpTypeCode icmpTypeCode;

  /// The IPv6 network range to allow or deny, in CIDR notation.
  final String ipv6CidrBlock;

  /// TCP or UDP protocols: The range of ports the rule applies to.
  final PortRange portRange;

  /// The protocol number. A value of "-1" means all protocols.
  final String protocol;

  /// Indicates whether to allow or deny the traffic that matches the rule.
  final RuleAction ruleAction;

  /// The rule number for the entry. ACL entries are processed in ascending order
  /// by rule number.
  final int ruleNumber;

  NetworkAclEntry({
    this.cidrBlock,
    this.egress,
    this.icmpTypeCode,
    this.ipv6CidrBlock,
    this.portRange,
    this.protocol,
    this.ruleAction,
    this.ruleNumber,
  });
}

/// Describes the networking features of the instance type.
class NetworkInfo {
  /// Indicates whether Elastic Network Adapter (ENA) is supported.
  final EnaSupport enaSupport;

  /// The maximum number of IPv4 addresses per network interface.
  final int ipv4AddressesPerInterface;

  /// The maximum number of IPv6 addresses per network interface.
  final int ipv6AddressesPerInterface;

  /// Indicates whether IPv6 is supported.
  final bool ipv6Supported;

  /// The maximum number of network interfaces for the instance type.
  final int maximumNetworkInterfaces;

  /// Describes the network performance.
  final String networkPerformance;

  NetworkInfo({
    this.enaSupport,
    this.ipv4AddressesPerInterface,
    this.ipv6AddressesPerInterface,
    this.ipv6Supported,
    this.maximumNetworkInterfaces,
    this.networkPerformance,
  });
}

/// Describes a network interface.
class NetworkInterface {
  /// The association information for an Elastic IP address (IPv4) associated with
  /// the network interface.
  final NetworkInterfaceAssociation association;

  /// The network interface attachment.
  final NetworkInterfaceAttachment attachment;

  /// The Availability Zone.
  final String availabilityZone;

  /// A description.
  final String description;

  /// Any security groups for the network interface.
  final List<GroupIdentifier> groups;

  /// The type of network interface.
  final NetworkInterfaceType interfaceType;

  /// The IPv6 addresses associated with the network interface.
  final List<NetworkInterfaceIpv6Address> ipv6Addresses;

  /// The MAC address.
  final String macAddress;

  /// The ID of the network interface.
  final String networkInterfaceId;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String outpostArn;

  /// The AWS account ID of the owner of the network interface.
  final String ownerId;

  /// The private DNS name.
  final String privateDnsName;

  /// The IPv4 address of the network interface within the subnet.
  final String privateIpAddress;

  /// The private IPv4 addresses associated with the network interface.
  final List<NetworkInterfacePrivateIpAddress> privateIpAddresses;

  /// The ID of the entity that launched the instance on your behalf (for example,
  /// AWS Management Console or Auto Scaling).
  final String requesterId;

  /// Indicates whether the network interface is being managed by AWS.
  final bool requesterManaged;

  /// Indicates whether traffic to or from the instance is validated.
  final bool sourceDestCheck;

  /// The status of the network interface.
  final NetworkInterfaceStatus status;

  /// The ID of the subnet.
  final String subnetId;

  /// Any tags assigned to the network interface.
  final List<Tag> tagSet;

  /// The ID of the VPC.
  final String vpcId;

  NetworkInterface({
    this.association,
    this.attachment,
    this.availabilityZone,
    this.description,
    this.groups,
    this.interfaceType,
    this.ipv6Addresses,
    this.macAddress,
    this.networkInterfaceId,
    this.outpostArn,
    this.ownerId,
    this.privateDnsName,
    this.privateIpAddress,
    this.privateIpAddresses,
    this.requesterId,
    this.requesterManaged,
    this.sourceDestCheck,
    this.status,
    this.subnetId,
    this.tagSet,
    this.vpcId,
  });
}

/// Describes association information for an Elastic IP address (IPv4 only).
class NetworkInterfaceAssociation {
  /// The allocation ID.
  final String allocationId;

  /// The association ID.
  final String associationId;

  /// The ID of the Elastic IP address owner.
  final String ipOwnerId;

  /// The public DNS name.
  final String publicDnsName;

  /// The address of the Elastic IP address bound to the network interface.
  final String publicIp;

  NetworkInterfaceAssociation({
    this.allocationId,
    this.associationId,
    this.ipOwnerId,
    this.publicDnsName,
    this.publicIp,
  });
}

/// Describes a network interface attachment.
class NetworkInterfaceAttachment {
  /// The timestamp indicating when the attachment initiated.
  final DateTime attachTime;

  /// The ID of the network interface attachment.
  final String attachmentId;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool deleteOnTermination;

  /// The device index of the network interface attachment on the instance.
  final int deviceIndex;

  /// The ID of the instance.
  final String instanceId;

  /// The AWS account ID of the owner of the instance.
  final String instanceOwnerId;

  /// The attachment state.
  final AttachmentStatus status;

  NetworkInterfaceAttachment({
    this.attachTime,
    this.attachmentId,
    this.deleteOnTermination,
    this.deviceIndex,
    this.instanceId,
    this.instanceOwnerId,
    this.status,
  });
}

/// Describes an attachment change.
class NetworkInterfaceAttachmentChanges {
  /// The ID of the network interface attachment.
  final String attachmentId;

  /// Indicates whether the network interface is deleted when the instance is
  /// terminated.
  final bool deleteOnTermination;

  NetworkInterfaceAttachmentChanges({
    this.attachmentId,
    this.deleteOnTermination,
  });
}

enum NetworkInterfaceAttribute {
  description,
  groupSet,
  sourceDestCheck,
  attachment,
}

enum NetworkInterfaceCreationType {
  efa,
}

/// Describes an IPv6 address associated with a network interface.
class NetworkInterfaceIpv6Address {
  /// The IPv6 address.
  final String ipv6Address;

  NetworkInterfaceIpv6Address({
    this.ipv6Address,
  });
}

/// Describes a permission for a network interface.
class NetworkInterfacePermission {
  /// The AWS account ID.
  final String awsAccountId;

  /// The AWS service.
  final String awsService;

  /// The ID of the network interface.
  final String networkInterfaceId;

  /// The ID of the network interface permission.
  final String networkInterfacePermissionId;

  /// The type of permission.
  final InterfacePermissionType permission;

  /// Information about the state of the permission.
  final NetworkInterfacePermissionState permissionState;

  NetworkInterfacePermission({
    this.awsAccountId,
    this.awsService,
    this.networkInterfaceId,
    this.networkInterfacePermissionId,
    this.permission,
    this.permissionState,
  });
}

/// Describes the state of a network interface permission.
class NetworkInterfacePermissionState {
  /// The state of the permission.
  final NetworkInterfacePermissionStateCode state;

  /// A status message, if applicable.
  final String statusMessage;

  NetworkInterfacePermissionState({
    this.state,
    this.statusMessage,
  });
}

enum NetworkInterfacePermissionStateCode {
  pending,
  granted,
  revoking,
  revoked,
}

/// Describes the private IPv4 address of a network interface.
class NetworkInterfacePrivateIpAddress {
  /// The association information for an Elastic IP address (IPv4) associated with
  /// the network interface.
  final NetworkInterfaceAssociation association;

  /// Indicates whether this IPv4 address is the primary private IPv4 address of
  /// the network interface.
  final bool primary;

  /// The private DNS name.
  final String privateDnsName;

  /// The private IPv4 address.
  final String privateIpAddress;

  NetworkInterfacePrivateIpAddress({
    this.association,
    this.primary,
    this.privateDnsName,
    this.privateIpAddress,
  });
}

enum NetworkInterfaceStatus {
  available,
  associated,
  attaching,
  inUse,
  detaching,
}

enum NetworkInterfaceType {
  interface,
  natGateway,
  efa,
}

class NewDhcpConfiguration {
  final String key;
  final List<String> values;

  NewDhcpConfiguration({
    this.key,
    this.values,
  });
}

enum OfferingClassType {
  standard,
  convertible,
}

enum OfferingTypeValues {
  heavyUtilization,
  mediumUtilization,
  lightUtilization,
  noUpfront,
  partialUpfront,
  allUpfront,
}

enum OnDemandAllocationStrategy {
  lowestPrice,
  prioritized,
}

/// Describes the configuration of On-Demand Instances in an EC2 Fleet.
class OnDemandOptions {
  /// The order of the launch template overrides to use in fulfilling On-Demand
  /// capacity. If you specify <code>lowest-price</code>, EC2 Fleet uses price to
  /// determine the order, launching the lowest price first. If you specify
  /// <code>prioritized</code>, EC2 Fleet uses the priority that you assigned to
  /// each launch template override, launching the highest priority first. If you
  /// do not specify a value, EC2 Fleet defaults to <code>lowest-price</code>.
  final FleetOnDemandAllocationStrategy allocationStrategy;

  /// The strategy for using unused Capacity Reservations for fulfilling On-Demand
  /// capacity. Supported only for fleets of type <code>instant</code>.
  final CapacityReservationOptions capacityReservationOptions;

  /// The maximum amount per hour for On-Demand Instances that you're willing to
  /// pay.
  final String maxTotalPrice;

  /// The minimum target capacity for On-Demand Instances in the fleet. If the
  /// minimum target capacity is not reached, the fleet launches no instances.
  final int minTargetCapacity;

  /// Indicates that the fleet launches all On-Demand Instances into a single
  /// Availability Zone. Supported only for fleets of type <code>instant</code>.
  final bool singleAvailabilityZone;

  /// Indicates that the fleet uses a single instance type to launch all On-Demand
  /// Instances in the fleet. Supported only for fleets of type
  /// <code>instant</code>.
  final bool singleInstanceType;

  OnDemandOptions({
    this.allocationStrategy,
    this.capacityReservationOptions,
    this.maxTotalPrice,
    this.minTargetCapacity,
    this.singleAvailabilityZone,
    this.singleInstanceType,
  });
}

/// Describes the configuration of On-Demand Instances in an EC2 Fleet.
class OnDemandOptionsRequest {
  /// The order of the launch template overrides to use in fulfilling On-Demand
  /// capacity. If you specify <code>lowest-price</code>, EC2 Fleet uses price to
  /// determine the order, launching the lowest price first. If you specify
  /// <code>prioritized</code>, EC2 Fleet uses the priority that you assigned to
  /// each launch template override, launching the highest priority first. If you
  /// do not specify a value, EC2 Fleet defaults to <code>lowest-price</code>.
  final FleetOnDemandAllocationStrategy allocationStrategy;

  /// The strategy for using unused Capacity Reservations for fulfilling On-Demand
  /// capacity. Supported only for fleets of type <code>instant</code>.
  final CapacityReservationOptionsRequest capacityReservationOptions;

  /// The maximum amount per hour for On-Demand Instances that you're willing to
  /// pay.
  final String maxTotalPrice;

  /// The minimum target capacity for On-Demand Instances in the fleet. If the
  /// minimum target capacity is not reached, the fleet launches no instances.
  final int minTargetCapacity;

  /// Indicates that the fleet launches all On-Demand Instances into a single
  /// Availability Zone. Supported only for fleets of type <code>instant</code>.
  final bool singleAvailabilityZone;

  /// Indicates that the fleet uses a single instance type to launch all On-Demand
  /// Instances in the fleet. Supported only for fleets of type
  /// <code>instant</code>.
  final bool singleInstanceType;

  OnDemandOptionsRequest({
    this.allocationStrategy,
    this.capacityReservationOptions,
    this.maxTotalPrice,
    this.minTargetCapacity,
    this.singleAvailabilityZone,
    this.singleInstanceType,
  });
}

enum OperationType {
  add,
  remove,
}

enum PaymentOption {
  allUpfront,
  partialUpfront,
  noUpfront,
}

/// Describes the data that identifies an Amazon FPGA image (AFI) on the PCI
/// bus.
class PciId {
  /// The ID of the device.
  final String deviceId;

  /// The ID of the subsystem.
  final String subsystemId;

  /// The ID of the vendor for the subsystem.
  final String subsystemVendorId;

  /// The ID of the vendor.
  final String vendorId;

  PciId({
    this.deviceId,
    this.subsystemId,
    this.subsystemVendorId,
    this.vendorId,
  });
}

/// The status of the transit gateway peering attachment.
class PeeringAttachmentStatus {
  /// The status code.
  final String code;

  /// The status message, if applicable.
  final String message;

  PeeringAttachmentStatus({
    this.code,
    this.message,
  });
}

/// Describes the VPC peering connection options.
class PeeringConnectionOptions {
  /// If true, the public DNS hostnames of instances in the specified VPC resolve
  /// to private IP addresses when queried from instances in the peer VPC.
  final bool allowDnsResolutionFromRemoteVpc;

  /// If true, enables outbound communication from an EC2-Classic instance that's
  /// linked to a local VPC using ClassicLink to instances in a peer VPC.
  final bool allowEgressFromLocalClassicLinkToRemoteVpc;

  /// If true, enables outbound communication from instances in a local VPC to an
  /// EC2-Classic instance that's linked to a peer VPC using ClassicLink.
  final bool allowEgressFromLocalVpcToRemoteClassicLink;

  PeeringConnectionOptions({
    this.allowDnsResolutionFromRemoteVpc,
    this.allowEgressFromLocalClassicLinkToRemoteVpc,
    this.allowEgressFromLocalVpcToRemoteClassicLink,
  });
}

/// The VPC peering connection options.
class PeeringConnectionOptionsRequest {
  /// If true, enables a local VPC to resolve public DNS hostnames to private IP
  /// addresses when queried from instances in the peer VPC.
  final bool allowDnsResolutionFromRemoteVpc;

  /// If true, enables outbound communication from an EC2-Classic instance that's
  /// linked to a local VPC using ClassicLink to instances in a peer VPC.
  final bool allowEgressFromLocalClassicLinkToRemoteVpc;

  /// If true, enables outbound communication from instances in a local VPC to an
  /// EC2-Classic instance that's linked to a peer VPC using ClassicLink.
  final bool allowEgressFromLocalVpcToRemoteClassicLink;

  PeeringConnectionOptionsRequest({
    this.allowDnsResolutionFromRemoteVpc,
    this.allowEgressFromLocalClassicLinkToRemoteVpc,
    this.allowEgressFromLocalVpcToRemoteClassicLink,
  });
}

/// Information about the transit gateway in the peering attachment.
class PeeringTgwInfo {
  /// The AWS account ID of the owner of the transit gateway.
  final String ownerId;

  /// The Region of the transit gateway.
  final String region;

  /// The ID of the transit gateway.
  final String transitGatewayId;

  PeeringTgwInfo({
    this.ownerId,
    this.region,
    this.transitGatewayId,
  });
}

enum PermissionGroup {
  all,
}

/// The Diffie-Hellmann group number for phase 1 IKE negotiations.
class Phase1DHGroupNumbersListValue {
  /// The Diffie-Hellmann group number.
  final int value;

  Phase1DHGroupNumbersListValue({
    this.value,
  });
}

/// Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE
/// negotiations.
class Phase1DHGroupNumbersRequestListValue {
  /// The Diffie-Hellmann group number.
  final int value;

  Phase1DHGroupNumbersRequestListValue({
    this.value,
  });
}

/// The encryption algorithm for phase 1 IKE negotiations.
class Phase1EncryptionAlgorithmsListValue {
  /// The value for the encryption algorithm.
  final String value;

  Phase1EncryptionAlgorithmsListValue({
    this.value,
  });
}

/// Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE
/// negotiations.
class Phase1EncryptionAlgorithmsRequestListValue {
  /// The value for the encryption algorithm.
  final String value;

  Phase1EncryptionAlgorithmsRequestListValue({
    this.value,
  });
}

/// The integrity algorithm for phase 1 IKE negotiations.
class Phase1IntegrityAlgorithmsListValue {
  /// The value for the integrity algorithm.
  final String value;

  Phase1IntegrityAlgorithmsListValue({
    this.value,
  });
}

/// Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE
/// negotiations.
class Phase1IntegrityAlgorithmsRequestListValue {
  /// The value for the integrity algorithm.
  final String value;

  Phase1IntegrityAlgorithmsRequestListValue({
    this.value,
  });
}

/// The Diffie-Hellmann group number for phase 2 IKE negotiations.
class Phase2DHGroupNumbersListValue {
  /// The Diffie-Hellmann group number.
  final int value;

  Phase2DHGroupNumbersListValue({
    this.value,
  });
}

/// Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE
/// negotiations.
class Phase2DHGroupNumbersRequestListValue {
  /// The Diffie-Hellmann group number.
  final int value;

  Phase2DHGroupNumbersRequestListValue({
    this.value,
  });
}

/// The encryption algorithm for phase 2 IKE negotiations.
class Phase2EncryptionAlgorithmsListValue {
  /// The encryption algorithm.
  final String value;

  Phase2EncryptionAlgorithmsListValue({
    this.value,
  });
}

/// Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE
/// negotiations.
class Phase2EncryptionAlgorithmsRequestListValue {
  /// The encryption algorithm.
  final String value;

  Phase2EncryptionAlgorithmsRequestListValue({
    this.value,
  });
}

/// The integrity algorithm for phase 2 IKE negotiations.
class Phase2IntegrityAlgorithmsListValue {
  /// The integrity algorithm.
  final String value;

  Phase2IntegrityAlgorithmsListValue({
    this.value,
  });
}

/// Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE
/// negotiations.
class Phase2IntegrityAlgorithmsRequestListValue {
  /// The integrity algorithm.
  final String value;

  Phase2IntegrityAlgorithmsRequestListValue({
    this.value,
  });
}

/// Describes the placement of an instance.
class Placement {
  /// The affinity setting for the instance on the Dedicated Host. This parameter
  /// is not supported for the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html">ImportInstance</a>
  /// command.
  ///
  /// This parameter is not supported by <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final String affinity;

  /// The Availability Zone of the instance.
  ///
  /// If not specified, an Availability Zone will be automatically chosen for you
  /// based on the load balancing criteria for the Region.
  ///
  /// This parameter is not supported by <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final String availabilityZone;

  /// The name of the placement group the instance is in.
  final String groupName;

  /// The ID of the Dedicated Host on which the instance resides. This parameter
  /// is not supported for the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html">ImportInstance</a>
  /// command.
  ///
  /// This parameter is not supported by <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final String hostId;

  /// The ARN of the host resource group in which to launch the instances. If you
  /// specify a host resource group ARN, omit the <b>Tenancy</b> parameter or set
  /// it to <code>host</code>.
  ///
  /// This parameter is not supported by <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final String hostResourceGroupArn;

  /// The number of the partition the instance is in. Valid only if the placement
  /// group strategy is set to <code>partition</code>.
  ///
  /// This parameter is not supported by <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final int partitionNumber;

  /// Reserved for future use.
  ///
  /// This parameter is not supported by <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final String spreadDomain;

  /// The tenancy of the instance (if the instance is running in a VPC). An
  /// instance with a tenancy of <code>dedicated</code> runs on single-tenant
  /// hardware. The <code>host</code> tenancy is not supported for the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html">ImportInstance</a>
  /// command.
  ///
  /// This parameter is not supported by <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet">CreateFleet</a>.
  final Tenancy tenancy;

  Placement({
    this.affinity,
    this.availabilityZone,
    this.groupName,
    this.hostId,
    this.hostResourceGroupArn,
    this.partitionNumber,
    this.spreadDomain,
    this.tenancy,
  });
}

/// Describes a placement group.
class PlacementGroup {
  /// The ID of the placement group.
  final String groupId;

  /// The name of the placement group.
  final String groupName;

  /// The number of partitions. Valid only if <b>strategy</b> is set to
  /// <code>partition</code>.
  final int partitionCount;

  /// The state of the placement group.
  final PlacementGroupState state;

  /// The placement strategy.
  final PlacementStrategy strategy;

  /// Any tags applied to the placement group.
  final List<Tag> tags;

  PlacementGroup({
    this.groupId,
    this.groupName,
    this.partitionCount,
    this.state,
    this.strategy,
    this.tags,
  });
}

/// Describes the placement group support of the instance type.
class PlacementGroupInfo {
  /// A list of supported placement groups types.
  final List<String> supportedStrategies;

  PlacementGroupInfo({
    this.supportedStrategies,
  });
}

enum PlacementGroupState {
  pending,
  available,
  deleting,
  deleted,
}

enum PlacementGroupStrategy {
  cluster,
  partition,
  spread,
}

/// Describes the placement of an instance.
class PlacementResponse {
  /// The name of the placement group that the instance is in.
  final String groupName;

  PlacementResponse({
    this.groupName,
  });
}

enum PlacementStrategy {
  cluster,
  spread,
  partition,
}

enum PlatformValues {
  windows,
}

/// Describes a CIDR block for an address pool.
class PoolCidrBlock {
  /// The CIDR block.
  final String cidr;

  PoolCidrBlock({
    this.cidr,
  });
}

/// Describes a range of ports.
class PortRange {
  /// The first port in the range.
  final int from;

  /// The last port in the range.
  final int to;

  PortRange({
    this.from,
    this.to,
  });
}

/// Describes prefixes for AWS services.
class PrefixList {
  /// The IP address range of the AWS service.
  final List<String> cidrs;

  /// The ID of the prefix.
  final String prefixListId;

  /// The name of the prefix.
  final String prefixListName;

  PrefixList({
    this.cidrs,
    this.prefixListId,
    this.prefixListName,
  });
}

/// Describes a prefix list ID.
class PrefixListId {
  /// A description for the security group rule that references this prefix list
  /// ID.
  ///
  /// Constraints: Up to 255 characters in length. Allowed characters are a-z,
  /// A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
  final String description;

  /// The ID of the prefix.
  final String prefixListId;

  PrefixListId({
    this.description,
    this.prefixListId,
  });
}

/// Describes the price for a Reserved Instance.
class PriceSchedule {
  /// The current price schedule, as determined by the term remaining for the
  /// Reserved Instance in the listing.
  ///
  /// A specific price schedule is always in effect, but only one price schedule
  /// can be active at any time. Take, for example, a Reserved Instance listing
  /// that has five months remaining in its term. When you specify price schedules
  /// for five months and two months, this means that schedule 1, covering the
  /// first three months of the remaining term, will be active during months 5, 4,
  /// and 3. Then schedule 2, covering the last two months of the term, will be
  /// active for months 2 and 1.
  final bool active;

  /// The currency for transacting the Reserved Instance resale. At this time, the
  /// only supported currency is <code>USD</code>.
  final CurrencyCodeValues currencyCode;

  /// The fixed price for the term.
  final double price;

  /// The number of months remaining in the reservation. For example, 2 is the
  /// second to the last month before the capacity reservation expires.
  final int term;

  PriceSchedule({
    this.active,
    this.currencyCode,
    this.price,
    this.term,
  });
}

/// Describes the price for a Reserved Instance.
class PriceScheduleSpecification {
  /// The currency for transacting the Reserved Instance resale. At this time, the
  /// only supported currency is <code>USD</code>.
  final CurrencyCodeValues currencyCode;

  /// The fixed price for the term.
  final double price;

  /// The number of months remaining in the reservation. For example, 2 is the
  /// second to the last month before the capacity reservation expires.
  final int term;

  PriceScheduleSpecification({
    this.currencyCode,
    this.price,
    this.term,
  });
}

/// Describes a Reserved Instance offering.
class PricingDetail {
  /// The number of reservations available for the price.
  final int count;

  /// The price per instance.
  final double price;

  PricingDetail({
    this.count,
    this.price,
  });
}

/// PrincipalIdFormat description
class PrincipalIdFormat {
  /// PrincipalIdFormatARN description
  final String arn;

  /// PrincipalIdFormatStatuses description
  final List<IdFormat> statuses;

  PrincipalIdFormat({
    this.arn,
    this.statuses,
  });
}

enum PrincipalType {
  all,
  service,
  organizationUnit,
  account,
  user,
  role,
}

/// Information about the private DNS name for the service endpoint. For more
/// information about these parameters, see <a
/// href="https://docs.aws.amazon.com/vpc/latest/userguide/ndpoint-services-dns-validation.html">VPC
/// Endpoint Service Private DNS Name Verification</a> in the <i>Amazon Virtual
/// Private Cloud User Guide</i>.
class PrivateDnsNameConfiguration {
  /// The name of the record subdomain the service provider needs to create. The
  /// service provider adds the <code>value</code> text to the <code>name</code>.
  final String name;

  /// The verification state of the VPC endpoint service.
  ///
  /// &gt;Consumers of the endpoint service can use the private name only when the
  /// state is <code>verified</code>.
  final DnsNameState state;

  /// The endpoint service verification type, for example TXT.
  final String type;

  /// The value the service provider adds to the private DNS name domain record
  /// before verification.
  final String value;

  PrivateDnsNameConfiguration({
    this.name,
    this.state,
    this.type,
    this.value,
  });
}

/// Describes a secondary private IPv4 address for a network interface.
class PrivateIpAddressSpecification {
  /// Indicates whether the private IPv4 address is the primary private IPv4
  /// address. Only one IPv4 address can be designated as primary.
  final bool primary;

  /// The private IPv4 addresses.
  final String privateIpAddress;

  PrivateIpAddressSpecification({
    this.primary,
    this.privateIpAddress,
  });
}

/// Describes the processor used by the instance type.
class ProcessorInfo {
  /// A list of architectures supported by the instance type.
  final List<String> supportedArchitectures;

  /// The speed of the processor, in GHz.
  final double sustainedClockSpeedInGhz;

  ProcessorInfo({
    this.supportedArchitectures,
    this.sustainedClockSpeedInGhz,
  });
}

/// Describes a product code.
class ProductCode {
  /// The product code.
  final String productCodeId;

  /// The type of product code.
  final ProductCodeValues productCodeType;

  ProductCode({
    this.productCodeId,
    this.productCodeType,
  });
}

enum ProductCodeValues {
  devpay,
  marketplace,
}

/// Describes a virtual private gateway propagating route.
class PropagatingVgw {
  /// The ID of the virtual private gateway.
  final String gatewayId;

  PropagatingVgw({
    this.gatewayId,
  });
}

class ProvisionByoipCidrResult {
  /// Information about the address range.
  final ByoipCidr byoipCidr;

  ProvisionByoipCidrResult({
    this.byoipCidr,
  });
}

/// Reserved. If you need to sustain traffic greater than the <a
/// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
/// limits</a>, contact us through the <a
/// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
class ProvisionedBandwidth {
  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final DateTime provisionTime;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final String provisioned;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final DateTime requestTime;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final String requested;

  /// Reserved. If you need to sustain traffic greater than the <a
  /// href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented
  /// limits</a>, contact us through the <a
  /// href="https://console.aws.amazon.com/support/home?">Support Center</a>.
  final String status;

  ProvisionedBandwidth({
    this.provisionTime,
    this.provisioned,
    this.requestTime,
    this.requested,
    this.status,
  });
}

/// Describes an IPv4 address pool.
class PublicIpv4Pool {
  /// A description of the address pool.
  final String description;

  /// The address ranges.
  final List<PublicIpv4PoolRange> poolAddressRanges;

  /// The ID of the address pool.
  final String poolId;

  /// Any tags for the address pool.
  final List<Tag> tags;

  /// The total number of addresses.
  final int totalAddressCount;

  /// The total number of available addresses.
  final int totalAvailableAddressCount;

  PublicIpv4Pool({
    this.description,
    this.poolAddressRanges,
    this.poolId,
    this.tags,
    this.totalAddressCount,
    this.totalAvailableAddressCount,
  });
}

/// Describes an address range of an IPv4 address pool.
class PublicIpv4PoolRange {
  /// The number of addresses in the range.
  final int addressCount;

  /// The number of available addresses in the range.
  final int availableAddressCount;

  /// The first IP address in the range.
  final String firstAddress;

  /// The last IP address in the range.
  final String lastAddress;

  PublicIpv4PoolRange({
    this.addressCount,
    this.availableAddressCount,
    this.firstAddress,
    this.lastAddress,
  });
}

/// Describes the result of the purchase.
class Purchase {
  /// The currency in which the <code>UpfrontPrice</code> and
  /// <code>HourlyPrice</code> amounts are specified. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues currencyCode;

  /// The duration of the reservation's term in seconds.
  final int duration;

  /// The IDs of the Dedicated Hosts associated with the reservation.
  final List<String> hostIdSet;

  /// The ID of the reservation.
  final String hostReservationId;

  /// The hourly price of the reservation per hour.
  final String hourlyPrice;

  /// The instance family on the Dedicated Host that the reservation can be
  /// associated with.
  final String instanceFamily;

  /// The payment option for the reservation.
  final PaymentOption paymentOption;

  /// The upfront price of the reservation.
  final String upfrontPrice;

  Purchase({
    this.currencyCode,
    this.duration,
    this.hostIdSet,
    this.hostReservationId,
    this.hourlyPrice,
    this.instanceFamily,
    this.paymentOption,
    this.upfrontPrice,
  });
}

class PurchaseHostReservationResult {
  /// Unique, case-sensitive identifier that you provide to ensure the idempotency
  /// of the request. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How
  /// to Ensure Idempotency</a>.
  final String clientToken;

  /// The currency in which the <code>totalUpfrontPrice</code> and
  /// <code>totalHourlyPrice</code> amounts are specified. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues currencyCode;

  /// Describes the details of the purchase.
  final List<Purchase> purchase;

  /// The total hourly price of the reservation calculated per hour.
  final String totalHourlyPrice;

  /// The total amount charged to your account when you purchase the reservation.
  final String totalUpfrontPrice;

  PurchaseHostReservationResult({
    this.clientToken,
    this.currencyCode,
    this.purchase,
    this.totalHourlyPrice,
    this.totalUpfrontPrice,
  });
}

/// Describes a request to purchase Scheduled Instances.
class PurchaseRequest {
  /// The number of instances.
  final int instanceCount;

  /// The purchase token.
  final String purchaseToken;

  PurchaseRequest({
    @_s.required this.instanceCount,
    @_s.required this.purchaseToken,
  });
}

/// Contains the output of PurchaseReservedInstancesOffering.
class PurchaseReservedInstancesOfferingResult {
  /// The IDs of the purchased Reserved Instances.
  final String reservedInstancesId;

  PurchaseReservedInstancesOfferingResult({
    this.reservedInstancesId,
  });
}

/// Contains the output of PurchaseScheduledInstances.
class PurchaseScheduledInstancesResult {
  /// Information about the Scheduled Instances.
  final List<ScheduledInstance> scheduledInstanceSet;

  PurchaseScheduledInstancesResult({
    this.scheduledInstanceSet,
  });
}

enum RIProductDescription {
  linuxUnix,
  linuxUnixAmazonVpc,
  windows,
  windowsAmazonVpc,
}

/// Describes a recurring charge.
class RecurringCharge {
  /// The amount of the recurring charge.
  final double amount;

  /// The frequency of the recurring charge.
  final RecurringChargeFrequency frequency;

  RecurringCharge({
    this.amount,
    this.frequency,
  });
}

enum RecurringChargeFrequency {
  hourly,
}

/// Describes a Region.
class Region {
  /// The Region service endpoint.
  final String endpoint;

  /// The Region opt-in status. The possible values are
  /// <code>opt-in-not-required</code>, <code>opted-in</code>, and
  /// <code>not-opted-in</code>.
  final String optInStatus;

  /// The name of the Region.
  final String regionName;

  Region({
    this.endpoint,
    this.optInStatus,
    this.regionName,
  });
}

/// Contains the output of RegisterImage.
class RegisterImageResult {
  /// The ID of the newly registered AMI.
  final String imageId;

  RegisterImageResult({
    this.imageId,
  });
}

class RegisterInstanceEventNotificationAttributesResult {
  /// The resulting set of tag keys.
  final InstanceTagNotificationAttribute instanceTagAttribute;

  RegisterInstanceEventNotificationAttributesResult({
    this.instanceTagAttribute,
  });
}

/// Information about the tag keys to register for the current Region. You can
/// either specify individual tag keys or register all tag keys in the current
/// Region. You must specify either <code>IncludeAllTagsOfInstance</code> or
/// <code>InstanceTagKeys</code> in the request
class RegisterInstanceTagAttributeRequest {
  /// Indicates whether to register all tag keys in the current Region. Specify
  /// <code>true</code> to register all tag keys.
  final bool includeAllTagsOfInstance;

  /// The tag keys to register.
  final List<String> instanceTagKeys;

  RegisterInstanceTagAttributeRequest({
    this.includeAllTagsOfInstance,
    this.instanceTagKeys,
  });
}

class RegisterTransitGatewayMulticastGroupMembersResult {
  /// Information about the registered transit gateway multicast group members.
  final TransitGatewayMulticastRegisteredGroupMembers
      registeredMulticastGroupMembers;

  RegisterTransitGatewayMulticastGroupMembersResult({
    this.registeredMulticastGroupMembers,
  });
}

class RegisterTransitGatewayMulticastGroupSourcesResult {
  /// Information about the transit gateway multicast group sources.
  final TransitGatewayMulticastRegisteredGroupSources
      registeredMulticastGroupSources;

  RegisterTransitGatewayMulticastGroupSourcesResult({
    this.registeredMulticastGroupSources,
  });
}

class RejectTransitGatewayPeeringAttachmentResult {
  /// The transit gateway peering attachment.
  final TransitGatewayPeeringAttachment transitGatewayPeeringAttachment;

  RejectTransitGatewayPeeringAttachmentResult({
    this.transitGatewayPeeringAttachment,
  });
}

class RejectTransitGatewayVpcAttachmentResult {
  /// Information about the attachment.
  final TransitGatewayVpcAttachment transitGatewayVpcAttachment;

  RejectTransitGatewayVpcAttachmentResult({
    this.transitGatewayVpcAttachment,
  });
}

class RejectVpcEndpointConnectionsResult {
  /// Information about the endpoints that were not rejected, if applicable.
  final List<UnsuccessfulItem> unsuccessful;

  RejectVpcEndpointConnectionsResult({
    this.unsuccessful,
  });
}

class RejectVpcPeeringConnectionResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  RejectVpcPeeringConnectionResult({
    this.returnValue,
  });
}

class ReleaseHostsResult {
  /// The IDs of the Dedicated Hosts that were successfully released.
  final List<String> successful;

  /// The IDs of the Dedicated Hosts that could not be released, including an
  /// error message.
  final List<UnsuccessfulItem> unsuccessful;

  ReleaseHostsResult({
    this.successful,
    this.unsuccessful,
  });
}

class ReplaceIamInstanceProfileAssociationResult {
  /// Information about the IAM instance profile association.
  final IamInstanceProfileAssociation iamInstanceProfileAssociation;

  ReplaceIamInstanceProfileAssociationResult({
    this.iamInstanceProfileAssociation,
  });
}

class ReplaceNetworkAclAssociationResult {
  /// The ID of the new association.
  final String newAssociationId;

  ReplaceNetworkAclAssociationResult({
    this.newAssociationId,
  });
}

class ReplaceRouteTableAssociationResult {
  /// The state of the association.
  final RouteTableAssociationState associationState;

  /// The ID of the new association.
  final String newAssociationId;

  ReplaceRouteTableAssociationResult({
    this.associationState,
    this.newAssociationId,
  });
}

class ReplaceTransitGatewayRouteResult {
  /// Information about the modified route.
  final TransitGatewayRoute route;

  ReplaceTransitGatewayRouteResult({
    this.route,
  });
}

enum ReportInstanceReasonCodes {
  instanceStuckInState,
  unresponsive,
  notAcceptingCredentials,
  passwordNotAvailable,
  performanceNetwork,
  performanceInstanceStore,
  performanceEbsVolume,
  performanceOther,
  other,
}

enum ReportStatusType {
  ok,
  impaired,
}

/// The information to include in the launch template.
class RequestLaunchTemplateData {
  /// The block device mapping.
  final List<LaunchTemplateBlockDeviceMappingRequest> blockDeviceMappings;

  /// The Capacity Reservation targeting option. If you do not specify this
  /// parameter, the instance's Capacity Reservation preference defaults to
  /// <code>open</code>, which enables it to run in any open Capacity Reservation
  /// that has matching attributes (instance type, platform, Availability Zone).
  final LaunchTemplateCapacityReservationSpecificationRequest
      capacityReservationSpecification;

  /// The CPU options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimizing
  /// CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final LaunchTemplateCpuOptionsRequest cpuOptions;

  /// The credit option for CPU usage of the instance. Valid for T2 or T3
  /// instances only.
  final CreditSpecificationRequest creditSpecification;

  /// If you set this parameter to <code>true</code>, you can't terminate the
  /// instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To
  /// change this attribute after launch, use <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>.
  /// Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to
  /// <code>terminate</code>, you can terminate the instance by running the
  /// shutdown command from the instance.
  final bool disableApiTermination;

  /// Indicates whether the instance is optimized for Amazon EBS I/O. This
  /// optimization provides dedicated throughput to Amazon EBS and an optimized
  /// configuration stack to provide optimal Amazon EBS I/O performance. This
  /// optimization isn't available with all instance types. Additional usage
  /// charges apply when using an EBS-optimized instance.
  final bool ebsOptimized;

  /// An elastic GPU to associate with the instance.
  final List<ElasticGpuSpecification> elasticGpuSpecifications;

  /// The elastic inference accelerator for the instance.
  final List<LaunchTemplateElasticInferenceAccelerator>
      elasticInferenceAccelerators;

  /// Indicates whether an instance is enabled for hibernation. This parameter is
  /// valid only if the instance meets the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation
  /// prerequisites</a>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final LaunchTemplateHibernationOptionsRequest hibernationOptions;

  /// The IAM instance profile.
  final LaunchTemplateIamInstanceProfileSpecificationRequest iamInstanceProfile;

  /// The ID of the AMI.
  final String imageId;

  /// Indicates whether an instance stops or terminates when you initiate shutdown
  /// from the instance (using the operating system command for system shutdown).
  ///
  /// Default: <code>stop</code>
  final ShutdownBehavior instanceInitiatedShutdownBehavior;

  /// The market (purchasing) option for the instances.
  final LaunchTemplateInstanceMarketOptionsRequest instanceMarketOptions;

  /// The instance type. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
  /// Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final InstanceType instanceType;

  /// The ID of the kernel.
  /// <important>
  /// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">User
  /// Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// </important>
  final String kernelId;

  /// The name of the key pair. You can create a key pair using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a>
  /// or <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.
  /// <important>
  /// If you do not specify a key pair, you can't connect to the instance unless
  /// you choose an AMI that is configured to allow users another way to log in.
  /// </important>
  final String keyName;

  /// The license configurations.
  final List<LaunchTemplateLicenseConfigurationRequest> licenseSpecifications;

  /// The metadata options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
  /// Metadata and User Data</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  final LaunchTemplateInstanceMetadataOptionsRequest metadataOptions;

  /// The monitoring for the instance.
  final LaunchTemplatesMonitoringRequest monitoring;

  /// One or more network interfaces. If you specify a network interface, you must
  /// specify any security groups and subnets as part of the network interface.
  final List<LaunchTemplateInstanceNetworkInterfaceSpecificationRequest>
      networkInterfaces;

  /// The placement for the instance.
  final LaunchTemplatePlacementRequest placement;

  /// The ID of the RAM disk.
  /// <important>
  /// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">User
  /// Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  /// </important>
  final String ramDiskId;

  /// One or more security group IDs. You can create a security group using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.
  /// You cannot specify both a security group ID and security name in the same
  /// request.
  final List<String> securityGroupIds;

  /// [EC2-Classic, default VPC] One or more security group names. For a
  /// nondefault VPC, you must use security group IDs instead. You cannot specify
  /// both a security group ID and security name in the same request.
  final List<String> securityGroups;

  /// The tags to apply to the resources during launch. You can only tag instances
  /// and volumes on launch. The specified tags are applied to all instances or
  /// volumes that are created during launch. To tag a resource after it has been
  /// created, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  final List<LaunchTemplateTagSpecificationRequest> tagSpecifications;

  /// The Base64-encoded user data to make available to the instance. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Running
  /// Commands on Your Linux Instance at Launch</a> (Linux) and <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data">Adding
  /// User Data</a> (Windows).
  final String userData;

  RequestLaunchTemplateData({
    this.blockDeviceMappings,
    this.capacityReservationSpecification,
    this.cpuOptions,
    this.creditSpecification,
    this.disableApiTermination,
    this.ebsOptimized,
    this.elasticGpuSpecifications,
    this.elasticInferenceAccelerators,
    this.hibernationOptions,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceInitiatedShutdownBehavior,
    this.instanceMarketOptions,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.licenseSpecifications,
    this.metadataOptions,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramDiskId,
    this.securityGroupIds,
    this.securityGroups,
    this.tagSpecifications,
    this.userData,
  });
}

/// Contains the output of RequestSpotFleet.
class RequestSpotFleetResponse {
  /// The ID of the Spot Fleet request.
  final String spotFleetRequestId;

  RequestSpotFleetResponse({
    this.spotFleetRequestId,
  });
}

/// Contains the output of RequestSpotInstances.
class RequestSpotInstancesResult {
  /// One or more Spot Instance requests.
  final List<SpotInstanceRequest> spotInstanceRequests;

  RequestSpotInstancesResult({
    this.spotInstanceRequests,
  });
}

/// Describes the launch specification for an instance.
class RequestSpotLaunchSpecification {
  /// Deprecated.
  final String addressingType;

  /// One or more block device mapping entries. You can't specify both a snapshot
  /// ID and an encryption value. This is because only blank volumes can be
  /// encrypted on creation. If a snapshot is the basis for a volume, it is not
  /// blank and its encryption status is used for the volume encryption status.
  final List<BlockDeviceMapping> blockDeviceMappings;

  /// Indicates whether the instance is optimized for EBS I/O. This optimization
  /// provides dedicated throughput to Amazon EBS and an optimized configuration
  /// stack to provide optimal EBS I/O performance. This optimization isn't
  /// available with all instance types. Additional usage charges apply when using
  /// an EBS Optimized instance.
  ///
  /// Default: <code>false</code>
  final bool ebsOptimized;

  /// The IAM instance profile.
  final IamInstanceProfileSpecification iamInstanceProfile;

  /// The ID of the AMI.
  final String imageId;

  /// The instance type.
  final InstanceType instanceType;

  /// The ID of the kernel.
  final String kernelId;

  /// The name of the key pair.
  final String keyName;

  /// Indicates whether basic or detailed monitoring is enabled for the instance.
  ///
  /// Default: Disabled
  final RunInstancesMonitoringEnabled monitoring;

  /// One or more network interfaces. If you specify a network interface, you must
  /// specify subnet IDs and security group IDs using the network interface.
  final List<InstanceNetworkInterfaceSpecification> networkInterfaces;

  /// The placement information for the instance.
  final SpotPlacement placement;

  /// The ID of the RAM disk.
  final String ramdiskId;

  /// One or more security group IDs.
  final List<String> securityGroupIds;

  /// One or more security groups. When requesting instances in a VPC, you must
  /// specify the IDs of the security groups. When requesting instances in
  /// EC2-Classic, you can specify the names or the IDs of the security groups.
  final List<String> securityGroups;

  /// The IDs of the subnets in which to launch the instance. To specify multiple
  /// subnets, separate them using commas; for example, "subnet-1234abcdeexample1,
  /// subnet-0987cdef6example2".
  final String subnetId;

  /// The Base64-encoded user data for the instance. User data is limited to 16
  /// KB.
  final String userData;

  RequestSpotLaunchSpecification({
    this.addressingType,
    this.blockDeviceMappings,
    this.ebsOptimized,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramdiskId,
    this.securityGroupIds,
    this.securityGroups,
    this.subnetId,
    this.userData,
  });
}

/// Describes a reservation.
class Reservation {
  /// [EC2-Classic only] The security groups.
  final List<GroupIdentifier> groups;

  /// The instances.
  final List<Instance> instances;

  /// The ID of the AWS account that owns the reservation.
  final String ownerId;

  /// The ID of the requester that launched the instances on your behalf (for
  /// example, AWS Management Console or Auto Scaling).
  final String requesterId;

  /// The ID of the reservation.
  final String reservationId;

  Reservation({
    this.groups,
    this.instances,
    this.ownerId,
    this.requesterId,
    this.reservationId,
  });
}

enum ReservationState {
  paymentPending,
  paymentFailed,
  active,
  retired,
}

/// The cost associated with the Reserved Instance.
class ReservationValue {
  /// The hourly rate of the reservation.
  final String hourlyPrice;

  /// The balance of the total value (the sum of remainingUpfrontValue +
  /// hourlyPrice * number of hours remaining).
  final String remainingTotalValue;

  /// The remaining upfront cost of the reservation.
  final String remainingUpfrontValue;

  ReservationValue({
    this.hourlyPrice,
    this.remainingTotalValue,
    this.remainingUpfrontValue,
  });
}

/// Describes the limit price of a Reserved Instance offering.
class ReservedInstanceLimitPrice {
  /// Used for Reserved Instance Marketplace offerings. Specifies the limit price
  /// on the total order (instanceCount * price).
  final double amount;

  /// The currency in which the <code>limitPrice</code> amount is specified. At
  /// this time, the only supported currency is <code>USD</code>.
  final CurrencyCodeValues currencyCode;

  ReservedInstanceLimitPrice({
    this.amount,
    this.currencyCode,
  });
}

/// The total value of the Convertible Reserved Instance.
class ReservedInstanceReservationValue {
  /// The total value of the Convertible Reserved Instance that you are
  /// exchanging.
  final ReservationValue reservationValue;

  /// The ID of the Convertible Reserved Instance that you are exchanging.
  final String reservedInstanceId;

  ReservedInstanceReservationValue({
    this.reservationValue,
    this.reservedInstanceId,
  });
}

enum ReservedInstanceState {
  paymentPending,
  active,
  paymentFailed,
  retired,
  queued,
  queuedDeleted,
}

/// Describes a Reserved Instance.
class ReservedInstances {
  /// The Availability Zone in which the Reserved Instance can be used.
  final String availabilityZone;

  /// The currency of the Reserved Instance. It's specified using ISO 4217
  /// standard currency codes. At this time, the only supported currency is
  /// <code>USD</code>.
  final CurrencyCodeValues currencyCode;

  /// The duration of the Reserved Instance, in seconds.
  final int duration;

  /// The time when the Reserved Instance expires.
  final DateTime end;

  /// The purchase price of the Reserved Instance.
  final double fixedPrice;

  /// The number of reservations purchased.
  final int instanceCount;

  /// The tenancy of the instance.
  final Tenancy instanceTenancy;

  /// The instance type on which the Reserved Instance can be used.
  final InstanceType instanceType;

  /// The offering class of the Reserved Instance.
  final OfferingClassType offeringClass;

  /// The Reserved Instance offering type.
  final OfferingTypeValues offeringType;

  /// The Reserved Instance product platform description.
  final RIProductDescription productDescription;

  /// The recurring charge tag assigned to the resource.
  final List<RecurringCharge> recurringCharges;

  /// The ID of the Reserved Instance.
  final String reservedInstancesId;

  /// The scope of the Reserved Instance.
  final Scope scope;

  /// The date and time the Reserved Instance started.
  final DateTime start;

  /// The state of the Reserved Instance purchase.
  final ReservedInstanceState state;

  /// Any tags assigned to the resource.
  final List<Tag> tags;

  /// The usage price of the Reserved Instance, per hour.
  final double usagePrice;

  ReservedInstances({
    this.availabilityZone,
    this.currencyCode,
    this.duration,
    this.end,
    this.fixedPrice,
    this.instanceCount,
    this.instanceTenancy,
    this.instanceType,
    this.offeringClass,
    this.offeringType,
    this.productDescription,
    this.recurringCharges,
    this.reservedInstancesId,
    this.scope,
    this.start,
    this.state,
    this.tags,
    this.usagePrice,
  });
}

/// Describes the configuration settings for the modified Reserved Instances.
class ReservedInstancesConfiguration {
  /// The Availability Zone for the modified Reserved Instances.
  final String availabilityZone;

  /// The number of modified Reserved Instances.
  /// <note>
  /// This is a required field for a request.
  /// </note>
  final int instanceCount;

  /// The instance type for the modified Reserved Instances.
  final InstanceType instanceType;

  /// The network platform of the modified Reserved Instances, which is either
  /// EC2-Classic or EC2-VPC.
  final String platform;

  /// Whether the Reserved Instance is applied to instances in a Region or
  /// instances in a specific Availability Zone.
  final Scope scope;

  ReservedInstancesConfiguration({
    this.availabilityZone,
    this.instanceCount,
    this.instanceType,
    this.platform,
    this.scope,
  });
}

/// Describes the ID of a Reserved Instance.
class ReservedInstancesId {
  /// The ID of the Reserved Instance.
  final String reservedInstancesId;

  ReservedInstancesId({
    this.reservedInstancesId,
  });
}

/// Describes a Reserved Instance listing.
class ReservedInstancesListing {
  /// A unique, case-sensitive key supplied by the client to ensure that the
  /// request is idempotent. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  final String clientToken;

  /// The time the listing was created.
  final DateTime createDate;

  /// The number of instances in this state.
  final List<InstanceCount> instanceCounts;

  /// The price of the Reserved Instance listing.
  final List<PriceSchedule> priceSchedules;

  /// The ID of the Reserved Instance.
  final String reservedInstancesId;

  /// The ID of the Reserved Instance listing.
  final String reservedInstancesListingId;

  /// The status of the Reserved Instance listing.
  final ListingStatus status;

  /// The reason for the current status of the Reserved Instance listing. The
  /// response can be blank.
  final String statusMessage;

  /// Any tags assigned to the resource.
  final List<Tag> tags;

  /// The last modified timestamp of the listing.
  final DateTime updateDate;

  ReservedInstancesListing({
    this.clientToken,
    this.createDate,
    this.instanceCounts,
    this.priceSchedules,
    this.reservedInstancesId,
    this.reservedInstancesListingId,
    this.status,
    this.statusMessage,
    this.tags,
    this.updateDate,
  });
}

/// Describes a Reserved Instance modification.
class ReservedInstancesModification {
  /// A unique, case-sensitive key supplied by the client to ensure that the
  /// request is idempotent. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  final String clientToken;

  /// The time when the modification request was created.
  final DateTime createDate;

  /// The time for the modification to become effective.
  final DateTime effectiveDate;

  /// Contains target configurations along with their corresponding new Reserved
  /// Instance IDs.
  final List<ReservedInstancesModificationResult> modificationResults;

  /// The IDs of one or more Reserved Instances.
  final List<ReservedInstancesId> reservedInstancesIds;

  /// A unique ID for the Reserved Instance modification.
  final String reservedInstancesModificationId;

  /// The status of the Reserved Instances modification request.
  final String status;

  /// The reason for the status.
  final String statusMessage;

  /// The time when the modification request was last updated.
  final DateTime updateDate;

  ReservedInstancesModification({
    this.clientToken,
    this.createDate,
    this.effectiveDate,
    this.modificationResults,
    this.reservedInstancesIds,
    this.reservedInstancesModificationId,
    this.status,
    this.statusMessage,
    this.updateDate,
  });
}

/// Describes the modification request/s.
class ReservedInstancesModificationResult {
  /// The ID for the Reserved Instances that were created as part of the
  /// modification request. This field is only available when the modification is
  /// fulfilled.
  final String reservedInstancesId;

  /// The target Reserved Instances configurations supplied as part of the
  /// modification request.
  final ReservedInstancesConfiguration targetConfiguration;

  ReservedInstancesModificationResult({
    this.reservedInstancesId,
    this.targetConfiguration,
  });
}

/// Describes a Reserved Instance offering.
class ReservedInstancesOffering {
  /// The Availability Zone in which the Reserved Instance can be used.
  final String availabilityZone;

  /// The currency of the Reserved Instance offering you are purchasing. It's
  /// specified using ISO 4217 standard currency codes. At this time, the only
  /// supported currency is <code>USD</code>.
  final CurrencyCodeValues currencyCode;

  /// The duration of the Reserved Instance, in seconds.
  final int duration;

  /// The purchase price of the Reserved Instance.
  final double fixedPrice;

  /// The tenancy of the instance.
  final Tenancy instanceTenancy;

  /// The instance type on which the Reserved Instance can be used.
  final InstanceType instanceType;

  /// Indicates whether the offering is available through the Reserved Instance
  /// Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace
  /// offering, this is <code>true</code>.
  final bool marketplace;

  /// If <code>convertible</code> it can be exchanged for Reserved Instances of
  /// the same or higher monetary value, with different configurations. If
  /// <code>standard</code>, it is not possible to perform an exchange.
  final OfferingClassType offeringClass;

  /// The Reserved Instance offering type.
  final OfferingTypeValues offeringType;

  /// The pricing details of the Reserved Instance offering.
  final List<PricingDetail> pricingDetails;

  /// The Reserved Instance product platform description.
  final RIProductDescription productDescription;

  /// The recurring charge tag assigned to the resource.
  final List<RecurringCharge> recurringCharges;

  /// The ID of the Reserved Instance offering. This is the offering ID used in
  /// <a>GetReservedInstancesExchangeQuote</a> to confirm that an exchange can be
  /// made.
  final String reservedInstancesOfferingId;

  /// Whether the Reserved Instance is applied to instances in a Region or an
  /// Availability Zone.
  final Scope scope;

  /// The usage price of the Reserved Instance, per hour.
  final double usagePrice;

  ReservedInstancesOffering({
    this.availabilityZone,
    this.currencyCode,
    this.duration,
    this.fixedPrice,
    this.instanceTenancy,
    this.instanceType,
    this.marketplace,
    this.offeringClass,
    this.offeringType,
    this.pricingDetails,
    this.productDescription,
    this.recurringCharges,
    this.reservedInstancesOfferingId,
    this.scope,
    this.usagePrice,
  });
}

class ResetEbsDefaultKmsKeyIdResult {
  /// The Amazon Resource Name (ARN) of the default CMK for EBS encryption by
  /// default.
  final String kmsKeyId;

  ResetEbsDefaultKmsKeyIdResult({
    this.kmsKeyId,
  });
}

enum ResetFpgaImageAttributeName {
  loadPermission,
}

class ResetFpgaImageAttributeResult {
  /// Is <code>true</code> if the request succeeds, and an error otherwise.
  final bool returnValue;

  ResetFpgaImageAttributeResult({
    this.returnValue,
  });
}

enum ResetImageAttributeName {
  launchPermission,
}

enum ResourceType {
  clientVpnEndpoint,
  customerGateway,
  dedicatedHost,
  dhcpOptions,
  elasticIp,
  fleet,
  fpgaImage,
  hostReservation,
  image,
  instance,
  internetGateway,
  keyPair,
  launchTemplate,
  natgateway,
  networkAcl,
  networkInterface,
  placementGroup,
  reservedInstances,
  routeTable,
  securityGroup,
  snapshot,
  spotFleetRequest,
  spotInstancesRequest,
  subnet,
  trafficMirrorFilter,
  trafficMirrorSession,
  trafficMirrorTarget,
  transitGateway,
  transitGatewayAttachment,
  transitGatewayMulticastDomain,
  transitGatewayRouteTable,
  volume,
  vpc,
  vpcPeeringConnection,
  vpnConnection,
  vpnGateway,
  vpcFlowLog,
}

/// Describes the error that's returned when you cannot delete a launch template
/// version.
class ResponseError {
  /// The error code.
  final LaunchTemplateErrorCode code;

  /// The error message, if applicable.
  final String message;

  ResponseError({
    this.code,
    this.message,
  });
}

/// The information for a launch template.
class ResponseLaunchTemplateData {
  /// The block device mappings.
  final List<LaunchTemplateBlockDeviceMapping> blockDeviceMappings;

  /// Information about the Capacity Reservation targeting option.
  final LaunchTemplateCapacityReservationSpecificationResponse
      capacityReservationSpecification;

  /// The CPU options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimizing
  /// CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final LaunchTemplateCpuOptions cpuOptions;

  /// The credit option for CPU usage of the instance.
  final CreditSpecification creditSpecification;

  /// If set to <code>true</code>, indicates that the instance cannot be
  /// terminated using the Amazon EC2 console, command line tool, or API.
  final bool disableApiTermination;

  /// Indicates whether the instance is optimized for Amazon EBS I/O.
  final bool ebsOptimized;

  /// The elastic GPU specification.
  final List<ElasticGpuSpecificationResponse> elasticGpuSpecifications;

  /// The elastic inference accelerator for the instance.
  final List<LaunchTemplateElasticInferenceAcceleratorResponse>
      elasticInferenceAccelerators;

  /// Indicates whether an instance is configured for hibernation. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate
  /// Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  final LaunchTemplateHibernationOptions hibernationOptions;

  /// The IAM instance profile.
  final LaunchTemplateIamInstanceProfileSpecification iamInstanceProfile;

  /// The ID of the AMI that was used to launch the instance.
  final String imageId;

  /// Indicates whether an instance stops or terminates when you initiate shutdown
  /// from the instance (using the operating system command for system shutdown).
  final ShutdownBehavior instanceInitiatedShutdownBehavior;

  /// The market (purchasing) option for the instances.
  final LaunchTemplateInstanceMarketOptions instanceMarketOptions;

  /// The instance type.
  final InstanceType instanceType;

  /// The ID of the kernel, if applicable.
  final String kernelId;

  /// The name of the key pair.
  final String keyName;

  /// The license configurations.
  final List<LaunchTemplateLicenseConfiguration> licenseSpecifications;

  /// The metadata options for the instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance
  /// Metadata and User Data</a> in the <i>Amazon Elastic Compute Cloud User
  /// Guide</i>.
  final LaunchTemplateInstanceMetadataOptions metadataOptions;

  /// The monitoring for the instance.
  final LaunchTemplatesMonitoring monitoring;

  /// The network interfaces.
  final List<LaunchTemplateInstanceNetworkInterfaceSpecification>
      networkInterfaces;

  /// The placement of the instance.
  final LaunchTemplatePlacement placement;

  /// The ID of the RAM disk, if applicable.
  final String ramDiskId;

  /// The security group IDs.
  final List<String> securityGroupIds;

  /// The security group names.
  final List<String> securityGroups;

  /// The tags.
  final List<LaunchTemplateTagSpecification> tagSpecifications;

  /// The user data for the instance.
  final String userData;

  ResponseLaunchTemplateData({
    this.blockDeviceMappings,
    this.capacityReservationSpecification,
    this.cpuOptions,
    this.creditSpecification,
    this.disableApiTermination,
    this.ebsOptimized,
    this.elasticGpuSpecifications,
    this.elasticInferenceAccelerators,
    this.hibernationOptions,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceInitiatedShutdownBehavior,
    this.instanceMarketOptions,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.licenseSpecifications,
    this.metadataOptions,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramDiskId,
    this.securityGroupIds,
    this.securityGroups,
    this.tagSpecifications,
    this.userData,
  });
}

class RestoreAddressToClassicResult {
  /// The Elastic IP address.
  final String publicIp;

  /// The move status for the IP address.
  final Status status;

  RestoreAddressToClassicResult({
    this.publicIp,
    this.status,
  });
}

class RevokeClientVpnIngressResult {
  /// The current state of the authorization rule.
  final ClientVpnAuthorizationRuleStatus status;

  RevokeClientVpnIngressResult({
    this.status,
  });
}

enum RootDeviceType {
  ebs,
  instanceStore,
}

/// Describes a route in a route table.
class Route {
  /// The IPv4 CIDR block used for the destination match.
  final String destinationCidrBlock;

  /// The IPv6 CIDR block used for the destination match.
  final String destinationIpv6CidrBlock;

  /// The prefix of the AWS service.
  final String destinationPrefixListId;

  /// The ID of the egress-only internet gateway.
  final String egressOnlyInternetGatewayId;

  /// The ID of a gateway attached to your VPC.
  final String gatewayId;

  /// The ID of a NAT instance in your VPC.
  final String instanceId;

  /// The AWS account ID of the owner of the instance.
  final String instanceOwnerId;

  /// The ID of the local gateway.
  final String localGatewayId;

  /// The ID of a NAT gateway.
  final String natGatewayId;

  /// The ID of the network interface.
  final String networkInterfaceId;

  /// Describes how the route was created.
  ///
  /// <ul>
  /// <li>
  /// <code>CreateRouteTable</code> - The route was automatically created when the
  /// route table was created.
  /// </li>
  /// <li>
  /// <code>CreateRoute</code> - The route was manually added to the route table.
  /// </li>
  /// <li>
  /// <code>EnableVgwRoutePropagation</code> - The route was propagated by route
  /// propagation.
  /// </li>
  /// </ul>
  final RouteOrigin origin;

  /// The state of the route. The <code>blackhole</code> state indicates that the
  /// route's target isn't available (for example, the specified gateway isn't
  /// attached to the VPC, or the specified NAT instance has been terminated).
  final RouteState state;

  /// The ID of a transit gateway.
  final String transitGatewayId;

  /// The ID of a VPC peering connection.
  final String vpcPeeringConnectionId;

  Route({
    this.destinationCidrBlock,
    this.destinationIpv6CidrBlock,
    this.destinationPrefixListId,
    this.egressOnlyInternetGatewayId,
    this.gatewayId,
    this.instanceId,
    this.instanceOwnerId,
    this.localGatewayId,
    this.natGatewayId,
    this.networkInterfaceId,
    this.origin,
    this.state,
    this.transitGatewayId,
    this.vpcPeeringConnectionId,
  });
}

enum RouteOrigin {
  createRouteTable,
  createRoute,
  enableVgwRoutePropagation,
}

enum RouteState {
  active,
  blackhole,
}

/// Describes a route table.
class RouteTable {
  /// The associations between the route table and one or more subnets or a
  /// gateway.
  final List<RouteTableAssociation> associations;

  /// The ID of the AWS account that owns the route table.
  final String ownerId;

  /// Any virtual private gateway (VGW) propagating routes.
  final List<PropagatingVgw> propagatingVgws;

  /// The ID of the route table.
  final String routeTableId;

  /// The routes in the route table.
  final List<Route> routes;

  /// Any tags assigned to the route table.
  final List<Tag> tags;

  /// The ID of the VPC.
  final String vpcId;

  RouteTable({
    this.associations,
    this.ownerId,
    this.propagatingVgws,
    this.routeTableId,
    this.routes,
    this.tags,
    this.vpcId,
  });
}

/// Describes an association between a route table and a subnet or gateway.
class RouteTableAssociation {
  /// The state of the association.
  final RouteTableAssociationState associationState;

  /// The ID of the internet gateway or virtual private gateway.
  final String gatewayId;

  /// Indicates whether this is the main route table.
  final bool main;

  /// The ID of the association.
  final String routeTableAssociationId;

  /// The ID of the route table.
  final String routeTableId;

  /// The ID of the subnet. A subnet ID is not returned for an implicit
  /// association.
  final String subnetId;

  RouteTableAssociation({
    this.associationState,
    this.gatewayId,
    this.main,
    this.routeTableAssociationId,
    this.routeTableId,
    this.subnetId,
  });
}

/// Describes the state of an association between a route table and a subnet or
/// gateway.
class RouteTableAssociationState {
  /// The state of the association.
  final RouteTableAssociationStateCode state;

  /// The status message, if applicable.
  final String statusMessage;

  RouteTableAssociationState({
    this.state,
    this.statusMessage,
  });
}

enum RouteTableAssociationStateCode {
  associating,
  associated,
  disassociating,
  disassociated,
  failed,
}

enum RuleAction {
  allow,
  deny,
}

/// Describes the monitoring of an instance.
class RunInstancesMonitoringEnabled {
  /// Indicates whether detailed monitoring is enabled. Otherwise, basic
  /// monitoring is enabled.
  final bool enabled;

  RunInstancesMonitoringEnabled({
    @_s.required this.enabled,
  });
}

/// Contains the output of RunScheduledInstances.
class RunScheduledInstancesResult {
  /// The IDs of the newly launched instances.
  final List<String> instanceIdSet;

  RunScheduledInstancesResult({
    this.instanceIdSet,
  });
}

/// Describes the storage parameters for S3 and S3 buckets for an instance
/// store-backed AMI.
class S3Storage {
  /// The access key ID of the owner of the bucket. Before you specify a value for
  /// your access key ID, review and follow the guidance in <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html">Best
  /// Practices for Managing AWS Access Keys</a>.
  final String awsAccessKeyId;

  /// The bucket in which to store the AMI. You can specify a bucket that you
  /// already own or a new bucket that Amazon EC2 creates on your behalf. If you
  /// specify a bucket that belongs to someone else, Amazon EC2 returns an error.
  final String bucket;

  /// The beginning of the file name of the AMI.
  final String prefix;

  /// An Amazon S3 upload policy that gives Amazon EC2 permission to upload items
  /// into Amazon S3 on your behalf.
  final Uint8List uploadPolicy;

  /// The signature of the JSON document.
  final String uploadPolicySignature;

  S3Storage({
    this.awsAccessKeyId,
    this.bucket,
    this.prefix,
    this.uploadPolicy,
    this.uploadPolicySignature,
  });
}

/// Describes a Scheduled Instance.
class ScheduledInstance {
  /// The Availability Zone.
  final String availabilityZone;

  /// The date when the Scheduled Instance was purchased.
  final DateTime createDate;

  /// The hourly price for a single instance.
  final String hourlyPrice;

  /// The number of instances.
  final int instanceCount;

  /// The instance type.
  final String instanceType;

  /// The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).
  final String networkPlatform;

  /// The time for the next schedule to start.
  final DateTime nextSlotStartTime;

  /// The platform (<code>Linux/UNIX</code> or <code>Windows</code>).
  final String platform;

  /// The time that the previous schedule ended or will end.
  final DateTime previousSlotEndTime;

  /// The schedule recurrence.
  final ScheduledInstanceRecurrence recurrence;

  /// The Scheduled Instance ID.
  final String scheduledInstanceId;

  /// The number of hours in the schedule.
  final int slotDurationInHours;

  /// The end date for the Scheduled Instance.
  final DateTime termEndDate;

  /// The start date for the Scheduled Instance.
  final DateTime termStartDate;

  /// The total number of hours for a single instance for the entire term.
  final int totalScheduledInstanceHours;

  ScheduledInstance({
    this.availabilityZone,
    this.createDate,
    this.hourlyPrice,
    this.instanceCount,
    this.instanceType,
    this.networkPlatform,
    this.nextSlotStartTime,
    this.platform,
    this.previousSlotEndTime,
    this.recurrence,
    this.scheduledInstanceId,
    this.slotDurationInHours,
    this.termEndDate,
    this.termStartDate,
    this.totalScheduledInstanceHours,
  });
}

/// Describes a schedule that is available for your Scheduled Instances.
class ScheduledInstanceAvailability {
  /// The Availability Zone.
  final String availabilityZone;

  /// The number of available instances.
  final int availableInstanceCount;

  /// The time period for the first schedule to start.
  final DateTime firstSlotStartTime;

  /// The hourly price for a single instance.
  final String hourlyPrice;

  /// The instance type. You can specify one of the C3, C4, M4, or R3 instance
  /// types.
  final String instanceType;

  /// The maximum term. The only possible value is 365 days.
  final int maxTermDurationInDays;

  /// The minimum term. The only possible value is 365 days.
  final int minTermDurationInDays;

  /// The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).
  final String networkPlatform;

  /// The platform (<code>Linux/UNIX</code> or <code>Windows</code>).
  final String platform;

  /// The purchase token. This token expires in two hours.
  final String purchaseToken;

  /// The schedule recurrence.
  final ScheduledInstanceRecurrence recurrence;

  /// The number of hours in the schedule.
  final int slotDurationInHours;

  /// The total number of hours for a single instance for the entire term.
  final int totalScheduledInstanceHours;

  ScheduledInstanceAvailability({
    this.availabilityZone,
    this.availableInstanceCount,
    this.firstSlotStartTime,
    this.hourlyPrice,
    this.instanceType,
    this.maxTermDurationInDays,
    this.minTermDurationInDays,
    this.networkPlatform,
    this.platform,
    this.purchaseToken,
    this.recurrence,
    this.slotDurationInHours,
    this.totalScheduledInstanceHours,
  });
}

/// Describes the recurring schedule for a Scheduled Instance.
class ScheduledInstanceRecurrence {
  /// The frequency (<code>Daily</code>, <code>Weekly</code>, or
  /// <code>Monthly</code>).
  final String frequency;

  /// The interval quantity. The interval unit depends on the value of
  /// <code>frequency</code>. For example, every 2 weeks or every 2 months.
  final int interval;

  /// The days. For a monthly schedule, this is one or more days of the month
  /// (1-31). For a weekly schedule, this is one or more days of the week (1-7,
  /// where 1 is Sunday).
  final List<int> occurrenceDaySet;

  /// Indicates whether the occurrence is relative to the end of the specified
  /// week or month.
  final bool occurrenceRelativeToEnd;

  /// The unit for <code>occurrenceDaySet</code> (<code>DayOfWeek</code> or
  /// <code>DayOfMonth</code>).
  final String occurrenceUnit;

  ScheduledInstanceRecurrence({
    this.frequency,
    this.interval,
    this.occurrenceDaySet,
    this.occurrenceRelativeToEnd,
    this.occurrenceUnit,
  });
}

/// Describes the recurring schedule for a Scheduled Instance.
class ScheduledInstanceRecurrenceRequest {
  /// The frequency (<code>Daily</code>, <code>Weekly</code>, or
  /// <code>Monthly</code>).
  final String frequency;

  /// The interval quantity. The interval unit depends on the value of
  /// <code>Frequency</code>. For example, every 2 weeks or every 2 months.
  final int interval;

  /// The days. For a monthly schedule, this is one or more days of the month
  /// (1-31). For a weekly schedule, this is one or more days of the week (1-7,
  /// where 1 is Sunday). You can't specify this value with a daily schedule. If
  /// the occurrence is relative to the end of the month, you can specify only a
  /// single day.
  final List<int> occurrenceDays;

  /// Indicates whether the occurrence is relative to the end of the specified
  /// week or month. You can't specify this value with a daily schedule.
  final bool occurrenceRelativeToEnd;

  /// The unit for <code>OccurrenceDays</code> (<code>DayOfWeek</code> or
  /// <code>DayOfMonth</code>). This value is required for a monthly schedule. You
  /// can't specify <code>DayOfWeek</code> with a weekly schedule. You can't
  /// specify this value with a daily schedule.
  final String occurrenceUnit;

  ScheduledInstanceRecurrenceRequest({
    this.frequency,
    this.interval,
    this.occurrenceDays,
    this.occurrenceRelativeToEnd,
    this.occurrenceUnit,
  });
}

/// Describes a block device mapping for a Scheduled Instance.
class ScheduledInstancesBlockDeviceMapping {
  /// The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).
  final String deviceName;

  /// Parameters used to set up EBS volumes automatically when the instance is
  /// launched.
  final ScheduledInstancesEbs ebs;

  /// Suppresses the specified device included in the block device mapping of the
  /// AMI.
  final String noDevice;

  /// The virtual device name (<code>ephemeral</code>N). Instance store volumes
  /// are numbered starting from 0. An instance type with two available instance
  /// store volumes can specify mappings for <code>ephemeral0</code> and
  /// <code>ephemeral1</code>. The number of available instance store volumes
  /// depends on the instance type. After you connect to the instance, you must
  /// mount the volume.
  ///
  /// Constraints: For M3 instances, you must specify instance store volumes in
  /// the block device mapping for the instance. When you launch an M3 instance,
  /// we ignore any instance store volumes specified in the block device mapping
  /// for the AMI.
  final String virtualName;

  ScheduledInstancesBlockDeviceMapping({
    this.deviceName,
    this.ebs,
    this.noDevice,
    this.virtualName,
  });
}

/// Describes an EBS volume for a Scheduled Instance.
class ScheduledInstancesEbs {
  /// Indicates whether the volume is deleted on instance termination.
  final bool deleteOnTermination;

  /// Indicates whether the volume is encrypted. You can attached encrypted
  /// volumes only to instances that support them.
  final bool encrypted;

  /// The number of I/O operations per second (IOPS) that the volume supports. For
  /// io1 volumes, this represents the number of IOPS that are provisioned for the
  /// volume. For <code>gp2</code> volumes, this represents the baseline
  /// performance of the volume and the rate at which the volume accumulates I/O
  /// credits for bursting. For more information about <code>gp2</code> baseline
  /// performance, I/O credits, and bursting, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon
  /// EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Constraint: Range is 100-20000 IOPS for <code>io1</code> volumes and
  /// 100-10000 IOPS for <code>gp2</code> volumes.
  ///
  /// Condition: This parameter is required for requests to create
  /// <code>io1</code>volumes; it is not used in requests to create
  /// <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or
  /// <code>standard</code> volumes.
  final int iops;

  /// The ID of the snapshot.
  final String snapshotId;

  /// The size of the volume, in GiB.
  ///
  /// Default: If you're creating the volume from a snapshot and don't specify a
  /// volume size, the default is the snapshot size.
  final int volumeSize;

  /// The volume type. <code>gp2</code> for General Purpose SSD, <code>io1</code>
  /// for Provisioned IOPS SSD, Throughput Optimized HDD for <code>st1</code>,
  /// Cold HDD for <code>sc1</code>, or <code>standard</code> for Magnetic.
  ///
  /// Default: <code>gp2</code>
  final String volumeType;

  ScheduledInstancesEbs({
    this.deleteOnTermination,
    this.encrypted,
    this.iops,
    this.snapshotId,
    this.volumeSize,
    this.volumeType,
  });
}

/// Describes an IAM instance profile for a Scheduled Instance.
class ScheduledInstancesIamInstanceProfile {
  /// The Amazon Resource Name (ARN).
  final String arn;

  /// The name.
  final String name;

  ScheduledInstancesIamInstanceProfile({
    this.arn,
    this.name,
  });
}

/// Describes an IPv6 address.
class ScheduledInstancesIpv6Address {
  /// The IPv6 address.
  final String ipv6Address;

  ScheduledInstancesIpv6Address({
    this.ipv6Address,
  });
}

/// Describes the launch specification for a Scheduled Instance.
///
/// If you are launching the Scheduled Instance in EC2-VPC, you must specify the
/// ID of the subnet. You can specify the subnet using either
/// <code>SubnetId</code> or <code>NetworkInterface</code>.
class ScheduledInstancesLaunchSpecification {
  /// The ID of the Amazon Machine Image (AMI).
  final String imageId;

  /// The block device mapping entries.
  final List<ScheduledInstancesBlockDeviceMapping> blockDeviceMappings;

  /// Indicates whether the instances are optimized for EBS I/O. This optimization
  /// provides dedicated throughput to Amazon EBS and an optimized configuration
  /// stack to provide optimal EBS I/O performance. This optimization isn't
  /// available with all instance types. Additional usage charges apply when using
  /// an EBS-optimized instance.
  ///
  /// Default: <code>false</code>
  final bool ebsOptimized;

  /// The IAM instance profile.
  final ScheduledInstancesIamInstanceProfile iamInstanceProfile;

  /// The instance type.
  final String instanceType;

  /// The ID of the kernel.
  final String kernelId;

  /// The name of the key pair.
  final String keyName;

  /// Enable or disable monitoring for the instances.
  final ScheduledInstancesMonitoring monitoring;

  /// The network interfaces.
  final List<ScheduledInstancesNetworkInterface> networkInterfaces;

  /// The placement information.
  final ScheduledInstancesPlacement placement;

  /// The ID of the RAM disk.
  final String ramdiskId;

  /// The IDs of the security groups.
  final List<String> securityGroupIds;

  /// The ID of the subnet in which to launch the instances.
  final String subnetId;

  /// The base64-encoded MIME user data.
  final String userData;

  ScheduledInstancesLaunchSpecification({
    @_s.required this.imageId,
    this.blockDeviceMappings,
    this.ebsOptimized,
    this.iamInstanceProfile,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramdiskId,
    this.securityGroupIds,
    this.subnetId,
    this.userData,
  });
}

/// Describes whether monitoring is enabled for a Scheduled Instance.
class ScheduledInstancesMonitoring {
  /// Indicates whether monitoring is enabled.
  final bool enabled;

  ScheduledInstancesMonitoring({
    this.enabled,
  });
}

/// Describes a network interface for a Scheduled Instance.
class ScheduledInstancesNetworkInterface {
  /// Indicates whether to assign a public IPv4 address to instances launched in a
  /// VPC. The public IPv4 address can only be assigned to a network interface for
  /// eth0, and can only be assigned to a new network interface, not an existing
  /// one. You cannot specify more than one network interface in the request. If
  /// launching into a default subnet, the default value is <code>true</code>.
  final bool associatePublicIpAddress;

  /// Indicates whether to delete the interface when the instance is terminated.
  final bool deleteOnTermination;

  /// The description.
  final String description;

  /// The index of the device for the network interface attachment.
  final int deviceIndex;

  /// The IDs of the security groups.
  final List<String> groups;

  /// The number of IPv6 addresses to assign to the network interface. The IPv6
  /// addresses are automatically selected from the subnet range.
  final int ipv6AddressCount;

  /// The specific IPv6 addresses from the subnet range.
  final List<ScheduledInstancesIpv6Address> ipv6Addresses;

  /// The ID of the network interface.
  final String networkInterfaceId;

  /// The IPv4 address of the network interface within the subnet.
  final String privateIpAddress;

  /// The private IPv4 addresses.
  final List<ScheduledInstancesPrivateIpAddressConfig> privateIpAddressConfigs;

  /// The number of secondary private IPv4 addresses.
  final int secondaryPrivateIpAddressCount;

  /// The ID of the subnet.
  final String subnetId;

  ScheduledInstancesNetworkInterface({
    this.associatePublicIpAddress,
    this.deleteOnTermination,
    this.description,
    this.deviceIndex,
    this.groups,
    this.ipv6AddressCount,
    this.ipv6Addresses,
    this.networkInterfaceId,
    this.privateIpAddress,
    this.privateIpAddressConfigs,
    this.secondaryPrivateIpAddressCount,
    this.subnetId,
  });
}

/// Describes the placement for a Scheduled Instance.
class ScheduledInstancesPlacement {
  /// The Availability Zone.
  final String availabilityZone;

  /// The name of the placement group.
  final String groupName;

  ScheduledInstancesPlacement({
    this.availabilityZone,
    this.groupName,
  });
}

/// Describes a private IPv4 address for a Scheduled Instance.
class ScheduledInstancesPrivateIpAddressConfig {
  /// Indicates whether this is a primary IPv4 address. Otherwise, this is a
  /// secondary IPv4 address.
  final bool primary;

  /// The IPv4 address.
  final String privateIpAddress;

  ScheduledInstancesPrivateIpAddressConfig({
    this.primary,
    this.privateIpAddress,
  });
}

class SearchLocalGatewayRoutesResult {
  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  /// Information about the routes.
  final List<LocalGatewayRoute> routes;

  SearchLocalGatewayRoutesResult({
    this.nextToken,
    this.routes,
  });
}

class SearchTransitGatewayMulticastGroupsResult {
  /// Information about the transit gateway multicast group.
  final List<TransitGatewayMulticastGroup> multicastGroups;

  /// The token to use to retrieve the next page of results. This value is
  /// <code>null</code> when there are no more results to return.
  final String nextToken;

  SearchTransitGatewayMulticastGroupsResult({
    this.multicastGroups,
    this.nextToken,
  });
}

class SearchTransitGatewayRoutesResult {
  /// Indicates whether there are additional routes available.
  final bool additionalRoutesAvailable;

  /// Information about the routes.
  final List<TransitGatewayRoute> routes;

  SearchTransitGatewayRoutesResult({
    this.additionalRoutesAvailable,
    this.routes,
  });
}

/// Describes a security group
class SecurityGroup {
  /// A description of the security group.
  final String description;

  /// The ID of the security group.
  final String groupId;

  /// The name of the security group.
  final String groupName;

  /// The inbound rules associated with the security group.
  final List<IpPermission> ipPermissions;

  /// [VPC only] The outbound rules associated with the security group.
  final List<IpPermission> ipPermissionsEgress;

  /// The AWS account ID of the owner of the security group.
  final String ownerId;

  /// Any tags assigned to the security group.
  final List<Tag> tags;

  /// [VPC only] The ID of the VPC for the security group.
  final String vpcId;

  SecurityGroup({
    this.description,
    this.groupId,
    this.groupName,
    this.ipPermissions,
    this.ipPermissionsEgress,
    this.ownerId,
    this.tags,
    this.vpcId,
  });
}

/// Describes a security group.
class SecurityGroupIdentifier {
  /// The ID of the security group.
  final String groupId;

  /// The name of the security group.
  final String groupName;

  SecurityGroupIdentifier({
    this.groupId,
    this.groupName,
  });
}

/// Describes a VPC with a security group that references your security group.
class SecurityGroupReference {
  /// The ID of your security group.
  final String groupId;

  /// The ID of the VPC with the referencing security group.
  final String referencingVpcId;

  /// The ID of the VPC peering connection.
  final String vpcPeeringConnectionId;

  SecurityGroupReference({
    this.groupId,
    this.referencingVpcId,
    this.vpcPeeringConnectionId,
  });
}

/// Describes a service configuration for a VPC endpoint service.
class ServiceConfiguration {
  /// Indicates whether requests from other AWS accounts to create an endpoint to
  /// the service must first be accepted.
  final bool acceptanceRequired;

  /// The Availability Zones in which the service is available.
  final List<String> availabilityZones;

  /// The DNS names for the service.
  final List<String> baseEndpointDnsNames;

  /// Indicates whether the service manages its VPC endpoints. Management of the
  /// service VPC endpoints using the VPC endpoint API is restricted.
  final bool managesVpcEndpoints;

  /// The Amazon Resource Names (ARNs) of the Network Load Balancers for the
  /// service.
  final List<String> networkLoadBalancerArns;

  /// The private DNS name for the service.
  final String privateDnsName;

  /// Information about the endpoint service private DNS name configuration.
  final PrivateDnsNameConfiguration privateDnsNameConfiguration;

  /// The ID of the service.
  final String serviceId;

  /// The name of the service.
  final String serviceName;

  /// The service state.
  final ServiceState serviceState;

  /// The type of service.
  final List<ServiceTypeDetail> serviceType;

  /// Any tags assigned to the service.
  final List<Tag> tags;

  ServiceConfiguration({
    this.acceptanceRequired,
    this.availabilityZones,
    this.baseEndpointDnsNames,
    this.managesVpcEndpoints,
    this.networkLoadBalancerArns,
    this.privateDnsName,
    this.privateDnsNameConfiguration,
    this.serviceId,
    this.serviceName,
    this.serviceState,
    this.serviceType,
    this.tags,
  });
}

/// Describes a VPC endpoint service.
class ServiceDetail {
  /// Indicates whether VPC endpoint connection requests to the service must be
  /// accepted by the service owner.
  final bool acceptanceRequired;

  /// The Availability Zones in which the service is available.
  final List<String> availabilityZones;

  /// The DNS names for the service.
  final List<String> baseEndpointDnsNames;

  /// Indicates whether the service manages its VPC endpoints. Management of the
  /// service VPC endpoints using the VPC endpoint API is restricted.
  final bool managesVpcEndpoints;

  /// The AWS account ID of the service owner.
  final String owner;

  /// The private DNS name for the service.
  final String privateDnsName;

  /// The verification state of the VPC endpoint service.
  ///
  /// Consumers of the endpoint service cannot use the private name when the state
  /// is not <code>verified</code>.
  final DnsNameState privateDnsNameVerificationState;

  /// The ID of the endpoint service.
  final String serviceId;

  /// The Amazon Resource Name (ARN) of the service.
  final String serviceName;

  /// The type of service.
  final List<ServiceTypeDetail> serviceType;

  /// Any tags assigned to the service.
  final List<Tag> tags;

  /// Indicates whether the service supports endpoint policies.
  final bool vpcEndpointPolicySupported;

  ServiceDetail({
    this.acceptanceRequired,
    this.availabilityZones,
    this.baseEndpointDnsNames,
    this.managesVpcEndpoints,
    this.owner,
    this.privateDnsName,
    this.privateDnsNameVerificationState,
    this.serviceId,
    this.serviceName,
    this.serviceType,
    this.tags,
    this.vpcEndpointPolicySupported,
  });
}

enum ServiceState {
  pending,
  available,
  deleting,
  deleted,
  failed,
}

enum ServiceType {
  interface,
  gateway,
}

/// Describes the type of service for a VPC endpoint.
class ServiceTypeDetail {
  /// The type of service.
  final ServiceType serviceType;

  ServiceTypeDetail({
    this.serviceType,
  });
}

enum ShutdownBehavior {
  stop,
  terminate,
}

/// Describes the time period for a Scheduled Instance to start its first
/// schedule. The time period must span less than one day.
class SlotDateTimeRangeRequest {
  /// The earliest date and time, in UTC, for the Scheduled Instance to start.
  final DateTime earliestTime;

  /// The latest date and time, in UTC, for the Scheduled Instance to start. This
  /// value must be later than or equal to the earliest date and at most three
  /// months in the future.
  final DateTime latestTime;

  SlotDateTimeRangeRequest({
    @_s.required this.earliestTime,
    @_s.required this.latestTime,
  });
}

/// Describes the time period for a Scheduled Instance to start its first
/// schedule.
class SlotStartTimeRangeRequest {
  /// The earliest date and time, in UTC, for the Scheduled Instance to start.
  final DateTime earliestTime;

  /// The latest date and time, in UTC, for the Scheduled Instance to start.
  final DateTime latestTime;

  SlotStartTimeRangeRequest({
    this.earliestTime,
    this.latestTime,
  });
}

/// Describes a snapshot.
class Snapshot {
  /// The data encryption key identifier for the snapshot. This value is a unique
  /// identifier that corresponds to the data encryption key that was used to
  /// encrypt the original volume or snapshot copy. Because data encryption keys
  /// are inherited by volumes created from snapshots, and vice versa, if
  /// snapshots share the same data encryption key identifier, then they belong to
  /// the same volume/snapshot lineage. This parameter is only returned by
  /// <a>DescribeSnapshots</a>.
  final String dataEncryptionKeyId;

  /// The description for the snapshot.
  final String description;

  /// Indicates whether the snapshot is encrypted.
  final bool encrypted;

  /// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS)
  /// customer master key (CMK) that was used to protect the volume encryption key
  /// for the parent volume.
  final String kmsKeyId;

  /// Value from an Amazon-maintained list (<code>amazon</code> |
  /// <code>self</code> | <code>all</code> | <code>aws-marketplace</code> |
  /// <code>microsoft</code>) of snapshot owners. Not to be confused with the
  /// user-configured AWS account alias, which is set from the IAM console.
  final String ownerAlias;

  /// The AWS account ID of the EBS snapshot owner.
  final String ownerId;

  /// The progress of the snapshot, as a percentage.
  final String progress;

  /// The ID of the snapshot. Each snapshot receives a unique identifier when it
  /// is created.
  final String snapshotId;

  /// The time stamp when the snapshot was initiated.
  final DateTime startTime;

  /// The snapshot state.
  final SnapshotState state;

  /// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy
  /// operation fails (for example, if the proper AWS Key Management Service (AWS
  /// KMS) permissions are not obtained) this field displays error state details
  /// to help you diagnose why the error occurred. This parameter is only returned
  /// by <a>DescribeSnapshots</a>.
  final String stateMessage;

  /// Any tags assigned to the snapshot.
  final List<Tag> tags;

  /// The ID of the volume that was used to create the snapshot. Snapshots created
  /// by the <a>CopySnapshot</a> action have an arbitrary volume ID that should
  /// not be used for any purpose.
  final String volumeId;

  /// The size of the volume, in GiB.
  final int volumeSize;

  Snapshot({
    this.dataEncryptionKeyId,
    this.description,
    this.encrypted,
    this.kmsKeyId,
    this.ownerAlias,
    this.ownerId,
    this.progress,
    this.snapshotId,
    this.startTime,
    this.state,
    this.stateMessage,
    this.tags,
    this.volumeId,
    this.volumeSize,
  });
}

enum SnapshotAttributeName {
  productCodes,
  createVolumePermission,
}

/// Describes the snapshot created from the imported disk.
class SnapshotDetail {
  /// A description for the snapshot.
  final String description;

  /// The block device mapping for the snapshot.
  final String deviceName;

  /// The size of the disk in the snapshot, in GiB.
  final double diskImageSize;

  /// The format of the disk image from which the snapshot is created.
  final String format;

  /// The percentage of progress for the task.
  final String progress;

  /// The snapshot ID of the disk being imported.
  final String snapshotId;

  /// A brief status of the snapshot creation.
  final String status;

  /// A detailed status message for the snapshot creation.
  final String statusMessage;

  /// The URL used to access the disk image.
  final String url;

  /// The S3 bucket for the disk image.
  final UserBucketDetails userBucket;

  SnapshotDetail({
    this.description,
    this.deviceName,
    this.diskImageSize,
    this.format,
    this.progress,
    this.snapshotId,
    this.status,
    this.statusMessage,
    this.url,
    this.userBucket,
  });
}

/// The disk container object for the import snapshot request.
class SnapshotDiskContainer {
  /// The description of the disk image being imported.
  final String description;

  /// The format of the disk image being imported.
  ///
  /// Valid values: <code>VHD</code> | <code>VMDK</code>
  final String format;

  /// The URL to the Amazon S3-based disk image being imported. It can either be a
  /// https URL (https://..) or an Amazon S3 URL (s3://..).
  final String url;

  /// The S3 bucket for the disk image.
  final UserBucket userBucket;

  SnapshotDiskContainer({
    this.description,
    this.format,
    this.url,
    this.userBucket,
  });
}

/// Information about a snapshot.
class SnapshotInfo {
  /// Description specified by the CreateSnapshotRequest that has been applied to
  /// all snapshots.
  final String description;

  /// Indicates whether the snapshot is encrypted.
  final bool encrypted;

  /// Account id used when creating this snapshot.
  final String ownerId;

  /// Progress this snapshot has made towards completing.
  final String progress;

  /// Snapshot id that can be used to describe this snapshot.
  final String snapshotId;

  /// Time this snapshot was started. This is the same for all snapshots initiated
  /// by the same request.
  final DateTime startTime;

  /// Current state of the snapshot.
  final SnapshotState state;

  /// Tags associated with this snapshot.
  final List<Tag> tags;

  /// Source volume from which this snapshot was created.
  final String volumeId;

  /// Size of the volume from which this snapshot was created.
  final int volumeSize;

  SnapshotInfo({
    this.description,
    this.encrypted,
    this.ownerId,
    this.progress,
    this.snapshotId,
    this.startTime,
    this.state,
    this.tags,
    this.volumeId,
    this.volumeSize,
  });
}

enum SnapshotState {
  pending,
  completed,
  error,
}

/// Details about the import snapshot task.
class SnapshotTaskDetail {
  /// The description of the snapshot.
  final String description;

  /// The size of the disk in the snapshot, in GiB.
  final double diskImageSize;

  /// Indicates whether the snapshot is encrypted.
  final bool encrypted;

  /// The format of the disk image from which the snapshot is created.
  final String format;

  /// The identifier for the AWS Key Management Service (AWS KMS) customer master
  /// key (CMK) that was used to create the encrypted snapshot.
  final String kmsKeyId;

  /// The percentage of completion for the import snapshot task.
  final String progress;

  /// The snapshot ID of the disk being imported.
  final String snapshotId;

  /// A brief status for the import snapshot task.
  final String status;

  /// A detailed status message for the import snapshot task.
  final String statusMessage;

  /// The URL of the disk image from which the snapshot is created.
  final String url;

  /// The S3 bucket for the disk image.
  final UserBucketDetails userBucket;

  SnapshotTaskDetail({
    this.description,
    this.diskImageSize,
    this.encrypted,
    this.format,
    this.kmsKeyId,
    this.progress,
    this.snapshotId,
    this.status,
    this.statusMessage,
    this.url,
    this.userBucket,
  });
}

enum SpotAllocationStrategy {
  lowestPrice,
  diversified,
  capacityOptimized,
}

/// Describes the data feed for a Spot Instance.
class SpotDatafeedSubscription {
  /// The Amazon S3 bucket where the Spot Instance data feed is located.
  final String bucket;

  /// The fault codes for the Spot Instance request, if any.
  final SpotInstanceStateFault fault;

  /// The AWS account ID of the account.
  final String ownerId;

  /// The prefix that is prepended to data feed files.
  final String prefix;

  /// The state of the Spot Instance data feed subscription.
  final DatafeedSubscriptionState state;

  SpotDatafeedSubscription({
    this.bucket,
    this.fault,
    this.ownerId,
    this.prefix,
    this.state,
  });
}

/// Describes the launch specification for one or more Spot Instances. If you
/// include On-Demand capacity in your fleet request, you can't use
/// <code>SpotFleetLaunchSpecification</code>; you must use <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html">LaunchTemplateConfig</a>.
class SpotFleetLaunchSpecification {
  /// Deprecated.
  final String addressingType;

  /// One or more block devices that are mapped to the Spot Instances. You can't
  /// specify both a snapshot ID and an encryption value. This is because only
  /// blank volumes can be encrypted on creation. If a snapshot is the basis for a
  /// volume, it is not blank and its encryption status is used for the volume
  /// encryption status.
  final List<BlockDeviceMapping> blockDeviceMappings;

  /// Indicates whether the instances are optimized for EBS I/O. This optimization
  /// provides dedicated throughput to Amazon EBS and an optimized configuration
  /// stack to provide optimal EBS I/O performance. This optimization isn't
  /// available with all instance types. Additional usage charges apply when using
  /// an EBS Optimized instance.
  ///
  /// Default: <code>false</code>
  final bool ebsOptimized;

  /// The IAM instance profile.
  final IamInstanceProfileSpecification iamInstanceProfile;

  /// The ID of the AMI.
  final String imageId;

  /// The instance type.
  final InstanceType instanceType;

  /// The ID of the kernel.
  final String kernelId;

  /// The name of the key pair.
  final String keyName;

  /// Enable or disable monitoring for the instances.
  final SpotFleetMonitoring monitoring;

  /// One or more network interfaces. If you specify a network interface, you must
  /// specify subnet IDs and security group IDs using the network interface.
  final List<InstanceNetworkInterfaceSpecification> networkInterfaces;

  /// The placement information.
  final SpotPlacement placement;

  /// The ID of the RAM disk. Some kernels require additional drivers at launch.
  /// Check the kernel requirements for information about whether you need to
  /// specify a RAM disk. To find kernel requirements, refer to the AWS Resource
  /// Center and search for the kernel ID.
  final String ramdiskId;

  /// One or more security groups. When requesting instances in a VPC, you must
  /// specify the IDs of the security groups. When requesting instances in
  /// EC2-Classic, you can specify the names or the IDs of the security groups.
  final List<GroupIdentifier> securityGroups;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. If this value is not specified, the default is the Spot price
  /// specified for the fleet. To determine the Spot price per unit hour, divide
  /// the Spot price by the value of <code>WeightedCapacity</code>.
  final String spotPrice;

  /// The IDs of the subnets in which to launch the instances. To specify multiple
  /// subnets, separate them using commas; for example, "subnet-1234abcdeexample1,
  /// subnet-0987cdef6example2".
  final String subnetId;

  /// The tags to apply during creation.
  final List<SpotFleetTagSpecification> tagSpecifications;

  /// The Base64-encoded user data that instances use when starting up.
  final String userData;

  /// The number of units provided by the specified instance type. These are the
  /// same units that you chose to set the target capacity in terms of instances,
  /// or a performance characteristic such as vCPUs, memory, or I/O.
  ///
  /// If the target capacity divided by this value is not a whole number, Amazon
  /// EC2 rounds the number of instances to the next whole number. If this value
  /// is not specified, the default is 1.
  final double weightedCapacity;

  SpotFleetLaunchSpecification({
    this.addressingType,
    this.blockDeviceMappings,
    this.ebsOptimized,
    this.iamInstanceProfile,
    this.imageId,
    this.instanceType,
    this.kernelId,
    this.keyName,
    this.monitoring,
    this.networkInterfaces,
    this.placement,
    this.ramdiskId,
    this.securityGroups,
    this.spotPrice,
    this.subnetId,
    this.tagSpecifications,
    this.userData,
    this.weightedCapacity,
  });
}

/// Describes whether monitoring is enabled.
class SpotFleetMonitoring {
  /// Enables monitoring for the instance.
  ///
  /// Default: <code>false</code>
  final bool enabled;

  SpotFleetMonitoring({
    this.enabled,
  });
}

/// Describes a Spot Fleet request.
class SpotFleetRequestConfig {
  /// The progress of the Spot Fleet request. If there is an error, the status is
  /// <code>error</code>. After all requests are placed, the status is
  /// <code>pending_fulfillment</code>. If the size of the fleet is equal to or
  /// greater than its target capacity, the status is <code>fulfilled</code>. If
  /// the size of the fleet is decreased, the status is
  /// <code>pending_termination</code> while Spot Instances are terminating.
  final ActivityStatus activityStatus;

  /// The creation date and time of the request.
  final DateTime createTime;

  /// The configuration of the Spot Fleet request.
  final SpotFleetRequestConfigData spotFleetRequestConfig;

  /// The ID of the Spot Fleet request.
  final String spotFleetRequestId;

  /// The state of the Spot Fleet request.
  final BatchState spotFleetRequestState;

  /// The tags for a Spot Fleet resource.
  final List<Tag> tags;

  SpotFleetRequestConfig({
    this.activityStatus,
    this.createTime,
    this.spotFleetRequestConfig,
    this.spotFleetRequestId,
    this.spotFleetRequestState,
    this.tags,
  });
}

/// Describes the configuration of a Spot Fleet request.
class SpotFleetRequestConfigData {
  /// The Amazon Resource Name (ARN) of an AWS Identity and Access Management
  /// (IAM) role that grants the Spot Fleet the permission to request, launch,
  /// terminate, and tag instances on your behalf. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites">Spot
  /// Fleet Prerequisites</a> in the <i>Amazon EC2 User Guide for Linux
  /// Instances</i>. Spot Fleet can terminate Spot Instances on your behalf when
  /// you cancel its Spot Fleet request using <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CancelSpotFleetRequests">CancelSpotFleetRequests</a>
  /// or when the Spot Fleet request expires, if you set
  /// <code>TerminateInstancesWithExpiration</code>.
  final String iamFleetRole;

  /// The number of units to request for the Spot Fleet. You can choose to set the
  /// target capacity in terms of instances or a performance characteristic that
  /// is important to your application workload, such as vCPUs, memory, or I/O. If
  /// the request type is <code>maintain</code>, you can specify a target capacity
  /// of 0 and add capacity later.
  final int targetCapacity;

  /// Indicates how to allocate the target Spot Instance capacity across the Spot
  /// Instance pools specified by the Spot Fleet request.
  ///
  /// If the allocation strategy is <code>lowestPrice</code>, Spot Fleet launches
  /// instances from the Spot Instance pools with the lowest price. This is the
  /// default allocation strategy.
  ///
  /// If the allocation strategy is <code>diversified</code>, Spot Fleet launches
  /// instances from all the Spot Instance pools that you specify.
  ///
  /// If the allocation strategy is <code>capacityOptimized</code>, Spot Fleet
  /// launches instances from Spot Instance pools with optimal capacity for the
  /// number of instances that are launching.
  final AllocationStrategy allocationStrategy;

  /// A unique, case-sensitive identifier that you provide to ensure the
  /// idempotency of your listings. This helps to avoid duplicate listings. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring
  /// Idempotency</a>.
  final String clientToken;

  /// Indicates whether running Spot Instances should be terminated if you
  /// decrease the target capacity of the Spot Fleet request below the current
  /// size of the Spot Fleet.
  final ExcessCapacityTerminationPolicy excessCapacityTerminationPolicy;

  /// The number of units fulfilled by this request compared to the set target
  /// capacity. You cannot set this value.
  final double fulfilledCapacity;

  /// The behavior when a Spot Instance is interrupted. The default is
  /// <code>terminate</code>.
  final InstanceInterruptionBehavior instanceInterruptionBehavior;

  /// The number of Spot pools across which to allocate your target Spot capacity.
  /// Valid only when Spot <b>AllocationStrategy</b> is set to
  /// <code>lowest-price</code>. Spot Fleet selects the cheapest Spot pools and
  /// evenly allocates your target Spot capacity across the number of Spot pools
  /// that you specify.
  final int instancePoolsToUseCount;

  /// The launch specifications for the Spot Fleet request. If you specify
  /// <code>LaunchSpecifications</code>, you can't specify
  /// <code>LaunchTemplateConfigs</code>. If you include On-Demand capacity in
  /// your request, you must use <code>LaunchTemplateConfigs</code>.
  final List<SpotFleetLaunchSpecification> launchSpecifications;

  /// The launch template and overrides. If you specify
  /// <code>LaunchTemplateConfigs</code>, you can't specify
  /// <code>LaunchSpecifications</code>. If you include On-Demand capacity in your
  /// request, you must use <code>LaunchTemplateConfigs</code>.
  final List<LaunchTemplateConfig> launchTemplateConfigs;

  /// One or more Classic Load Balancers and target groups to attach to the Spot
  /// Fleet request. Spot Fleet registers the running Spot Instances with the
  /// specified Classic Load Balancers and target groups.
  ///
  /// With Network Load Balancers, Spot Fleet cannot register instances that have
  /// the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1,
  /// HS1, M1, M2, M3, and T1.
  final LoadBalancersConfig loadBalancersConfig;

  /// The order of the launch template overrides to use in fulfilling On-Demand
  /// capacity. If you specify <code>lowestPrice</code>, Spot Fleet uses price to
  /// determine the order, launching the lowest price first. If you specify
  /// <code>prioritized</code>, Spot Fleet uses the priority that you assign to
  /// each Spot Fleet launch template override, launching the highest priority
  /// first. If you do not specify a value, Spot Fleet defaults to
  /// <code>lowestPrice</code>.
  final OnDemandAllocationStrategy onDemandAllocationStrategy;

  /// The number of On-Demand units fulfilled by this request compared to the set
  /// target On-Demand capacity.
  final double onDemandFulfilledCapacity;

  /// The maximum amount per hour for On-Demand Instances that you're willing to
  /// pay. You can use the <code>onDemandMaxTotalPrice</code> parameter, the
  /// <code>spotMaxTotalPrice</code> parameter, or both parameters to ensure that
  /// your fleet cost does not exceed your budget. If you set a maximum price per
  /// hour for the On-Demand Instances and Spot Instances in your request, Spot
  /// Fleet will launch instances until it reaches the maximum amount you're
  /// willing to pay. When the maximum amount you're willing to pay is reached,
  /// the fleet stops launching instances even if it hasn’t met the target
  /// capacity.
  final String onDemandMaxTotalPrice;

  /// The number of On-Demand units to request. You can choose to set the target
  /// capacity in terms of instances or a performance characteristic that is
  /// important to your application workload, such as vCPUs, memory, or I/O. If
  /// the request type is <code>maintain</code>, you can specify a target capacity
  /// of 0 and add capacity later.
  final int onDemandTargetCapacity;

  /// Indicates whether Spot Fleet should replace unhealthy instances.
  final bool replaceUnhealthyInstances;

  /// The maximum amount per hour for Spot Instances that you're willing to pay.
  /// You can use the <code>spotdMaxTotalPrice</code> parameter, the
  /// <code>onDemandMaxTotalPrice</code> parameter, or both parameters to ensure
  /// that your fleet cost does not exceed your budget. If you set a maximum price
  /// per hour for the On-Demand Instances and Spot Instances in your request,
  /// Spot Fleet will launch instances until it reaches the maximum amount you're
  /// willing to pay. When the maximum amount you're willing to pay is reached,
  /// the fleet stops launching instances even if it hasn’t met the target
  /// capacity.
  final String spotMaxTotalPrice;

  /// The maximum price per unit hour that you are willing to pay for a Spot
  /// Instance. The default is the On-Demand price.
  final String spotPrice;

  /// The key-value pair for tagging the Spot Fleet request on creation. The value
  /// for <code>ResourceType</code> must be <code>spot-fleet-request</code>,
  /// otherwise the Spot Fleet request fails. To tag instances at launch, specify
  /// the tags in the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template">launch
  /// template</a> (valid only if you use <code>LaunchTemplateConfigs</code>) or
  /// in the <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html">
  /// <code>SpotFleetTagSpecification</code> </a> (valid only if you use
  /// <code>LaunchSpecifications</code>). For information about tagging after
  /// launch, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources">Tagging
  /// Your Resources</a>.
  final List<TagSpecification> tagSpecifications;

  /// Indicates whether running Spot Instances are terminated when the Spot Fleet
  /// request expires.
  final bool terminateInstancesWithExpiration;

  /// The type of request. Indicates whether the Spot Fleet only requests the
  /// target capacity or also attempts to maintain it. When this value is
  /// <code>request</code>, the Spot Fleet only places the required requests. It
  /// does not attempt to replenish Spot Instances if capacity is diminished, nor
  /// does it submit requests in alternative Spot pools if capacity is not
  /// available. When this value is <code>maintain</code>, the Spot Fleet
  /// maintains the target capacity. The Spot Fleet places the required requests
  /// to meet capacity and automatically replenishes any interrupted instances.
  /// Default: <code>maintain</code>. <code>instant</code> is listed but is not
  /// used by Spot Fleet.
  final FleetType type;

  /// The start date and time of the request, in UTC format
  /// (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). By
  /// default, Amazon EC2 starts fulfilling the request immediately.
  final DateTime validFrom;

  /// The end date and time of the request, in UTC format
  /// (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). After the
  /// end date and time, no new Spot Instance requests are placed or able to
  /// fulfill the request. If no value is specified, the Spot Fleet request
  /// remains until you cancel it.
  final DateTime validUntil;

  SpotFleetRequestConfigData({
    @_s.required this.iamFleetRole,
    @_s.required this.targetCapacity,
    this.allocationStrategy,
    this.clientToken,
    this.excessCapacityTerminationPolicy,
    this.fulfilledCapacity,
    this.instanceInterruptionBehavior,
    this.instancePoolsToUseCount,
    this.launchSpecifications,
    this.launchTemplateConfigs,
    this.loadBalancersConfig,
    this.onDemandAllocationStrategy,
    this.onDemandFulfilledCapacity,
    this.onDemandMaxTotalPrice,
    this.onDemandTargetCapacity,
    this.replaceUnhealthyInstances,
    this.spotMaxTotalPrice,
    this.spotPrice,
    this.tagSpecifications,
    this.terminateInstancesWithExpiration,
    this.type,
    this.validFrom,
    this.validUntil,
  });
}

/// The tags for a Spot Fleet resource.
class SpotFleetTagSpecification {
  /// The type of resource. Currently, the only resource type that is supported is
  /// <code>instance</code>. To tag the Spot Fleet request on creation, use the
  /// <code>TagSpecifications</code> parameter in <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetRequestConfigData.html">
  /// <code>SpotFleetRequestConfigData</code> </a>.
  final ResourceType resourceType;

  /// The tags.
  final List<Tag> tags;

  SpotFleetTagSpecification({
    this.resourceType,
    this.tags,
  });
}

enum SpotInstanceInterruptionBehavior {
  hibernate,
  stop,
  terminate,
}

/// Describes a Spot Instance request.
class SpotInstanceRequest {
  /// If you specified a duration and your Spot Instance request was fulfilled,
  /// this is the fixed hourly price in effect for the Spot Instance while it
  /// runs.
  final String actualBlockHourlyPrice;

  /// The Availability Zone group. If you specify the same Availability Zone group
  /// for all Spot Instance requests, all Spot Instances are launched in the same
  /// Availability Zone.
  final String availabilityZoneGroup;

  /// The duration for the Spot Instance, in minutes.
  final int blockDurationMinutes;

  /// The date and time when the Spot Instance request was created, in UTC format
  /// (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime createTime;

  /// The fault codes for the Spot Instance request, if any.
  final SpotInstanceStateFault fault;

  /// The instance ID, if an instance has been launched to fulfill the Spot
  /// Instance request.
  final String instanceId;

  /// The behavior when a Spot Instance is interrupted.
  final InstanceInterruptionBehavior instanceInterruptionBehavior;

  /// The instance launch group. Launch groups are Spot Instances that launch
  /// together and terminate together.
  final String launchGroup;

  /// Additional information for launching instances.
  final LaunchSpecification launchSpecification;

  /// The Availability Zone in which the request is launched.
  final String launchedAvailabilityZone;

  /// The product description associated with the Spot Instance.
  final RIProductDescription productDescription;

  /// The ID of the Spot Instance request.
  final String spotInstanceRequestId;

  /// The maximum price per hour that you are willing to pay for a Spot Instance.
  final String spotPrice;

  /// The state of the Spot Instance request. Spot status information helps track
  /// your Spot Instance requests. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot
  /// Status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  final SpotInstanceState state;

  /// The status code and status message describing the Spot Instance request.
  final SpotInstanceStatus status;

  /// Any tags assigned to the resource.
  final List<Tag> tags;

  /// The Spot Instance request type.
  final SpotInstanceType type;

  /// The start date of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The request
  /// becomes active at this date and time.
  final DateTime validFrom;

  /// The end date of the request, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). If this is
  /// a one-time request, it remains active until all instances launch, the
  /// request is canceled, or this date is reached. If the request is persistent,
  /// it remains active until it is canceled or this date is reached. The default
  /// end date is 7 days from the current date.
  final DateTime validUntil;

  SpotInstanceRequest({
    this.actualBlockHourlyPrice,
    this.availabilityZoneGroup,
    this.blockDurationMinutes,
    this.createTime,
    this.fault,
    this.instanceId,
    this.instanceInterruptionBehavior,
    this.launchGroup,
    this.launchSpecification,
    this.launchedAvailabilityZone,
    this.productDescription,
    this.spotInstanceRequestId,
    this.spotPrice,
    this.state,
    this.status,
    this.tags,
    this.type,
    this.validFrom,
    this.validUntil,
  });
}

enum SpotInstanceState {
  open,
  active,
  closed,
  cancelled,
  failed,
}

/// Describes a Spot Instance state change.
class SpotInstanceStateFault {
  /// The reason code for the Spot Instance state change.
  final String code;

  /// The message for the Spot Instance state change.
  final String message;

  SpotInstanceStateFault({
    this.code,
    this.message,
  });
}

/// Describes the status of a Spot Instance request.
class SpotInstanceStatus {
  /// The status code. For a list of status codes, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand">Spot
  /// Status Codes</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
  final String code;

  /// The description for the status code.
  final String message;

  /// The date and time of the most recent status update, in UTC format (for
  /// example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime updateTime;

  SpotInstanceStatus({
    this.code,
    this.message,
    this.updateTime,
  });
}

enum SpotInstanceType {
  oneTime,
  persistent,
}

/// The options for Spot Instances.
class SpotMarketOptions {
  /// The required duration for the Spot Instances (also known as Spot blocks), in
  /// minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or
  /// 360).
  final int blockDurationMinutes;

  /// The behavior when a Spot Instance is interrupted. The default is
  /// <code>terminate</code>.
  final InstanceInterruptionBehavior instanceInterruptionBehavior;

  /// The maximum hourly price you're willing to pay for the Spot Instances. The
  /// default is the On-Demand price.
  final String maxPrice;

  /// The Spot Instance request type. For <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances">RunInstances</a>,
  /// persistent Spot Instance requests are only supported when
  /// <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code>
  /// or <code>stop</code>.
  final SpotInstanceType spotInstanceType;

  /// The end date of the request. For a one-time request, the request remains
  /// active until all instances launch, the request is canceled, or this date is
  /// reached. If the request is persistent, it remains active until it is
  /// canceled or this date and time is reached. The default end date is 7 days
  /// from the current date.
  final DateTime validUntil;

  SpotMarketOptions({
    this.blockDurationMinutes,
    this.instanceInterruptionBehavior,
    this.maxPrice,
    this.spotInstanceType,
    this.validUntil,
  });
}

/// Describes the configuration of Spot Instances in an EC2 Fleet.
class SpotOptions {
  /// Indicates how to allocate the target Spot Instance capacity across the Spot
  /// Instance pools specified by the EC2 Fleet.
  ///
  /// If the allocation strategy is <code>lowest-price</code>, EC2 Fleet launches
  /// instances from the Spot Instance pools with the lowest price. This is the
  /// default allocation strategy.
  ///
  /// If the allocation strategy is <code>diversified</code>, EC2 Fleet launches
  /// instances from all of the Spot Instance pools that you specify.
  ///
  /// If the allocation strategy is <code>capacity-optimized</code>, EC2 Fleet
  /// launches instances from Spot Instance pools with optimal capacity for the
  /// number of instances that are launching.
  final SpotAllocationStrategy allocationStrategy;

  /// The behavior when a Spot Instance is interrupted. The default is
  /// <code>terminate</code>.
  final SpotInstanceInterruptionBehavior instanceInterruptionBehavior;

  /// The number of Spot pools across which to allocate your target Spot capacity.
  /// Valid only when <b>AllocationStrategy</b> is set to
  /// <code>lowest-price</code>. EC2 Fleet selects the cheapest Spot pools and
  /// evenly allocates your target Spot capacity across the number of Spot pools
  /// that you specify.
  final int instancePoolsToUseCount;

  /// The maximum amount per hour for Spot Instances that you're willing to pay.
  final String maxTotalPrice;

  /// The minimum target capacity for Spot Instances in the fleet. If the minimum
  /// target capacity is not reached, the fleet launches no instances.
  final int minTargetCapacity;

  /// Indicates that the fleet launches all Spot Instances into a single
  /// Availability Zone. Supported only for fleets of type <code>instant</code>.
  final bool singleAvailabilityZone;

  /// Indicates that the fleet uses a single instance type to launch all Spot
  /// Instances in the fleet. Supported only for fleets of type
  /// <code>instant</code>.
  final bool singleInstanceType;

  SpotOptions({
    this.allocationStrategy,
    this.instanceInterruptionBehavior,
    this.instancePoolsToUseCount,
    this.maxTotalPrice,
    this.minTargetCapacity,
    this.singleAvailabilityZone,
    this.singleInstanceType,
  });
}

/// Describes the configuration of Spot Instances in an EC2 Fleet request.
class SpotOptionsRequest {
  /// Indicates how to allocate the target Spot Instance capacity across the Spot
  /// Instance pools specified by the EC2 Fleet.
  ///
  /// If the allocation strategy is <code>lowest-price</code>, EC2 Fleet launches
  /// instances from the Spot Instance pools with the lowest price. This is the
  /// default allocation strategy.
  ///
  /// If the allocation strategy is <code>diversified</code>, EC2 Fleet launches
  /// instances from all of the Spot Instance pools that you specify.
  ///
  /// If the allocation strategy is <code>capacity-optimized</code>, EC2 Fleet
  /// launches instances from Spot Instance pools with optimal capacity for the
  /// number of instances that are launching.
  final SpotAllocationStrategy allocationStrategy;

  /// The behavior when a Spot Instance is interrupted. The default is
  /// <code>terminate</code>.
  final SpotInstanceInterruptionBehavior instanceInterruptionBehavior;

  /// The number of Spot pools across which to allocate your target Spot capacity.
  /// Valid only when Spot <b>AllocationStrategy</b> is set to
  /// <code>lowest-price</code>. EC2 Fleet selects the cheapest Spot pools and
  /// evenly allocates your target Spot capacity across the number of Spot pools
  /// that you specify.
  final int instancePoolsToUseCount;

  /// The maximum amount per hour for Spot Instances that you're willing to pay.
  final String maxTotalPrice;

  /// The minimum target capacity for Spot Instances in the fleet. If the minimum
  /// target capacity is not reached, the fleet launches no instances.
  final int minTargetCapacity;

  /// Indicates that the fleet launches all Spot Instances into a single
  /// Availability Zone. Supported only for fleets of type <code>instant</code>.
  final bool singleAvailabilityZone;

  /// Indicates that the fleet uses a single instance type to launch all Spot
  /// Instances in the fleet. Supported only for fleets of type
  /// <code>instant</code>.
  final bool singleInstanceType;

  SpotOptionsRequest({
    this.allocationStrategy,
    this.instanceInterruptionBehavior,
    this.instancePoolsToUseCount,
    this.maxTotalPrice,
    this.minTargetCapacity,
    this.singleAvailabilityZone,
    this.singleInstanceType,
  });
}

/// Describes Spot Instance placement.
class SpotPlacement {
  /// The Availability Zone.
  ///
  /// [Spot Fleet only] To specify multiple Availability Zones, separate them
  /// using commas; for example, "us-west-2a, us-west-2b".
  final String availabilityZone;

  /// The name of the placement group.
  final String groupName;

  /// The tenancy of the instance (if the instance is running in a VPC). An
  /// instance with a tenancy of <code>dedicated</code> runs on single-tenant
  /// hardware. The <code>host</code> tenancy is not supported for Spot Instances.
  final Tenancy tenancy;

  SpotPlacement({
    this.availabilityZone,
    this.groupName,
    this.tenancy,
  });
}

/// Describes the maximum price per hour that you are willing to pay for a Spot
/// Instance.
class SpotPrice {
  /// The Availability Zone.
  final String availabilityZone;

  /// The instance type.
  final InstanceType instanceType;

  /// A general description of the AMI.
  final RIProductDescription productDescription;

  /// The maximum price per hour that you are willing to pay for a Spot Instance.
  final String spotPrice;

  /// The date and time the request was created, in UTC format (for example,
  /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
  final DateTime timestamp;

  SpotPrice({
    this.availabilityZone,
    this.instanceType,
    this.productDescription,
    this.spotPrice,
    this.timestamp,
  });
}

/// Describes a stale rule in a security group.
class StaleIpPermission {
  /// The start of the port range for the TCP and UDP protocols, or an ICMP type
  /// number. A value of <code>-1</code> indicates all ICMP types.
  final int fromPort;

  /// The IP protocol name (for <code>tcp</code>, <code>udp</code>, and
  /// <code>icmp</code>) or number (see <a
  /// href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol
  /// Numbers)</a>.
  final String ipProtocol;

  /// The IP ranges. Not applicable for stale security group rules.
  final List<String> ipRanges;

  /// The prefix list IDs for an AWS service. Not applicable for stale security
  /// group rules.
  final List<String> prefixListIds;

  /// The end of the port range for the TCP and UDP protocols, or an ICMP type
  /// number. A value of <code>-1</code> indicates all ICMP types.
  final int toPort;

  /// The security group pairs. Returns the ID of the referenced security group
  /// and VPC, and the ID and status of the VPC peering connection.
  final List<UserIdGroupPair> userIdGroupPairs;

  StaleIpPermission({
    this.fromPort,
    this.ipProtocol,
    this.ipRanges,
    this.prefixListIds,
    this.toPort,
    this.userIdGroupPairs,
  });
}

/// Describes a stale security group (a security group that contains stale
/// rules).
class StaleSecurityGroup {
  /// The description of the security group.
  final String description;

  /// The ID of the security group.
  final String groupId;

  /// The name of the security group.
  final String groupName;

  /// Information about the stale inbound rules in the security group.
  final List<StaleIpPermission> staleIpPermissions;

  /// Information about the stale outbound rules in the security group.
  final List<StaleIpPermission> staleIpPermissionsEgress;

  /// The ID of the VPC for the security group.
  final String vpcId;

  StaleSecurityGroup({
    this.description,
    this.groupId,
    this.groupName,
    this.staleIpPermissions,
    this.staleIpPermissionsEgress,
    this.vpcId,
  });
}

class StartInstancesResult {
  /// Information about the started instances.
  final List<InstanceStateChange> startingInstances;

  StartInstancesResult({
    this.startingInstances,
  });
}

class StartVpcEndpointServicePrivateDnsVerificationResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, it returns an
  /// error.
  final bool returnValue;

  StartVpcEndpointServicePrivateDnsVerificationResult({
    this.returnValue,
  });
}

enum State {
  pendingAcceptance,
  pending,
  available,
  deleting,
  deleted,
  rejected,
  failed,
  expired,
}

/// Describes a state change.
class StateReason {
  /// The reason code for the state change.
  final String code;

  /// The message for the state change.
  ///
  /// <ul>
  /// <li>
  /// <code>Server.InsufficientInstanceCapacity</code>: There was insufficient
  /// capacity available to satisfy the launch request.
  /// </li>
  /// <li>
  /// <code>Server.InternalError</code>: An internal error caused the instance to
  /// terminate during launch.
  /// </li>
  /// <li>
  /// <code>Server.ScheduledStop</code>: The instance was stopped due to a
  /// scheduled retirement.
  /// </li>
  /// <li>
  /// <code>Server.SpotInstanceShutdown</code>: The instance was stopped because
  /// the number of Spot requests with a maximum price equal to or higher than the
  /// Spot price exceeded available capacity or because of an increase in the Spot
  /// price.
  /// </li>
  /// <li>
  /// <code>Server.SpotInstanceTermination</code>: The instance was terminated
  /// because the number of Spot requests with a maximum price equal to or higher
  /// than the Spot price exceeded available capacity or because of an increase in
  /// the Spot price.
  /// </li>
  /// <li>
  /// <code>Client.InstanceInitiatedShutdown</code>: The instance was shut down
  /// using the <code>shutdown -h</code> command from the instance.
  /// </li>
  /// <li>
  /// <code>Client.InstanceTerminated</code>: The instance was terminated or
  /// rebooted during AMI creation.
  /// </li>
  /// <li>
  /// <code>Client.InternalError</code>: A client error caused the instance to
  /// terminate during launch.
  /// </li>
  /// <li>
  /// <code>Client.InvalidSnapshot.NotFound</code>: The specified snapshot was not
  /// found.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiatedHibernate</code>: Hibernation was initiated on the
  /// instance.
  /// </li>
  /// <li>
  /// <code>Client.UserInitiatedShutdown</code>: The instance was shut down using
  /// the Amazon EC2 API.
  /// </li>
  /// <li>
  /// <code>Client.VolumeLimitExceeded</code>: The limit on the number of EBS
  /// volumes or total storage was exceeded. Decrease usage or request an increase
  /// in your account limits.
  /// </li>
  /// </ul>
  final String message;

  StateReason({
    this.code,
    this.message,
  });
}

enum Status {
  moveInProgress,
  inVpc,
  inClassic,
}

enum StatusName {
  reachability,
}

enum StatusType {
  passed,
  failed,
  insufficientData,
  initializing,
}

class StopInstancesResult {
  /// Information about the stopped instances.
  final List<InstanceStateChange> stoppingInstances;

  StopInstancesResult({
    this.stoppingInstances,
  });
}

/// Describes the storage location for an instance store-backed AMI.
class Storage {
  /// An Amazon S3 storage location.
  final S3Storage s3;

  Storage({
    this.s3,
  });
}

/// Describes a storage location in Amazon S3.
class StorageLocation {
  /// The name of the S3 bucket.
  final String bucket;

  /// The key.
  final String key;

  StorageLocation({
    this.bucket,
    this.key,
  });
}

/// Describes a subnet.
class Subnet {
  /// Indicates whether a network interface created in this subnet (including a
  /// network interface created by <a>RunInstances</a>) receives an IPv6 address.
  final bool assignIpv6AddressOnCreation;

  /// The Availability Zone of the subnet.
  final String availabilityZone;

  /// The AZ ID of the subnet.
  final String availabilityZoneId;

  /// The number of unused private IPv4 addresses in the subnet. The IPv4
  /// addresses for any stopped instances are considered unavailable.
  final int availableIpAddressCount;

  /// The IPv4 CIDR block assigned to the subnet.
  final String cidrBlock;

  /// Indicates whether this is the default subnet for the Availability Zone.
  final bool defaultForAz;

  /// Information about the IPv6 CIDR blocks associated with the subnet.
  final List<SubnetIpv6CidrBlockAssociation> ipv6CidrBlockAssociationSet;

  /// Indicates whether instances launched in this subnet receive a public IPv4
  /// address.
  final bool mapPublicIpOnLaunch;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String outpostArn;

  /// The ID of the AWS account that owns the subnet.
  final String ownerId;

  /// The current state of the subnet.
  final SubnetState state;

  /// The Amazon Resource Name (ARN) of the subnet.
  final String subnetArn;

  /// The ID of the subnet.
  final String subnetId;

  /// Any tags assigned to the subnet.
  final List<Tag> tags;

  /// The ID of the VPC the subnet is in.
  final String vpcId;

  Subnet({
    this.assignIpv6AddressOnCreation,
    this.availabilityZone,
    this.availabilityZoneId,
    this.availableIpAddressCount,
    this.cidrBlock,
    this.defaultForAz,
    this.ipv6CidrBlockAssociationSet,
    this.mapPublicIpOnLaunch,
    this.outpostArn,
    this.ownerId,
    this.state,
    this.subnetArn,
    this.subnetId,
    this.tags,
    this.vpcId,
  });
}

/// Describes the subnet association with the transit gateway multicast domain.
class SubnetAssociation {
  /// The state of the subnet association.
  final TransitGatewayMulitcastDomainAssociationState state;

  /// The ID of the subnet.
  final String subnetId;

  SubnetAssociation({
    this.state,
    this.subnetId,
  });
}

/// Describes the state of a CIDR block.
class SubnetCidrBlockState {
  /// The state of a CIDR block.
  final SubnetCidrBlockStateCode state;

  /// A message about the status of the CIDR block, if applicable.
  final String statusMessage;

  SubnetCidrBlockState({
    this.state,
    this.statusMessage,
  });
}

enum SubnetCidrBlockStateCode {
  associating,
  associated,
  disassociating,
  disassociated,
  failing,
  failed,
}

/// Describes an IPv6 CIDR block associated with a subnet.
class SubnetIpv6CidrBlockAssociation {
  /// The association ID for the CIDR block.
  final String associationId;

  /// The IPv6 CIDR block.
  final String ipv6CidrBlock;

  /// Information about the state of the CIDR block.
  final SubnetCidrBlockState ipv6CidrBlockState;

  SubnetIpv6CidrBlockAssociation({
    this.associationId,
    this.ipv6CidrBlock,
    this.ipv6CidrBlockState,
  });
}

enum SubnetState {
  pending,
  available,
}

/// Describes the burstable performance instance whose credit option for CPU
/// usage was successfully modified.
class SuccessfulInstanceCreditSpecificationItem {
  /// The ID of the instance.
  final String instanceId;

  SuccessfulInstanceCreditSpecificationItem({
    this.instanceId,
  });
}

/// Describes a Reserved Instance whose queued purchase was successfully
/// deleted.
class SuccessfulQueuedPurchaseDeletion {
  /// The ID of the Reserved Instance.
  final String reservedInstancesId;

  SuccessfulQueuedPurchaseDeletion({
    this.reservedInstancesId,
  });
}

enum SummaryStatus {
  ok,
  impaired,
  insufficientData,
  notApplicable,
  initializing,
}

/// Describes a tag.
class Tag {
  /// The key of the tag.
  ///
  /// Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode
  /// characters. May not begin with <code>aws:</code>.
  final String key;

  /// The value of the tag.
  ///
  /// Constraints: Tag values are case-sensitive and accept a maximum of 255
  /// Unicode characters.
  final String value;

  Tag({
    this.key,
    this.value,
  });
}

/// Describes a tag.
class TagDescription {
  /// The tag key.
  final String key;

  /// The ID of the resource.
  final String resourceId;

  /// The resource type.
  final ResourceType resourceType;

  /// The tag value.
  final String value;

  TagDescription({
    this.key,
    this.resourceId,
    this.resourceType,
    this.value,
  });
}

/// The tags to apply to a resource when the resource is being created.
class TagSpecification {
  /// The type of resource to tag. Currently, the resource types that support
  /// tagging on creation are: <code>capacity-reservation</code> |
  /// <code>client-vpn-endpoint</code> | <code>dedicated-host</code> |
  /// <code>fleet</code> | <code>fpga-image</code> | <code>instance</code> |
  /// <code>key-pair</code> | <code>launch-template</code> | |
  /// <code>natgateway</code> | <code>spot-fleet-request</code> |
  /// <code>placement-group</code> | <code>snapshot</code> |
  /// <code>traffic-mirror-filter</code> | <code>traffic-mirror-session</code> |
  /// <code>traffic-mirror-target</code> | <code>transit-gateway</code> |
  /// <code>transit-gateway-attachment</code> |
  /// <code>transit-gateway-route-table</code> | <code>vpc-endpoint</code> (for
  /// interface VPC endpoints)| <code>vpc-endpoint-service</code> (for gateway VPC
  /// endpoints) | <code>volume</code> | <code>vpc-flow-log</code>.
  ///
  /// To tag a resource after it has been created, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.
  final ResourceType resourceType;

  /// The tags to apply to the resource.
  final List<Tag> tags;

  TagSpecification({
    this.resourceType,
    this.tags,
  });
}

/// The number of units to request. You can choose to set the target capacity in
/// terms of instances or a performance characteristic that is important to your
/// application workload, such as vCPUs, memory, or I/O. If the request type is
/// <code>maintain</code>, you can specify a target capacity of 0 and add
/// capacity later.
///
/// You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the
/// Spot Instance <code>MaxTotalPrice</code>, or both to ensure that your fleet
/// cost does not exceed your budget. If you set a maximum price per hour for
/// the On-Demand Instances and Spot Instances in your request, EC2 Fleet will
/// launch instances until it reaches the maximum amount that you're willing to
/// pay. When the maximum amount you're willing to pay is reached, the fleet
/// stops launching instances even if it hasn’t met the target capacity. The
/// <code>MaxTotalPrice</code> parameters are located in <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptions.html">OnDemandOptions</a>
/// and <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptions">SpotOptions</a>
class TargetCapacitySpecification {
  /// The default <code>TotalTargetCapacity</code>, which is either
  /// <code>Spot</code> or <code>On-Demand</code>.
  final DefaultTargetCapacityType defaultTargetCapacityType;

  /// The number of On-Demand units to request. If you specify a target capacity
  /// for Spot units, you cannot specify a target capacity for On-Demand units.
  final int onDemandTargetCapacity;

  /// The maximum number of Spot units to launch. If you specify a target capacity
  /// for On-Demand units, you cannot specify a target capacity for Spot units.
  final int spotTargetCapacity;

  /// The number of units to request, filled using
  /// <code>DefaultTargetCapacityType</code>.
  final int totalTargetCapacity;

  TargetCapacitySpecification({
    this.defaultTargetCapacityType,
    this.onDemandTargetCapacity,
    this.spotTargetCapacity,
    this.totalTargetCapacity,
  });
}

/// The number of units to request. You can choose to set the target capacity as
/// the number of instances. Or you can set the target capacity to a performance
/// characteristic that is important to your application workload, such as
/// vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can
/// specify a target capacity of 0 and add capacity later.
///
/// You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the
/// Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to
/// ensure that your fleet cost does not exceed your budget. If you set a
/// maximum price per hour for the On-Demand Instances and Spot Instances in
/// your request, EC2 Fleet will launch instances until it reaches the maximum
/// amount that you're willing to pay. When the maximum amount you're willing to
/// pay is reached, the fleet stops launching instances even if it hasn’t met
/// the target capacity. The <code>MaxTotalPrice</code> parameters are located
/// in <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptionsRequest">OnDemandOptionsRequest</a>
/// and <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptionsRequest">SpotOptionsRequest</a>.
class TargetCapacitySpecificationRequest {
  /// The number of units to request, filled using
  /// <code>DefaultTargetCapacityType</code>.
  final int totalTargetCapacity;

  /// The default <code>TotalTargetCapacity</code>, which is either
  /// <code>Spot</code> or <code>On-Demand</code>.
  final DefaultTargetCapacityType defaultTargetCapacityType;

  /// The number of On-Demand units to request.
  final int onDemandTargetCapacity;

  /// The number of Spot units to request.
  final int spotTargetCapacity;

  TargetCapacitySpecificationRequest({
    @_s.required this.totalTargetCapacity,
    this.defaultTargetCapacityType,
    this.onDemandTargetCapacity,
    this.spotTargetCapacity,
  });
}

/// Information about the Convertible Reserved Instance offering.
class TargetConfiguration {
  /// The number of instances the Convertible Reserved Instance offering can be
  /// applied to. This parameter is reserved and cannot be specified in a request
  final int instanceCount;

  /// The ID of the Convertible Reserved Instance offering.
  final String offeringId;

  TargetConfiguration({
    this.instanceCount,
    this.offeringId,
  });
}

/// Details about the target configuration.
class TargetConfigurationRequest {
  /// The Convertible Reserved Instance offering ID.
  final String offeringId;

  /// The number of instances the Covertible Reserved Instance offering can be
  /// applied to. This parameter is reserved and cannot be specified in a request
  final int instanceCount;

  TargetConfigurationRequest({
    @_s.required this.offeringId,
    this.instanceCount,
  });
}

/// Describes a load balancer target group.
class TargetGroup {
  /// The Amazon Resource Name (ARN) of the target group.
  final String arn;

  TargetGroup({
    this.arn,
  });
}

/// Describes the target groups to attach to a Spot Fleet. Spot Fleet registers
/// the running Spot Instances with these target groups.
class TargetGroupsConfig {
  /// One or more target groups.
  final List<TargetGroup> targetGroups;

  TargetGroupsConfig({
    this.targetGroups,
  });
}

/// Describes a target network associated with a Client VPN endpoint.
class TargetNetwork {
  /// The ID of the association.
  final String associationId;

  /// The ID of the Client VPN endpoint with which the target network is
  /// associated.
  final String clientVpnEndpointId;

  /// The IDs of the security groups applied to the target network association.
  final List<String> securityGroups;

  /// The current state of the target network association.
  final AssociationStatus status;

  /// The ID of the subnet specified as the target network.
  final String targetNetworkId;

  /// The ID of the VPC in which the target network (subnet) is located.
  final String vpcId;

  TargetNetwork({
    this.associationId,
    this.clientVpnEndpointId,
    this.securityGroups,
    this.status,
    this.targetNetworkId,
    this.vpcId,
  });
}

/// The total value of the new Convertible Reserved Instances.
class TargetReservationValue {
  /// The total value of the Convertible Reserved Instances that make up the
  /// exchange. This is the sum of the list value, remaining upfront price, and
  /// additional upfront cost of the exchange.
  final ReservationValue reservationValue;

  /// The configuration of the Convertible Reserved Instances that make up the
  /// exchange.
  final TargetConfiguration targetConfiguration;

  TargetReservationValue({
    this.reservationValue,
    this.targetConfiguration,
  });
}

enum TelemetryStatus {
  up,
  down,
}

enum Tenancy {
  $default,
  dedicated,
  host,
}

class TerminateClientVpnConnectionsResult {
  /// The ID of the Client VPN endpoint.
  final String clientVpnEndpointId;

  /// The current state of the client connections.
  final List<TerminateConnectionStatus> connectionStatuses;

  /// The user who established the terminated client connections.
  final String username;

  TerminateClientVpnConnectionsResult({
    this.clientVpnEndpointId,
    this.connectionStatuses,
    this.username,
  });
}

/// Information about a terminated Client VPN endpoint client connection.
class TerminateConnectionStatus {
  /// The ID of the client connection.
  final String connectionId;

  /// A message about the status of the client connection, if applicable.
  final ClientVpnConnectionStatus currentStatus;

  /// The state of the client connection.
  final ClientVpnConnectionStatus previousStatus;

  TerminateConnectionStatus({
    this.connectionId,
    this.currentStatus,
    this.previousStatus,
  });
}

class TerminateInstancesResult {
  /// Information about the terminated instances.
  final List<InstanceStateChange> terminatingInstances;

  TerminateInstancesResult({
    this.terminatingInstances,
  });
}

enum TrafficDirection {
  ingress,
  egress,
}

/// Describes the Traffic Mirror filter.
class TrafficMirrorFilter {
  /// The description of the Traffic Mirror filter.
  final String description;

  /// Information about the egress rules that are associated with the Traffic
  /// Mirror filter.
  final List<TrafficMirrorFilterRule> egressFilterRules;

  /// Information about the ingress rules that are associated with the Traffic
  /// Mirror filter.
  final List<TrafficMirrorFilterRule> ingressFilterRules;

  /// The network service traffic that is associated with the Traffic Mirror
  /// filter.
  final List<String> networkServices;

  /// The tags assigned to the Traffic Mirror filter.
  final List<Tag> tags;

  /// The ID of the Traffic Mirror filter.
  final String trafficMirrorFilterId;

  TrafficMirrorFilter({
    this.description,
    this.egressFilterRules,
    this.ingressFilterRules,
    this.networkServices,
    this.tags,
    this.trafficMirrorFilterId,
  });
}

/// Describes the Traffic Mirror rule.
class TrafficMirrorFilterRule {
  /// The description of the Traffic Mirror rule.
  final String description;

  /// The destination CIDR block assigned to the Traffic Mirror rule.
  final String destinationCidrBlock;

  /// The destination port range assigned to the Traffic Mirror rule.
  final TrafficMirrorPortRange destinationPortRange;

  /// The protocol assigned to the Traffic Mirror rule.
  final int protocol;

  /// The action assigned to the Traffic Mirror rule.
  final TrafficMirrorRuleAction ruleAction;

  /// The rule number of the Traffic Mirror rule.
  final int ruleNumber;

  /// The source CIDR block assigned to the Traffic Mirror rule.
  final String sourceCidrBlock;

  /// The source port range assigned to the Traffic Mirror rule.
  final TrafficMirrorPortRange sourcePortRange;

  /// The traffic direction assigned to the Traffic Mirror rule.
  final TrafficDirection trafficDirection;

  /// The ID of the Traffic Mirror filter that the rule is associated with.
  final String trafficMirrorFilterId;

  /// The ID of the Traffic Mirror rule.
  final String trafficMirrorFilterRuleId;

  TrafficMirrorFilterRule({
    this.description,
    this.destinationCidrBlock,
    this.destinationPortRange,
    this.protocol,
    this.ruleAction,
    this.ruleNumber,
    this.sourceCidrBlock,
    this.sourcePortRange,
    this.trafficDirection,
    this.trafficMirrorFilterId,
    this.trafficMirrorFilterRuleId,
  });
}

enum TrafficMirrorFilterRuleField {
  destinationPortRange,
  sourcePortRange,
  protocol,
  description,
}

enum TrafficMirrorNetworkService {
  amazonDns,
}

/// Describes the Traffic Mirror port range.
class TrafficMirrorPortRange {
  /// The start of the Traffic Mirror port range. This applies to the TCP and UDP
  /// protocols.
  final int fromPort;

  /// The end of the Traffic Mirror port range. This applies to the TCP and UDP
  /// protocols.
  final int toPort;

  TrafficMirrorPortRange({
    this.fromPort,
    this.toPort,
  });
}

/// Information about the Traffic Mirror filter rule port range.
class TrafficMirrorPortRangeRequest {
  /// The first port in the Traffic Mirror port range. This applies to the TCP and
  /// UDP protocols.
  final int fromPort;

  /// The last port in the Traffic Mirror port range. This applies to the TCP and
  /// UDP protocols.
  final int toPort;

  TrafficMirrorPortRangeRequest({
    this.fromPort,
    this.toPort,
  });
}

enum TrafficMirrorRuleAction {
  accept,
  reject,
}

/// Describes a Traffic Mirror session.
class TrafficMirrorSession {
  /// The description of the Traffic Mirror session.
  final String description;

  /// The ID of the Traffic Mirror session's network interface.
  final String networkInterfaceId;

  /// The ID of the account that owns the Traffic Mirror session.
  final String ownerId;

  /// The number of bytes in each packet to mirror. These are the bytes after the
  /// VXLAN header. To mirror a subset, set this to the length (in bytes) to
  /// mirror. For example, if you set this value to 100, then the first 100 bytes
  /// that meet the filter criteria are copied to the target. Do not specify this
  /// parameter when you want to mirror the entire packet
  final int packetLength;

  /// The session number determines the order in which sessions are evaluated when
  /// an interface is used by multiple sessions. The first session with a matching
  /// filter is the one that mirrors the packets.
  ///
  /// Valid values are 1-32766.
  final int sessionNumber;

  /// The tags assigned to the Traffic Mirror session.
  final List<Tag> tags;

  /// The ID of the Traffic Mirror filter.
  final String trafficMirrorFilterId;

  /// The ID for the Traffic Mirror session.
  final String trafficMirrorSessionId;

  /// The ID of the Traffic Mirror target.
  final String trafficMirrorTargetId;

  /// The virtual network ID associated with the Traffic Mirror session.
  final int virtualNetworkId;

  TrafficMirrorSession({
    this.description,
    this.networkInterfaceId,
    this.ownerId,
    this.packetLength,
    this.sessionNumber,
    this.tags,
    this.trafficMirrorFilterId,
    this.trafficMirrorSessionId,
    this.trafficMirrorTargetId,
    this.virtualNetworkId,
  });
}

enum TrafficMirrorSessionField {
  packetLength,
  description,
  virtualNetworkId,
}

/// Describes a Traffic Mirror target.
class TrafficMirrorTarget {
  /// Information about the Traffic Mirror target.
  final String description;

  /// The network interface ID that is attached to the target.
  final String networkInterfaceId;

  /// The Amazon Resource Name (ARN) of the Network Load Balancer.
  final String networkLoadBalancerArn;

  /// The ID of the account that owns the Traffic Mirror target.
  final String ownerId;

  /// The tags assigned to the Traffic Mirror target.
  final List<Tag> tags;

  /// The ID of the Traffic Mirror target.
  final String trafficMirrorTargetId;

  /// The type of Traffic Mirror target.
  final TrafficMirrorTargetType type;

  TrafficMirrorTarget({
    this.description,
    this.networkInterfaceId,
    this.networkLoadBalancerArn,
    this.ownerId,
    this.tags,
    this.trafficMirrorTargetId,
    this.type,
  });
}

enum TrafficMirrorTargetType {
  networkInterface,
  networkLoadBalancer,
}

enum TrafficType {
  accept,
  reject,
  all,
}

/// Describes a transit gateway.
class TransitGateway {
  /// The creation time.
  final DateTime creationTime;

  /// The description of the transit gateway.
  final String description;

  /// The transit gateway options.
  final TransitGatewayOptions options;

  /// The ID of the AWS account ID that owns the transit gateway.
  final String ownerId;

  /// The state of the transit gateway.
  final TransitGatewayState state;

  /// The tags for the transit gateway.
  final List<Tag> tags;

  /// The Amazon Resource Name (ARN) of the transit gateway.
  final String transitGatewayArn;

  /// The ID of the transit gateway.
  final String transitGatewayId;

  TransitGateway({
    this.creationTime,
    this.description,
    this.options,
    this.ownerId,
    this.state,
    this.tags,
    this.transitGatewayArn,
    this.transitGatewayId,
  });
}

/// Describes an association between a resource attachment and a transit gateway
/// route table.
class TransitGatewayAssociation {
  /// The ID of the resource.
  final String resourceId;

  /// The resource type.
  final TransitGatewayAttachmentResourceType resourceType;

  /// The state of the association.
  final TransitGatewayAssociationState state;

  /// The ID of the attachment.
  final String transitGatewayAttachmentId;

  /// The ID of the transit gateway route table.
  final String transitGatewayRouteTableId;

  TransitGatewayAssociation({
    this.resourceId,
    this.resourceType,
    this.state,
    this.transitGatewayAttachmentId,
    this.transitGatewayRouteTableId,
  });
}

enum TransitGatewayAssociationState {
  associating,
  associated,
  disassociating,
  disassociated,
}

/// Describes an attachment between a resource and a transit gateway.
class TransitGatewayAttachment {
  /// The association.
  final TransitGatewayAttachmentAssociation association;

  /// The creation time.
  final DateTime creationTime;

  /// The ID of the resource.
  final String resourceId;

  /// The ID of the AWS account that owns the resource.
  final String resourceOwnerId;

  /// The resource type.
  final TransitGatewayAttachmentResourceType resourceType;

  /// The attachment state.
  final TransitGatewayAttachmentState state;

  /// The tags for the attachment.
  final List<Tag> tags;

  /// The ID of the attachment.
  final String transitGatewayAttachmentId;

  /// The ID of the transit gateway.
  final String transitGatewayId;

  /// The ID of the AWS account that owns the transit gateway.
  final String transitGatewayOwnerId;

  TransitGatewayAttachment({
    this.association,
    this.creationTime,
    this.resourceId,
    this.resourceOwnerId,
    this.resourceType,
    this.state,
    this.tags,
    this.transitGatewayAttachmentId,
    this.transitGatewayId,
    this.transitGatewayOwnerId,
  });
}

/// Describes an association.
class TransitGatewayAttachmentAssociation {
  /// The state of the association.
  final TransitGatewayAssociationState state;

  /// The ID of the route table for the transit gateway.
  final String transitGatewayRouteTableId;

  TransitGatewayAttachmentAssociation({
    this.state,
    this.transitGatewayRouteTableId,
  });
}

/// Describes a propagation route table.
class TransitGatewayAttachmentPropagation {
  /// The state of the propagation route table.
  final TransitGatewayPropagationState state;

  /// The ID of the propagation route table.
  final String transitGatewayRouteTableId;

  TransitGatewayAttachmentPropagation({
    this.state,
    this.transitGatewayRouteTableId,
  });
}

enum TransitGatewayAttachmentResourceType {
  vpc,
  vpn,
  directConnectGateway,
  tgwPeering,
}

enum TransitGatewayAttachmentState {
  initiating,
  pendingAcceptance,
  rollingBack,
  pending,
  available,
  modifying,
  deleting,
  deleted,
  failed,
  rejected,
  rejecting,
  failing,
}

enum TransitGatewayMulitcastDomainAssociationState {
  associating,
  associated,
  disassociating,
  disassociated,
}

/// Describes the deregistered transit gateway multicast group members.
class TransitGatewayMulticastDeregisteredGroupMembers {
  /// The network interface IDs of the deregistered members.
  final List<String> deregisteredNetworkInterfaceIds;

  /// The IP address assigned to the transit gateway multicast group.
  final String groupIpAddress;

  /// The ID of the transit gateway multicast domain.
  final String transitGatewayMulticastDomainId;

  TransitGatewayMulticastDeregisteredGroupMembers({
    this.deregisteredNetworkInterfaceIds,
    this.groupIpAddress,
    this.transitGatewayMulticastDomainId,
  });
}

/// Describes the deregistered transit gateway multicast group sources.
class TransitGatewayMulticastDeregisteredGroupSources {
  /// The network interface IDs of the non-registered members.
  final List<String> deregisteredNetworkInterfaceIds;

  /// The IP address assigned to the transit gateway multicast group.
  final String groupIpAddress;

  /// The ID of the transit gateway multicast domain.
  final String transitGatewayMulticastDomainId;

  TransitGatewayMulticastDeregisteredGroupSources({
    this.deregisteredNetworkInterfaceIds,
    this.groupIpAddress,
    this.transitGatewayMulticastDomainId,
  });
}

/// Describes the transit gateway multicast domain.
class TransitGatewayMulticastDomain {
  /// The time the transit gateway multicast domain was created.
  final DateTime creationTime;

  /// The state of the transit gateway multicast domain.
  final TransitGatewayMulticastDomainState state;

  /// The tags for the transit gateway multicast domain.
  final List<Tag> tags;

  /// The ID of the transit gateway.
  final String transitGatewayId;

  /// The ID of the transit gateway multicast domain.
  final String transitGatewayMulticastDomainId;

  TransitGatewayMulticastDomain({
    this.creationTime,
    this.state,
    this.tags,
    this.transitGatewayId,
    this.transitGatewayMulticastDomainId,
  });
}

/// Describes the resources associated with the transit gateway multicast
/// domain.
class TransitGatewayMulticastDomainAssociation {
  /// The ID of the resource.
  final String resourceId;

  /// The type of resource, for example a VPC attachment.
  final TransitGatewayAttachmentResourceType resourceType;

  /// The subnet associated with the transit gateway multicast domain.
  final SubnetAssociation subnet;

  /// The ID of the transit gateway attachment.
  final String transitGatewayAttachmentId;

  TransitGatewayMulticastDomainAssociation({
    this.resourceId,
    this.resourceType,
    this.subnet,
    this.transitGatewayAttachmentId,
  });
}

/// Describes the multicast domain associations.
class TransitGatewayMulticastDomainAssociations {
  /// The ID of the resource.
  final String resourceId;

  /// The type of resource, for example a VPC attachment.
  final TransitGatewayAttachmentResourceType resourceType;

  /// The subnets associated with the multicast domain.
  final List<SubnetAssociation> subnets;

  /// The ID of the transit gateway attachment.
  final String transitGatewayAttachmentId;

  /// The ID of the transit gateway multicast domain.
  final String transitGatewayMulticastDomainId;

  TransitGatewayMulticastDomainAssociations({
    this.resourceId,
    this.resourceType,
    this.subnets,
    this.transitGatewayAttachmentId,
    this.transitGatewayMulticastDomainId,
  });
}

enum TransitGatewayMulticastDomainState {
  pending,
  available,
  deleting,
  deleted,
}

/// Describes the transit gateway multicast group resources.
class TransitGatewayMulticastGroup {
  /// The IP address assigned to the transit gateway multicast group.
  final String groupIpAddress;

  /// Indicates that the resource is a transit gateway multicast group member.
  final bool groupMember;

  /// Indicates that the resource is a transit gateway multicast group member.
  final bool groupSource;

  /// The member type (for example, <code>static</code>).
  final MembershipType memberType;

  /// The ID of the transit gateway attachment.
  final String networkInterfaceId;

  /// The ID of the resource.
  final String resourceId;

  /// The type of resource, for example a VPC attachment.
  final TransitGatewayAttachmentResourceType resourceType;

  /// The source type.
  final MembershipType sourceType;

  /// The ID of the subnet.
  final String subnetId;

  /// The ID of the transit gateway attachment.
  final String transitGatewayAttachmentId;

  TransitGatewayMulticastGroup({
    this.groupIpAddress,
    this.groupMember,
    this.groupSource,
    this.memberType,
    this.networkInterfaceId,
    this.resourceId,
    this.resourceType,
    this.sourceType,
    this.subnetId,
    this.transitGatewayAttachmentId,
  });
}

/// Describes the registered transit gateway multicast group members.
class TransitGatewayMulticastRegisteredGroupMembers {
  /// The IP address assigned to the transit gateway multicast group.
  final String groupIpAddress;

  /// The ID of the registered network interfaces.
  final List<String> registeredNetworkInterfaceIds;

  /// The ID of the transit gateway multicast domain.
  final String transitGatewayMulticastDomainId;

  TransitGatewayMulticastRegisteredGroupMembers({
    this.groupIpAddress,
    this.registeredNetworkInterfaceIds,
    this.transitGatewayMulticastDomainId,
  });
}

/// Describes the members registered with the transit gateway multicast group.
class TransitGatewayMulticastRegisteredGroupSources {
  /// The IP address assigned to the transit gateway multicast group.
  final String groupIpAddress;

  /// The IDs of the network interfaces members registered with the transit
  /// gateway multicast group.
  final List<String> registeredNetworkInterfaceIds;

  /// The ID of the transit gateway multicast domain.
  final String transitGatewayMulticastDomainId;

  TransitGatewayMulticastRegisteredGroupSources({
    this.groupIpAddress,
    this.registeredNetworkInterfaceIds,
    this.transitGatewayMulticastDomainId,
  });
}

/// Describes the options for a transit gateway.
class TransitGatewayOptions {
  /// A private Autonomous System Number (ASN) for the Amazon side of a BGP
  /// session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to
  /// 4294967294 for 32-bit ASNs.
  final int amazonSideAsn;

  /// The ID of the default association route table.
  final String associationDefaultRouteTableId;

  /// Indicates whether attachment requests are automatically accepted.
  final AutoAcceptSharedAttachmentsValue autoAcceptSharedAttachments;

  /// Indicates whether resource attachments are automatically associated with the
  /// default association route table.
  final DefaultRouteTableAssociationValue defaultRouteTableAssociation;

  /// Indicates whether resource attachments automatically propagate routes to the
  /// default propagation route table.
  final DefaultRouteTablePropagationValue defaultRouteTablePropagation;

  /// Indicates whether DNS support is enabled.
  final DnsSupportValue dnsSupport;

  /// Indicates whether multicast is enabled on the transit gateway
  final MulticastSupportValue multicastSupport;

  /// The ID of the default propagation route table.
  final String propagationDefaultRouteTableId;

  /// Indicates whether Equal Cost Multipath Protocol support is enabled.
  final VpnEcmpSupportValue vpnEcmpSupport;

  TransitGatewayOptions({
    this.amazonSideAsn,
    this.associationDefaultRouteTableId,
    this.autoAcceptSharedAttachments,
    this.defaultRouteTableAssociation,
    this.defaultRouteTablePropagation,
    this.dnsSupport,
    this.multicastSupport,
    this.propagationDefaultRouteTableId,
    this.vpnEcmpSupport,
  });
}

/// Describes the transit gateway peering attachment.
class TransitGatewayPeeringAttachment {
  /// Information about the accepter transit gateway.
  final PeeringTgwInfo accepterTgwInfo;

  /// The time the transit gateway peering attachment was created.
  final DateTime creationTime;

  /// Information about the requester transit gateway.
  final PeeringTgwInfo requesterTgwInfo;

  /// The state of the transit gateway peering attachment.
  final TransitGatewayAttachmentState state;

  /// The status of the transit gateway peering attachment.
  final PeeringAttachmentStatus status;

  /// The tags for the transit gateway peering attachment.
  final List<Tag> tags;

  /// The ID of the transit gateway peering attachment.
  final String transitGatewayAttachmentId;

  TransitGatewayPeeringAttachment({
    this.accepterTgwInfo,
    this.creationTime,
    this.requesterTgwInfo,
    this.state,
    this.status,
    this.tags,
    this.transitGatewayAttachmentId,
  });
}

/// Describes route propagation.
class TransitGatewayPropagation {
  /// The ID of the resource.
  final String resourceId;

  /// The resource type.
  final TransitGatewayAttachmentResourceType resourceType;

  /// The state.
  final TransitGatewayPropagationState state;

  /// The ID of the attachment.
  final String transitGatewayAttachmentId;

  /// The ID of the transit gateway route table.
  final String transitGatewayRouteTableId;

  TransitGatewayPropagation({
    this.resourceId,
    this.resourceType,
    this.state,
    this.transitGatewayAttachmentId,
    this.transitGatewayRouteTableId,
  });
}

enum TransitGatewayPropagationState {
  enabling,
  enabled,
  disabling,
  disabled,
}

/// Describes the options for a transit gateway.
class TransitGatewayRequestOptions {
  /// A private Autonomous System Number (ASN) for the Amazon side of a BGP
  /// session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to
  /// 4294967294 for 32-bit ASNs.
  final int amazonSideAsn;

  /// Enable or disable automatic acceptance of attachment requests. The default
  /// is <code>disable</code>.
  final AutoAcceptSharedAttachmentsValue autoAcceptSharedAttachments;

  /// Enable or disable automatic association with the default association route
  /// table. The default is <code>enable</code>.
  final DefaultRouteTableAssociationValue defaultRouteTableAssociation;

  /// Enable or disable automatic propagation of routes to the default propagation
  /// route table. The default is <code>enable</code>.
  final DefaultRouteTablePropagationValue defaultRouteTablePropagation;

  /// Enable or disable DNS support.
  final DnsSupportValue dnsSupport;

  /// Indicates whether multicast is enabled on the transit gateway
  final MulticastSupportValue multicastSupport;

  /// Enable or disable Equal Cost Multipath Protocol support.
  final VpnEcmpSupportValue vpnEcmpSupport;

  TransitGatewayRequestOptions({
    this.amazonSideAsn,
    this.autoAcceptSharedAttachments,
    this.defaultRouteTableAssociation,
    this.defaultRouteTablePropagation,
    this.dnsSupport,
    this.multicastSupport,
    this.vpnEcmpSupport,
  });
}

/// Describes a route for a transit gateway route table.
class TransitGatewayRoute {
  /// The CIDR block used for destination matches.
  final String destinationCidrBlock;

  /// The state of the route.
  final TransitGatewayRouteState state;

  /// The attachments.
  final List<TransitGatewayRouteAttachment> transitGatewayAttachments;

  /// The route type.
  final TransitGatewayRouteType type;

  TransitGatewayRoute({
    this.destinationCidrBlock,
    this.state,
    this.transitGatewayAttachments,
    this.type,
  });
}

/// Describes a route attachment.
class TransitGatewayRouteAttachment {
  /// The ID of the resource.
  final String resourceId;

  /// The resource type.
  final TransitGatewayAttachmentResourceType resourceType;

  /// The ID of the attachment.
  final String transitGatewayAttachmentId;

  TransitGatewayRouteAttachment({
    this.resourceId,
    this.resourceType,
    this.transitGatewayAttachmentId,
  });
}

enum TransitGatewayRouteState {
  pending,
  active,
  blackhole,
  deleting,
  deleted,
}

/// Describes a transit gateway route table.
class TransitGatewayRouteTable {
  /// The creation time.
  final DateTime creationTime;

  /// Indicates whether this is the default association route table for the
  /// transit gateway.
  final bool defaultAssociationRouteTable;

  /// Indicates whether this is the default propagation route table for the
  /// transit gateway.
  final bool defaultPropagationRouteTable;

  /// The state of the transit gateway route table.
  final TransitGatewayRouteTableState state;

  /// Any tags assigned to the route table.
  final List<Tag> tags;

  /// The ID of the transit gateway.
  final String transitGatewayId;

  /// The ID of the transit gateway route table.
  final String transitGatewayRouteTableId;

  TransitGatewayRouteTable({
    this.creationTime,
    this.defaultAssociationRouteTable,
    this.defaultPropagationRouteTable,
    this.state,
    this.tags,
    this.transitGatewayId,
    this.transitGatewayRouteTableId,
  });
}

/// Describes an association between a route table and a resource attachment.
class TransitGatewayRouteTableAssociation {
  /// The ID of the resource.
  final String resourceId;

  /// The resource type.
  final TransitGatewayAttachmentResourceType resourceType;

  /// The state of the association.
  final TransitGatewayAssociationState state;

  /// The ID of the attachment.
  final String transitGatewayAttachmentId;

  TransitGatewayRouteTableAssociation({
    this.resourceId,
    this.resourceType,
    this.state,
    this.transitGatewayAttachmentId,
  });
}

/// Describes a route table propagation.
class TransitGatewayRouteTablePropagation {
  /// The ID of the resource.
  final String resourceId;

  /// The type of resource.
  final TransitGatewayAttachmentResourceType resourceType;

  /// The state of the resource.
  final TransitGatewayPropagationState state;

  /// The ID of the attachment.
  final String transitGatewayAttachmentId;

  TransitGatewayRouteTablePropagation({
    this.resourceId,
    this.resourceType,
    this.state,
    this.transitGatewayAttachmentId,
  });
}

enum TransitGatewayRouteTableState {
  pending,
  available,
  deleting,
  deleted,
}

enum TransitGatewayRouteType {
  static,
  propagated,
}

enum TransitGatewayState {
  pending,
  available,
  modifying,
  deleting,
  deleted,
}

/// Describes a VPC attachment.
class TransitGatewayVpcAttachment {
  /// The creation time.
  final DateTime creationTime;

  /// The VPC attachment options.
  final TransitGatewayVpcAttachmentOptions options;

  /// The state of the VPC attachment.
  final TransitGatewayAttachmentState state;

  /// The IDs of the subnets.
  final List<String> subnetIds;

  /// The tags for the VPC attachment.
  final List<Tag> tags;

  /// The ID of the attachment.
  final String transitGatewayAttachmentId;

  /// The ID of the transit gateway.
  final String transitGatewayId;

  /// The ID of the VPC.
  final String vpcId;

  /// The ID of the AWS account that owns the VPC.
  final String vpcOwnerId;

  TransitGatewayVpcAttachment({
    this.creationTime,
    this.options,
    this.state,
    this.subnetIds,
    this.tags,
    this.transitGatewayAttachmentId,
    this.transitGatewayId,
    this.vpcId,
    this.vpcOwnerId,
  });
}

/// Describes the VPC attachment options.
class TransitGatewayVpcAttachmentOptions {
  /// Indicates whether DNS support is enabled.
  final DnsSupportValue dnsSupport;

  /// Indicates whether IPv6 support is disabled.
  final Ipv6SupportValue ipv6Support;

  TransitGatewayVpcAttachmentOptions({
    this.dnsSupport,
    this.ipv6Support,
  });
}

enum TransportProtocol {
  tcp,
  udp,
}

/// The VPN tunnel options.
class TunnelOption {
  /// The number of seconds after which a DPD timeout occurs.
  final int dpdTimeoutSeconds;

  /// The IKE versions that are permitted for the VPN tunnel.
  final List<IKEVersionsListValue> ikeVersions;

  /// The external IP address of the VPN tunnel.
  final String outsideIpAddress;

  /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1
  /// IKE negotiations.
  final List<Phase1DHGroupNumbersListValue> phase1DHGroupNumbers;

  /// The permitted encryption algorithms for the VPN tunnel for phase 1 IKE
  /// negotiations.
  final List<Phase1EncryptionAlgorithmsListValue> phase1EncryptionAlgorithms;

  /// The permitted integrity algorithms for the VPN tunnel for phase 1 IKE
  /// negotiations.
  final List<Phase1IntegrityAlgorithmsListValue> phase1IntegrityAlgorithms;

  /// The lifetime for phase 1 of the IKE negotiation, in seconds.
  final int phase1LifetimeSeconds;

  /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2
  /// IKE negotiations.
  final List<Phase2DHGroupNumbersListValue> phase2DHGroupNumbers;

  /// The permitted encryption algorithms for the VPN tunnel for phase 2 IKE
  /// negotiations.
  final List<Phase2EncryptionAlgorithmsListValue> phase2EncryptionAlgorithms;

  /// The permitted integrity algorithms for the VPN tunnel for phase 2 IKE
  /// negotiations.
  final List<Phase2IntegrityAlgorithmsListValue> phase2IntegrityAlgorithms;

  /// The lifetime for phase 2 of the IKE negotiation, in seconds.
  final int phase2LifetimeSeconds;

  /// The pre-shared key (PSK) to establish initial authentication between the
  /// virtual private gateway and the customer gateway.
  final String preSharedKey;

  /// The percentage of the rekey window determined by
  /// <code>RekeyMarginTimeSeconds</code> during which the rekey time is randomly
  /// selected.
  final int rekeyFuzzPercentage;

  /// The margin time, in seconds, before the phase 2 lifetime expires, during
  /// which the AWS side of the VPN connection performs an IKE rekey.
  final int rekeyMarginTimeSeconds;

  /// The number of packets in an IKE replay window.
  final int replayWindowSize;

  /// The range of inside IP addresses for the tunnel.
  final String tunnelInsideCidr;

  TunnelOption({
    this.dpdTimeoutSeconds,
    this.ikeVersions,
    this.outsideIpAddress,
    this.phase1DHGroupNumbers,
    this.phase1EncryptionAlgorithms,
    this.phase1IntegrityAlgorithms,
    this.phase1LifetimeSeconds,
    this.phase2DHGroupNumbers,
    this.phase2EncryptionAlgorithms,
    this.phase2IntegrityAlgorithms,
    this.phase2LifetimeSeconds,
    this.preSharedKey,
    this.rekeyFuzzPercentage,
    this.rekeyMarginTimeSeconds,
    this.replayWindowSize,
    this.tunnelInsideCidr,
  });
}

class UnassignIpv6AddressesResult {
  /// The ID of the network interface.
  final String networkInterfaceId;

  /// The IPv6 addresses that have been unassigned from the network interface.
  final List<String> unassignedIpv6Addresses;

  UnassignIpv6AddressesResult({
    this.networkInterfaceId,
    this.unassignedIpv6Addresses,
  });
}

enum UnlimitedSupportedInstanceFamily {
  t2,
  t3,
  t3a,
}

class UnmonitorInstancesResult {
  /// The monitoring information.
  final List<InstanceMonitoring> instanceMonitorings;

  UnmonitorInstancesResult({
    this.instanceMonitorings,
  });
}

enum UnsuccessfulInstanceCreditSpecificationErrorCode {
  invalidInstanceIDMalformed,
  invalidInstanceIDNotFound,
  incorrectInstanceState,
  instanceCreditSpecificationNotSupported,
}

/// Describes the burstable performance instance whose credit option for CPU
/// usage was not modified.
class UnsuccessfulInstanceCreditSpecificationItem {
  /// The applicable error for the burstable performance instance whose credit
  /// option for CPU usage was not modified.
  final UnsuccessfulInstanceCreditSpecificationItemError error;

  /// The ID of the instance.
  final String instanceId;

  UnsuccessfulInstanceCreditSpecificationItem({
    this.error,
    this.instanceId,
  });
}

/// Information about the error for the burstable performance instance whose
/// credit option for CPU usage was not modified.
class UnsuccessfulInstanceCreditSpecificationItemError {
  /// The error code.
  final UnsuccessfulInstanceCreditSpecificationErrorCode code;

  /// The applicable error message.
  final String message;

  UnsuccessfulInstanceCreditSpecificationItemError({
    this.code,
    this.message,
  });
}

/// Information about items that were not successfully processed in a batch
/// call.
class UnsuccessfulItem {
  /// Information about the error.
  final UnsuccessfulItemError error;

  /// The ID of the resource.
  final String resourceId;

  UnsuccessfulItem({
    this.error,
    this.resourceId,
  });
}

/// Information about the error that occurred. For more information about
/// errors, see <a
/// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error
/// Codes</a>.
class UnsuccessfulItemError {
  /// The error code.
  final String code;

  /// The error message accompanying the error code.
  final String message;

  UnsuccessfulItemError({
    this.code,
    this.message,
  });
}

class UpdateSecurityGroupRuleDescriptionsEgressResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool returnValue;

  UpdateSecurityGroupRuleDescriptionsEgressResult({
    this.returnValue,
  });
}

class UpdateSecurityGroupRuleDescriptionsIngressResult {
  /// Returns <code>true</code> if the request succeeds; otherwise, returns an
  /// error.
  final bool returnValue;

  UpdateSecurityGroupRuleDescriptionsIngressResult({
    this.returnValue,
  });
}

enum UsageClassType {
  spot,
  onDemand,
}

/// Describes the S3 bucket for the disk image.
class UserBucket {
  /// The name of the S3 bucket where the disk image is located.
  final String s3Bucket;

  /// The file name of the disk image.
  final String s3Key;

  UserBucket({
    this.s3Bucket,
    this.s3Key,
  });
}

/// Describes the S3 bucket for the disk image.
class UserBucketDetails {
  /// The S3 bucket from which the disk image was created.
  final String s3Bucket;

  /// The file name of the disk image.
  final String s3Key;

  UserBucketDetails({
    this.s3Bucket,
    this.s3Key,
  });
}

/// Describes the user data for an instance.
class UserData {
  /// The user data. If you are using an AWS SDK or command line tool,
  /// Base64-encoding is performed for you, and you can load the text from a file.
  /// Otherwise, you must provide Base64-encoded text.
  final String data;

  UserData({
    this.data,
  });
}

/// Describes a security group and AWS account ID pair.
class UserIdGroupPair {
  /// A description for the security group rule that references this user ID group
  /// pair.
  ///
  /// Constraints: Up to 255 characters in length. Allowed characters are a-z,
  /// A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
  final String description;

  /// The ID of the security group.
  final String groupId;

  /// The name of the security group. In a request, use this parameter for a
  /// security group in EC2-Classic or a default VPC only. For a security group in
  /// a nondefault VPC, use the security group ID.
  ///
  /// For a referenced security group in another VPC, this value is not returned
  /// if the referenced security group is deleted.
  final String groupName;

  /// The status of a VPC peering connection, if applicable.
  final String peeringStatus;

  /// The ID of an AWS account.
  ///
  /// For a referenced security group in another VPC, the account ID of the
  /// referenced security group is returned in the response. If the referenced
  /// security group is deleted, this value is not returned.
  ///
  /// [EC2-Classic] Required when adding or removing rules that reference a
  /// security group in another AWS account.
  final String userId;

  /// The ID of the VPC for the referenced security group, if applicable.
  final String vpcId;

  /// The ID of the VPC peering connection, if applicable.
  final String vpcPeeringConnectionId;

  UserIdGroupPair({
    this.description,
    this.groupId,
    this.groupName,
    this.peeringStatus,
    this.userId,
    this.vpcId,
    this.vpcPeeringConnectionId,
  });
}

/// Describes the vCPU configurations for the instance type.
class VCpuInfo {
  /// The default number of cores for the instance type.
  final int defaultCores;

  /// The default number of threads per core for the instance type.
  final int defaultThreadsPerCore;

  /// The default number of vCPUs for the instance type.
  final int defaultVCpus;

  /// List of the valid number of cores that can be configured for the instance
  /// type.
  final List<int> validCores;

  /// List of the valid number of threads per core that can be configured for the
  /// instance type.
  final List<int> validThreadsPerCore;

  VCpuInfo({
    this.defaultCores,
    this.defaultThreadsPerCore,
    this.defaultVCpus,
    this.validCores,
    this.validThreadsPerCore,
  });
}

/// Describes telemetry for a VPN tunnel.
class VgwTelemetry {
  /// The number of accepted routes.
  final int acceptedRouteCount;

  /// The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
  final String certificateArn;

  /// The date and time of the last change in status.
  final DateTime lastStatusChange;

  /// The Internet-routable IP address of the virtual private gateway's outside
  /// interface.
  final String outsideIpAddress;

  /// The status of the VPN tunnel.
  final TelemetryStatus status;

  /// If an error occurs, a description of the error.
  final String statusMessage;

  VgwTelemetry({
    this.acceptedRouteCount,
    this.certificateArn,
    this.lastStatusChange,
    this.outsideIpAddress,
    this.status,
    this.statusMessage,
  });
}

enum VirtualizationType {
  hvm,
  paravirtual,
}

/// Describes a volume.
class Volume {
  /// Information about the volume attachments.
  final List<VolumeAttachment> attachments;

  /// The Availability Zone for the volume.
  final String availabilityZone;

  /// The time stamp when volume creation was initiated.
  final DateTime createTime;

  /// Indicates whether the volume is encrypted.
  final bool encrypted;

  /// Indicates whether the volume was created using fast snapshot restore.
  final bool fastRestored;

  /// The number of I/O operations per second (IOPS) that the volume supports. For
  /// Provisioned IOPS SSD volumes, this represents the number of IOPS that are
  /// provisioned for the volume. For General Purpose SSD volumes, this represents
  /// the baseline performance of the volume and the rate at which the volume
  /// accumulates I/O credits for bursting. For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon
  /// EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
  ///
  /// Constraints: Range is 100-16,000 IOPS for <code>gp2</code> volumes and 100
  /// to 64,000IOPS for <code>io1</code> volumes, in most Regions. The maximum
  /// IOPS for <code>io1</code> of 64,000 is guaranteed only on <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based
  /// instances</a>. Other instance families guarantee performance up to 32,000
  /// IOPS.
  ///
  /// Condition: This parameter is required for requests to create
  /// <code>io1</code> volumes; it is not used in requests to create
  /// <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or
  /// <code>standard</code> volumes.
  final int iops;

  /// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS)
  /// customer master key (CMK) that was used to protect the volume encryption key
  /// for the volume.
  final String kmsKeyId;

  /// Indicates whether Amazon EBS Multi-Attach is enabled.
  final bool multiAttachEnabled;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String outpostArn;

  /// The size of the volume, in GiBs.
  final int size;

  /// The snapshot from which the volume was created, if applicable.
  final String snapshotId;

  /// The volume state.
  final VolumeState state;

  /// Any tags assigned to the volume.
  final List<Tag> tags;

  /// The ID of the volume.
  final String volumeId;

  /// The volume type. This can be <code>gp2</code> for General Purpose SSD,
  /// <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput
  /// Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for
  /// Magnetic volumes.
  final VolumeType volumeType;

  Volume({
    this.attachments,
    this.availabilityZone,
    this.createTime,
    this.encrypted,
    this.fastRestored,
    this.iops,
    this.kmsKeyId,
    this.multiAttachEnabled,
    this.outpostArn,
    this.size,
    this.snapshotId,
    this.state,
    this.tags,
    this.volumeId,
    this.volumeType,
  });
}

/// Describes volume attachment details.
class VolumeAttachment {
  /// The time stamp when the attachment initiated.
  final DateTime attachTime;

  /// Indicates whether the EBS volume is deleted on instance termination.
  final bool deleteOnTermination;

  /// The device name.
  final String device;

  /// The ID of the instance.
  final String instanceId;

  /// The attachment state of the volume.
  final VolumeAttachmentState state;

  /// The ID of the volume.
  final String volumeId;

  VolumeAttachment({
    this.attachTime,
    this.deleteOnTermination,
    this.device,
    this.instanceId,
    this.state,
    this.volumeId,
  });
}

enum VolumeAttachmentState {
  attaching,
  attached,
  detaching,
  detached,
  busy,
}

enum VolumeAttributeName {
  autoEnableIO,
  productCodes,
}

/// Describes an EBS volume.
class VolumeDetail {
  /// The size of the volume, in GiB.
  final int size;

  VolumeDetail({
    @_s.required this.size,
  });
}

/// Describes the modification status of an EBS volume.
///
/// If the volume has never been modified, some element values will be null.
class VolumeModification {
  /// The modification completion or failure time.
  final DateTime endTime;

  /// The current modification state. The modification state is null for
  /// unmodified volumes.
  final VolumeModificationState modificationState;

  /// The original IOPS rate of the volume.
  final int originalIops;

  /// The original size of the volume.
  final int originalSize;

  /// The original EBS volume type of the volume.
  final VolumeType originalVolumeType;

  /// The modification progress, from 0 to 100 percent complete.
  final int progress;

  /// The modification start time.
  final DateTime startTime;

  /// A status message about the modification progress or failure.
  final String statusMessage;

  /// The target IOPS rate of the volume.
  final int targetIops;

  /// The target size of the volume, in GiB.
  final int targetSize;

  /// The target EBS volume type of the volume.
  final VolumeType targetVolumeType;

  /// The ID of the volume.
  final String volumeId;

  VolumeModification({
    this.endTime,
    this.modificationState,
    this.originalIops,
    this.originalSize,
    this.originalVolumeType,
    this.progress,
    this.startTime,
    this.statusMessage,
    this.targetIops,
    this.targetSize,
    this.targetVolumeType,
    this.volumeId,
  });
}

enum VolumeModificationState {
  modifying,
  optimizing,
  completed,
  failed,
}

enum VolumeState {
  creating,
  available,
  inUse,
  deleting,
  deleted,
  error,
}

/// Describes a volume status operation code.
class VolumeStatusAction {
  /// The code identifying the operation, for example,
  /// <code>enable-volume-io</code>.
  final String code;

  /// A description of the operation.
  final String description;

  /// The ID of the event associated with this operation.
  final String eventId;

  /// The event type associated with this operation.
  final String eventType;

  VolumeStatusAction({
    this.code,
    this.description,
    this.eventId,
    this.eventType,
  });
}

/// Information about the instances to which the volume is attached.
class VolumeStatusAttachmentStatus {
  /// The ID of the attached instance.
  final String instanceId;

  /// The maximum IOPS supported by the attached instance.
  final String ioPerformance;

  VolumeStatusAttachmentStatus({
    this.instanceId,
    this.ioPerformance,
  });
}

/// Describes a volume status.
class VolumeStatusDetails {
  /// The name of the volume status.
  final VolumeStatusName name;

  /// The intended status of the volume status.
  final String status;

  VolumeStatusDetails({
    this.name,
    this.status,
  });
}

/// Describes a volume status event.
class VolumeStatusEvent {
  /// A description of the event.
  final String description;

  /// The ID of this event.
  final String eventId;

  /// The type of this event.
  final String eventType;

  /// The ID of the instance associated with the event.
  final String instanceId;

  /// The latest end time of the event.
  final DateTime notAfter;

  /// The earliest start time of the event.
  final DateTime notBefore;

  VolumeStatusEvent({
    this.description,
    this.eventId,
    this.eventType,
    this.instanceId,
    this.notAfter,
    this.notBefore,
  });
}

/// Describes the status of a volume.
class VolumeStatusInfo {
  /// The details of the volume status.
  final List<VolumeStatusDetails> details;

  /// The status of the volume.
  final VolumeStatusInfoStatus status;

  VolumeStatusInfo({
    this.details,
    this.status,
  });
}

enum VolumeStatusInfoStatus {
  ok,
  impaired,
  insufficientData,
}

/// Describes the volume status.
class VolumeStatusItem {
  /// The details of the operation.
  final List<VolumeStatusAction> actions;

  /// Information about the instances to which the volume is attached.
  final List<VolumeStatusAttachmentStatus> attachmentStatuses;

  /// The Availability Zone of the volume.
  final String availabilityZone;

  /// A list of events associated with the volume.
  final List<VolumeStatusEvent> events;

  /// The Amazon Resource Name (ARN) of the Outpost.
  final String outpostArn;

  /// The volume ID.
  final String volumeId;

  /// The volume status.
  final VolumeStatusInfo volumeStatus;

  VolumeStatusItem({
    this.actions,
    this.attachmentStatuses,
    this.availabilityZone,
    this.events,
    this.outpostArn,
    this.volumeId,
    this.volumeStatus,
  });
}

enum VolumeStatusName {
  ioEnabled,
  ioPerformance,
}

enum VolumeType {
  standard,
  io1,
  gp2,
  sc1,
  st1,
}

/// Describes a VPC.
class Vpc {
  /// The primary IPv4 CIDR block for the VPC.
  final String cidrBlock;

  /// Information about the IPv4 CIDR blocks associated with the VPC.
  final List<VpcCidrBlockAssociation> cidrBlockAssociationSet;

  /// The ID of the set of DHCP options you've associated with the VPC (or
  /// <code>default</code> if the default options are associated with the VPC).
  final String dhcpOptionsId;

  /// The allowed tenancy of instances launched into the VPC.
  final Tenancy instanceTenancy;

  /// Information about the IPv6 CIDR blocks associated with the VPC.
  final List<VpcIpv6CidrBlockAssociation> ipv6CidrBlockAssociationSet;

  /// Indicates whether the VPC is the default VPC.
  final bool isDefault;

  /// The ID of the AWS account that owns the VPC.
  final String ownerId;

  /// The current state of the VPC.
  final VpcState state;

  /// Any tags assigned to the VPC.
  final List<Tag> tags;

  /// The ID of the VPC.
  final String vpcId;

  Vpc({
    this.cidrBlock,
    this.cidrBlockAssociationSet,
    this.dhcpOptionsId,
    this.instanceTenancy,
    this.ipv6CidrBlockAssociationSet,
    this.isDefault,
    this.ownerId,
    this.state,
    this.tags,
    this.vpcId,
  });
}

/// Describes an attachment between a virtual private gateway and a VPC.
class VpcAttachment {
  /// The current state of the attachment.
  final AttachmentStatus state;

  /// The ID of the VPC.
  final String vpcId;

  VpcAttachment({
    this.state,
    this.vpcId,
  });
}

enum VpcAttributeName {
  enableDnsSupport,
  enableDnsHostnames,
}

/// Describes an IPv4 CIDR block associated with a VPC.
class VpcCidrBlockAssociation {
  /// The association ID for the IPv4 CIDR block.
  final String associationId;

  /// The IPv4 CIDR block.
  final String cidrBlock;

  /// Information about the state of the CIDR block.
  final VpcCidrBlockState cidrBlockState;

  VpcCidrBlockAssociation({
    this.associationId,
    this.cidrBlock,
    this.cidrBlockState,
  });
}

/// Describes the state of a CIDR block.
class VpcCidrBlockState {
  /// The state of the CIDR block.
  final VpcCidrBlockStateCode state;

  /// A message about the status of the CIDR block, if applicable.
  final String statusMessage;

  VpcCidrBlockState({
    this.state,
    this.statusMessage,
  });
}

enum VpcCidrBlockStateCode {
  associating,
  associated,
  disassociating,
  disassociated,
  failing,
  failed,
}

/// Describes whether a VPC is enabled for ClassicLink.
class VpcClassicLink {
  /// Indicates whether the VPC is enabled for ClassicLink.
  final bool classicLinkEnabled;

  /// Any tags assigned to the VPC.
  final List<Tag> tags;

  /// The ID of the VPC.
  final String vpcId;

  VpcClassicLink({
    this.classicLinkEnabled,
    this.tags,
    this.vpcId,
  });
}

/// Describes a VPC endpoint.
class VpcEndpoint {
  /// The date and time that the VPC endpoint was created.
  final DateTime creationTimestamp;

  /// (Interface endpoint) The DNS entries for the endpoint.
  final List<DnsEntry> dnsEntries;

  /// (Interface endpoint) Information about the security groups that are
  /// associated with the network interface.
  final List<SecurityGroupIdentifier> groups;

  /// The last error that occurred for VPC endpoint.
  final LastError lastError;

  /// (Interface endpoint) One or more network interfaces for the endpoint.
  final List<String> networkInterfaceIds;

  /// The ID of the AWS account that owns the VPC endpoint.
  final String ownerId;

  /// The policy document associated with the endpoint, if applicable.
  final String policyDocument;

  /// (Interface endpoint) Indicates whether the VPC is associated with a private
  /// hosted zone.
  final bool privateDnsEnabled;

  /// Indicates whether the VPC endpoint is being managed by its service.
  final bool requesterManaged;

  /// (Gateway endpoint) One or more route tables associated with the endpoint.
  final List<String> routeTableIds;

  /// The name of the service to which the endpoint is associated.
  final String serviceName;

  /// The state of the VPC endpoint.
  final State state;

  /// (Interface endpoint) One or more subnets in which the endpoint is located.
  final List<String> subnetIds;

  /// Any tags assigned to the VPC endpoint.
  final List<Tag> tags;

  /// The ID of the VPC endpoint.
  final String vpcEndpointId;

  /// The type of endpoint.
  final VpcEndpointType vpcEndpointType;

  /// The ID of the VPC to which the endpoint is associated.
  final String vpcId;

  VpcEndpoint({
    this.creationTimestamp,
    this.dnsEntries,
    this.groups,
    this.lastError,
    this.networkInterfaceIds,
    this.ownerId,
    this.policyDocument,
    this.privateDnsEnabled,
    this.requesterManaged,
    this.routeTableIds,
    this.serviceName,
    this.state,
    this.subnetIds,
    this.tags,
    this.vpcEndpointId,
    this.vpcEndpointType,
    this.vpcId,
  });
}

/// Describes a VPC endpoint connection to a service.
class VpcEndpointConnection {
  /// The date and time that the VPC endpoint was created.
  final DateTime creationTimestamp;

  /// The DNS entries for the VPC endpoint.
  final List<DnsEntry> dnsEntries;

  /// The Amazon Resource Names (ARNs) of the network load balancers for the
  /// service.
  final List<String> networkLoadBalancerArns;

  /// The ID of the service to which the endpoint is connected.
  final String serviceId;

  /// The ID of the VPC endpoint.
  final String vpcEndpointId;

  /// The AWS account ID of the owner of the VPC endpoint.
  final String vpcEndpointOwner;

  /// The state of the VPC endpoint.
  final State vpcEndpointState;

  VpcEndpointConnection({
    this.creationTimestamp,
    this.dnsEntries,
    this.networkLoadBalancerArns,
    this.serviceId,
    this.vpcEndpointId,
    this.vpcEndpointOwner,
    this.vpcEndpointState,
  });
}

enum VpcEndpointType {
  interface,
  gateway,
}

/// Describes an IPv6 CIDR block associated with a VPC.
class VpcIpv6CidrBlockAssociation {
  /// The association ID for the IPv6 CIDR block.
  final String associationId;

  /// The IPv6 CIDR block.
  final String ipv6CidrBlock;

  /// Information about the state of the CIDR block.
  final VpcCidrBlockState ipv6CidrBlockState;

  /// The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.
  final String ipv6Pool;

  /// The name of the location from which we advertise the IPV6 CIDR block.
  final String networkBorderGroup;

  VpcIpv6CidrBlockAssociation({
    this.associationId,
    this.ipv6CidrBlock,
    this.ipv6CidrBlockState,
    this.ipv6Pool,
    this.networkBorderGroup,
  });
}

/// Describes a VPC peering connection.
class VpcPeeringConnection {
  /// Information about the accepter VPC. CIDR block information is only returned
  /// when describing an active VPC peering connection.
  final VpcPeeringConnectionVpcInfo accepterVpcInfo;

  /// The time that an unaccepted VPC peering connection will expire.
  final DateTime expirationTime;

  /// Information about the requester VPC. CIDR block information is only returned
  /// when describing an active VPC peering connection.
  final VpcPeeringConnectionVpcInfo requesterVpcInfo;

  /// The status of the VPC peering connection.
  final VpcPeeringConnectionStateReason status;

  /// Any tags assigned to the resource.
  final List<Tag> tags;

  /// The ID of the VPC peering connection.
  final String vpcPeeringConnectionId;

  VpcPeeringConnection({
    this.accepterVpcInfo,
    this.expirationTime,
    this.requesterVpcInfo,
    this.status,
    this.tags,
    this.vpcPeeringConnectionId,
  });
}

/// Describes the VPC peering connection options.
class VpcPeeringConnectionOptionsDescription {
  /// Indicates whether a local VPC can resolve public DNS hostnames to private IP
  /// addresses when queried from instances in a peer VPC.
  final bool allowDnsResolutionFromRemoteVpc;

  /// Indicates whether a local ClassicLink connection can communicate with the
  /// peer VPC over the VPC peering connection.
  final bool allowEgressFromLocalClassicLinkToRemoteVpc;

  /// Indicates whether a local VPC can communicate with a ClassicLink connection
  /// in the peer VPC over the VPC peering connection.
  final bool allowEgressFromLocalVpcToRemoteClassicLink;

  VpcPeeringConnectionOptionsDescription({
    this.allowDnsResolutionFromRemoteVpc,
    this.allowEgressFromLocalClassicLinkToRemoteVpc,
    this.allowEgressFromLocalVpcToRemoteClassicLink,
  });
}

/// Describes the status of a VPC peering connection.
class VpcPeeringConnectionStateReason {
  /// The status of the VPC peering connection.
  final VpcPeeringConnectionStateReasonCode code;

  /// A message that provides more information about the status, if applicable.
  final String message;

  VpcPeeringConnectionStateReason({
    this.code,
    this.message,
  });
}

enum VpcPeeringConnectionStateReasonCode {
  initiatingRequest,
  pendingAcceptance,
  active,
  deleted,
  rejected,
  failed,
  expired,
  provisioning,
  deleting,
}

/// Describes a VPC in a VPC peering connection.
class VpcPeeringConnectionVpcInfo {
  /// The IPv4 CIDR block for the VPC.
  final String cidrBlock;

  /// Information about the IPv4 CIDR blocks for the VPC.
  final List<CidrBlock> cidrBlockSet;

  /// The IPv6 CIDR block for the VPC.
  final List<Ipv6CidrBlock> ipv6CidrBlockSet;

  /// The AWS account ID of the VPC owner.
  final String ownerId;

  /// Information about the VPC peering connection options for the accepter or
  /// requester VPC.
  final VpcPeeringConnectionOptionsDescription peeringOptions;

  /// The Region in which the VPC is located.
  final String region;

  /// The ID of the VPC.
  final String vpcId;

  VpcPeeringConnectionVpcInfo({
    this.cidrBlock,
    this.cidrBlockSet,
    this.ipv6CidrBlockSet,
    this.ownerId,
    this.peeringOptions,
    this.region,
    this.vpcId,
  });
}

enum VpcState {
  pending,
  available,
}

enum VpcTenancy {
  $default,
}

/// Describes a VPN connection.
class VpnConnection {
  /// The category of the VPN connection. A value of <code>VPN</code> indicates an
  /// AWS VPN connection. A value of <code>VPN-Classic</code> indicates an AWS
  /// Classic VPN connection.
  final String category;

  /// The configuration information for the VPN connection's customer gateway (in
  /// the native XML format). This element is always present in the
  /// <a>CreateVpnConnection</a> response; however, it's present in the
  /// <a>DescribeVpnConnections</a> response only if the VPN connection is in the
  /// <code>pending</code> or <code>available</code> state.
  final String customerGatewayConfiguration;

  /// The ID of the customer gateway at your end of the VPN connection.
  final String customerGatewayId;

  /// The VPN connection options.
  final VpnConnectionOptions options;

  /// The static routes associated with the VPN connection.
  final List<VpnStaticRoute> routes;

  /// The current state of the VPN connection.
  final VpnState state;

  /// Any tags assigned to the VPN connection.
  final List<Tag> tags;

  /// The ID of the transit gateway associated with the VPN connection.
  final String transitGatewayId;

  /// The type of VPN connection.
  final GatewayType type;

  /// Information about the VPN tunnel.
  final List<VgwTelemetry> vgwTelemetry;

  /// The ID of the VPN connection.
  final String vpnConnectionId;

  /// The ID of the virtual private gateway at the AWS side of the VPN connection.
  final String vpnGatewayId;

  VpnConnection({
    this.category,
    this.customerGatewayConfiguration,
    this.customerGatewayId,
    this.options,
    this.routes,
    this.state,
    this.tags,
    this.transitGatewayId,
    this.type,
    this.vgwTelemetry,
    this.vpnConnectionId,
    this.vpnGatewayId,
  });
}

/// Describes VPN connection options.
class VpnConnectionOptions {
  /// Indicates whether acceleration is enabled for the VPN connection.
  final bool enableAcceleration;

  /// Indicates whether the VPN connection uses static routes only. Static routes
  /// must be used for devices that don't support BGP.
  final bool staticRoutesOnly;

  /// Indicates the VPN tunnel options.
  final List<TunnelOption> tunnelOptions;

  VpnConnectionOptions({
    this.enableAcceleration,
    this.staticRoutesOnly,
    this.tunnelOptions,
  });
}

/// Describes VPN connection options.
class VpnConnectionOptionsSpecification {
  /// Indicate whether to enable acceleration for the VPN connection.
  ///
  /// Default: <code>false</code>
  final bool enableAcceleration;

  /// Indicate whether the VPN connection uses static routes only. If you are
  /// creating a VPN connection for a device that does not support BGP, you must
  /// specify <code>true</code>. Use <a>CreateVpnConnectionRoute</a> to create a
  /// static route.
  ///
  /// Default: <code>false</code>
  final bool staticRoutesOnly;

  /// The tunnel options for the VPN connection.
  final List<VpnTunnelOptionsSpecification> tunnelOptions;

  VpnConnectionOptionsSpecification({
    this.enableAcceleration,
    this.staticRoutesOnly,
    this.tunnelOptions,
  });
}

enum VpnEcmpSupportValue {
  enable,
  disable,
}

/// Describes a virtual private gateway.
class VpnGateway {
  /// The private Autonomous System Number (ASN) for the Amazon side of a BGP
  /// session.
  final int amazonSideAsn;

  /// The Availability Zone where the virtual private gateway was created, if
  /// applicable. This field may be empty or not returned.
  final String availabilityZone;

  /// The current state of the virtual private gateway.
  final VpnState state;

  /// Any tags assigned to the virtual private gateway.
  final List<Tag> tags;

  /// The type of VPN connection the virtual private gateway supports.
  final GatewayType type;

  /// Any VPCs attached to the virtual private gateway.
  final List<VpcAttachment> vpcAttachments;

  /// The ID of the virtual private gateway.
  final String vpnGatewayId;

  VpnGateway({
    this.amazonSideAsn,
    this.availabilityZone,
    this.state,
    this.tags,
    this.type,
    this.vpcAttachments,
    this.vpnGatewayId,
  });
}

enum VpnProtocol {
  openvpn,
}

enum VpnState {
  pending,
  available,
  deleting,
  deleted,
}

/// Describes a static route for a VPN connection.
class VpnStaticRoute {
  /// The CIDR block associated with the local subnet of the customer data center.
  final String destinationCidrBlock;

  /// Indicates how the routes were provided.
  final VpnStaticRouteSource source;

  /// The current state of the static route.
  final VpnState state;

  VpnStaticRoute({
    this.destinationCidrBlock,
    this.source,
    this.state,
  });
}

enum VpnStaticRouteSource {
  static,
}

/// The tunnel options for a single VPN tunnel.
class VpnTunnelOptionsSpecification {
  /// The number of seconds after which a DPD timeout occurs.
  ///
  /// Constraints: A value between 0 and 30.
  ///
  /// Default: <code>30</code>
  final int dPDTimeoutSeconds;

  /// The IKE versions that are permitted for the VPN tunnel.
  ///
  /// Valid values: <code>ikev1</code> | <code>ikev2</code>
  final List<IKEVersionsRequestListValue> iKEVersions;

  /// One or more Diffie-Hellman group numbers that are permitted for the VPN
  /// tunnel for phase 1 IKE negotiations.
  ///
  /// Valid values: <code>2</code> | <code>14</code> | <code>15</code> |
  /// <code>16</code> | <code>17</code> | <code>18</code> | <code>22</code> |
  /// <code>23</code> | <code>24</code>
  final List<Phase1DHGroupNumbersRequestListValue> phase1DHGroupNumbers;

  /// One or more encryption algorithms that are permitted for the VPN tunnel for
  /// phase 1 IKE negotiations.
  ///
  /// Valid values: <code>AES128</code> | <code>AES256</code>
  final List<Phase1EncryptionAlgorithmsRequestListValue>
      phase1EncryptionAlgorithms;

  /// One or more integrity algorithms that are permitted for the VPN tunnel for
  /// phase 1 IKE negotiations.
  ///
  /// Valid values: <code>SHA1</code> | <code>SHA2-256</code>
  final List<Phase1IntegrityAlgorithmsRequestListValue>
      phase1IntegrityAlgorithms;

  /// The lifetime for phase 1 of the IKE negotiation, in seconds.
  ///
  /// Constraints: A value between 900 and 28,800.
  ///
  /// Default: <code>28800</code>
  final int phase1LifetimeSeconds;

  /// One or more Diffie-Hellman group numbers that are permitted for the VPN
  /// tunnel for phase 2 IKE negotiations.
  ///
  /// Valid values: <code>2</code> | <code>5</code> | <code>14</code> |
  /// <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> |
  /// <code>22</code> | <code>23</code> | <code>24</code>
  final List<Phase2DHGroupNumbersRequestListValue> phase2DHGroupNumbers;

  /// One or more encryption algorithms that are permitted for the VPN tunnel for
  /// phase 2 IKE negotiations.
  ///
  /// Valid values: <code>AES128</code> | <code>AES256</code>
  final List<Phase2EncryptionAlgorithmsRequestListValue>
      phase2EncryptionAlgorithms;

  /// One or more integrity algorithms that are permitted for the VPN tunnel for
  /// phase 2 IKE negotiations.
  ///
  /// Valid values: <code>SHA1</code> | <code>SHA2-256</code>
  final List<Phase2IntegrityAlgorithmsRequestListValue>
      phase2IntegrityAlgorithms;

  /// The lifetime for phase 2 of the IKE negotiation, in seconds.
  ///
  /// Constraints: A value between 900 and 3,600. The value must be less than the
  /// value for <code>Phase1LifetimeSeconds</code>.
  ///
  /// Default: <code>3600</code>
  final int phase2LifetimeSeconds;

  /// The pre-shared key (PSK) to establish initial authentication between the
  /// virtual private gateway and customer gateway.
  ///
  /// Constraints: Allowed characters are alphanumeric characters, periods (.),
  /// and underscores (_). Must be between 8 and 64 characters in length and
  /// cannot start with zero (0).
  final String preSharedKey;

  /// The percentage of the rekey window (determined by
  /// <code>RekeyMarginTimeSeconds</code>) during which the rekey time is randomly
  /// selected.
  ///
  /// Constraints: A value between 0 and 100.
  ///
  /// Default: <code>100</code>
  final int rekeyFuzzPercentage;

  /// The margin time, in seconds, before the phase 2 lifetime expires, during
  /// which the AWS side of the VPN connection performs an IKE rekey. The exact
  /// time of the rekey is randomly selected based on the value for
  /// <code>RekeyFuzzPercentage</code>.
  ///
  /// Constraints: A value between 60 and half of
  /// <code>Phase2LifetimeSeconds</code>.
  ///
  /// Default: <code>540</code>
  final int rekeyMarginTimeSeconds;

  /// The number of packets in an IKE replay window.
  ///
  /// Constraints: A value between 64 and 2048.
  ///
  /// Default: <code>1024</code>
  final int replayWindowSize;

  /// The range of inside IP addresses for the tunnel. Any specified CIDR blocks
  /// must be unique across all VPN connections that use the same virtual private
  /// gateway.
  ///
  /// Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code>
  /// range. The following CIDR blocks are reserved and cannot be used:
  ///
  /// <ul>
  /// <li>
  /// <code>169.254.0.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.1.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.2.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.3.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.4.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.5.0/30</code>
  /// </li>
  /// <li>
  /// <code>169.254.169.252/30</code>
  /// </li>
  /// </ul>
  final String tunnelInsideCidr;

  VpnTunnelOptionsSpecification({
    this.dPDTimeoutSeconds,
    this.iKEVersions,
    this.phase1DHGroupNumbers,
    this.phase1EncryptionAlgorithms,
    this.phase1IntegrityAlgorithms,
    this.phase1LifetimeSeconds,
    this.phase2DHGroupNumbers,
    this.phase2EncryptionAlgorithms,
    this.phase2IntegrityAlgorithms,
    this.phase2LifetimeSeconds,
    this.preSharedKey,
    this.rekeyFuzzPercentage,
    this.rekeyMarginTimeSeconds,
    this.replayWindowSize,
    this.tunnelInsideCidr,
  });
}

class WithdrawByoipCidrResult {
  /// Information about the address pool.
  final ByoipCidr byoipCidr;

  WithdrawByoipCidrResult({
    this.byoipCidr,
  });
}

enum Scope {
  availabilityZone,
  region,
}

final _exceptionFns = <String, _s.AwsExceptionFn>{};
