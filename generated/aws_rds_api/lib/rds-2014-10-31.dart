// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import 'dart:convert';
import 'dart:typed_data';

import 'package:shared_aws_api/shared.dart' as _s;
import 'package:shared_aws_api/shared.dart'
    show
        rfc822ToJson,
        iso8601ToJson,
        unixTimestampToJson,
        nonNullableTimeStampFromJson,
        timeStampFromJson;

export 'package:shared_aws_api/shared.dart' show AwsClientCredentials;

/// Amazon Relational Database Service (Amazon RDS) is a web service that makes
/// it easier to set up, operate, and scale a relational database in the cloud.
/// It provides cost-efficient, resizeable capacity for an industry-standard
/// relational database and manages common database administration tasks,
/// freeing up developers to focus on what makes their applications and
/// businesses unique.
class RDS {
  final _s.QueryProtocol _protocol;

  RDS({
    required String region,
    _s.AwsClientCredentials? credentials,
    _s.AwsClientCredentialsProvider? credentialsProvider,
    _s.Client? client,
    String? endpointUrl,
  }) : _protocol = _s.QueryProtocol(
          client: client,
          service: _s.ServiceMetadata(
            endpointPrefix: 'rds',
          ),
          region: region,
          credentials: credentials,
          credentialsProvider: credentialsProvider,
          endpointUrl: endpointUrl,
        );

  /// Closes the internal HTTP client if none was provided at creation.
  /// If a client was passed as a constructor argument, this becomes a noop.
  ///
  /// It's important to close all clients when it's done being used; failing to
  /// do so can cause the Dart process to hang.
  void close() {
    _protocol.close();
  }

  /// Associates an Identity and Access Management (IAM) role with a DB cluster.
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBClusterRoleAlreadyExistsFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBClusterRoleQuotaExceededFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The name of the DB cluster to associate the IAM role with.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role to associate with the
  /// Aurora DB cluster, for example
  /// <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ///
  /// Parameter [featureName] :
  /// The name of the feature for the DB cluster that the IAM role is to be
  /// associated with. For information about supported feature names, see
  /// <a>DBEngineVersion</a>.
  Future<void> addRoleToDBCluster({
    required String dBClusterIdentifier,
    required String roleArn,
    String? featureName,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      'RoleArn': roleArn,
      if (featureName != null) 'FeatureName': featureName,
    };
    await _protocol.send(
      $request,
      action: 'AddRoleToDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Associates an Amazon Web Services Identity and Access Management (IAM)
  /// role with a DB instance.
  /// <note>
  /// To add a role to a DB instance, the status of the DB instance must be
  /// <code>available</code>.
  /// </note>
  /// This command doesn't apply to RDS Custom.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBInstanceRoleAlreadyExistsFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [DBInstanceRoleQuotaExceededFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The name of the DB instance to associate the IAM role with.
  ///
  /// Parameter [featureName] :
  /// The name of the feature for the DB instance that the IAM role is to be
  /// associated with. For information about supported feature names, see
  /// <a>DBEngineVersion</a>.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role to associate with the DB
  /// instance, for example
  /// <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  Future<void> addRoleToDBInstance({
    required String dBInstanceIdentifier,
    required String featureName,
    required String roleArn,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      'FeatureName': featureName,
      'RoleArn': roleArn,
    };
    await _protocol.send(
      $request,
      action: 'AddRoleToDBInstance',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Adds a source identifier to an existing RDS event notification
  /// subscription.
  ///
  /// May throw [SubscriptionNotFoundFault].
  /// May throw [SourceNotFoundFault].
  ///
  /// Parameter [sourceIdentifier] :
  /// The identifier of the event source to be added.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If the source type is a DB instance, a <code>DBInstanceIdentifier</code>
  /// value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB cluster, a <code>DBClusterIdentifier</code>
  /// value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB parameter group, a
  /// <code>DBParameterGroupName</code> value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB security group, a
  /// <code>DBSecurityGroupName</code> value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code>
  /// value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB cluster snapshot, a
  /// <code>DBClusterSnapshotIdentifier</code> value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is an RDS Proxy, a <code>DBProxyName</code> value must
  /// be supplied.
  /// </li>
  /// </ul>
  ///
  /// Parameter [subscriptionName] :
  /// The name of the RDS event notification subscription you want to add a
  /// source identifier to.
  Future<AddSourceIdentifierToSubscriptionResult>
      addSourceIdentifierToSubscription({
    required String sourceIdentifier,
    required String subscriptionName,
  }) async {
    final $request = <String, String>{
      'SourceIdentifier': sourceIdentifier,
      'SubscriptionName': subscriptionName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'AddSourceIdentifierToSubscription',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'AddSourceIdentifierToSubscriptionResult',
    );
    return AddSourceIdentifierToSubscriptionResult.fromXml($result);
  }

  /// Adds metadata tags to an Amazon RDS resource. These tags can also be used
  /// with cost allocation reporting to track cost associated with Amazon RDS
  /// resources, or used in a Condition statement in an IAM policy for Amazon
  /// RDS.
  ///
  /// For an overview on tagging your relational database resources, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging
  /// Amazon RDS Resources</a> or <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.html">Tagging
  /// Amazon Aurora and Amazon RDS Resources</a>.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBSnapshotNotFoundFault].
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyTargetGroupNotFoundFault].
  /// May throw [BlueGreenDeploymentNotFoundFault].
  /// May throw [IntegrationNotFoundFault].
  /// May throw [TenantDatabaseNotFoundFault].
  /// May throw [DBSnapshotTenantDatabaseNotFoundFault].
  ///
  /// Parameter [resourceName] :
  /// The Amazon RDS resource that the tags are added to. This value is an
  /// Amazon Resource Name (ARN). For information about creating an ARN, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
  /// Constructing an RDS Amazon Resource Name (ARN)</a>.
  ///
  /// Parameter [tags] :
  /// The tags to be assigned to the Amazon RDS resource.
  Future<void> addTagsToResource({
    required String resourceName,
    required List<Tag> tags,
  }) async {
    final $request = <String, String>{
      'ResourceName': resourceName,
      if (tags.isEmpty)
        'Tags': ''
      else
        for (var i1 = 0; i1 < tags.length; i1++)
          for (var e3 in tags[i1].toQueryMap().entries)
            'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    await _protocol.send(
      $request,
      action: 'AddTagsToResource',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Applies a pending maintenance action to a resource (for example, to a DB
  /// instance).
  ///
  /// May throw [ResourceNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [applyAction] :
  /// The pending maintenance action to apply to this resource.
  ///
  /// Valid Values: <code>system-update</code>, <code>db-upgrade</code>,
  /// <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code>
  ///
  /// Parameter [optInType] :
  /// A value that specifies the type of opt-in request, or undoes an opt-in
  /// request. An opt-in request of type <code>immediate</code> can't be undone.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>immediate</code> - Apply the maintenance action immediately.
  /// </li>
  /// <li>
  /// <code>next-maintenance</code> - Apply the maintenance action during the
  /// next maintenance window for the resource.
  /// </li>
  /// <li>
  /// <code>undo-opt-in</code> - Cancel any existing
  /// <code>next-maintenance</code> opt-in requests.
  /// </li>
  /// </ul>
  ///
  /// Parameter [resourceIdentifier] :
  /// The RDS Amazon Resource Name (ARN) of the resource that the pending
  /// maintenance action applies to. For information about creating an ARN, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
  /// Constructing an RDS Amazon Resource Name (ARN)</a>.
  Future<ApplyPendingMaintenanceActionResult> applyPendingMaintenanceAction({
    required String applyAction,
    required String optInType,
    required String resourceIdentifier,
  }) async {
    final $request = <String, String>{
      'ApplyAction': applyAction,
      'OptInType': optInType,
      'ResourceIdentifier': resourceIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ApplyPendingMaintenanceAction',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ApplyPendingMaintenanceActionResult',
    );
    return ApplyPendingMaintenanceActionResult.fromXml($result);
  }

  /// Enables ingress to a DBSecurityGroup using one of two forms of
  /// authorization. First, EC2 or VPC security groups can be added to the
  /// DBSecurityGroup if the application using the database is running on EC2 or
  /// VPC instances. Second, IP ranges are available if the application
  /// accessing your database is running on the internet. Required parameters
  /// for this API are one of CIDR range, EC2SecurityGroupId for VPC, or
  /// (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or
  /// EC2SecurityGroupId for non-VPC).
  ///
  /// You can't authorize ingress from an EC2 security group in one Amazon Web
  /// Services Region to an Amazon RDS DB instance in another. You can't
  /// authorize ingress from a VPC security group in one VPC to an Amazon RDS DB
  /// instance in another.
  ///
  /// For an overview of CIDR ranges, go to the <a
  /// href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia
  /// Tutorial</a>.
  /// <note>
  /// EC2-Classic was retired on August 15, 2022. If you haven't migrated from
  /// EC2-Classic to a VPC, we recommend that you migrate as soon as possible.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate
  /// from EC2-Classic to a VPC</a> in the <i>Amazon EC2 User Guide</i>, the
  /// blog <a
  /// href="http://aws.amazon.com/blogs/aws/ec2-classic-is-retiring-heres-how-to-prepare/">EC2-Classic
  /// Networking is Retiring – Here’s How to Prepare</a>, and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.Non-VPC2VPC.html">Moving
  /// a DB instance not in a VPC into a VPC</a> in the <i>Amazon RDS User
  /// Guide</i>.
  /// </note>
  ///
  /// May throw [DBSecurityGroupNotFoundFault].
  /// May throw [InvalidDBSecurityGroupStateFault].
  /// May throw [AuthorizationAlreadyExistsFault].
  /// May throw [AuthorizationQuotaExceededFault].
  ///
  /// Parameter [dBSecurityGroupName] :
  /// The name of the DB security group to add authorization to.
  ///
  /// Parameter [cidrip] :
  /// The IP range to authorize.
  ///
  /// Parameter [eC2SecurityGroupId] :
  /// Id of the EC2 security group to authorize. For VPC DB security groups,
  /// <code>EC2SecurityGroupId</code> must be provided. Otherwise,
  /// <code>EC2SecurityGroupOwnerId</code> and either
  /// <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must
  /// be provided.
  ///
  /// Parameter [eC2SecurityGroupName] :
  /// Name of the EC2 security group to authorize. For VPC DB security groups,
  /// <code>EC2SecurityGroupId</code> must be provided. Otherwise,
  /// <code>EC2SecurityGroupOwnerId</code> and either
  /// <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must
  /// be provided.
  ///
  /// Parameter [eC2SecurityGroupOwnerId] :
  /// Amazon Web Services account number of the owner of the EC2 security group
  /// specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon
  /// Web Services access key ID isn't an acceptable value. For VPC DB security
  /// groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise,
  /// <code>EC2SecurityGroupOwnerId</code> and either
  /// <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must
  /// be provided.
  Future<AuthorizeDBSecurityGroupIngressResult>
      authorizeDBSecurityGroupIngress({
    required String dBSecurityGroupName,
    String? cidrip,
    String? eC2SecurityGroupId,
    String? eC2SecurityGroupName,
    String? eC2SecurityGroupOwnerId,
  }) async {
    final $request = <String, String>{
      'DBSecurityGroupName': dBSecurityGroupName,
      if (cidrip != null) 'CIDRIP': cidrip,
      if (eC2SecurityGroupId != null) 'EC2SecurityGroupId': eC2SecurityGroupId,
      if (eC2SecurityGroupName != null)
        'EC2SecurityGroupName': eC2SecurityGroupName,
      if (eC2SecurityGroupOwnerId != null)
        'EC2SecurityGroupOwnerId': eC2SecurityGroupOwnerId,
    };
    final $result = await _protocol.send(
      $request,
      action: 'AuthorizeDBSecurityGroupIngress',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'AuthorizeDBSecurityGroupIngressResult',
    );
    return AuthorizeDBSecurityGroupIngressResult.fromXml($result);
  }

  /// Backtracks a DB cluster to a specific time, without creating a new DB
  /// cluster.
  ///
  /// For more information on backtracking, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html">
  /// Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  /// <note>
  /// This action applies only to Aurora MySQL DB clusters.
  /// </note>
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  ///
  /// Parameter [backtrackTo] :
  /// The timestamp of the time to backtrack the DB cluster to, specified in ISO
  /// 8601 format. For more information about ISO 8601, see the <a
  /// href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
  /// <note>
  /// If the specified time isn't a consistent time for the DB cluster, Aurora
  /// automatically chooses the nearest possible consistent time for the DB
  /// cluster.
  /// </note>
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain a valid ISO 8601 timestamp.
  /// </li>
  /// <li>
  /// Can't contain a timestamp set in the future.
  /// </li>
  /// </ul>
  /// Example: <code>2017-07-08T18:00Z</code>
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier of the DB cluster to be backtracked. This
  /// parameter is stored as a lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 alphanumeric characters or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster1</code>
  ///
  /// Parameter [force] :
  /// Specifies whether to force the DB cluster to backtrack when binary logging
  /// is enabled. Otherwise, an error occurs when binary logging is enabled.
  ///
  /// Parameter [useEarliestTimeOnPointInTimeUnavailable] :
  /// Specifies whether to backtrack the DB cluster to the earliest possible
  /// backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than
  /// the earliest backtrack time. When this parameter is disabled and
  /// <i>BacktrackTo</i> is set to a timestamp earlier than the earliest
  /// backtrack time, an error occurs.
  Future<DBClusterBacktrack> backtrackDBCluster({
    required DateTime backtrackTo,
    required String dBClusterIdentifier,
    bool? force,
    bool? useEarliestTimeOnPointInTimeUnavailable,
  }) async {
    final $request = <String, String>{
      'BacktrackTo': _s.iso8601ToJson(backtrackTo),
      'DBClusterIdentifier': dBClusterIdentifier,
      if (force != null) 'Force': force.toString(),
      if (useEarliestTimeOnPointInTimeUnavailable != null)
        'UseEarliestTimeOnPointInTimeUnavailable':
            useEarliestTimeOnPointInTimeUnavailable.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'BacktrackDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'BacktrackDBClusterResult',
    );
    return DBClusterBacktrack.fromXml($result);
  }

  /// Cancels an export task in progress that is exporting a snapshot or cluster
  /// to Amazon S3. Any data that has already been written to the S3 bucket
  /// isn't removed.
  ///
  /// May throw [ExportTaskNotFoundFault].
  /// May throw [InvalidExportTaskStateFault].
  ///
  /// Parameter [exportTaskIdentifier] :
  /// The identifier of the snapshot or cluster export task to cancel.
  Future<ExportTask> cancelExportTask({
    required String exportTaskIdentifier,
  }) async {
    final $request = <String, String>{
      'ExportTaskIdentifier': exportTaskIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CancelExportTask',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CancelExportTaskResult',
    );
    return ExportTask.fromXml($result);
  }

  /// Copies the specified DB cluster parameter group.
  /// <note>
  /// You can't copy a default DB cluster parameter group. Instead, create a new
  /// custom DB cluster parameter group, which copies the default parameters and
  /// values for the specified DB cluster parameter group family.
  /// </note>
  ///
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [DBParameterGroupQuotaExceededFault].
  /// May throw [DBParameterGroupAlreadyExistsFault].
  ///
  /// Parameter [sourceDBClusterParameterGroupIdentifier] :
  /// The identifier or Amazon Resource Name (ARN) for the source DB cluster
  /// parameter group. For information about creating an ARN, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
  /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must specify a valid DB cluster parameter group.
  /// </li>
  /// </ul>
  ///
  /// Parameter [targetDBClusterParameterGroupDescription] :
  /// A description for the copied DB cluster parameter group.
  ///
  /// Parameter [targetDBClusterParameterGroupIdentifier] :
  /// The identifier for the copied DB cluster parameter group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be null, empty, or blank
  /// </li>
  /// <li>
  /// Must contain from 1 to 255 letters, numbers, or hyphens
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster-param-group1</code>
  Future<CopyDBClusterParameterGroupResult> copyDBClusterParameterGroup({
    required String sourceDBClusterParameterGroupIdentifier,
    required String targetDBClusterParameterGroupDescription,
    required String targetDBClusterParameterGroupIdentifier,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'SourceDBClusterParameterGroupIdentifier':
          sourceDBClusterParameterGroupIdentifier,
      'TargetDBClusterParameterGroupDescription':
          targetDBClusterParameterGroupDescription,
      'TargetDBClusterParameterGroupIdentifier':
          targetDBClusterParameterGroupIdentifier,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CopyDBClusterParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CopyDBClusterParameterGroupResult',
    );
    return CopyDBClusterParameterGroupResult.fromXml($result);
  }

  /// Copies a snapshot of a DB cluster.
  ///
  /// To copy a DB cluster snapshot from a shared manual DB cluster snapshot,
  /// <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource
  /// Name (ARN) of the shared DB cluster snapshot.
  ///
  /// You can copy an encrypted DB cluster snapshot from another Amazon Web
  /// Services Region. In that case, the Amazon Web Services Region where you
  /// call the <code>CopyDBClusterSnapshot</code> operation is the destination
  /// Amazon Web Services Region for the encrypted DB cluster snapshot to be
  /// copied to. To copy an encrypted DB cluster snapshot from another Amazon
  /// Web Services Region, you must provide the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>KmsKeyId</code> - The Amazon Web Services Key Management System
  /// (Amazon Web Services KMS) key identifier for the key to use to encrypt the
  /// copy of the DB cluster snapshot in the destination Amazon Web Services
  /// Region.
  /// </li>
  /// <li>
  /// <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the
  /// new copy of the DB cluster snapshot in the destination Amazon Web Services
  /// Region.
  /// </li>
  /// <li>
  /// <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot
  /// identifier for the encrypted DB cluster snapshot to be copied. This
  /// identifier must be in the ARN format for the source Amazon Web Services
  /// Region and is the same value as the
  /// <code>SourceDBClusterSnapshotIdentifier</code> in the presigned URL.
  /// </li>
  /// </ul>
  /// To cancel the copy operation once it is in progress, delete the target DB
  /// cluster snapshot identified by
  /// <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster
  /// snapshot is in "copying" status.
  ///
  /// For more information on copying encrypted Amazon Aurora DB cluster
  /// snapshots from one Amazon Web Services Region to another, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html">
  /// Copying a Snapshot</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBClusterSnapshotAlreadyExistsFault].
  /// May throw [DBClusterSnapshotNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBClusterSnapshotStateFault].
  /// May throw [SnapshotQuotaExceededFault].
  /// May throw [KMSKeyNotAccessibleFault].
  ///
  /// Parameter [sourceDBClusterSnapshotIdentifier] :
  /// The identifier of the DB cluster snapshot to copy. This parameter isn't
  /// case-sensitive.
  ///
  /// You can't copy an encrypted, shared DB cluster snapshot from one Amazon
  /// Web Services Region to another.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must specify a valid system snapshot in the "available" state.
  /// </li>
  /// <li>
  /// If the source snapshot is in the same Amazon Web Services Region as the
  /// copy, specify a valid DB snapshot identifier.
  /// </li>
  /// <li>
  /// If the source snapshot is in a different Amazon Web Services Region than
  /// the copy, specify a valid DB cluster snapshot ARN. For more information,
  /// go to <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions">
  /// Copying Snapshots Across Amazon Web Services Regions</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster-snapshot1</code>
  ///
  /// Parameter [targetDBClusterSnapshotIdentifier] :
  /// The identifier of the new DB cluster snapshot to create from the source DB
  /// cluster snapshot. This parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster-snapshot2</code>
  ///
  /// Parameter [copyTags] :
  /// Specifies whether to copy all tags from the source DB cluster snapshot to
  /// the target DB cluster snapshot. By default, tags are not copied.
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier for an encrypted DB cluster
  /// snapshot. The Amazon Web Services KMS key identifier is the key ARN, key
  /// ID, alias ARN, or alias name for the Amazon Web Services KMS key.
  ///
  /// If you copy an encrypted DB cluster snapshot from your Amazon Web Services
  /// account, you can specify a value for <code>KmsKeyId</code> to encrypt the
  /// copy with a new KMS key. If you don't specify a value for
  /// <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is
  /// encrypted with the same KMS key as the source DB cluster snapshot.
  ///
  /// If you copy an encrypted DB cluster snapshot that is shared from another
  /// Amazon Web Services account, then you must specify a value for
  /// <code>KmsKeyId</code>.
  ///
  /// To copy an encrypted DB cluster snapshot to another Amazon Web Services
  /// Region, you must set <code>KmsKeyId</code> to the Amazon Web Services KMS
  /// key identifier you want to use to encrypt the copy of the DB cluster
  /// snapshot in the destination Amazon Web Services Region. KMS keys are
  /// specific to the Amazon Web Services Region that they are created in, and
  /// you can't use KMS keys from one Amazon Web Services Region in another
  /// Amazon Web Services Region.
  ///
  /// If you copy an unencrypted DB cluster snapshot and specify a value for the
  /// <code>KmsKeyId</code> parameter, an error is returned.
  ///
  /// Parameter [preSignedUrl] :
  /// When you are copying a DB cluster snapshot from one Amazon Web Services
  /// GovCloud (US) Region to another, the URL that contains a Signature Version
  /// 4 signed request for the <code>CopyDBClusterSnapshot</code> API operation
  /// in the Amazon Web Services Region that contains the source DB cluster
  /// snapshot to copy. Use the <code>PreSignedUrl</code> parameter when copying
  /// an encrypted DB cluster snapshot from another Amazon Web Services Region.
  /// Don't specify <code>PreSignedUrl</code> when copying an encrypted DB
  /// cluster snapshot in the same Amazon Web Services Region.
  ///
  /// This setting applies only to Amazon Web Services GovCloud (US) Regions.
  /// It's ignored in other Amazon Web Services Regions.
  ///
  /// The presigned URL must be a valid request for the
  /// <code>CopyDBClusterSnapshot</code> API operation that can run in the
  /// source Amazon Web Services Region that contains the encrypted DB cluster
  /// snapshot to copy. The presigned URL request must contain the following
  /// parameter values:
  ///
  /// <ul>
  /// <li>
  /// <code>KmsKeyId</code> - The KMS key identifier for the KMS key to use to
  /// encrypt the copy of the DB cluster snapshot in the destination Amazon Web
  /// Services Region. This is the same identifier for both the
  /// <code>CopyDBClusterSnapshot</code> operation that is called in the
  /// destination Amazon Web Services Region, and the operation contained in the
  /// presigned URL.
  /// </li>
  /// <li>
  /// <code>DestinationRegion</code> - The name of the Amazon Web Services
  /// Region that the DB cluster snapshot is to be created in.
  /// </li>
  /// <li>
  /// <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot
  /// identifier for the encrypted DB cluster snapshot to be copied. This
  /// identifier must be in the Amazon Resource Name (ARN) format for the source
  /// Amazon Web Services Region. For example, if you are copying an encrypted
  /// DB cluster snapshot from the us-west-2 Amazon Web Services Region, then
  /// your <code>SourceDBClusterSnapshotIdentifier</code> looks like the
  /// following example:
  /// <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.
  /// </li>
  /// </ul>
  /// To learn how to generate a Signature Version 4 signed request, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
  /// Authenticating Requests: Using Query Parameters (Amazon Web Services
  /// Signature Version 4)</a> and <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
  /// Signature Version 4 Signing Process</a>.
  /// <note>
  /// If you are using an Amazon Web Services SDK tool or the CLI, you can
  /// specify <code>SourceRegion</code> (or <code>--source-region</code> for the
  /// CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying
  /// <code>SourceRegion</code> autogenerates a presigned URL that is a valid
  /// request for the operation that can run in the source Amazon Web Services
  /// Region.
  /// </note><note>
  /// If you supply a value for this operation's <code>SourceRegion</code>
  /// parameter, a pre-signed URL will be calculated on your behalf.
  /// </note>
  ///
  /// Parameter [sourceRegion] :
  /// The ID of the region that contains the snapshot to be copied.
  Future<CopyDBClusterSnapshotResult> copyDBClusterSnapshot({
    required String sourceDBClusterSnapshotIdentifier,
    required String targetDBClusterSnapshotIdentifier,
    bool? copyTags,
    String? kmsKeyId,
    String? preSignedUrl,
    String? sourceRegion,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'SourceDBClusterSnapshotIdentifier': sourceDBClusterSnapshotIdentifier,
      'TargetDBClusterSnapshotIdentifier': targetDBClusterSnapshotIdentifier,
      if (copyTags != null) 'CopyTags': copyTags.toString(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (preSignedUrl != null) 'PreSignedUrl': preSignedUrl,
      if (sourceRegion != null) 'SourceRegion': sourceRegion,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CopyDBClusterSnapshot',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CopyDBClusterSnapshotResult',
    );
    return CopyDBClusterSnapshotResult.fromXml($result);
  }

  /// Copies the specified DB parameter group.
  /// <note>
  /// You can't copy a default DB parameter group. Instead, create a new custom
  /// DB parameter group, which copies the default parameters and values for the
  /// specified DB parameter group family.
  /// </note>
  ///
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [DBParameterGroupAlreadyExistsFault].
  /// May throw [DBParameterGroupQuotaExceededFault].
  ///
  /// Parameter [sourceDBParameterGroupIdentifier] :
  /// The identifier or ARN for the source DB parameter group. For information
  /// about creating an ARN, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
  /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must specify a valid DB parameter group.
  /// </li>
  /// </ul>
  ///
  /// Parameter [targetDBParameterGroupDescription] :
  /// A description for the copied DB parameter group.
  ///
  /// Parameter [targetDBParameterGroupIdentifier] :
  /// The identifier for the copied DB parameter group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be null, empty, or blank
  /// </li>
  /// <li>
  /// Must contain from 1 to 255 letters, numbers, or hyphens
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul>
  /// Example: <code>my-db-parameter-group</code>
  Future<CopyDBParameterGroupResult> copyDBParameterGroup({
    required String sourceDBParameterGroupIdentifier,
    required String targetDBParameterGroupDescription,
    required String targetDBParameterGroupIdentifier,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'SourceDBParameterGroupIdentifier': sourceDBParameterGroupIdentifier,
      'TargetDBParameterGroupDescription': targetDBParameterGroupDescription,
      'TargetDBParameterGroupIdentifier': targetDBParameterGroupIdentifier,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CopyDBParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CopyDBParameterGroupResult',
    );
    return CopyDBParameterGroupResult.fromXml($result);
  }

  /// Copies the specified DB snapshot. The source DB snapshot must be in the
  /// <code>available</code> state.
  ///
  /// You can copy a snapshot from one Amazon Web Services Region to another. In
  /// that case, the Amazon Web Services Region where you call the
  /// <code>CopyDBSnapshot</code> operation is the destination Amazon Web
  /// Services Region for the DB snapshot copy.
  ///
  /// This command doesn't apply to RDS Custom.
  ///
  /// For more information about copying snapshots, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying
  /// a DB Snapshot</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBSnapshotAlreadyExistsFault].
  /// May throw [DBSnapshotNotFoundFault].
  /// May throw [InvalidDBSnapshotStateFault].
  /// May throw [SnapshotQuotaExceededFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [CustomAvailabilityZoneNotFoundFault].
  ///
  /// Parameter [sourceDBSnapshotIdentifier] :
  /// The identifier for the source DB snapshot.
  ///
  /// If the source snapshot is in the same Amazon Web Services Region as the
  /// copy, specify a valid DB snapshot identifier. For example, you might
  /// specify <code>rds:mysql-instance1-snapshot-20130805</code>.
  ///
  /// If the source snapshot is in a different Amazon Web Services Region than
  /// the copy, specify a valid DB snapshot ARN. For example, you might specify
  /// <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>.
  ///
  /// If you are copying from a shared manual DB snapshot, this parameter must
  /// be the Amazon Resource Name (ARN) of the shared DB snapshot.
  ///
  /// If you are copying an encrypted snapshot this parameter must be in the ARN
  /// format for the source Amazon Web Services Region.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must specify a valid system snapshot in the "available" state.
  /// </li>
  /// </ul>
  /// Example: <code>rds:mydb-2012-04-02-00-01</code>
  ///
  /// Example:
  /// <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>
  ///
  /// Parameter [targetDBSnapshotIdentifier] :
  /// The identifier for the copy of the snapshot.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be null, empty, or blank
  /// </li>
  /// <li>
  /// Must contain from 1 to 255 letters, numbers, or hyphens
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul>
  /// Example: <code>my-db-snapshot</code>
  ///
  /// Parameter [copyOptionGroup] :
  /// Specifies whether to copy the DB option group associated with the source
  /// DB snapshot to the target Amazon Web Services account and associate with
  /// the target DB snapshot. The associated option group can be copied only
  /// with cross-account snapshot copy calls.
  ///
  /// Parameter [copyTags] :
  /// Specifies whether to copy all tags from the source DB snapshot to the
  /// target DB snapshot. By default, tags aren't copied.
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier for an encrypted DB snapshot.
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  ///
  /// If you copy an encrypted DB snapshot from your Amazon Web Services
  /// account, you can specify a value for this parameter to encrypt the copy
  /// with a new KMS key. If you don't specify a value for this parameter, then
  /// the copy of the DB snapshot is encrypted with the same Amazon Web Services
  /// KMS key as the source DB snapshot.
  ///
  /// If you copy an encrypted DB snapshot that is shared from another Amazon
  /// Web Services account, then you must specify a value for this parameter.
  ///
  /// If you specify this parameter when you copy an unencrypted snapshot, the
  /// copy is encrypted.
  ///
  /// If you copy an encrypted snapshot to a different Amazon Web Services
  /// Region, then you must specify an Amazon Web Services KMS key identifier
  /// for the destination Amazon Web Services Region. KMS keys are specific to
  /// the Amazon Web Services Region that they are created in, and you can't use
  /// KMS keys from one Amazon Web Services Region in another Amazon Web
  /// Services Region.
  ///
  /// Parameter [optionGroupName] :
  /// The name of an option group to associate with the copy of the snapshot.
  ///
  /// Specify this option if you are copying a snapshot from one Amazon Web
  /// Services Region to another, and your DB instance uses a nondefault option
  /// group. If your source DB instance uses Transparent Data Encryption for
  /// Oracle or Microsoft SQL Server, you must specify this option when copying
  /// across Amazon Web Services Regions. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option
  /// group considerations</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Parameter [preSignedUrl] :
  /// When you are copying a snapshot from one Amazon Web Services GovCloud (US)
  /// Region to another, the URL that contains a Signature Version 4 signed
  /// request for the <code>CopyDBSnapshot</code> API operation in the source
  /// Amazon Web Services Region that contains the source DB snapshot to copy.
  ///
  /// This setting applies only to Amazon Web Services GovCloud (US) Regions.
  /// It's ignored in other Amazon Web Services Regions.
  ///
  /// You must specify this parameter when you copy an encrypted DB snapshot
  /// from another Amazon Web Services Region by using the Amazon RDS API. Don't
  /// specify <code>PreSignedUrl</code> when you are copying an encrypted DB
  /// snapshot in the same Amazon Web Services Region.
  ///
  /// The presigned URL must be a valid request for the
  /// <code>CopyDBClusterSnapshot</code> API operation that can run in the
  /// source Amazon Web Services Region that contains the encrypted DB cluster
  /// snapshot to copy. The presigned URL request must contain the following
  /// parameter values:
  ///
  /// <ul>
  /// <li>
  /// <code>DestinationRegion</code> - The Amazon Web Services Region that the
  /// encrypted DB snapshot is copied to. This Amazon Web Services Region is the
  /// same one where the <code>CopyDBSnapshot</code> operation is called that
  /// contains this presigned URL.
  ///
  /// For example, if you copy an encrypted DB snapshot from the us-west-2
  /// Amazon Web Services Region to the us-east-1 Amazon Web Services Region,
  /// then you call the <code>CopyDBSnapshot</code> operation in the us-east-1
  /// Amazon Web Services Region and provide a presigned URL that contains a
  /// call to the <code>CopyDBSnapshot</code> operation in the us-west-2 Amazon
  /// Web Services Region. For this example, the <code>DestinationRegion</code>
  /// in the presigned URL must be set to the us-east-1 Amazon Web Services
  /// Region.
  /// </li>
  /// <li>
  /// <code>KmsKeyId</code> - The KMS key identifier for the KMS key to use to
  /// encrypt the copy of the DB snapshot in the destination Amazon Web Services
  /// Region. This is the same identifier for both the
  /// <code>CopyDBSnapshot</code> operation that is called in the destination
  /// Amazon Web Services Region, and the operation contained in the presigned
  /// URL.
  /// </li>
  /// <li>
  /// <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for
  /// the encrypted snapshot to be copied. This identifier must be in the Amazon
  /// Resource Name (ARN) format for the source Amazon Web Services Region. For
  /// example, if you are copying an encrypted DB snapshot from the us-west-2
  /// Amazon Web Services Region, then your
  /// <code>SourceDBSnapshotIdentifier</code> looks like the following example:
  /// <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>.
  /// </li>
  /// </ul>
  /// To learn how to generate a Signature Version 4 signed request, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating
  /// Requests: Using Query Parameters (Amazon Web Services Signature Version
  /// 4)</a> and <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
  /// Version 4 Signing Process</a>.
  /// <note>
  /// If you are using an Amazon Web Services SDK tool or the CLI, you can
  /// specify <code>SourceRegion</code> (or <code>--source-region</code> for the
  /// CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying
  /// <code>SourceRegion</code> autogenerates a presigned URL that is a valid
  /// request for the operation that can run in the source Amazon Web Services
  /// Region.
  /// </note><note>
  /// If you supply a value for this operation's <code>SourceRegion</code>
  /// parameter, a pre-signed URL will be calculated on your behalf.
  /// </note>
  ///
  /// Parameter [sourceRegion] :
  /// The ID of the region that contains the snapshot to be copied.
  ///
  /// Parameter [targetCustomAvailabilityZone] :
  /// The external custom Availability Zone (CAZ) identifier for the target CAZ.
  ///
  /// Example: <code>rds-caz-aiqhTgQv</code>.
  Future<CopyDBSnapshotResult> copyDBSnapshot({
    required String sourceDBSnapshotIdentifier,
    required String targetDBSnapshotIdentifier,
    bool? copyOptionGroup,
    bool? copyTags,
    String? kmsKeyId,
    String? optionGroupName,
    String? preSignedUrl,
    String? sourceRegion,
    List<Tag>? tags,
    String? targetCustomAvailabilityZone,
  }) async {
    final $request = <String, String>{
      'SourceDBSnapshotIdentifier': sourceDBSnapshotIdentifier,
      'TargetDBSnapshotIdentifier': targetDBSnapshotIdentifier,
      if (copyOptionGroup != null)
        'CopyOptionGroup': copyOptionGroup.toString(),
      if (copyTags != null) 'CopyTags': copyTags.toString(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (preSignedUrl != null) 'PreSignedUrl': preSignedUrl,
      if (sourceRegion != null) 'SourceRegion': sourceRegion,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (targetCustomAvailabilityZone != null)
        'TargetCustomAvailabilityZone': targetCustomAvailabilityZone,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CopyDBSnapshot',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CopyDBSnapshotResult',
    );
    return CopyDBSnapshotResult.fromXml($result);
  }

  /// Copies the specified option group.
  ///
  /// May throw [OptionGroupAlreadyExistsFault].
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [OptionGroupQuotaExceededFault].
  ///
  /// Parameter [sourceOptionGroupIdentifier] :
  /// The identifier for the source option group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must specify a valid option group.
  /// </li>
  /// </ul>
  ///
  /// Parameter [targetOptionGroupDescription] :
  /// The description for the copied option group.
  ///
  /// Parameter [targetOptionGroupIdentifier] :
  /// The identifier for the copied option group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be null, empty, or blank
  /// </li>
  /// <li>
  /// Must contain from 1 to 255 letters, numbers, or hyphens
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul>
  /// Example: <code>my-option-group</code>
  Future<CopyOptionGroupResult> copyOptionGroup({
    required String sourceOptionGroupIdentifier,
    required String targetOptionGroupDescription,
    required String targetOptionGroupIdentifier,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'SourceOptionGroupIdentifier': sourceOptionGroupIdentifier,
      'TargetOptionGroupDescription': targetOptionGroupDescription,
      'TargetOptionGroupIdentifier': targetOptionGroupIdentifier,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CopyOptionGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CopyOptionGroupResult',
    );
    return CopyOptionGroupResult.fromXml($result);
  }

  /// Creates a blue/green deployment.
  ///
  /// A blue/green deployment creates a staging environment that copies the
  /// production environment. In a blue/green deployment, the blue environment
  /// is the current production environment. The green environment is the
  /// staging environment. The staging environment stays in sync with the
  /// current production environment using logical replication.
  ///
  /// You can make changes to the databases in the green environment without
  /// affecting production workloads. For example, you can upgrade the major or
  /// minor DB engine version, change database parameters, or make schema
  /// changes in the staging environment. You can thoroughly test changes in the
  /// green environment. When ready, you can switch over the environments to
  /// promote the green environment to be the new production environment. The
  /// switchover typically takes under a minute.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using
  /// Amazon RDS Blue/Green Deployments for database updates</a> in the
  /// <i>Amazon RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html">
  /// Using Amazon RDS Blue/Green Deployments for database updates</a> in the
  /// <i>Amazon Aurora User Guide</i>.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [SourceDatabaseNotSupportedFault].
  /// May throw [SourceClusterNotSupportedFault].
  /// May throw [BlueGreenDeploymentAlreadyExistsFault].
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [DBClusterParameterGroupNotFoundFault].
  /// May throw [InstanceQuotaExceededFault].
  /// May throw [DBClusterQuotaExceededFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [InvalidDBClusterStateFault].
  ///
  /// Parameter [blueGreenDeploymentName] :
  /// The name of the blue/green deployment.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be the same as an existing blue/green deployment name in the same
  /// account and Amazon Web Services Region.
  /// </li>
  /// </ul>
  ///
  /// Parameter [source] :
  /// The Amazon Resource Name (ARN) of the source production database.
  ///
  /// Specify the database that you want to clone. The blue/green deployment
  /// creates this database in the green environment. You can make updates to
  /// the database in the green environment, such as an engine version upgrade.
  /// When you are ready, you can switch the database in the green environment
  /// to be the production database.
  ///
  /// Parameter [tags] :
  /// Tags to assign to the blue/green deployment.
  ///
  /// Parameter [targetDBClusterParameterGroupName] :
  /// The DB cluster parameter group associated with the Aurora DB cluster in
  /// the green environment.
  ///
  /// To test parameter changes, specify a DB cluster parameter group that is
  /// different from the one associated with the source DB cluster.
  ///
  /// Parameter [targetDBInstanceClass] :
  /// Specify the DB instance class for the databases in the green environment.
  ///
  /// This parameter only applies to RDS DB instances, because DB instances
  /// within an Aurora DB cluster can have multiple different instance classes.
  /// If you're creating a blue/green deployment from an Aurora DB cluster,
  /// don't specify this parameter. After the green environment is created, you
  /// can individually modify the instance classes of the DB instances within
  /// the green DB cluster.
  ///
  /// Parameter [targetDBParameterGroupName] :
  /// The DB parameter group associated with the DB instance in the green
  /// environment.
  ///
  /// To test parameter changes, specify a DB parameter group that is different
  /// from the one associated with the source DB instance.
  ///
  /// Parameter [targetEngineVersion] :
  /// The engine version of the database in the green environment.
  ///
  /// Specify the engine version to upgrade to in the green environment.
  ///
  /// Parameter [upgradeTargetStorageConfig] :
  /// Whether to upgrade the storage file system configuration on the green
  /// database. This option migrates the green DB instance from the older 32-bit
  /// file system to the preferred configuration. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.UpgradeFileSystem">Upgrading
  /// the storage file system for a DB instance</a>.
  Future<CreateBlueGreenDeploymentResponse> createBlueGreenDeployment({
    required String blueGreenDeploymentName,
    required String source,
    List<Tag>? tags,
    String? targetDBClusterParameterGroupName,
    String? targetDBInstanceClass,
    String? targetDBParameterGroupName,
    String? targetEngineVersion,
    bool? upgradeTargetStorageConfig,
  }) async {
    final $request = <String, String>{
      'BlueGreenDeploymentName': blueGreenDeploymentName,
      'Source': source,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (targetDBClusterParameterGroupName != null)
        'TargetDBClusterParameterGroupName': targetDBClusterParameterGroupName,
      if (targetDBInstanceClass != null)
        'TargetDBInstanceClass': targetDBInstanceClass,
      if (targetDBParameterGroupName != null)
        'TargetDBParameterGroupName': targetDBParameterGroupName,
      if (targetEngineVersion != null)
        'TargetEngineVersion': targetEngineVersion,
      if (upgradeTargetStorageConfig != null)
        'UpgradeTargetStorageConfig': upgradeTargetStorageConfig.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateBlueGreenDeployment',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateBlueGreenDeploymentResult',
    );
    return CreateBlueGreenDeploymentResponse.fromXml($result);
  }

  /// Creates a custom DB engine version (CEV).
  ///
  /// May throw [CustomDBEngineVersionAlreadyExistsFault].
  /// May throw [CustomDBEngineVersionQuotaExceededFault].
  /// May throw [Ec2ImagePropertiesNotSupportedFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [CreateCustomDBEngineVersionFault].
  ///
  /// Parameter [engine] :
  /// The database engine. RDS Custom for Oracle supports the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>custom-oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2-cdb</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [engineVersion] :
  /// The name of your CEV. The name format is 19.<i>customized_string</i>. For
  /// example, a valid CEV name is <code>19.my_cev1</code>. This setting is
  /// required for RDS Custom for Oracle, but optional for Amazon RDS. The
  /// combination of <code>Engine</code> and <code>EngineVersion</code> is
  /// unique per customer per Region.
  ///
  /// Parameter [databaseInstallationFilesS3BucketName] :
  /// The name of an Amazon S3 bucket that contains database installation files
  /// for your CEV. For example, a valid bucket name is
  /// <code>my-custom-installation-files</code>.
  ///
  /// Parameter [databaseInstallationFilesS3Prefix] :
  /// The Amazon S3 directory that contains the database installation files for
  /// your CEV. For example, a valid bucket name is
  /// <code>123456789012/cev1</code>. If this setting isn't specified, no prefix
  /// is assumed.
  ///
  /// Parameter [description] :
  /// An optional description of your CEV.
  ///
  /// Parameter [imageId] :
  /// The ID of the Amazon Machine Image (AMI). For RDS Custom for SQL Server,
  /// an AMI ID is required to create a CEV. For RDS Custom for Oracle, the
  /// default is the most recent AMI available, but you can specify an AMI ID
  /// that was used in a different Oracle CEV. Find the AMIs used by your CEVs
  /// by calling the <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeDBEngineVersions.html">DescribeDBEngineVersions</a>
  /// operation.
  ///
  /// Parameter [kMSKeyId] :
  /// The Amazon Web Services KMS key identifier for an encrypted CEV. A
  /// symmetric encryption KMS key is required for RDS Custom, but optional for
  /// Amazon RDS.
  ///
  /// If you have an existing symmetric encryption KMS key in your account, you
  /// can use it with RDS Custom. No further action is necessary. If you don't
  /// already have a symmetric encryption KMS key in your account, follow the
  /// instructions in <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html#create-symmetric-cmk">
  /// Creating a symmetric encryption KMS key</a> in the <i>Amazon Web Services
  /// Key Management Service Developer Guide</i>.
  ///
  /// You can choose the same symmetric encryption key when you create a CEV and
  /// a DB instance, or choose different keys.
  ///
  /// Parameter [manifest] :
  /// The CEV manifest, which is a JSON document that describes the installation
  /// .zip files stored in Amazon S3. Specify the name/value pairs in a file or
  /// a quoted string. RDS Custom applies the patches in the order in which they
  /// are listed.
  ///
  /// The following JSON fields are valid:
  /// <dl> <dt>MediaImportTemplateVersion</dt> <dd>
  /// Version of the CEV manifest. The date is in the format
  /// <code>YYYY-MM-DD</code>.
  /// </dd> <dt>databaseInstallationFileNames</dt> <dd>
  /// Ordered list of installation files for the CEV.
  /// </dd> <dt>opatchFileNames</dt> <dd>
  /// Ordered list of OPatch installers used for the Oracle DB engine.
  /// </dd> <dt>psuRuPatchFileNames</dt> <dd>
  /// The PSU and RU patches for this CEV.
  /// </dd> <dt>OtherPatchFileNames</dt> <dd>
  /// The patches that are not in the list of PSU and RU patches. Amazon RDS
  /// applies these patches after applying the PSU and RU patches.
  /// </dd> </dl>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.preparing.manifest">
  /// Creating the CEV manifest</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Parameter [sourceCustomDbEngineVersionIdentifier] :
  /// The ARN of a CEV to use as a source for creating a new CEV. You can
  /// specify a different Amazon Machine Imagine (AMI) by using either
  /// <code>Source</code> or <code>UseAwsProvidedLatestImage</code>. You can't
  /// specify a different JSON manifest when you specify
  /// <code>SourceCustomDbEngineVersionIdentifier</code>.
  ///
  /// Parameter [useAwsProvidedLatestImage] :
  /// Specifies whether to use the latest service-provided Amazon Machine Image
  /// (AMI) for the CEV. If you specify <code>UseAwsProvidedLatestImage</code>,
  /// you can't also specify <code>ImageId</code>.
  Future<DBEngineVersion> createCustomDBEngineVersion({
    required String engine,
    required String engineVersion,
    String? databaseInstallationFilesS3BucketName,
    String? databaseInstallationFilesS3Prefix,
    String? description,
    String? imageId,
    String? kMSKeyId,
    String? manifest,
    String? sourceCustomDbEngineVersionIdentifier,
    List<Tag>? tags,
    bool? useAwsProvidedLatestImage,
  }) async {
    final $request = <String, String>{
      'Engine': engine,
      'EngineVersion': engineVersion,
      if (databaseInstallationFilesS3BucketName != null)
        'DatabaseInstallationFilesS3BucketName':
            databaseInstallationFilesS3BucketName,
      if (databaseInstallationFilesS3Prefix != null)
        'DatabaseInstallationFilesS3Prefix': databaseInstallationFilesS3Prefix,
      if (description != null) 'Description': description,
      if (imageId != null) 'ImageId': imageId,
      if (kMSKeyId != null) 'KMSKeyId': kMSKeyId,
      if (manifest != null) 'Manifest': manifest,
      if (sourceCustomDbEngineVersionIdentifier != null)
        'SourceCustomDbEngineVersionIdentifier':
            sourceCustomDbEngineVersionIdentifier,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (useAwsProvidedLatestImage != null)
        'UseAwsProvidedLatestImage': useAwsProvidedLatestImage.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateCustomDBEngineVersion',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateCustomDBEngineVersionResult',
    );
    return DBEngineVersion.fromXml($result);
  }

  /// Creates a new Amazon Aurora DB cluster or Multi-AZ DB cluster.
  ///
  /// If you create an Aurora DB cluster, the request creates an empty cluster.
  /// You must explicitly create the writer instance for your DB cluster using
  /// the <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html">CreateDBInstance</a>
  /// operation. If you create a Multi-AZ DB cluster, the request creates a
  /// writer and two reader DB instances for you, each in a different
  /// Availability Zone.
  ///
  /// You can use the <code>ReplicationSourceIdentifier</code> parameter to
  /// create an Amazon Aurora DB cluster as a read replica of another DB cluster
  /// or Amazon RDS for MySQL or PostgreSQL DB instance. For more information
  /// about Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">What
  /// is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// You can also use the <code>ReplicationSourceIdentifier</code> parameter to
  /// create a Multi-AZ DB cluster read replica with an RDS for MySQL or
  /// PostgreSQL DB instance as the source. For more information about Multi-AZ
  /// DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">Multi-AZ
  /// DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBClusterAlreadyExistsFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  /// May throw [InsufficientStorageClusterCapacityFault].
  /// May throw [DBClusterQuotaExceededFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBSubnetGroupFault].
  /// May throw [InvalidDBSubnetGroupStateFault].
  /// May throw [InvalidSubnet].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [DBClusterParameterGroupNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [GlobalClusterNotFoundFault].
  /// May throw [InvalidGlobalClusterStateFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [OptionGroupNotFoundFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The identifier for this DB cluster. This parameter is stored as a
  /// lowercase string.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 (for Aurora DB clusters) or 1 to 52 (for
  /// Multi-AZ DB clusters) letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster1</code>
  ///
  /// Parameter [engine] :
  /// The database engine to use for this DB cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>aurora-mysql</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>neptune</code> - For information about using Amazon Neptune, see the
  /// <a href="https://docs.aws.amazon.com/neptune/latest/userguide/intro.html">
  /// <i>Amazon Neptune User Guide</i> </a>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [allocatedStorage] :
  /// The amount of storage in gibibytes (GiB) to allocate to each DB instance
  /// in the Multi-AZ DB cluster.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// This setting is required to create a Multi-AZ DB cluster.
  ///
  /// Parameter [autoMinorVersionUpgrade] :
  /// Specifies whether minor engine upgrades are applied automatically to the
  /// DB cluster during the maintenance window. By default, minor engine
  /// upgrades are applied automatically.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [availabilityZones] :
  /// A list of Availability Zones (AZs) where you specifically want to create
  /// DB instances in the DB cluster.
  ///
  /// For information on AZs, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html#Concepts.RegionsAndAvailabilityZones.AvailabilityZones">Availability
  /// Zones</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't specify more than three AZs.
  /// </li>
  /// </ul>
  ///
  /// Parameter [backtrackWindow] :
  /// The target backtrack window, in seconds. To disable backtracking, set this
  /// value to <code>0</code>.
  ///
  /// Valid for Cluster Type: Aurora MySQL DB clusters only
  ///
  /// Default: <code>0</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If specified, this value must be set to a number from 0 to 259,200 (72
  /// hours).
  /// </li>
  /// </ul>
  ///
  /// Parameter [backupRetentionPeriod] :
  /// The number of days for which automated backups are retained.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Default: <code>1</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a value from 1 to 35.
  /// </li>
  /// </ul>
  ///
  /// Parameter [cACertificateIdentifier] :
  /// The CA certificate identifier to use for the DB cluster's server
  /// certificate.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters
  ///
  /// Parameter [characterSetName] :
  /// The name of the character set (<code>CharacterSet</code>) to associate the
  /// DB cluster with.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the DB cluster to snapshots of the
  /// DB cluster. The default is not to copy them.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [dBClusterInstanceClass] :
  /// The compute and memory capacity of each DB instance in the Multi-AZ DB
  /// cluster, for example <code>db.m6gd.xlarge</code>. Not all DB instance
  /// classes are available in all Amazon Web Services Regions, or for all
  /// database engines.
  ///
  /// For the full list of DB instance classes and availability for your engine,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB
  /// instance class</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting is required to create a Multi-AZ DB cluster.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of the DB cluster parameter group to associate with this DB
  /// cluster. If you don't specify a value, then the default DB cluster
  /// parameter group for the specified DB engine and version is used.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DB cluster parameter
  /// group.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSubnetGroupName] :
  /// A DB subnet group to associate with this DB cluster.
  ///
  /// This setting is required to create a Multi-AZ DB cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the name of an existing DB subnet group.
  /// </li>
  /// <li>
  /// Must not be <code>default</code>.
  /// </li>
  /// </ul>
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [dBSystemId] :
  /// Reserved for future use.
  ///
  /// Parameter [databaseName] :
  /// The name for your database of up to 64 alphanumeric characters. A database
  /// named <code>postgres</code> is always created. If this parameter is
  /// specified, an additional database with this name is created.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether the DB cluster has deletion protection enabled. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [domain] :
  /// The Active Directory directory ID to create the DB cluster in.
  ///
  /// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos authentication
  /// to authenticate users that connect to the DB cluster.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos
  /// authentication</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [domainIAMRoleName] :
  /// The name of the IAM role to use when making API calls to the Directory
  /// Service.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [enableCloudwatchLogsExports] :
  /// The list of log types that need to be enabled for exporting to CloudWatch
  /// Logs.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// The following values are valid for each DB engine:
  ///
  /// <ul>
  /// <li>
  /// Aurora MySQL - <code>audit | error | general | slowquery</code>
  /// </li>
  /// <li>
  /// Aurora PostgreSQL - <code>postgresql</code>
  /// </li>
  /// <li>
  /// RDS for MySQL - <code>error | general | slowquery</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - <code>postgresql | upgrade</code>
  /// </li>
  /// </ul>
  /// For more information about exporting CloudWatch Logs for Amazon RDS, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// For more information about exporting CloudWatch Logs for Amazon Aurora,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// Parameter [enableGlobalWriteForwarding] :
  /// Specifies whether to enable this DB cluster to forward write operations to
  /// the primary cluster of a global cluster (Aurora global database). By
  /// default, write operations are not allowed on Aurora DB clusters that are
  /// secondary clusters in an Aurora global database.
  ///
  /// You can set this value only on Aurora DB clusters that are members of an
  /// Aurora global database. With this parameter enabled, a secondary cluster
  /// can forward writes to the current primary cluster, and the resulting
  /// changes are replicated back to this cluster. For the primary DB cluster of
  /// an Aurora global database, this value is used immediately if the primary
  /// is demoted by a global cluster API operation, but it does nothing until
  /// then.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [enableHttpEndpoint] :
  /// Specifies whether to enable the HTTP endpoint for the DB cluster. By
  /// default, the HTTP endpoint isn't enabled.
  ///
  /// When enabled, the HTTP endpoint provides a connectionless web service API
  /// (RDS Data API) for running SQL queries on the DB cluster. You can also
  /// query your database from inside the RDS console with the RDS query editor.
  ///
  /// RDS Data API is supported with the following DB clusters:
  ///
  /// <ul>
  /// <li>
  /// Aurora PostgreSQL Serverless v2 and provisioned
  /// </li>
  /// <li>
  /// Aurora PostgreSQL and Aurora MySQL Serverless v1
  /// </li>
  /// </ul>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using
  /// RDS Data API</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [enableLimitlessDatabase] :
  /// Specifies whether to enable Aurora Limitless Database. You must enable
  /// Aurora Limitless Database to create a DB shard group.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [enableLocalWriteForwarding] :
  /// Specifies whether read replicas can forward write operations to the writer
  /// DB instance in the DB cluster. By default, write operations aren't allowed
  /// on reader DB instances.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [enablePerformanceInsights] :
  /// Specifies whether to turn on Performance Insights for the DB cluster.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">
  /// Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [engineLifecycleSupport] :
  /// The life cycle type for this DB cluster.
  /// <note>
  /// By default, this value is set to
  /// <code>open-source-rds-extended-support</code>, which enrolls your DB
  /// cluster into Amazon RDS Extended Support. At the end of standard support,
  /// you can avoid charges for Extended Support by setting the value to
  /// <code>open-source-rds-extended-support-disabled</code>. In this case,
  /// creating the DB cluster will fail if the DB major version is past its end
  /// of standard support date.
  /// </note>
  /// You can use this setting to enroll your DB cluster into Amazon RDS
  /// Extended Support. With RDS Extended Support, you can run the selected
  /// major engine version on your DB cluster past the end of standard support
  /// for that engine version. For more information, see the following sections:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (PostgreSQL only) - <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i>
  /// </li>
  /// <li>
  /// Amazon RDS - <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>
  /// </li>
  /// </ul>
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Valid Values: <code>open-source-rds-extended-support |
  /// open-source-rds-extended-support-disabled</code>
  ///
  /// Default: <code>open-source-rds-extended-support</code>
  ///
  /// Parameter [engineMode] :
  /// The DB engine mode of the DB cluster, either <code>provisioned</code> or
  /// <code>serverless</code>.
  ///
  /// The <code>serverless</code> engine mode only applies for Aurora Serverless
  /// v1 DB clusters. Aurora Serverless v2 DB clusters use the
  /// <code>provisioned</code> engine mode.
  ///
  /// For information about limitations and requirements for Serverless DB
  /// clusters, see the following sections in the <i>Amazon Aurora User
  /// Guide</i>:
  ///
  /// <ul>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations">Limitations
  /// of Aurora Serverless v1</a>
  /// </li>
  /// <li>
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.requirements.html">Requirements
  /// for Aurora Serverless v2</a>
  /// </li>
  /// </ul>
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [engineVersion] :
  /// The version number of the database engine to use.
  ///
  /// To list all of the available engine versions for Aurora MySQL version 2
  /// (5.7-compatible) and version 3 (MySQL 8.0-compatible), use the following
  /// command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// You can supply either <code>5.7</code> or <code>8.0</code> to use the
  /// default engine version for Aurora MySQL version 2 or version 3,
  /// respectively.
  ///
  /// To list all of the available engine versions for Aurora PostgreSQL, use
  /// the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql
  /// --query "DBEngineVersions[].EngineVersion"</code>
  ///
  /// To list all of the available engine versions for RDS for MySQL, use the
  /// following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine mysql --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// To list all of the available engine versions for RDS for PostgreSQL, use
  /// the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine postgres --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// For information about a specific engine, see the following topics:
  ///
  /// <ul>
  /// <li>
  /// Aurora MySQL - see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html">Database
  /// engine updates for Amazon Aurora MySQL</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  /// </li>
  /// <li>
  /// Aurora PostgreSQL - see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html">Amazon
  /// Aurora PostgreSQL releases and engine versions</a> in the <i>Amazon Aurora
  /// User Guide</i>.
  /// </li>
  /// <li>
  /// RDS for MySQL - see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">Amazon
  /// RDS for MySQL</a> in the <i>Amazon RDS User Guide</i>.
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon
  /// RDS for PostgreSQL</a> in the <i>Amazon RDS User Guide</i>.
  /// </li>
  /// </ul>
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [globalClusterIdentifier] :
  /// The global cluster ID of an Aurora cluster that becomes the primary
  /// cluster in the new global database cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [iops] :
  /// The amount of Provisioned IOPS (input/output operations per second) to be
  /// initially allocated for each DB instance in the Multi-AZ DB cluster.
  ///
  /// For information about valid IOPS values, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Provisioned
  /// IOPS storage</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting is required to create a Multi-AZ DB cluster.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a multiple between .5 and 50 of the storage amount for the DB
  /// cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier for an encrypted DB cluster.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// When a KMS key isn't specified in <code>KmsKeyId</code>:
  ///
  /// <ul>
  /// <li>
  /// If <code>ReplicationSourceIdentifier</code> identifies an encrypted
  /// source, then Amazon RDS uses the KMS key used to encrypt the source.
  /// Otherwise, Amazon RDS uses your default KMS key.
  /// </li>
  /// <li>
  /// If the <code>StorageEncrypted</code> parameter is enabled and
  /// <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS
  /// uses your default KMS key.
  /// </li>
  /// </ul>
  /// There is a default KMS key for your Amazon Web Services account. Your
  /// Amazon Web Services account has a different default KMS key for each
  /// Amazon Web Services Region.
  ///
  /// If you create a read replica of an encrypted DB cluster in another Amazon
  /// Web Services Region, make sure to set <code>KmsKeyId</code> to a KMS key
  /// identifier that is valid in the destination Amazon Web Services Region.
  /// This KMS key is used to encrypt the read replica in that Amazon Web
  /// Services Region.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [manageMasterUserPassword] :
  /// Specifies whether to manage the master user password with Amazon Web
  /// Services Secrets Manager.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// Aurora User Guide.</i>
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't manage the master user password with Amazon Web Services Secrets
  /// Manager if <code>MasterUserPassword</code> is specified.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserPassword] :
  /// The password for the master database user.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 8 to 41 characters.
  /// </li>
  /// <li>
  /// Can contain any printable ASCII character except "/", """, or "@".
  /// </li>
  /// <li>
  /// Can't be specified if <code>ManageMasterUserPassword</code> is turned on.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserSecretKmsKeyId] :
  /// The Amazon Web Services KMS key identifier to encrypt a secret that is
  /// automatically generated and managed in Amazon Web Services Secrets
  /// Manager.
  ///
  /// This setting is valid only if the master user password is managed by RDS
  /// in Amazon Web Services Secrets Manager for the DB cluster.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the
  /// <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If
  /// the secret is in a different Amazon Web Services account, then you can't
  /// use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and
  /// you must use a customer managed KMS key.
  ///
  /// There is a default KMS key for your Amazon Web Services account. Your
  /// Amazon Web Services account has a different default KMS key for each
  /// Amazon Web Services Region.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [masterUsername] :
  /// The name of the master user for the DB cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 16 letters or numbers.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't be a reserved word for the chosen database engine.
  /// </li>
  /// </ul>
  ///
  /// Parameter [monitoringInterval] :
  /// The interval, in seconds, between points when Enhanced Monitoring metrics
  /// are collected for the DB cluster. To turn off collecting Enhanced
  /// Monitoring metrics, specify <code>0</code>.
  ///
  /// If <code>MonitoringRoleArn</code> is specified, also set
  /// <code>MonitoringInterval</code> to a value other than <code>0</code>.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Valid Values: <code>0 | 1 | 5 | 10 | 15 | 30 | 60</code>
  ///
  /// Default: <code>0</code>
  ///
  /// Parameter [monitoringRoleArn] :
  /// The Amazon Resource Name (ARN) for the IAM role that permits RDS to send
  /// Enhanced Monitoring metrics to Amazon CloudWatch Logs. An example is
  /// <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on
  /// creating a monitoring role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting
  /// up and enabling Enhanced Monitoring</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// If <code>MonitoringInterval</code> is set to a value other than
  /// <code>0</code>, supply a <code>MonitoringRoleArn</code> value.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [networkType] :
  /// The network type of the DB cluster.
  ///
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4
  /// protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User
  /// Guide.</i>
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Valid Values: <code>IPV4 | DUAL</code>
  ///
  /// Parameter [optionGroupName] :
  /// The option group to associate the DB cluster with.
  ///
  /// DB clusters are associated with a default option group that can't be
  /// modified.
  ///
  /// Parameter [performanceInsightsKMSKeyId] :
  /// The Amazon Web Services KMS key identifier for encryption of Performance
  /// Insights data.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  ///
  /// If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>,
  /// then Amazon RDS uses your default KMS key. There is a default KMS key for
  /// your Amazon Web Services account. Your Amazon Web Services account has a
  /// different default KMS key for each Amazon Web Services Region.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [performanceInsightsRetentionPeriod] :
  /// The number of days to retain Performance Insights data.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>7</code>
  /// </li>
  /// <li>
  /// <i>month</i> * 31, where <i>month</i> is a number of months from 1-23.
  /// Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months *
  /// 31), <code>589</code> (19 months * 31)
  /// </li>
  /// <li>
  /// <code>731</code>
  /// </li>
  /// </ul>
  /// Default: <code>7</code> days
  ///
  /// If you specify a retention period that isn't valid, such as
  /// <code>94</code>, Amazon RDS issues an error.
  ///
  /// Parameter [port] :
  /// The port number on which the instances in the DB cluster accept
  /// connections.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Valid Values: <code>1150-65535</code>
  ///
  /// Default:
  ///
  /// <ul>
  /// <li>
  /// RDS for MySQL and Aurora MySQL - <code>3306</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL and Aurora PostgreSQL - <code>5432</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [preSignedUrl] :
  /// When you are replicating a DB cluster from one Amazon Web Services
  /// GovCloud (US) Region to another, an URL that contains a Signature Version
  /// 4 signed request for the <code>CreateDBCluster</code> operation to be
  /// called in the source Amazon Web Services Region where the DB cluster is
  /// replicated from. Specify <code>PreSignedUrl</code> only when you are
  /// performing cross-Region replication from an encrypted DB cluster.
  ///
  /// The presigned URL must be a valid request for the
  /// <code>CreateDBCluster</code> API operation that can run in the source
  /// Amazon Web Services Region that contains the encrypted DB cluster to copy.
  ///
  /// The presigned URL request must contain the following parameter values:
  ///
  /// <ul>
  /// <li>
  /// <code>KmsKeyId</code> - The KMS key identifier for the KMS key to use to
  /// encrypt the copy of the DB cluster in the destination Amazon Web Services
  /// Region. This should refer to the same KMS key for both the
  /// <code>CreateDBCluster</code> operation that is called in the destination
  /// Amazon Web Services Region, and the operation contained in the presigned
  /// URL.
  /// </li>
  /// <li>
  /// <code>DestinationRegion</code> - The name of the Amazon Web Services
  /// Region that Aurora read replica will be created in.
  /// </li>
  /// <li>
  /// <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for
  /// the encrypted DB cluster to be copied. This identifier must be in the
  /// Amazon Resource Name (ARN) format for the source Amazon Web Services
  /// Region. For example, if you are copying an encrypted DB cluster from the
  /// us-west-2 Amazon Web Services Region, then your
  /// <code>ReplicationSourceIdentifier</code> would look like Example:
  /// <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.
  /// </li>
  /// </ul>
  /// To learn how to generate a Signature Version 4 signed request, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
  /// Authenticating Requests: Using Query Parameters (Amazon Web Services
  /// Signature Version 4)</a> and <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
  /// Signature Version 4 Signing Process</a>.
  /// <note>
  /// If you are using an Amazon Web Services SDK tool or the CLI, you can
  /// specify <code>SourceRegion</code> (or <code>--source-region</code> for the
  /// CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying
  /// <code>SourceRegion</code> autogenerates a presigned URL that is a valid
  /// request for the operation that can run in the source Amazon Web Services
  /// Region.
  /// </note>
  /// Valid for Cluster Type: Aurora DB clusters only
  /// <note>
  /// If you supply a value for this operation's <code>SourceRegion</code>
  /// parameter, a pre-signed URL will be calculated on your behalf.
  /// </note>
  ///
  /// Parameter [preferredBackupWindow] :
  /// The daily time range during which automated backups are created if
  /// automated backups are enabled using the <code>BackupRetentionPeriod</code>
  /// parameter.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// The default is a 30-minute window selected at random from an 8-hour block
  /// of time for each Amazon Web Services Region. To view the time blocks
  /// available, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
  /// Backup window</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>hh24:mi-hh24:mi</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred maintenance window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [preferredMaintenanceWindow] :
  /// The weekly time range during which system maintenance can occur.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// The default is a 30-minute window selected at random from an 8-hour block
  /// of time for each Amazon Web Services Region, occurring on a random day of
  /// the week. To see the time blocks available, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
  /// Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.
  /// </li>
  /// <li>
  /// Days must be one of <code>Mon | Tue | Wed | Thu | Fri | Sat | Sun</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB cluster is publicly accessible.
  ///
  /// When the DB cluster is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB cluster's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB cluster's VPC. Access to the DB cluster is ultimately
  /// controlled by the security group it uses. That public access isn't
  /// permitted if the security group assigned to the DB cluster doesn't permit
  /// it.
  ///
  /// When the DB cluster isn't publicly accessible, it is an internal DB
  /// cluster with a DNS name that resolves to a private IP address.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Default: The default behavior varies depending on whether
  /// <code>DBSubnetGroupName</code> is specified.
  ///
  /// If <code>DBSubnetGroupName</code> isn't specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the default VPC in the target Region doesn’t have an internet gateway
  /// attached to it, the DB cluster is private.
  /// </li>
  /// <li>
  /// If the default VPC in the target Region has an internet gateway attached
  /// to it, the DB cluster is public.
  /// </li>
  /// </ul>
  /// If <code>DBSubnetGroupName</code> is specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the subnets are part of a VPC that doesn’t have an internet gateway
  /// attached to it, the DB cluster is private.
  /// </li>
  /// <li>
  /// If the subnets are part of a VPC that has an internet gateway attached to
  /// it, the DB cluster is public.
  /// </li>
  /// </ul>
  ///
  /// Parameter [rdsCustomClusterConfiguration] :
  /// Reserved for future use.
  ///
  /// Parameter [replicationSourceIdentifier] :
  /// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if
  /// this DB cluster is created as a read replica.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [scalingConfiguration] :
  /// For DB clusters in <code>serverless</code> DB engine mode, the scaling
  /// properties of the DB cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [sourceRegion] :
  /// The ID of the region that contains the source for the read replica.
  ///
  /// Parameter [storageEncrypted] :
  /// Specifies whether the DB cluster is encrypted.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [storageType] :
  /// The storage type to associate with the DB cluster.
  ///
  /// For information on storage types for Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Overview.StorageReliability.html#aurora-storage-type">Storage
  /// configurations for Amazon Aurora DB clusters</a>. For information on
  /// storage types for Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/create-multi-az-db-cluster.html#create-multi-az-db-cluster-settings">Settings
  /// for creating Multi-AZ DB clusters</a>.
  ///
  /// This setting is required to create a Multi-AZ DB cluster.
  ///
  /// When specified for a Multi-AZ DB cluster, a value for the
  /// <code>Iops</code> parameter is required.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// Aurora DB clusters - <code>aurora | aurora-iopt1</code>
  /// </li>
  /// <li>
  /// Multi-AZ DB clusters - <code>io1 | io2 | gp3</code>
  /// </li>
  /// </ul>
  /// Default:
  ///
  /// <ul>
  /// <li>
  /// Aurora DB clusters - <code>aurora</code>
  /// </li>
  /// <li>
  /// Multi-AZ DB clusters - <code>io1</code>
  /// </li>
  /// </ul> <note>
  /// When you create an Aurora DB cluster with the storage type set to
  /// <code>aurora-iopt1</code>, the storage type is returned in the response.
  /// The storage type isn't returned when you set it to <code>aurora</code>.
  /// </note>
  ///
  /// Parameter [tags] :
  /// Tags to assign to the DB cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of EC2 VPC security groups to associate with this DB cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  Future<CreateDBClusterResult> createDBCluster({
    required String dBClusterIdentifier,
    required String engine,
    int? allocatedStorage,
    bool? autoMinorVersionUpgrade,
    List<String>? availabilityZones,
    int? backtrackWindow,
    int? backupRetentionPeriod,
    String? cACertificateIdentifier,
    String? characterSetName,
    bool? copyTagsToSnapshot,
    String? dBClusterInstanceClass,
    String? dBClusterParameterGroupName,
    String? dBSubnetGroupName,
    String? dBSystemId,
    String? databaseName,
    bool? deletionProtection,
    String? domain,
    String? domainIAMRoleName,
    List<String>? enableCloudwatchLogsExports,
    bool? enableGlobalWriteForwarding,
    bool? enableHttpEndpoint,
    bool? enableIAMDatabaseAuthentication,
    bool? enableLimitlessDatabase,
    bool? enableLocalWriteForwarding,
    bool? enablePerformanceInsights,
    String? engineLifecycleSupport,
    String? engineMode,
    String? engineVersion,
    String? globalClusterIdentifier,
    int? iops,
    String? kmsKeyId,
    bool? manageMasterUserPassword,
    String? masterUserPassword,
    String? masterUserSecretKmsKeyId,
    String? masterUsername,
    int? monitoringInterval,
    String? monitoringRoleArn,
    String? networkType,
    String? optionGroupName,
    String? performanceInsightsKMSKeyId,
    int? performanceInsightsRetentionPeriod,
    int? port,
    String? preSignedUrl,
    String? preferredBackupWindow,
    String? preferredMaintenanceWindow,
    bool? publiclyAccessible,
    RdsCustomClusterConfiguration? rdsCustomClusterConfiguration,
    String? replicationSourceIdentifier,
    ScalingConfiguration? scalingConfiguration,
    ServerlessV2ScalingConfiguration? serverlessV2ScalingConfiguration,
    String? sourceRegion,
    bool? storageEncrypted,
    String? storageType,
    List<Tag>? tags,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      'Engine': engine,
      if (allocatedStorage != null)
        'AllocatedStorage': allocatedStorage.toString(),
      if (autoMinorVersionUpgrade != null)
        'AutoMinorVersionUpgrade': autoMinorVersionUpgrade.toString(),
      if (availabilityZones != null)
        if (availabilityZones.isEmpty)
          'AvailabilityZones': ''
        else
          for (var i1 = 0; i1 < availabilityZones.length; i1++)
            'AvailabilityZones.AvailabilityZone.${i1 + 1}':
                availabilityZones[i1],
      if (backtrackWindow != null)
        'BacktrackWindow': backtrackWindow.toString(),
      if (backupRetentionPeriod != null)
        'BackupRetentionPeriod': backupRetentionPeriod.toString(),
      if (cACertificateIdentifier != null)
        'CACertificateIdentifier': cACertificateIdentifier,
      if (characterSetName != null) 'CharacterSetName': characterSetName,
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (dBClusterInstanceClass != null)
        'DBClusterInstanceClass': dBClusterInstanceClass,
      if (dBClusterParameterGroupName != null)
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (dBSystemId != null) 'DBSystemId': dBSystemId,
      if (databaseName != null) 'DatabaseName': databaseName,
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (domain != null) 'Domain': domain,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (enableCloudwatchLogsExports != null)
        if (enableCloudwatchLogsExports.isEmpty)
          'EnableCloudwatchLogsExports': ''
        else
          for (var i1 = 0; i1 < enableCloudwatchLogsExports.length; i1++)
            'EnableCloudwatchLogsExports.member.${i1 + 1}':
                enableCloudwatchLogsExports[i1],
      if (enableGlobalWriteForwarding != null)
        'EnableGlobalWriteForwarding': enableGlobalWriteForwarding.toString(),
      if (enableHttpEndpoint != null)
        'EnableHttpEndpoint': enableHttpEndpoint.toString(),
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (enableLimitlessDatabase != null)
        'EnableLimitlessDatabase': enableLimitlessDatabase.toString(),
      if (enableLocalWriteForwarding != null)
        'EnableLocalWriteForwarding': enableLocalWriteForwarding.toString(),
      if (enablePerformanceInsights != null)
        'EnablePerformanceInsights': enablePerformanceInsights.toString(),
      if (engineLifecycleSupport != null)
        'EngineLifecycleSupport': engineLifecycleSupport,
      if (engineMode != null) 'EngineMode': engineMode,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (globalClusterIdentifier != null)
        'GlobalClusterIdentifier': globalClusterIdentifier,
      if (iops != null) 'Iops': iops.toString(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (manageMasterUserPassword != null)
        'ManageMasterUserPassword': manageMasterUserPassword.toString(),
      if (masterUserPassword != null) 'MasterUserPassword': masterUserPassword,
      if (masterUserSecretKmsKeyId != null)
        'MasterUserSecretKmsKeyId': masterUserSecretKmsKeyId,
      if (masterUsername != null) 'MasterUsername': masterUsername,
      if (monitoringInterval != null)
        'MonitoringInterval': monitoringInterval.toString(),
      if (monitoringRoleArn != null) 'MonitoringRoleArn': monitoringRoleArn,
      if (networkType != null) 'NetworkType': networkType,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (performanceInsightsKMSKeyId != null)
        'PerformanceInsightsKMSKeyId': performanceInsightsKMSKeyId,
      if (performanceInsightsRetentionPeriod != null)
        'PerformanceInsightsRetentionPeriod':
            performanceInsightsRetentionPeriod.toString(),
      if (port != null) 'Port': port.toString(),
      if (preSignedUrl != null) 'PreSignedUrl': preSignedUrl,
      if (preferredBackupWindow != null)
        'PreferredBackupWindow': preferredBackupWindow,
      if (preferredMaintenanceWindow != null)
        'PreferredMaintenanceWindow': preferredMaintenanceWindow,
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
      if (rdsCustomClusterConfiguration != null)
        for (var e1 in rdsCustomClusterConfiguration.toQueryMap().entries)
          'RdsCustomClusterConfiguration.${e1.key}': e1.value,
      if (replicationSourceIdentifier != null)
        'ReplicationSourceIdentifier': replicationSourceIdentifier,
      if (scalingConfiguration != null)
        for (var e1 in scalingConfiguration.toQueryMap().entries)
          'ScalingConfiguration.${e1.key}': e1.value,
      if (serverlessV2ScalingConfiguration != null)
        for (var e1 in serverlessV2ScalingConfiguration.toQueryMap().entries)
          'ServerlessV2ScalingConfiguration.${e1.key}': e1.value,
      if (sourceRegion != null) 'SourceRegion': sourceRegion,
      if (storageEncrypted != null)
        'StorageEncrypted': storageEncrypted.toString(),
      if (storageType != null) 'StorageType': storageType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBClusterResult',
    );
    return CreateDBClusterResult.fromXml($result);
  }

  /// Creates a new custom endpoint and associates it with an Amazon Aurora DB
  /// cluster.
  /// <note>
  /// This action applies only to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [DBClusterEndpointQuotaExceededFault].
  /// May throw [DBClusterEndpointAlreadyExistsFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBClusterEndpointIdentifier] :
  /// The identifier to use for the new endpoint. This parameter is stored as a
  /// lowercase string.
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier of the DB cluster associated with the endpoint.
  /// This parameter is stored as a lowercase string.
  ///
  /// Parameter [endpointType] :
  /// The type of the endpoint, one of: <code>READER</code>,
  /// <code>WRITER</code>, <code>ANY</code>.
  ///
  /// Parameter [excludedMembers] :
  /// List of DB instance identifiers that aren't part of the custom endpoint
  /// group. All other eligible instances are reachable through the custom
  /// endpoint. This parameter is relevant only if the list of static members is
  /// empty.
  ///
  /// Parameter [staticMembers] :
  /// List of DB instance identifiers that are part of the custom endpoint
  /// group.
  ///
  /// Parameter [tags] :
  /// The tags to be assigned to the Amazon RDS resource.
  Future<DBClusterEndpoint> createDBClusterEndpoint({
    required String dBClusterEndpointIdentifier,
    required String dBClusterIdentifier,
    required String endpointType,
    List<String>? excludedMembers,
    List<String>? staticMembers,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'DBClusterEndpointIdentifier': dBClusterEndpointIdentifier,
      'DBClusterIdentifier': dBClusterIdentifier,
      'EndpointType': endpointType,
      if (excludedMembers != null)
        if (excludedMembers.isEmpty)
          'ExcludedMembers': ''
        else
          for (var i1 = 0; i1 < excludedMembers.length; i1++)
            'ExcludedMembers.member.${i1 + 1}': excludedMembers[i1],
      if (staticMembers != null)
        if (staticMembers.isEmpty)
          'StaticMembers': ''
        else
          for (var i1 = 0; i1 < staticMembers.length; i1++)
            'StaticMembers.member.${i1 + 1}': staticMembers[i1],
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBClusterEndpoint',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBClusterEndpointResult',
    );
    return DBClusterEndpoint.fromXml($result);
  }

  /// Creates a new DB cluster parameter group.
  ///
  /// Parameters in a DB cluster parameter group apply to all of the instances
  /// in a DB cluster.
  ///
  /// A DB cluster parameter group is initially created with the default
  /// parameters for the database engine used by instances in the DB cluster. To
  /// provide custom values for any of the parameters, you must modify the group
  /// after creating it using <code>ModifyDBClusterParameterGroup</code>. Once
  /// you've created a DB cluster parameter group, you need to associate it with
  /// your DB cluster using <code>ModifyDBCluster</code>.
  ///
  /// When you associate a new DB cluster parameter group with a running Aurora
  /// DB cluster, reboot the DB instances in the DB cluster without failover for
  /// the new DB cluster parameter group and associated settings to take effect.
  ///
  /// When you associate a new DB cluster parameter group with a running
  /// Multi-AZ DB cluster, reboot the DB cluster without failover for the new DB
  /// cluster parameter group and associated settings to take effect.
  /// <important>
  /// After you create a DB cluster parameter group, you should wait at least 5
  /// minutes before creating your first DB cluster that uses that DB cluster
  /// parameter group as the default parameter group. This allows Amazon RDS to
  /// fully complete the create action before the DB cluster parameter group is
  /// used as the default for a new DB cluster. This is especially important for
  /// parameters that are critical when creating the default database for a DB
  /// cluster, such as the character set for the default database defined by the
  /// <code>character_set_database</code> parameter. You can use the
  /// <i>Parameter Groups</i> option of the <a
  /// href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
  /// <code>DescribeDBClusterParameters</code> operation to verify that your DB
  /// cluster parameter group has been created or modified.
  /// </important>
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBParameterGroupQuotaExceededFault].
  /// May throw [DBParameterGroupAlreadyExistsFault].
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of the DB cluster parameter group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must not match the name of an existing DB cluster parameter group.
  /// </li>
  /// </ul> <note>
  /// This value is stored as a lowercase string.
  /// </note>
  ///
  /// Parameter [dBParameterGroupFamily] :
  /// The DB cluster parameter group family name. A DB cluster parameter group
  /// can be associated with one and only one DB cluster parameter group family,
  /// and can be applied only to a DB cluster running a database engine and
  /// engine version compatible with that DB cluster parameter group family.
  ///
  /// <b>Aurora MySQL</b>
  ///
  /// Example: <code>aurora-mysql5.7</code>, <code>aurora-mysql8.0</code>
  ///
  /// <b>Aurora PostgreSQL</b>
  ///
  /// Example: <code>aurora-postgresql14</code>
  ///
  /// <b>RDS for MySQL</b>
  ///
  /// Example: <code>mysql8.0</code>
  ///
  /// <b>RDS for PostgreSQL</b>
  ///
  /// Example: <code>postgres13</code>
  ///
  /// To list all of the available parameter group families for a DB engine, use
  /// the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --query
  /// "DBEngineVersions[].DBParameterGroupFamily" --engine &lt;engine&gt;</code>
  ///
  /// For example, to list all of the available parameter group families for the
  /// Aurora PostgreSQL DB engine, use the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --query
  /// "DBEngineVersions[].DBParameterGroupFamily" --engine
  /// aurora-postgresql</code>
  /// <note>
  /// The output contains duplicates.
  /// </note>
  /// The following are the valid DB engine values:
  ///
  /// <ul>
  /// <li>
  /// <code>aurora-mysql</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [description] :
  /// The description for the DB cluster parameter group.
  ///
  /// Parameter [tags] :
  /// Tags to assign to the DB cluster parameter group.
  Future<CreateDBClusterParameterGroupResult> createDBClusterParameterGroup({
    required String dBClusterParameterGroupName,
    required String dBParameterGroupFamily,
    required String description,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'DBClusterParameterGroupName': dBClusterParameterGroupName,
      'DBParameterGroupFamily': dBParameterGroupFamily,
      'Description': description,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBClusterParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBClusterParameterGroupResult',
    );
    return CreateDBClusterParameterGroupResult.fromXml($result);
  }

  /// Creates a snapshot of a DB cluster.
  ///
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBClusterSnapshotAlreadyExistsFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [SnapshotQuotaExceededFault].
  /// May throw [InvalidDBClusterSnapshotStateFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The identifier of the DB cluster to create a snapshot for. This parameter
  /// isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DBCluster.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster1</code>
  ///
  /// Parameter [dBClusterSnapshotIdentifier] :
  /// The identifier of the DB cluster snapshot. This parameter is stored as a
  /// lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster1-snapshot1</code>
  ///
  /// Parameter [tags] :
  /// The tags to be assigned to the DB cluster snapshot.
  Future<CreateDBClusterSnapshotResult> createDBClusterSnapshot({
    required String dBClusterIdentifier,
    required String dBClusterSnapshotIdentifier,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBClusterSnapshot',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBClusterSnapshotResult',
    );
    return CreateDBClusterSnapshotResult.fromXml($result);
  }

  /// Creates a new DB instance.
  ///
  /// The new DB instance can be an RDS DB instance, or it can be a DB instance
  /// in an Aurora DB cluster. For an Aurora DB cluster, you can call this
  /// operation multiple times to add more than one DB instance to the cluster.
  ///
  /// For more information about creating an RDS DB instance, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreateDBInstance.html">
  /// Creating an Amazon RDS DB instance</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// For more information about creating a DB instance in an Aurora DB cluster,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.CreateInstance.html">
  /// Creating an Amazon Aurora DB cluster</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// May throw [DBInstanceAlreadyExistsFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [DBSecurityGroupNotFoundFault].
  /// May throw [InstanceQuotaExceededFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidSubnet].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [ProvisionedIopsNotAvailableInAZFault].
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [StorageTypeNotSupportedFault].
  /// May throw [AuthorizationNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [BackupPolicyNotFoundFault].
  /// May throw [NetworkTypeNotSupported].
  /// May throw [CertificateNotFoundFault].
  /// May throw [TenantDatabaseQuotaExceededFault].
  ///
  /// Parameter [dBInstanceClass] :
  /// The compute and memory capacity of the DB instance, for example
  /// <code>db.m5.large</code>. Not all DB instance classes are available in all
  /// Amazon Web Services Regions, or for all database engines. For the full
  /// list of DB instance classes, and availability for your engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB
  /// instance classes</a> in the <i>Amazon RDS User Guide</i> or <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.html">Aurora
  /// DB instance classes</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The identifier for this DB instance. This parameter is stored as a
  /// lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>mydbinstance</code>
  ///
  /// Parameter [engine] :
  /// The database engine to use for this DB instance.
  ///
  /// Not every database engine is available in every Amazon Web Services
  /// Region.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>aurora-mysql</code> (for Aurora MySQL DB instances)
  /// </li>
  /// <li>
  /// <code>aurora-postgresql</code> (for Aurora PostgreSQL DB instances)
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee</code> (for RDS Custom for Oracle DB instances)
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee-cdb</code> (for RDS Custom for Oracle DB instances)
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2</code> (for RDS Custom for Oracle DB instances)
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2-cdb</code> (for RDS Custom for Oracle DB
  /// instances)
  /// </li>
  /// <li>
  /// <code>custom-sqlserver-ee</code> (for RDS Custom for SQL Server DB
  /// instances)
  /// </li>
  /// <li>
  /// <code>custom-sqlserver-se</code> (for RDS Custom for SQL Server DB
  /// instances)
  /// </li>
  /// <li>
  /// <code>custom-sqlserver-web</code> (for RDS Custom for SQL Server DB
  /// instances)
  /// </li>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mariadb</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [allocatedStorage] :
  /// The amount of storage in gibibytes (GiB) to allocate for the DB instance.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. Aurora cluster
  /// volumes automatically grow as the amount of data in your database
  /// increases, though you are only charged for the space that you use in an
  /// Aurora cluster volume.
  /// <dl> <dt>Amazon RDS Custom</dt> <dd>
  /// Constraints to the amount of storage for each storage type are the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// General Purpose (SSD) storage (gp2, gp3): Must be an integer from 40 to
  /// 65536 for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.
  /// </li>
  /// <li>
  /// Provisioned IOPS storage (io1, io2): Must be an integer from 40 to 65536
  /// for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.
  /// </li>
  /// </ul> </dd> <dt>RDS for Db2</dt> <dd>
  /// Constraints to the amount of storage for each storage type are the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// General Purpose (SSD) storage (gp3): Must be an integer from 20 to 65536.
  /// </li>
  /// <li>
  /// Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.
  /// </li>
  /// </ul> </dd> <dt>RDS for MariaDB</dt> <dd>
  /// Constraints to the amount of storage for each storage type are the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to
  /// 65536.
  /// </li>
  /// <li>
  /// Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.
  /// </li>
  /// <li>
  /// Magnetic storage (standard): Must be an integer from 5 to 3072.
  /// </li>
  /// </ul> </dd> <dt>RDS for MySQL</dt> <dd>
  /// Constraints to the amount of storage for each storage type are the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to
  /// 65536.
  /// </li>
  /// <li>
  /// Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.
  /// </li>
  /// <li>
  /// Magnetic storage (standard): Must be an integer from 5 to 3072.
  /// </li>
  /// </ul> </dd> <dt>RDS for Oracle</dt> <dd>
  /// Constraints to the amount of storage for each storage type are the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to
  /// 65536.
  /// </li>
  /// <li>
  /// Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.
  /// </li>
  /// <li>
  /// Magnetic storage (standard): Must be an integer from 10 to 3072.
  /// </li>
  /// </ul> </dd> <dt>RDS for PostgreSQL</dt> <dd>
  /// Constraints to the amount of storage for each storage type are the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to
  /// 65536.
  /// </li>
  /// <li>
  /// Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.
  /// </li>
  /// <li>
  /// Magnetic storage (standard): Must be an integer from 5 to 3072.
  /// </li>
  /// </ul> </dd> <dt>RDS for SQL Server</dt> <dd>
  /// Constraints to the amount of storage for each storage type are the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// General Purpose (SSD) storage (gp2, gp3):
  ///
  /// <ul>
  /// <li>
  /// Enterprise and Standard editions: Must be an integer from 20 to 16384.
  /// </li>
  /// <li>
  /// Web and Express editions: Must be an integer from 20 to 16384.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Provisioned IOPS storage (io1, io2):
  ///
  /// <ul>
  /// <li>
  /// Enterprise and Standard editions: Must be an integer from 100 to 16384.
  /// </li>
  /// <li>
  /// Web and Express editions: Must be an integer from 100 to 16384.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// Magnetic storage (standard):
  ///
  /// <ul>
  /// <li>
  /// Enterprise and Standard editions: Must be an integer from 20 to 1024.
  /// </li>
  /// <li>
  /// Web and Express editions: Must be an integer from 20 to 1024.
  /// </li>
  /// </ul> </li>
  /// </ul> </dd> </dl>
  ///
  /// Parameter [autoMinorVersionUpgrade] :
  /// Specifies whether minor engine upgrades are applied automatically to the
  /// DB instance during the maintenance window. By default, minor engine
  /// upgrades are applied automatically.
  ///
  /// If you create an RDS Custom DB instance, you must set
  /// <code>AutoMinorVersionUpgrade</code> to <code>false</code>.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone (AZ) where the database will be created. For
  /// information on Amazon Web Services Regions and Availability Zones, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions
  /// and Availability Zones</a>.
  ///
  /// For Amazon Aurora, each Aurora DB cluster hosts copies of its storage in
  /// three separate Availability Zones. Specify one of these Availability
  /// Zones. Aurora automatically chooses an appropriate Availability Zone if
  /// you don't specify one.
  ///
  /// Default: A random, system-chosen Availability Zone in the endpoint's
  /// Amazon Web Services Region.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// The <code>AvailabilityZone</code> parameter can't be specified if the DB
  /// instance is a Multi-AZ deployment.
  /// </li>
  /// <li>
  /// The specified Availability Zone must be in the same Amazon Web Services
  /// Region as the current endpoint.
  /// </li>
  /// </ul>
  /// Example: <code>us-east-1d</code>
  ///
  /// Parameter [backupRetentionPeriod] :
  /// The number of days for which automated backups are retained. Setting this
  /// parameter to a positive number enables backups. Setting this parameter to
  /// <code>0</code> disables automated backups.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The retention
  /// period for automated backups is managed by the DB cluster.
  ///
  /// Default: <code>1</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a value from 0 to 35.
  /// </li>
  /// <li>
  /// Can't be set to 0 if the DB instance is a source to read replicas.
  /// </li>
  /// <li>
  /// Can't be set to 0 for an RDS Custom for Oracle DB instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [backupTarget] :
  /// The location for storing automated backups and manual snapshots.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>outposts</code> (Amazon Web Services Outposts)
  /// </li>
  /// <li>
  /// <code>region</code> (Amazon Web Services Region)
  /// </li>
  /// </ul>
  /// Default: <code>region</code>
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
  /// with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// Parameter [cACertificateIdentifier] :
  /// The CA certificate identifier to use for the DB instance's server
  /// certificate.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  ///
  /// Parameter [characterSetName] :
  /// For supported engines, the character set (<code>CharacterSet</code>) to
  /// associate the DB instance with.
  ///
  /// This setting doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora - The character set is managed by the DB cluster. For more
  /// information, see <code>CreateDBCluster</code>.
  /// </li>
  /// <li>
  /// RDS Custom - However, if you need to change the character set, you can
  /// change it on the database itself.
  /// </li>
  /// </ul>
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy tags from the DB instance to snapshots of the DB
  /// instance. By default, tags are not copied.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. Copying tags to
  /// snapshots is managed by the DB cluster. Setting this value for an Aurora
  /// DB instance has no effect on the DB cluster setting.
  ///
  /// Parameter [customIamInstanceProfile] :
  /// The instance profile associated with the underlying Amazon EC2 instance of
  /// an RDS Custom DB instance.
  ///
  /// This setting is required for RDS Custom.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// The profile must exist in your account.
  /// </li>
  /// <li>
  /// The profile must have an IAM role that Amazon EC2 has permissions to
  /// assume.
  /// </li>
  /// <li>
  /// The instance profile name and the associated IAM role name must start with
  /// the prefix <code>AWSRDSCustom</code>.
  /// </li>
  /// </ul>
  /// For the list of permissions required for the IAM role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
  /// Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The identifier of the DB cluster that this DB instance will belong to.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [dBName] :
  /// The meaning of this parameter differs according to the database engine you
  /// use.
  /// <dl> <dt>Amazon Aurora MySQL</dt> <dd>
  /// The name of the database to create when the primary DB instance of the
  /// Aurora MySQL DB cluster is created. If this parameter isn't specified for
  /// an Aurora MySQL DB cluster, no database is created in the DB cluster.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain 1 to 64 alphanumeric characters.
  /// </li>
  /// <li>
  /// Can't be a word reserved by the database engine.
  /// </li>
  /// </ul> </dd> <dt>Amazon Aurora PostgreSQL</dt> <dd>
  /// The name of the database to create when the primary DB instance of the
  /// Aurora PostgreSQL DB cluster is created. A database named
  /// <code>postgres</code> is always created. If this parameter is specified,
  /// an additional database with this name is created.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// It must contain 1 to 63 alphanumeric characters.
  /// </li>
  /// <li>
  /// Must begin with a letter. Subsequent characters can be letters,
  /// underscores, or digits (0 to 9).
  /// </li>
  /// <li>
  /// Can't be a word reserved by the database engine.
  /// </li>
  /// </ul> </dd> <dt>Amazon RDS Custom for Oracle</dt> <dd>
  /// The Oracle System ID (SID) of the created RDS Custom DB instance. If you
  /// don't specify a value, the default value is <code>ORCL</code> for non-CDBs
  /// and <code>RDSCDB</code> for CDBs.
  ///
  /// Default: <code>ORCL</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain 1 to 8 alphanumeric characters.
  /// </li>
  /// <li>
  /// Must contain a letter.
  /// </li>
  /// <li>
  /// Can't be a word reserved by the database engine.
  /// </li>
  /// </ul> </dd> <dt>Amazon RDS Custom for SQL Server</dt> <dd>
  /// Not applicable. Must be null.
  /// </dd> <dt>RDS for Db2</dt> <dd>
  /// The name of the database to create when the DB instance is created. If
  /// this parameter isn't specified, no database is created in the DB instance.
  /// In some cases, we recommend that you don't add a database name. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/db2-db-instance-prereqs.html#db2-prereqs-additional-considerations">Additional
  /// considerations</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain 1 to 64 letters or numbers.
  /// </li>
  /// <li>
  /// Must begin with a letter. Subsequent characters can be letters,
  /// underscores, or digits (0-9).
  /// </li>
  /// <li>
  /// Can't be a word reserved by the specified database engine.
  /// </li>
  /// </ul> </dd> <dt>RDS for MariaDB</dt> <dd>
  /// The name of the database to create when the DB instance is created. If
  /// this parameter isn't specified, no database is created in the DB instance.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain 1 to 64 letters or numbers.
  /// </li>
  /// <li>
  /// Must begin with a letter. Subsequent characters can be letters,
  /// underscores, or digits (0-9).
  /// </li>
  /// <li>
  /// Can't be a word reserved by the specified database engine.
  /// </li>
  /// </ul> </dd> <dt>RDS for MySQL</dt> <dd>
  /// The name of the database to create when the DB instance is created. If
  /// this parameter isn't specified, no database is created in the DB instance.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain 1 to 64 letters or numbers.
  /// </li>
  /// <li>
  /// Must begin with a letter. Subsequent characters can be letters,
  /// underscores, or digits (0-9).
  /// </li>
  /// <li>
  /// Can't be a word reserved by the specified database engine.
  /// </li>
  /// </ul> </dd> <dt>RDS for Oracle</dt> <dd>
  /// The Oracle System ID (SID) of the created DB instance. If you don't
  /// specify a value, the default value is <code>ORCL</code>. You can't specify
  /// the string <code>null</code>, or any other reserved word, for
  /// <code>DBName</code>.
  ///
  /// Default: <code>ORCL</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be longer than 8 characters.
  /// </li>
  /// </ul> </dd> <dt>RDS for PostgreSQL</dt> <dd>
  /// The name of the database to create when the DB instance is created. A
  /// database named <code>postgres</code> is always created. If this parameter
  /// is specified, an additional database with this name is created.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain 1 to 63 letters, numbers, or underscores.
  /// </li>
  /// <li>
  /// Must begin with a letter. Subsequent characters can be letters,
  /// underscores, or digits (0-9).
  /// </li>
  /// <li>
  /// Can't be a word reserved by the specified database engine.
  /// </li>
  /// </ul> </dd> <dt>RDS for SQL Server</dt> <dd>
  /// Not applicable. Must be null.
  /// </dd> </dl>
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group to associate with this DB instance. If
  /// you don't specify a value, then Amazon RDS uses the default DB parameter
  /// group for the specified DB engine and version.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// The first character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSecurityGroups] :
  /// A list of DB security groups to associate with this DB instance.
  ///
  /// This setting applies to the legacy EC2-Classic platform, which is no
  /// longer used to create new DB instances. Use the
  /// <code>VpcSecurityGroupIds</code> setting instead.
  ///
  /// Parameter [dBSubnetGroupName] :
  /// A DB subnet group to associate with this DB instance.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the name of an existing DB subnet group.
  /// </li>
  /// <li>
  /// Must not be <code>default</code>.
  /// </li>
  /// </ul>
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [dBSystemId] :
  /// The Oracle system identifier (SID), which is the name of the Oracle
  /// database instance that manages your database files. In this context, the
  /// term "Oracle database instance" refers exclusively to the system global
  /// area (SGA) and Oracle background processes. If you don't specify a SID,
  /// the value defaults to <code>RDSCDB</code>. The Oracle SID is also the name
  /// of your CDB.
  ///
  /// Parameter [dedicatedLogVolume] :
  /// Indicates whether the DB instance has a dedicated log volume (DLV)
  /// enabled.
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether the DB instance has deletion protection enabled. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
  /// Deleting a DB Instance</a>.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. You can enable
  /// or disable deletion protection for the DB cluster. For more information,
  /// see <code>CreateDBCluster</code>. DB instances in a DB cluster can be
  /// deleted even when deletion protection is enabled for the DB cluster.
  ///
  /// Parameter [domain] :
  /// The Active Directory directory ID to create the DB instance in. Currently,
  /// you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and
  /// PostgreSQL DB instances in an Active Directory Domain.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
  /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (The domain is managed by the DB cluster.)
  /// </li>
  /// <li>
  /// RDS Custom
  /// </li>
  /// </ul>
  ///
  /// Parameter [domainAuthSecretArn] :
  /// The ARN for the Secrets Manager secret with the credentials for the user
  /// joining the domain.
  ///
  /// Example:
  /// <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code>
  ///
  /// Parameter [domainDnsIps] :
  /// The IPv4 DNS IP addresses of your primary and secondary Active Directory
  /// domain controllers.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Two IP addresses must be provided. If there isn't a secondary domain
  /// controller, use the IP address of the primary domain controller for both
  /// entries in the list.
  /// </li>
  /// </ul>
  /// Example: <code>123.124.125.126,234.235.236.237</code>
  ///
  /// Parameter [domainFqdn] :
  /// The fully qualified domain name (FQDN) of an Active Directory domain.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example: <code>mymanagedADtest.mymanagedAD.mydomain</code>
  ///
  /// Parameter [domainIAMRoleName] :
  /// The name of the IAM role to use when making API calls to the Directory
  /// Service.
  ///
  /// This setting doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (The domain is managed by the DB cluster.)
  /// </li>
  /// <li>
  /// RDS Custom
  /// </li>
  /// </ul>
  ///
  /// Parameter [domainOu] :
  /// The Active Directory organizational unit for your DB instance to join.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the distinguished name format.
  /// </li>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example:
  /// <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code>
  ///
  /// Parameter [enableCloudwatchLogsExports] :
  /// The list of log types to enable for exporting to CloudWatch Logs. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">
  /// Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon
  /// RDS User Guide</i>.
  ///
  /// This setting doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (CloudWatch Logs exports are managed by the DB cluster.)
  /// </li>
  /// <li>
  /// RDS Custom
  /// </li>
  /// </ul>
  /// The following values are valid for each DB engine:
  ///
  /// <ul>
  /// <li>
  /// RDS for Db2 - <code>diag.log | notify.log</code>
  /// </li>
  /// <li>
  /// RDS for MariaDB - <code>audit | error | general | slowquery</code>
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - <code>agent | error</code>
  /// </li>
  /// <li>
  /// RDS for MySQL - <code>audit | error | general | slowquery</code>
  /// </li>
  /// <li>
  /// RDS for Oracle - <code>alert | audit | listener | trace | oemagent</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - <code>postgresql | upgrade</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [enableCustomerOwnedIp] :
  /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS
  /// on Outposts DB instance.
  ///
  /// A <i>CoIP</i> provides local or external connectivity to resources in your
  /// Outpost subnets through your on-premises network. For some use cases, a
  /// CoIP can provide lower latency for connections to the DB instance from
  /// outside of its virtual private cloud (VPC) on your local network.
  ///
  /// For more information about RDS on Outposts, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
  /// with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// For more information about CoIPs, see <a
  /// href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned
  /// IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon
  /// RDS User Guide</i>.
  ///
  /// This setting doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (Mapping Amazon Web Services IAM accounts to database
  /// accounts is managed by the DB cluster.)
  /// </li>
  /// <li>
  /// RDS Custom
  /// </li>
  /// </ul>
  ///
  /// Parameter [enablePerformanceInsights] :
  /// Specifies whether to enable Performance Insights for the DB instance. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using
  /// Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [engineLifecycleSupport] :
  /// The life cycle type for this DB instance.
  /// <note>
  /// By default, this value is set to
  /// <code>open-source-rds-extended-support</code>, which enrolls your DB
  /// instance into Amazon RDS Extended Support. At the end of standard support,
  /// you can avoid charges for Extended Support by setting the value to
  /// <code>open-source-rds-extended-support-disabled</code>. In this case,
  /// creating the DB instance will fail if the DB major version is past its end
  /// of standard support date.
  /// </note>
  /// This setting applies only to RDS for MySQL and RDS for PostgreSQL. For
  /// Amazon Aurora DB instances, the life cycle type is managed by the DB
  /// cluster.
  ///
  /// You can use this setting to enroll your DB instance into Amazon RDS
  /// Extended Support. With RDS Extended Support, you can run the selected
  /// major engine version on your DB instance past the end of standard support
  /// for that engine version. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Valid Values: <code>open-source-rds-extended-support |
  /// open-source-rds-extended-support-disabled</code>
  ///
  /// Default: <code>open-source-rds-extended-support</code>
  ///
  /// Parameter [engineVersion] :
  /// The version number of the database engine to use.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The version
  /// number of the database engine the DB instance uses is managed by the DB
  /// cluster.
  ///
  /// For a list of valid engine versions, use the
  /// <code>DescribeDBEngineVersions</code> operation.
  ///
  /// The following are the database engines and links to information about the
  /// major and minor versions that are available with Amazon RDS. Not every
  /// database engine is available for every Amazon Web Services Region.
  /// <dl> <dt>Amazon RDS Custom for Oracle</dt> <dd>
  /// A custom engine version (CEV) that you have previously created. This
  /// setting is required for RDS Custom for Oracle. The CEV name has the
  /// following format: 19.<i>customized_string</i>. A valid CEV name is
  /// <code>19.my_cev1</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-creating.html#custom-creating.create">
  /// Creating an RDS Custom for Oracle DB instance</a> in the <i>Amazon RDS
  /// User Guide</i>.
  /// </dd> <dt>Amazon RDS Custom for SQL Server</dt> <dd>
  /// See <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits-MS.html">RDS
  /// Custom for SQL Server general requirements</a> in the <i>Amazon RDS User
  /// Guide</i>.
  /// </dd> <dt>RDS for Db2</dt> <dd>
  /// For information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Db2.html#Db2.Concepts.VersionMgmt">Db2
  /// on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.
  /// </dd> <dt>RDS for MariaDB</dt> <dd>
  /// For information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB
  /// on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.
  /// </dd> <dt>RDS for Microsoft SQL Server</dt> <dd>
  /// For information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">Microsoft
  /// SQL Server versions on Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  /// </dd> <dt>RDS for MySQL</dt> <dd>
  /// For information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL
  /// on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.
  /// </dd> <dt>RDS for Oracle</dt> <dd>
  /// For information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle
  /// Database Engine release notes</a> in the <i>Amazon RDS User Guide</i>.
  /// </dd> <dt>RDS for PostgreSQL</dt> <dd>
  /// For information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon
  /// RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User
  /// Guide</i>.
  /// </dd> </dl>
  ///
  /// Parameter [iops] :
  /// The amount of Provisioned IOPS (input/output operations per second) to
  /// initially allocate for the DB instance. For information about valid IOPS
  /// values, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html">Amazon
  /// RDS DB instance storage</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. Storage is
  /// managed by the DB cluster.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// For RDS for Db2, MariaDB, MySQL, Oracle, and PostgreSQL - Must be a
  /// multiple between .5 and 50 of the storage amount for the DB instance.
  /// </li>
  /// <li>
  /// For RDS for SQL Server - Must be a multiple between 1 and 50 of the
  /// storage amount for the DB instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier for an encrypted DB instance.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The Amazon Web
  /// Services KMS key identifier is managed by the DB cluster. For more
  /// information, see <code>CreateDBCluster</code>.
  ///
  /// If <code>StorageEncrypted</code> is enabled, and you do not specify a
  /// value for the <code>KmsKeyId</code> parameter, then Amazon RDS uses your
  /// default KMS key. There is a default KMS key for your Amazon Web Services
  /// account. Your Amazon Web Services account has a different default KMS key
  /// for each Amazon Web Services Region.
  ///
  /// For Amazon RDS Custom, a KMS key is required for DB instances. For most
  /// RDS engines, if you leave this parameter empty while enabling
  /// <code>StorageEncrypted</code>, the engine uses the default KMS key.
  /// However, RDS Custom doesn't use the default key when this parameter is
  /// empty. You must explicitly specify a key.
  ///
  /// Parameter [licenseModel] :
  /// The license model information for this DB instance.
  /// <note>
  /// License models for RDS for Db2 require additional configuration. The Bring
  /// Your Own License (BYOL) model requires a custom parameter group. The Db2
  /// license through Amazon Web Services Marketplace model requires an Amazon
  /// Web Services Marketplace subscription. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/db2-licensing.html">RDS
  /// for Db2 licensing options</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// The default for RDS for Db2 is <code>bring-your-own-license</code>.
  /// </note>
  /// This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// RDS for Db2 - <code>bring-your-own-license | marketplace-license</code>
  /// </li>
  /// <li>
  /// RDS for MariaDB - <code>general-public-license</code>
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - <code>license-included</code>
  /// </li>
  /// <li>
  /// RDS for MySQL - <code>general-public-license</code>
  /// </li>
  /// <li>
  /// RDS for Oracle - <code>bring-your-own-license | license-included</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - <code>postgresql-license</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [manageMasterUserPassword] :
  /// Specifies whether to manage the master user password with Amazon Web
  /// Services Secrets Manager.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't manage the master user password with Amazon Web Services Secrets
  /// Manager if <code>MasterUserPassword</code> is specified.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserPassword] :
  /// The password for the master user.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The password for
  /// the master user is managed by the DB cluster.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified if <code>ManageMasterUserPassword</code> is turned on.
  /// </li>
  /// <li>
  /// Can include any printable ASCII character except "/", """, or "@". For RDS
  /// for Oracle, can't include the "&amp;" (ampersand) or the "'" (single
  /// quotes) character.
  /// </li>
  /// </ul>
  /// Length Constraints:
  ///
  /// <ul>
  /// <li>
  /// RDS for Db2 - Must contain from 8 to 255 characters.
  /// </li>
  /// <li>
  /// RDS for MariaDB - Must contain from 8 to 41 characters.
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - Must contain from 8 to 128 characters.
  /// </li>
  /// <li>
  /// RDS for MySQL - Must contain from 8 to 41 characters.
  /// </li>
  /// <li>
  /// RDS for Oracle - Must contain from 8 to 30 characters.
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - Must contain from 8 to 128 characters.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserSecretKmsKeyId] :
  /// The Amazon Web Services KMS key identifier to encrypt a secret that is
  /// automatically generated and managed in Amazon Web Services Secrets
  /// Manager.
  ///
  /// This setting is valid only if the master user password is managed by RDS
  /// in Amazon Web Services Secrets Manager for the DB instance.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the
  /// <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If
  /// the secret is in a different Amazon Web Services account, then you can't
  /// use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and
  /// you must use a customer managed KMS key.
  ///
  /// There is a default KMS key for your Amazon Web Services account. Your
  /// Amazon Web Services account has a different default KMS key for each
  /// Amazon Web Services Region.
  ///
  /// Parameter [masterUsername] :
  /// The name for the master user.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The name for the
  /// master user is managed by the DB cluster.
  ///
  /// This setting is required for RDS DB instances.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 16 letters, numbers, or underscores.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't be a reserved word for the chosen database engine.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxAllocatedStorage] :
  /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically
  /// scale the storage of the DB instance.
  ///
  /// For more information about this setting, including limitations that apply
  /// to it, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
  /// Managing capacity automatically with Amazon RDS storage autoscaling</a> in
  /// the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (Storage is managed by the DB cluster.)
  /// </li>
  /// <li>
  /// RDS Custom
  /// </li>
  /// </ul>
  ///
  /// Parameter [monitoringInterval] :
  /// The interval, in seconds, between points when Enhanced Monitoring metrics
  /// are collected for the DB instance. To disable collection of Enhanced
  /// Monitoring metrics, specify <code>0</code>.
  ///
  /// If <code>MonitoringRoleArn</code> is specified, then you must set
  /// <code>MonitoringInterval</code> to a value other than <code>0</code>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Valid Values: <code>0 | 1 | 5 | 10 | 15 | 30 | 60</code>
  ///
  /// Default: <code>0</code>
  ///
  /// Parameter [monitoringRoleArn] :
  /// The ARN for the IAM role that permits RDS to send enhanced monitoring
  /// metrics to Amazon CloudWatch Logs. For example,
  /// <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on
  /// creating a monitoring role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting
  /// Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// If <code>MonitoringInterval</code> is set to a value other than
  /// <code>0</code>, then you must supply a <code>MonitoringRoleArn</code>
  /// value.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [multiAZ] :
  /// Specifies whether the DB instance is a Multi-AZ deployment. You can't set
  /// the <code>AvailabilityZone</code> parameter if the DB instance is a
  /// Multi-AZ deployment.
  ///
  /// This setting doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (DB instance Availability Zones (AZs) are managed by the DB
  /// cluster.)
  /// </li>
  /// <li>
  /// RDS Custom
  /// </li>
  /// </ul>
  ///
  /// Parameter [multiTenant] :
  /// Specifies whether to use the multi-tenant configuration or the
  /// single-tenant configuration (default). This parameter only applies to RDS
  /// for Oracle container database (CDB) engines.
  ///
  /// Note the following restrictions:
  ///
  /// <ul>
  /// <li>
  /// The DB engine that you specify in the request must support the
  /// multi-tenant configuration. If you attempt to enable the multi-tenant
  /// configuration on a DB engine that doesn't support it, the request fails.
  /// </li>
  /// <li>
  /// If you specify the multi-tenant configuration when you create your DB
  /// instance, you can't later modify this DB instance to use the single-tenant
  /// configuration.
  /// </li>
  /// </ul>
  ///
  /// Parameter [ncharCharacterSetName] :
  /// The name of the NCHAR character set for the Oracle DB instance.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [networkType] :
  /// The network type of the DB instance.
  ///
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB instance. A <code>DBSubnetGroup</code> can support only the
  /// IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// Valid Values: <code>IPV4 | DUAL</code>
  ///
  /// Parameter [optionGroupName] :
  /// The option group to associate the DB instance with.
  ///
  /// Permanent options, such as the TDE option for Oracle Advanced Security
  /// TDE, can't be removed from an option group. Also, that option group can't
  /// be removed from a DB instance after it is associated with a DB instance.
  ///
  /// This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
  ///
  /// Parameter [performanceInsightsKMSKeyId] :
  /// The Amazon Web Services KMS key identifier for encryption of Performance
  /// Insights data.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  ///
  /// If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>,
  /// then Amazon RDS uses your default KMS key. There is a default KMS key for
  /// your Amazon Web Services account. Your Amazon Web Services account has a
  /// different default KMS key for each Amazon Web Services Region.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [performanceInsightsRetentionPeriod] :
  /// The number of days to retain Performance Insights data.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>7</code>
  /// </li>
  /// <li>
  /// <i>month</i> * 31, where <i>month</i> is a number of months from 1-23.
  /// Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months *
  /// 31), <code>589</code> (19 months * 31)
  /// </li>
  /// <li>
  /// <code>731</code>
  /// </li>
  /// </ul>
  /// Default: <code>7</code> days
  ///
  /// If you specify a retention period that isn't valid, such as
  /// <code>94</code>, Amazon RDS returns an error.
  ///
  /// Parameter [port] :
  /// The port number on which the database accepts connections.
  ///
  /// This setting doesn't apply to Aurora DB instances. The port number is
  /// managed by the cluster.
  ///
  /// Valid Values: <code>1150-65535</code>
  ///
  /// Default:
  ///
  /// <ul>
  /// <li>
  /// RDS for Db2 - <code>50000</code>
  /// </li>
  /// <li>
  /// RDS for MariaDB - <code>3306</code>
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - <code>1433</code>
  /// </li>
  /// <li>
  /// RDS for MySQL - <code>3306</code>
  /// </li>
  /// <li>
  /// RDS for Oracle - <code>1521</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - <code>5432</code>
  /// </li>
  /// </ul>
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// For RDS for Microsoft SQL Server, the value can't be <code>1234</code>,
  /// <code>1434</code>, <code>3260</code>, <code>3343</code>,
  /// <code>3389</code>, <code>47001</code>, or <code>49152-49156</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [preferredBackupWindow] :
  /// The daily time range during which automated backups are created if
  /// automated backups are enabled, using the
  /// <code>BackupRetentionPeriod</code> parameter. The default is a 30-minute
  /// window selected at random from an 8-hour block of time for each Amazon Web
  /// Services Region. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup
  /// window</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The daily time
  /// range for creating automated backups is managed by the DB cluster.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>hh24:mi-hh24:mi</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred maintenance window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [preferredMaintenanceWindow] :
  /// The time range each week during which system maintenance can occur. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon
  /// RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// The default is a 30-minute window selected at random from an 8-hour block
  /// of time for each Amazon Web Services Region, occurring on a random day of
  /// the week.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.
  /// </li>
  /// <li>
  /// The day values must be <code>mon | tue | wed | thu | fri | sat |
  /// sun</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred backup window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [processorFeatures] :
  /// The number of CPU cores and the number of threads per core for the DB
  /// instance class of the DB instance.
  ///
  /// This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
  ///
  /// Parameter [promotionTier] :
  /// The order of priority in which an Aurora Replica is promoted to the
  /// primary instance after a failure of the existing primary instance. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance">
  /// Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Default: <code>1</code>
  ///
  /// Valid Values: <code>0 - 15</code>
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB instance is publicly accessible.
  ///
  /// When the DB instance is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB instance's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB instance's VPC. Access to the DB instance is ultimately
  /// controlled by the security group it uses. That public access is not
  /// permitted if the security group assigned to the DB instance doesn't permit
  /// it.
  ///
  /// When the DB instance isn't publicly accessible, it is an internal DB
  /// instance with a DNS name that resolves to a private IP address.
  ///
  /// Default: The default behavior varies depending on whether
  /// <code>DBSubnetGroupName</code> is specified.
  ///
  /// If <code>DBSubnetGroupName</code> isn't specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the default VPC in the target Region doesn’t have an internet gateway
  /// attached to it, the DB instance is private.
  /// </li>
  /// <li>
  /// If the default VPC in the target Region has an internet gateway attached
  /// to it, the DB instance is public.
  /// </li>
  /// </ul>
  /// If <code>DBSubnetGroupName</code> is specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the subnets are part of a VPC that doesn’t have an internet gateway
  /// attached to it, the DB instance is private.
  /// </li>
  /// <li>
  /// If the subnets are part of a VPC that has an internet gateway attached to
  /// it, the DB instance is public.
  /// </li>
  /// </ul>
  ///
  /// Parameter [storageEncrypted] :
  /// Specifes whether the DB instance is encrypted. By default, it isn't
  /// encrypted.
  ///
  /// For RDS Custom DB instances, either enable this setting or leave it unset.
  /// Otherwise, Amazon RDS reports an error.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The encryption
  /// for DB instances is managed by the DB cluster.
  ///
  /// Parameter [storageThroughput] :
  /// The storage throughput value for the DB instance.
  ///
  /// This setting applies only to the <code>gp3</code> storage type.
  ///
  /// This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
  ///
  /// Parameter [storageType] :
  /// The storage type to associate with the DB instance.
  ///
  /// If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>,
  /// you must also include a value for the <code>Iops</code> parameter.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. Storage is
  /// managed by the DB cluster.
  ///
  /// Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code>
  ///
  /// Default: <code>io1</code>, if the <code>Iops</code> parameter is
  /// specified. Otherwise, <code>gp2</code>.
  ///
  /// Parameter [tags] :
  /// Tags to assign to the DB instance.
  ///
  /// Parameter [tdeCredentialArn] :
  /// The ARN from the key store with which to associate the instance for TDE
  /// encryption.
  ///
  /// This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
  ///
  /// Parameter [tdeCredentialPassword] :
  /// The password for the given ARN from the key store in order to access the
  /// device.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [timezone] :
  /// The time zone of the DB instance. The time zone parameter is currently
  /// supported only by <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/db2-time-zone">RDS
  /// for Db2</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">RDS
  /// for SQL Server</a>.
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of Amazon EC2 VPC security groups to associate with this DB
  /// instance.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The associated
  /// list of EC2 VPC security groups is managed by the DB cluster.
  ///
  /// Default: The default EC2 VPC security group for the DB subnet group's VPC.
  Future<CreateDBInstanceResult> createDBInstance({
    required String dBInstanceClass,
    required String dBInstanceIdentifier,
    required String engine,
    int? allocatedStorage,
    bool? autoMinorVersionUpgrade,
    String? availabilityZone,
    int? backupRetentionPeriod,
    String? backupTarget,
    String? cACertificateIdentifier,
    String? characterSetName,
    bool? copyTagsToSnapshot,
    String? customIamInstanceProfile,
    String? dBClusterIdentifier,
    String? dBName,
    String? dBParameterGroupName,
    List<String>? dBSecurityGroups,
    String? dBSubnetGroupName,
    String? dBSystemId,
    bool? dedicatedLogVolume,
    bool? deletionProtection,
    String? domain,
    String? domainAuthSecretArn,
    List<String>? domainDnsIps,
    String? domainFqdn,
    String? domainIAMRoleName,
    String? domainOu,
    List<String>? enableCloudwatchLogsExports,
    bool? enableCustomerOwnedIp,
    bool? enableIAMDatabaseAuthentication,
    bool? enablePerformanceInsights,
    String? engineLifecycleSupport,
    String? engineVersion,
    int? iops,
    String? kmsKeyId,
    String? licenseModel,
    bool? manageMasterUserPassword,
    String? masterUserPassword,
    String? masterUserSecretKmsKeyId,
    String? masterUsername,
    int? maxAllocatedStorage,
    int? monitoringInterval,
    String? monitoringRoleArn,
    bool? multiAZ,
    bool? multiTenant,
    String? ncharCharacterSetName,
    String? networkType,
    String? optionGroupName,
    String? performanceInsightsKMSKeyId,
    int? performanceInsightsRetentionPeriod,
    int? port,
    String? preferredBackupWindow,
    String? preferredMaintenanceWindow,
    List<ProcessorFeature>? processorFeatures,
    int? promotionTier,
    bool? publiclyAccessible,
    bool? storageEncrypted,
    int? storageThroughput,
    String? storageType,
    List<Tag>? tags,
    String? tdeCredentialArn,
    String? tdeCredentialPassword,
    String? timezone,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBInstanceClass': dBInstanceClass,
      'DBInstanceIdentifier': dBInstanceIdentifier,
      'Engine': engine,
      if (allocatedStorage != null)
        'AllocatedStorage': allocatedStorage.toString(),
      if (autoMinorVersionUpgrade != null)
        'AutoMinorVersionUpgrade': autoMinorVersionUpgrade.toString(),
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (backupRetentionPeriod != null)
        'BackupRetentionPeriod': backupRetentionPeriod.toString(),
      if (backupTarget != null) 'BackupTarget': backupTarget,
      if (cACertificateIdentifier != null)
        'CACertificateIdentifier': cACertificateIdentifier,
      if (characterSetName != null) 'CharacterSetName': characterSetName,
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (customIamInstanceProfile != null)
        'CustomIamInstanceProfile': customIamInstanceProfile,
      if (dBClusterIdentifier != null)
        'DBClusterIdentifier': dBClusterIdentifier,
      if (dBName != null) 'DBName': dBName,
      if (dBParameterGroupName != null)
        'DBParameterGroupName': dBParameterGroupName,
      if (dBSecurityGroups != null)
        if (dBSecurityGroups.isEmpty)
          'DBSecurityGroups': ''
        else
          for (var i1 = 0; i1 < dBSecurityGroups.length; i1++)
            'DBSecurityGroups.DBSecurityGroupName.${i1 + 1}':
                dBSecurityGroups[i1],
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (dBSystemId != null) 'DBSystemId': dBSystemId,
      if (dedicatedLogVolume != null)
        'DedicatedLogVolume': dedicatedLogVolume.toString(),
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (domain != null) 'Domain': domain,
      if (domainAuthSecretArn != null)
        'DomainAuthSecretArn': domainAuthSecretArn,
      if (domainDnsIps != null)
        if (domainDnsIps.isEmpty)
          'DomainDnsIps': ''
        else
          for (var i1 = 0; i1 < domainDnsIps.length; i1++)
            'DomainDnsIps.member.${i1 + 1}': domainDnsIps[i1],
      if (domainFqdn != null) 'DomainFqdn': domainFqdn,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (domainOu != null) 'DomainOu': domainOu,
      if (enableCloudwatchLogsExports != null)
        if (enableCloudwatchLogsExports.isEmpty)
          'EnableCloudwatchLogsExports': ''
        else
          for (var i1 = 0; i1 < enableCloudwatchLogsExports.length; i1++)
            'EnableCloudwatchLogsExports.member.${i1 + 1}':
                enableCloudwatchLogsExports[i1],
      if (enableCustomerOwnedIp != null)
        'EnableCustomerOwnedIp': enableCustomerOwnedIp.toString(),
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (enablePerformanceInsights != null)
        'EnablePerformanceInsights': enablePerformanceInsights.toString(),
      if (engineLifecycleSupport != null)
        'EngineLifecycleSupport': engineLifecycleSupport,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (iops != null) 'Iops': iops.toString(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (licenseModel != null) 'LicenseModel': licenseModel,
      if (manageMasterUserPassword != null)
        'ManageMasterUserPassword': manageMasterUserPassword.toString(),
      if (masterUserPassword != null) 'MasterUserPassword': masterUserPassword,
      if (masterUserSecretKmsKeyId != null)
        'MasterUserSecretKmsKeyId': masterUserSecretKmsKeyId,
      if (masterUsername != null) 'MasterUsername': masterUsername,
      if (maxAllocatedStorage != null)
        'MaxAllocatedStorage': maxAllocatedStorage.toString(),
      if (monitoringInterval != null)
        'MonitoringInterval': monitoringInterval.toString(),
      if (monitoringRoleArn != null) 'MonitoringRoleArn': monitoringRoleArn,
      if (multiAZ != null) 'MultiAZ': multiAZ.toString(),
      if (multiTenant != null) 'MultiTenant': multiTenant.toString(),
      if (ncharCharacterSetName != null)
        'NcharCharacterSetName': ncharCharacterSetName,
      if (networkType != null) 'NetworkType': networkType,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (performanceInsightsKMSKeyId != null)
        'PerformanceInsightsKMSKeyId': performanceInsightsKMSKeyId,
      if (performanceInsightsRetentionPeriod != null)
        'PerformanceInsightsRetentionPeriod':
            performanceInsightsRetentionPeriod.toString(),
      if (port != null) 'Port': port.toString(),
      if (preferredBackupWindow != null)
        'PreferredBackupWindow': preferredBackupWindow,
      if (preferredMaintenanceWindow != null)
        'PreferredMaintenanceWindow': preferredMaintenanceWindow,
      if (processorFeatures != null)
        if (processorFeatures.isEmpty)
          'ProcessorFeatures': ''
        else
          for (var i1 = 0; i1 < processorFeatures.length; i1++)
            for (var e3 in processorFeatures[i1].toQueryMap().entries)
              'ProcessorFeatures.ProcessorFeature.${i1 + 1}.${e3.key}':
                  e3.value,
      if (promotionTier != null) 'PromotionTier': promotionTier.toString(),
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
      if (storageEncrypted != null)
        'StorageEncrypted': storageEncrypted.toString(),
      if (storageThroughput != null)
        'StorageThroughput': storageThroughput.toString(),
      if (storageType != null) 'StorageType': storageType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (tdeCredentialArn != null) 'TdeCredentialArn': tdeCredentialArn,
      if (tdeCredentialPassword != null)
        'TdeCredentialPassword': tdeCredentialPassword,
      if (timezone != null) 'Timezone': timezone,
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBInstance',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBInstanceResult',
    );
    return CreateDBInstanceResult.fromXml($result);
  }

  /// Creates a new DB instance that acts as a read replica for an existing
  /// source DB instance or Multi-AZ DB cluster. You can create a read replica
  /// for a DB instance running Db2, MariaDB, MySQL, Oracle, PostgreSQL, or SQL
  /// Server. You can create a read replica for a Multi-AZ DB cluster running
  /// MySQL or PostgreSQL. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working
  /// with read replicas</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html#multi-az-db-clusters-migrating-to-instance-with-read-replica">Migrating
  /// from a Multi-AZ DB cluster to a DB instance using a read replica</a> in
  /// the <i>Amazon RDS User Guide</i>.
  ///
  /// Amazon Aurora doesn't support this operation. To create a DB instance for
  /// an Aurora DB cluster, use the <code>CreateDBInstance</code> operation.
  ///
  /// All read replica DB instances are created with backups disabled. All other
  /// attributes (including DB security groups and DB parameter groups) are
  /// inherited from the source DB instance or cluster, except as specified.
  /// <important>
  /// Your source DB instance or cluster must have backup retention enabled.
  /// </important>
  ///
  /// May throw [DBInstanceAlreadyExistsFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [DBSecurityGroupNotFoundFault].
  /// May throw [InstanceQuotaExceededFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [InvalidSubnet].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [ProvisionedIopsNotAvailableInAZFault].
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [DBSubnetGroupNotAllowedFault].
  /// May throw [InvalidDBSubnetGroupFault].
  /// May throw [StorageTypeNotSupportedFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [NetworkTypeNotSupported].
  /// May throw [TenantDatabaseQuotaExceededFault].
  /// May throw [CertificateNotFoundFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The DB instance identifier of the read replica. This identifier is the
  /// unique key that identifies a DB instance. This parameter is stored as a
  /// lowercase string.
  ///
  /// Parameter [allocatedStorage] :
  /// The amount of storage (in gibibytes) to allocate initially for the read
  /// replica. Follow the allocation rules specified in
  /// <code>CreateDBInstance</code>.
  /// <note>
  /// Be sure to allocate enough storage for your read replica so that the
  /// create operation can succeed. You can also allocate additional storage for
  /// future growth.
  /// </note>
  ///
  /// Parameter [autoMinorVersionUpgrade] :
  /// Specifies whether to automatically apply minor engine upgrades to the read
  /// replica during the maintenance window.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Default: Inherits the value from the source DB instance.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone (AZ) where the read replica will be created.
  ///
  /// Default: A random, system-chosen Availability Zone in the endpoint's
  /// Amazon Web Services Region.
  ///
  /// Example: <code>us-east-1d</code>
  ///
  /// Parameter [cACertificateIdentifier] :
  /// The CA certificate identifier to use for the read replica's server
  /// certificate.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the read replica to snapshots of
  /// the read replica. By default, tags aren't copied.
  ///
  /// Parameter [customIamInstanceProfile] :
  /// The instance profile associated with the underlying Amazon EC2 instance of
  /// an RDS Custom DB instance. The instance profile must meet the following
  /// requirements:
  ///
  /// <ul>
  /// <li>
  /// The profile must exist in your account.
  /// </li>
  /// <li>
  /// The profile must have an IAM role that Amazon EC2 has permissions to
  /// assume.
  /// </li>
  /// <li>
  /// The instance profile name and the associated IAM role name must start with
  /// the prefix <code>AWSRDSCustom</code>.
  /// </li>
  /// </ul>
  /// For the list of permissions required for the IAM role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
  /// Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting is required for RDS Custom DB instances.
  ///
  /// Parameter [dBInstanceClass] :
  /// The compute and memory capacity of the read replica, for example
  /// db.m4.large. Not all DB instance classes are available in all Amazon Web
  /// Services Regions, or for all database engines. For the full list of DB
  /// instance classes, and availability for your engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB
  /// Instance Class</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Default: Inherits the value from the source DB instance.
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group to associate with this DB instance.
  ///
  /// If you don't specify a value for <code>DBParameterGroupName</code>, then
  /// Amazon RDS uses the <code>DBParameterGroup</code> of the source DB
  /// instance for a same Region read replica, or the default
  /// <code>DBParameterGroup</code> for the specified DB engine for a
  /// cross-Region read replica.
  ///
  /// Specifying a parameter group for this operation is only supported for
  /// MySQL DB instances for cross-Region read replicas and for Oracle DB
  /// instances. It isn't supported for MySQL DB instances for same Region read
  /// replicas or for RDS Custom.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSubnetGroupName] :
  /// A DB subnet group for the DB instance. The new DB instance is created in
  /// the VPC associated with the DB subnet group. If no DB subnet group is
  /// specified, then the new DB instance isn't created in a VPC.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DB subnet group.
  /// </li>
  /// <li>
  /// The specified DB subnet group must be in the same Amazon Web Services
  /// Region in which the operation is running.
  /// </li>
  /// <li>
  /// All read replicas in one Amazon Web Services Region that are created from
  /// the same source DB instance must either:
  ///
  /// <ul>
  /// <li>
  /// Specify DB subnet groups from the same VPC. All these read replicas are
  /// created in the same VPC.
  /// </li>
  /// <li>
  /// Not specify a DB subnet group. All these read replicas are created outside
  /// of any VPC.
  /// </li>
  /// </ul> </li>
  /// </ul>
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [dedicatedLogVolume] :
  /// Indicates whether the DB instance has a dedicated log volume (DLV)
  /// enabled.
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether to enable deletion protection for the DB instance. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
  /// Deleting a DB Instance</a>.
  ///
  /// Parameter [domain] :
  /// The Active Directory directory ID to create the DB instance in. Currently,
  /// only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can
  /// be created in an Active Directory Domain.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
  /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [domainAuthSecretArn] :
  /// The ARN for the Secrets Manager secret with the credentials for the user
  /// joining the domain.
  ///
  /// Example:
  /// <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code>
  ///
  /// Parameter [domainDnsIps] :
  /// The IPv4 DNS IP addresses of your primary and secondary Active Directory
  /// domain controllers.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Two IP addresses must be provided. If there isn't a secondary domain
  /// controller, use the IP address of the primary domain controller for both
  /// entries in the list.
  /// </li>
  /// </ul>
  /// Example: <code>123.124.125.126,234.235.236.237</code>
  ///
  /// Parameter [domainFqdn] :
  /// The fully qualified domain name (FQDN) of an Active Directory domain.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example: <code>mymanagedADtest.mymanagedAD.mydomain</code>
  ///
  /// Parameter [domainIAMRoleName] :
  /// The name of the IAM role to use when making API calls to the Directory
  /// Service.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [domainOu] :
  /// The Active Directory organizational unit for your DB instance to join.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the distinguished name format.
  /// </li>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example:
  /// <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code>
  ///
  /// Parameter [enableCloudwatchLogsExports] :
  /// The list of logs that the new DB instance is to export to CloudWatch Logs.
  /// The values in the list depend on the DB engine being used. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [enableCustomerOwnedIp] :
  /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS
  /// on Outposts read replica.
  ///
  /// A <i>CoIP</i> provides local or external connectivity to resources in your
  /// Outpost subnets through your on-premises network. For some use cases, a
  /// CoIP can provide lower latency for connections to the read replica from
  /// outside of its virtual private cloud (VPC) on your local network.
  ///
  /// For more information about RDS on Outposts, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
  /// with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// For more information about CoIPs, see <a
  /// href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned
  /// IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// For more information about IAM database authentication, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon
  /// RDS User Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [enablePerformanceInsights] :
  /// Specifies whether to enable Performance Insights for the read replica.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using
  /// Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [iops] :
  /// The amount of Provisioned IOPS (input/output operations per second) to
  /// initially allocate for the DB instance.
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier for an encrypted read replica.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  ///
  /// If you create an encrypted read replica in the same Amazon Web Services
  /// Region as the source DB instance or Multi-AZ DB cluster, don't specify a
  /// value for this parameter. A read replica in the same Amazon Web Services
  /// Region is always encrypted with the same KMS key as the source DB instance
  /// or cluster.
  ///
  /// If you create an encrypted read replica in a different Amazon Web Services
  /// Region, then you must specify a KMS key identifier for the destination
  /// Amazon Web Services Region. KMS keys are specific to the Amazon Web
  /// Services Region that they are created in, and you can't use KMS keys from
  /// one Amazon Web Services Region in another Amazon Web Services Region.
  ///
  /// You can't create an encrypted read replica from an unencrypted DB instance
  /// or Multi-AZ DB cluster.
  ///
  /// This setting doesn't apply to RDS Custom, which uses the same KMS key as
  /// the primary replica.
  ///
  /// Parameter [maxAllocatedStorage] :
  /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically
  /// scale the storage of the DB instance.
  ///
  /// For more information about this setting, including limitations that apply
  /// to it, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
  /// Managing capacity automatically with Amazon RDS storage autoscaling</a> in
  /// the <i>Amazon RDS User Guide</i>.
  ///
  /// Parameter [monitoringInterval] :
  /// The interval, in seconds, between points when Enhanced Monitoring metrics
  /// are collected for the read replica. To disable collection of Enhanced
  /// Monitoring metrics, specify <code>0</code>. The default is <code>0</code>.
  ///
  /// If <code>MonitoringRoleArn</code> is specified, then you must set
  /// <code>MonitoringInterval</code> to a value other than <code>0</code>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
  ///
  /// Default: <code>0</code>
  ///
  /// Parameter [monitoringRoleArn] :
  /// The ARN for the IAM role that permits RDS to send enhanced monitoring
  /// metrics to Amazon CloudWatch Logs. For example,
  /// <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on
  /// creating a monitoring role, go to <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
  /// create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon
  /// RDS User Guide</i>.
  ///
  /// If <code>MonitoringInterval</code> is set to a value other than 0, then
  /// you must supply a <code>MonitoringRoleArn</code> value.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [multiAZ] :
  /// Specifies whether the read replica is in a Multi-AZ deployment.
  ///
  /// You can create a read replica as a Multi-AZ DB instance. RDS creates a
  /// standby of your replica in another Availability Zone for failover support
  /// for the replica. Creating your read replica as a Multi-AZ DB instance is
  /// independent of whether the source is a Multi-AZ DB instance or a Multi-AZ
  /// DB cluster.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [networkType] :
  /// The network type of the DB instance.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>IPV4</code>
  /// </li>
  /// <li>
  /// <code>DUAL</code>
  /// </li>
  /// </ul>
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for read replica. A <code>DBSubnetGroup</code> can support only the IPv4
  /// protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// Parameter [optionGroupName] :
  /// The option group to associate the DB instance with. If not specified, RDS
  /// uses the option group associated with the source DB instance or cluster.
  /// <note>
  /// For SQL Server, you must use the option group associated with the source.
  /// </note>
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [performanceInsightsKMSKeyId] :
  /// The Amazon Web Services KMS key identifier for encryption of Performance
  /// Insights data.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  ///
  /// If you do not specify a value for
  /// <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your
  /// default KMS key. There is a default KMS key for your Amazon Web Services
  /// account. Your Amazon Web Services account has a different default KMS key
  /// for each Amazon Web Services Region.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [performanceInsightsRetentionPeriod] :
  /// The number of days to retain Performance Insights data.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>7</code>
  /// </li>
  /// <li>
  /// <i>month</i> * 31, where <i>month</i> is a number of months from 1-23.
  /// Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months *
  /// 31), <code>589</code> (19 months * 31)
  /// </li>
  /// <li>
  /// <code>731</code>
  /// </li>
  /// </ul>
  /// Default: <code>7</code> days
  ///
  /// If you specify a retention period that isn't valid, such as
  /// <code>94</code>, Amazon RDS returns an error.
  ///
  /// Parameter [port] :
  /// The port number that the DB instance uses for connections.
  ///
  /// Valid Values: <code>1150-65535</code>
  ///
  /// Default: Inherits the value from the source DB instance.
  ///
  /// Parameter [preSignedUrl] :
  /// When you are creating a read replica from one Amazon Web Services GovCloud
  /// (US) Region to another or from one China Amazon Web Services Region to
  /// another, the URL that contains a Signature Version 4 signed request for
  /// the <code>CreateDBInstanceReadReplica</code> API operation in the source
  /// Amazon Web Services Region that contains the source DB instance.
  ///
  /// This setting applies only to Amazon Web Services GovCloud (US) Regions and
  /// China Amazon Web Services Regions. It's ignored in other Amazon Web
  /// Services Regions.
  ///
  /// This setting applies only when replicating from a source DB
  /// <i>instance</i>. Source DB clusters aren't supported in Amazon Web
  /// Services GovCloud (US) Regions and China Amazon Web Services Regions.
  ///
  /// You must specify this parameter when you create an encrypted read replica
  /// from another Amazon Web Services Region by using the Amazon RDS API. Don't
  /// specify <code>PreSignedUrl</code> when you are creating an encrypted read
  /// replica in the same Amazon Web Services Region.
  ///
  /// The presigned URL must be a valid request for the
  /// <code>CreateDBInstanceReadReplica</code> API operation that can run in the
  /// source Amazon Web Services Region that contains the encrypted source DB
  /// instance. The presigned URL request must contain the following parameter
  /// values:
  ///
  /// <ul>
  /// <li>
  /// <code>DestinationRegion</code> - The Amazon Web Services Region that the
  /// encrypted read replica is created in. This Amazon Web Services Region is
  /// the same one where the <code>CreateDBInstanceReadReplica</code> operation
  /// is called that contains this presigned URL.
  ///
  /// For example, if you create an encrypted DB instance in the us-west-1
  /// Amazon Web Services Region, from a source DB instance in the us-east-2
  /// Amazon Web Services Region, then you call the
  /// <code>CreateDBInstanceReadReplica</code> operation in the us-east-1 Amazon
  /// Web Services Region and provide a presigned URL that contains a call to
  /// the <code>CreateDBInstanceReadReplica</code> operation in the us-west-2
  /// Amazon Web Services Region. For this example, the
  /// <code>DestinationRegion</code> in the presigned URL must be set to the
  /// us-east-1 Amazon Web Services Region.
  /// </li>
  /// <li>
  /// <code>KmsKeyId</code> - The KMS key identifier for the key to use to
  /// encrypt the read replica in the destination Amazon Web Services Region.
  /// This is the same identifier for both the
  /// <code>CreateDBInstanceReadReplica</code> operation that is called in the
  /// destination Amazon Web Services Region, and the operation contained in the
  /// presigned URL.
  /// </li>
  /// <li>
  /// <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for
  /// the encrypted DB instance to be replicated. This identifier must be in the
  /// Amazon Resource Name (ARN) format for the source Amazon Web Services
  /// Region. For example, if you are creating an encrypted read replica from a
  /// DB instance in the us-west-2 Amazon Web Services Region, then your
  /// <code>SourceDBInstanceIdentifier</code> looks like the following example:
  /// <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>.
  /// </li>
  /// </ul>
  /// To learn how to generate a Signature Version 4 signed request, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating
  /// Requests: Using Query Parameters (Amazon Web Services Signature Version
  /// 4)</a> and <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
  /// Version 4 Signing Process</a>.
  /// <note>
  /// If you are using an Amazon Web Services SDK tool or the CLI, you can
  /// specify <code>SourceRegion</code> (or <code>--source-region</code> for the
  /// CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying
  /// <code>SourceRegion</code> autogenerates a presigned URL that is a valid
  /// request for the operation that can run in the source Amazon Web Services
  /// Region.
  ///
  /// <code>SourceRegion</code> isn't supported for SQL Server, because Amazon
  /// RDS for SQL Server doesn't support cross-Region read replicas.
  /// </note>
  /// This setting doesn't apply to RDS Custom DB instances.
  /// <note>
  /// If you supply a value for this operation's <code>SourceRegion</code>
  /// parameter, a pre-signed URL will be calculated on your behalf.
  /// </note>
  ///
  /// Parameter [processorFeatures] :
  /// The number of CPU cores and the number of threads per core for the DB
  /// instance class of the DB instance.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB instance is publicly accessible.
  ///
  /// When the DB cluster is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB cluster's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB cluster's VPC. Access to the DB cluster is ultimately
  /// controlled by the security group it uses. That public access isn't
  /// permitted if the security group assigned to the DB cluster doesn't permit
  /// it.
  ///
  /// When the DB instance isn't publicly accessible, it is an internal DB
  /// instance with a DNS name that resolves to a private IP address.
  ///
  /// For more information, see <a>CreateDBInstance</a>.
  ///
  /// Parameter [replicaMode] :
  /// The open mode of the replica database: mounted or read-only.
  /// <note>
  /// This parameter is only supported for Oracle DB instances.
  /// </note>
  /// Mounted DB replicas are included in Oracle Database Enterprise Edition.
  /// The main use case for mounted replicas is cross-Region disaster recovery.
  /// The primary database doesn't use Active Data Guard to transmit information
  /// to the mounted replica. Because it doesn't accept user connections, a
  /// mounted replica can't serve a read-only workload.
  ///
  /// You can create a combination of mounted and read-only DB replicas for the
  /// same primary DB instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working
  /// with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// For RDS Custom, you must specify this parameter and set it to
  /// <code>mounted</code>. The value won't be set by default. After replica
  /// creation, you can manage the open mode manually.
  ///
  /// Parameter [sourceDBClusterIdentifier] :
  /// The identifier of the Multi-AZ DB cluster that will act as the source for
  /// the read replica. Each DB cluster can have up to 15 read replicas.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be the identifier of an existing Multi-AZ DB cluster.
  /// </li>
  /// <li>
  /// Can't be specified if the <code>SourceDBInstanceIdentifier</code>
  /// parameter is also specified.
  /// </li>
  /// <li>
  /// The specified DB cluster must have automatic backups enabled, that is, its
  /// backup retention period must be greater than 0.
  /// </li>
  /// <li>
  /// The source DB cluster must be in the same Amazon Web Services Region as
  /// the read replica. Cross-Region replication isn't supported.
  /// </li>
  /// </ul>
  ///
  /// Parameter [sourceDBInstanceIdentifier] :
  /// The identifier of the DB instance that will act as the source for the read
  /// replica. Each DB instance can have up to 15 read replicas, with the
  /// exception of Oracle and SQL Server, which can have up to five.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be the identifier of an existing Db2, MariaDB, MySQL, Oracle,
  /// PostgreSQL, or SQL Server DB instance.
  /// </li>
  /// <li>
  /// Can't be specified if the <code>SourceDBClusterIdentifier</code> parameter
  /// is also specified.
  /// </li>
  /// <li>
  /// For the limitations of Oracle read replicas, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.limitations.html#oracle-read-replicas.limitations.versions-and-licenses">Version
  /// and licensing considerations for RDS for Oracle replicas</a> in the
  /// <i>Amazon RDS User Guide</i>.
  /// </li>
  /// <li>
  /// For the limitations of SQL Server read replicas, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.ReadReplicas.html#SQLServer.ReadReplicas.Limitations">Read
  /// replica limitations with SQL Server</a> in the <i>Amazon RDS User
  /// Guide</i>.
  /// </li>
  /// <li>
  /// The specified DB instance must have automatic backups enabled, that is,
  /// its backup retention period must be greater than 0.
  /// </li>
  /// <li>
  /// If the source DB instance is in the same Amazon Web Services Region as the
  /// read replica, specify a valid DB instance identifier.
  /// </li>
  /// <li>
  /// If the source DB instance is in a different Amazon Web Services Region
  /// from the read replica, specify a valid DB instance ARN. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">Constructing
  /// an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. This
  /// doesn't apply to SQL Server or RDS Custom, which don't support
  /// cross-Region replicas.
  /// </li>
  /// </ul>
  ///
  /// Parameter [sourceRegion] :
  /// The ID of the region that contains the source for the read replica.
  ///
  /// Parameter [storageThroughput] :
  /// Specifies the storage throughput value for the read replica.
  ///
  /// This setting doesn't apply to RDS Custom or Amazon Aurora DB instances.
  ///
  /// Parameter [storageType] :
  /// The storage type to associate with the read replica.
  ///
  /// If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>,
  /// you must also include a value for the <code>Iops</code> parameter.
  ///
  /// Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code>
  ///
  /// Default: <code>io1</code> if the <code>Iops</code> parameter is specified.
  /// Otherwise, <code>gp2</code>.
  ///
  /// Parameter [upgradeStorageConfig] :
  /// Whether to upgrade the storage file system configuration on the read
  /// replica. This option migrates the read replica from the old storage file
  /// system layout to the preferred layout.
  ///
  /// Parameter [useDefaultProcessorFeatures] :
  /// Specifies whether the DB instance class of the DB instance uses its
  /// default processor features.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of Amazon EC2 VPC security groups to associate with the read
  /// replica.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Default: The default EC2 VPC security group for the DB subnet group's VPC.
  Future<CreateDBInstanceReadReplicaResult> createDBInstanceReadReplica({
    required String dBInstanceIdentifier,
    int? allocatedStorage,
    bool? autoMinorVersionUpgrade,
    String? availabilityZone,
    String? cACertificateIdentifier,
    bool? copyTagsToSnapshot,
    String? customIamInstanceProfile,
    String? dBInstanceClass,
    String? dBParameterGroupName,
    String? dBSubnetGroupName,
    bool? dedicatedLogVolume,
    bool? deletionProtection,
    String? domain,
    String? domainAuthSecretArn,
    List<String>? domainDnsIps,
    String? domainFqdn,
    String? domainIAMRoleName,
    String? domainOu,
    List<String>? enableCloudwatchLogsExports,
    bool? enableCustomerOwnedIp,
    bool? enableIAMDatabaseAuthentication,
    bool? enablePerformanceInsights,
    int? iops,
    String? kmsKeyId,
    int? maxAllocatedStorage,
    int? monitoringInterval,
    String? monitoringRoleArn,
    bool? multiAZ,
    String? networkType,
    String? optionGroupName,
    String? performanceInsightsKMSKeyId,
    int? performanceInsightsRetentionPeriod,
    int? port,
    String? preSignedUrl,
    List<ProcessorFeature>? processorFeatures,
    bool? publiclyAccessible,
    ReplicaMode? replicaMode,
    String? sourceDBClusterIdentifier,
    String? sourceDBInstanceIdentifier,
    String? sourceRegion,
    int? storageThroughput,
    String? storageType,
    List<Tag>? tags,
    bool? upgradeStorageConfig,
    bool? useDefaultProcessorFeatures,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      if (allocatedStorage != null)
        'AllocatedStorage': allocatedStorage.toString(),
      if (autoMinorVersionUpgrade != null)
        'AutoMinorVersionUpgrade': autoMinorVersionUpgrade.toString(),
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (cACertificateIdentifier != null)
        'CACertificateIdentifier': cACertificateIdentifier,
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (customIamInstanceProfile != null)
        'CustomIamInstanceProfile': customIamInstanceProfile,
      if (dBInstanceClass != null) 'DBInstanceClass': dBInstanceClass,
      if (dBParameterGroupName != null)
        'DBParameterGroupName': dBParameterGroupName,
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (dedicatedLogVolume != null)
        'DedicatedLogVolume': dedicatedLogVolume.toString(),
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (domain != null) 'Domain': domain,
      if (domainAuthSecretArn != null)
        'DomainAuthSecretArn': domainAuthSecretArn,
      if (domainDnsIps != null)
        if (domainDnsIps.isEmpty)
          'DomainDnsIps': ''
        else
          for (var i1 = 0; i1 < domainDnsIps.length; i1++)
            'DomainDnsIps.member.${i1 + 1}': domainDnsIps[i1],
      if (domainFqdn != null) 'DomainFqdn': domainFqdn,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (domainOu != null) 'DomainOu': domainOu,
      if (enableCloudwatchLogsExports != null)
        if (enableCloudwatchLogsExports.isEmpty)
          'EnableCloudwatchLogsExports': ''
        else
          for (var i1 = 0; i1 < enableCloudwatchLogsExports.length; i1++)
            'EnableCloudwatchLogsExports.member.${i1 + 1}':
                enableCloudwatchLogsExports[i1],
      if (enableCustomerOwnedIp != null)
        'EnableCustomerOwnedIp': enableCustomerOwnedIp.toString(),
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (enablePerformanceInsights != null)
        'EnablePerformanceInsights': enablePerformanceInsights.toString(),
      if (iops != null) 'Iops': iops.toString(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (maxAllocatedStorage != null)
        'MaxAllocatedStorage': maxAllocatedStorage.toString(),
      if (monitoringInterval != null)
        'MonitoringInterval': monitoringInterval.toString(),
      if (monitoringRoleArn != null) 'MonitoringRoleArn': monitoringRoleArn,
      if (multiAZ != null) 'MultiAZ': multiAZ.toString(),
      if (networkType != null) 'NetworkType': networkType,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (performanceInsightsKMSKeyId != null)
        'PerformanceInsightsKMSKeyId': performanceInsightsKMSKeyId,
      if (performanceInsightsRetentionPeriod != null)
        'PerformanceInsightsRetentionPeriod':
            performanceInsightsRetentionPeriod.toString(),
      if (port != null) 'Port': port.toString(),
      if (preSignedUrl != null) 'PreSignedUrl': preSignedUrl,
      if (processorFeatures != null)
        if (processorFeatures.isEmpty)
          'ProcessorFeatures': ''
        else
          for (var i1 = 0; i1 < processorFeatures.length; i1++)
            for (var e3 in processorFeatures[i1].toQueryMap().entries)
              'ProcessorFeatures.ProcessorFeature.${i1 + 1}.${e3.key}':
                  e3.value,
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
      if (replicaMode != null) 'ReplicaMode': replicaMode.value,
      if (sourceDBClusterIdentifier != null)
        'SourceDBClusterIdentifier': sourceDBClusterIdentifier,
      if (sourceDBInstanceIdentifier != null)
        'SourceDBInstanceIdentifier': sourceDBInstanceIdentifier,
      if (sourceRegion != null) 'SourceRegion': sourceRegion,
      if (storageThroughput != null)
        'StorageThroughput': storageThroughput.toString(),
      if (storageType != null) 'StorageType': storageType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (upgradeStorageConfig != null)
        'UpgradeStorageConfig': upgradeStorageConfig.toString(),
      if (useDefaultProcessorFeatures != null)
        'UseDefaultProcessorFeatures': useDefaultProcessorFeatures.toString(),
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBInstanceReadReplica',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBInstanceReadReplicaResult',
    );
    return CreateDBInstanceReadReplicaResult.fromXml($result);
  }

  /// Creates a new DB parameter group.
  ///
  /// A DB parameter group is initially created with the default parameters for
  /// the database engine used by the DB instance. To provide custom values for
  /// any of the parameters, you must modify the group after creating it using
  /// <code>ModifyDBParameterGroup</code>. Once you've created a DB parameter
  /// group, you need to associate it with your DB instance using
  /// <code>ModifyDBInstance</code>. When you associate a new DB parameter group
  /// with a running DB instance, you need to reboot the DB instance without
  /// failover for the new DB parameter group and associated settings to take
  /// effect.
  ///
  /// This command doesn't apply to RDS Custom.
  /// <important>
  /// After you create a DB parameter group, you should wait at least 5 minutes
  /// before creating your first DB instance that uses that DB parameter group
  /// as the default parameter group. This allows Amazon RDS to fully complete
  /// the create action before the parameter group is used as the default for a
  /// new DB instance. This is especially important for parameters that are
  /// critical when creating the default database for a DB instance, such as the
  /// character set for the default database defined by the
  /// <code>character_set_database</code> parameter. You can use the
  /// <i>Parameter Groups</i> option of the <a
  /// href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
  /// <i>DescribeDBParameters</i> command to verify that your DB parameter group
  /// has been created or modified.
  /// </important>
  ///
  /// May throw [DBParameterGroupQuotaExceededFault].
  /// May throw [DBParameterGroupAlreadyExistsFault].
  ///
  /// Parameter [dBParameterGroupFamily] :
  /// The DB parameter group family name. A DB parameter group can be associated
  /// with one and only one DB parameter group family, and can be applied only
  /// to a DB instance running a database engine and engine version compatible
  /// with that DB parameter group family.
  ///
  /// To list all of the available parameter group families for a DB engine, use
  /// the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --query
  /// "DBEngineVersions[].DBParameterGroupFamily" --engine &lt;engine&gt;</code>
  ///
  /// For example, to list all of the available parameter group families for the
  /// MySQL DB engine, use the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --query
  /// "DBEngineVersions[].DBParameterGroupFamily" --engine mysql</code>
  /// <note>
  /// The output contains duplicates.
  /// </note>
  /// The following are the valid DB engine values:
  ///
  /// <ul>
  /// <li>
  /// <code>aurora-mysql</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql</code>
  /// </li>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul> <note>
  /// This value is stored as a lowercase string.
  /// </note>
  ///
  /// Parameter [description] :
  /// The description for the DB parameter group.
  ///
  /// Parameter [tags] :
  /// Tags to assign to the DB parameter group.
  Future<CreateDBParameterGroupResult> createDBParameterGroup({
    required String dBParameterGroupFamily,
    required String dBParameterGroupName,
    required String description,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'DBParameterGroupFamily': dBParameterGroupFamily,
      'DBParameterGroupName': dBParameterGroupName,
      'Description': description,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBParameterGroupResult',
    );
    return CreateDBParameterGroupResult.fromXml($result);
  }

  /// Creates a new DB proxy.
  ///
  /// May throw [InvalidSubnet].
  /// May throw [DBProxyAlreadyExistsFault].
  /// May throw [DBProxyQuotaExceededFault].
  ///
  /// Parameter [auth] :
  /// The authorization mechanism that the proxy uses.
  ///
  /// Parameter [dBProxyName] :
  /// The identifier for the proxy. This name must be unique for all proxies
  /// owned by your Amazon Web Services account in the specified Amazon Web
  /// Services Region. An identifier must begin with a letter and must contain
  /// only ASCII letters, digits, and hyphens; it can't end with a hyphen or
  /// contain two consecutive hyphens.
  ///
  /// Parameter [engineFamily] :
  /// The kinds of databases that the proxy can connect to. This value
  /// determines which database network protocol the proxy recognizes when it
  /// interprets network traffic to and from the database. For Aurora MySQL, RDS
  /// for MariaDB, and RDS for MySQL databases, specify <code>MYSQL</code>. For
  /// Aurora PostgreSQL and RDS for PostgreSQL databases, specify
  /// <code>POSTGRESQL</code>. For RDS for Microsoft SQL Server, specify
  /// <code>SQLSERVER</code>.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to
  /// access secrets in Amazon Web Services Secrets Manager.
  ///
  /// Parameter [vpcSubnetIds] :
  /// One or more VPC subnet IDs to associate with the new proxy.
  ///
  /// Parameter [debugLogging] :
  /// Specifies whether the proxy includes detailed information about SQL
  /// statements in its logs. This information helps you to debug issues
  /// involving SQL behavior or the performance and scalability of the proxy
  /// connections. The debug information includes the text of SQL statements
  /// that you submit through the proxy. Thus, only enable this setting when
  /// needed for debugging, and only when you have security measures in place to
  /// safeguard any sensitive information that appears in the logs.
  ///
  /// Parameter [idleClientTimeout] :
  /// The number of seconds that a connection to the proxy can be inactive
  /// before the proxy disconnects it. You can set this value higher or lower
  /// than the connection timeout limit for the associated database.
  ///
  /// Parameter [requireTLS] :
  /// Specifies whether Transport Layer Security (TLS) encryption is required
  /// for connections to the proxy. By enabling this setting, you can enforce
  /// encrypted TLS connections to the proxy.
  ///
  /// Parameter [tags] :
  /// An optional set of key-value pairs to associate arbitrary data of your
  /// choosing with the proxy.
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// One or more VPC security group IDs to associate with the new proxy.
  Future<CreateDBProxyResponse> createDBProxy({
    required List<UserAuthConfig> auth,
    required String dBProxyName,
    required EngineFamily engineFamily,
    required String roleArn,
    required List<String> vpcSubnetIds,
    bool? debugLogging,
    int? idleClientTimeout,
    bool? requireTLS,
    List<Tag>? tags,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      if (auth.isEmpty)
        'Auth': ''
      else
        for (var i1 = 0; i1 < auth.length; i1++)
          for (var e3 in auth[i1].toQueryMap().entries)
            'Auth.member.${i1 + 1}.${e3.key}': e3.value,
      'DBProxyName': dBProxyName,
      'EngineFamily': engineFamily.value,
      'RoleArn': roleArn,
      if (vpcSubnetIds.isEmpty)
        'VpcSubnetIds': ''
      else
        for (var i1 = 0; i1 < vpcSubnetIds.length; i1++)
          'VpcSubnetIds.member.${i1 + 1}': vpcSubnetIds[i1],
      if (debugLogging != null) 'DebugLogging': debugLogging.toString(),
      if (idleClientTimeout != null)
        'IdleClientTimeout': idleClientTimeout.toString(),
      if (requireTLS != null) 'RequireTLS': requireTLS.toString(),
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.member.${i1 + 1}': vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBProxy',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBProxyResult',
    );
    return CreateDBProxyResponse.fromXml($result);
  }

  /// Creates a <code>DBProxyEndpoint</code>. Only applies to proxies that are
  /// associated with Aurora DB clusters. You can use DB proxy endpoints to
  /// specify read/write or read-only access to the DB cluster. You can also use
  /// DB proxy endpoints to access a DB proxy through a different VPC than the
  /// proxy's default VPC.
  ///
  /// May throw [InvalidSubnet].
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyEndpointAlreadyExistsFault].
  /// May throw [DBProxyEndpointQuotaExceededFault].
  /// May throw [InvalidDBProxyStateFault].
  ///
  /// Parameter [dBProxyEndpointName] :
  /// The name of the DB proxy endpoint to create.
  ///
  /// Parameter [dBProxyName] :
  /// The name of the DB proxy associated with the DB proxy endpoint that you
  /// create.
  ///
  /// Parameter [vpcSubnetIds] :
  /// The VPC subnet IDs for the DB proxy endpoint that you create. You can
  /// specify a different set of subnet IDs than for the original DB proxy.
  ///
  /// Parameter [targetRole] :
  /// The role of the DB proxy endpoint. The role determines whether the
  /// endpoint can be used for read/write or only read operations. The default
  /// is <code>READ_WRITE</code>. The only role that proxies for RDS for
  /// Microsoft SQL Server support is <code>READ_WRITE</code>.
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// The VPC security group IDs for the DB proxy endpoint that you create. You
  /// can specify a different set of security group IDs than for the original DB
  /// proxy. The default is the default security group for the VPC.
  Future<CreateDBProxyEndpointResponse> createDBProxyEndpoint({
    required String dBProxyEndpointName,
    required String dBProxyName,
    required List<String> vpcSubnetIds,
    List<Tag>? tags,
    DBProxyEndpointTargetRole? targetRole,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBProxyEndpointName': dBProxyEndpointName,
      'DBProxyName': dBProxyName,
      if (vpcSubnetIds.isEmpty)
        'VpcSubnetIds': ''
      else
        for (var i1 = 0; i1 < vpcSubnetIds.length; i1++)
          'VpcSubnetIds.member.${i1 + 1}': vpcSubnetIds[i1],
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (targetRole != null) 'TargetRole': targetRole.value,
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.member.${i1 + 1}': vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBProxyEndpoint',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBProxyEndpointResult',
    );
    return CreateDBProxyEndpointResponse.fromXml($result);
  }

  /// Creates a new DB security group. DB security groups control access to a DB
  /// instance.
  ///
  /// A DB security group controls access to EC2-Classic DB instances that are
  /// not in a VPC.
  /// <note>
  /// EC2-Classic was retired on August 15, 2022. If you haven't migrated from
  /// EC2-Classic to a VPC, we recommend that you migrate as soon as possible.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate
  /// from EC2-Classic to a VPC</a> in the <i>Amazon EC2 User Guide</i>, the
  /// blog <a
  /// href="http://aws.amazon.com/blogs/aws/ec2-classic-is-retiring-heres-how-to-prepare/">EC2-Classic
  /// Networking is Retiring – Here’s How to Prepare</a>, and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.Non-VPC2VPC.html">Moving
  /// a DB instance not in a VPC into a VPC</a> in the <i>Amazon RDS User
  /// Guide</i>.
  /// </note>
  ///
  /// May throw [DBSecurityGroupAlreadyExistsFault].
  /// May throw [DBSecurityGroupQuotaExceededFault].
  /// May throw [DBSecurityGroupNotSupportedFault].
  ///
  /// Parameter [dBSecurityGroupDescription] :
  /// The description for the DB security group.
  ///
  /// Parameter [dBSecurityGroupName] :
  /// The name for the DB security group. This value is stored as a lowercase
  /// string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// <li>
  /// Must not be "Default"
  /// </li>
  /// </ul>
  /// Example: <code>mysecuritygroup</code>
  ///
  /// Parameter [tags] :
  /// Tags to assign to the DB security group.
  Future<CreateDBSecurityGroupResult> createDBSecurityGroup({
    required String dBSecurityGroupDescription,
    required String dBSecurityGroupName,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'DBSecurityGroupDescription': dBSecurityGroupDescription,
      'DBSecurityGroupName': dBSecurityGroupName,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBSecurityGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBSecurityGroupResult',
    );
    return CreateDBSecurityGroupResult.fromXml($result);
  }

  /// Creates a new DB shard group for Aurora Limitless Database. You must
  /// enable Aurora Limitless Database to create a DB shard group.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// May throw [DBShardGroupAlreadyExistsFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [MaxDBShardGroupLimitReached].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidMaxAcuFault].
  /// May throw [UnsupportedDBEngineVersionFault].
  /// May throw [InvalidVPCNetworkStateFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The name of the primary DB cluster for the DB shard group.
  ///
  /// Parameter [dBShardGroupIdentifier] :
  /// The name of the DB shard group.
  ///
  /// Parameter [maxACU] :
  /// The maximum capacity of the DB shard group in Aurora capacity units
  /// (ACUs).
  ///
  /// Parameter [computeRedundancy] :
  /// Specifies whether to create standby instances for the DB shard group.
  /// Valid values are the following:
  ///
  /// <ul>
  /// <li>
  /// 0 - Creates a single, primary DB instance for each physical shard. This is
  /// the default value, and the only one supported for the preview.
  /// </li>
  /// <li>
  /// 1 - Creates a primary DB instance and a standby instance in a different
  /// Availability Zone (AZ) for each physical shard.
  /// </li>
  /// <li>
  /// 2 - Creates a primary DB instance and two standby instances in different
  /// AZs for each physical shard.
  /// </li>
  /// </ul>
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB shard group is publicly accessible.
  ///
  /// When the DB shard group is publicly accessible, its Domain Name System
  /// (DNS) endpoint resolves to the private IP address from within the DB shard
  /// group's virtual private cloud (VPC). It resolves to the public IP address
  /// from outside of the DB shard group's VPC. Access to the DB shard group is
  /// ultimately controlled by the security group it uses. That public access is
  /// not permitted if the security group assigned to the DB shard group doesn't
  /// permit it.
  ///
  /// When the DB shard group isn't publicly accessible, it is an internal DB
  /// shard group with a DNS name that resolves to a private IP address.
  ///
  /// Default: The default behavior varies depending on whether
  /// <code>DBSubnetGroupName</code> is specified.
  ///
  /// If <code>DBSubnetGroupName</code> isn't specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the default VPC in the target Region doesn’t have an internet gateway
  /// attached to it, the DB shard group is private.
  /// </li>
  /// <li>
  /// If the default VPC in the target Region has an internet gateway attached
  /// to it, the DB shard group is public.
  /// </li>
  /// </ul>
  /// If <code>DBSubnetGroupName</code> is specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the subnets are part of a VPC that doesn’t have an internet gateway
  /// attached to it, the DB shard group is private.
  /// </li>
  /// <li>
  /// If the subnets are part of a VPC that has an internet gateway attached to
  /// it, the DB shard group is public.
  /// </li>
  /// </ul>
  Future<DBShardGroup> createDBShardGroup({
    required String dBClusterIdentifier,
    required String dBShardGroupIdentifier,
    required double maxACU,
    int? computeRedundancy,
    bool? publiclyAccessible,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      'DBShardGroupIdentifier': dBShardGroupIdentifier,
      'MaxACU': maxACU.toString(),
      if (computeRedundancy != null)
        'ComputeRedundancy': computeRedundancy.toString(),
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBShardGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBShardGroupResult',
    );
    return DBShardGroup.fromXml($result);
  }

  /// Creates a snapshot of a DB instance. The source DB instance must be in the
  /// <code>available</code> or <code>storage-optimization</code> state.
  ///
  /// May throw [DBSnapshotAlreadyExistsFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [SnapshotQuotaExceededFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The identifier of the DB instance that you want to create the snapshot of.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DBInstance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSnapshotIdentifier] :
  /// The identifier for the DB snapshot.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be null, empty, or blank
  /// </li>
  /// <li>
  /// Must contain from 1 to 255 letters, numbers, or hyphens
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul>
  /// Example: <code>my-snapshot-id</code>
  Future<CreateDBSnapshotResult> createDBSnapshot({
    required String dBInstanceIdentifier,
    required String dBSnapshotIdentifier,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      'DBSnapshotIdentifier': dBSnapshotIdentifier,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBSnapshot',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBSnapshotResult',
    );
    return CreateDBSnapshotResult.fromXml($result);
  }

  /// Creates a new DB subnet group. DB subnet groups must contain at least one
  /// subnet in at least two AZs in the Amazon Web Services Region.
  ///
  /// May throw [DBSubnetGroupAlreadyExistsFault].
  /// May throw [DBSubnetGroupQuotaExceededFault].
  /// May throw [DBSubnetQuotaExceededFault].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [InvalidSubnet].
  ///
  /// Parameter [dBSubnetGroupDescription] :
  /// The description for the DB subnet group.
  ///
  /// Parameter [dBSubnetGroupName] :
  /// The name for the DB subnet group. This value is stored as a lowercase
  /// string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain no more than 255 letters, numbers, periods, underscores,
  /// spaces, or hyphens.
  /// </li>
  /// <li>
  /// Must not be default.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// </ul>
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [subnetIds] :
  /// The EC2 Subnet IDs for the DB subnet group.
  ///
  /// Parameter [tags] :
  /// Tags to assign to the DB subnet group.
  Future<CreateDBSubnetGroupResult> createDBSubnetGroup({
    required String dBSubnetGroupDescription,
    required String dBSubnetGroupName,
    required List<String> subnetIds,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'DBSubnetGroupDescription': dBSubnetGroupDescription,
      'DBSubnetGroupName': dBSubnetGroupName,
      if (subnetIds.isEmpty)
        'SubnetIds': ''
      else
        for (var i1 = 0; i1 < subnetIds.length; i1++)
          'SubnetIds.SubnetIdentifier.${i1 + 1}': subnetIds[i1],
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateDBSubnetGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateDBSubnetGroupResult',
    );
    return CreateDBSubnetGroupResult.fromXml($result);
  }

  /// Creates an RDS event notification subscription. This operation requires a
  /// topic Amazon Resource Name (ARN) created by either the RDS console, the
  /// SNS console, or the SNS API. To obtain an ARN with SNS, you must create a
  /// topic in Amazon SNS and subscribe to the topic. The ARN is displayed in
  /// the SNS console.
  ///
  /// You can specify the type of source (<code>SourceType</code>) that you want
  /// to be notified of and provide a list of RDS sources
  /// (<code>SourceIds</code>) that triggers the events. You can also provide a
  /// list of event categories (<code>EventCategories</code>) for events that
  /// you want to be notified of. For example, you can specify
  /// <code>SourceType</code> = <code>db-instance</code>, <code>SourceIds</code>
  /// = <code>mydbinstance1</code>, <code>mydbinstance2</code> and
  /// <code>EventCategories</code> = <code>Availability</code>,
  /// <code>Backup</code>.
  ///
  /// If you specify both the <code>SourceType</code> and
  /// <code>SourceIds</code>, such as <code>SourceType</code> =
  /// <code>db-instance</code> and <code>SourceIds</code> =
  /// <code>myDBInstance1</code>, you are notified of all the
  /// <code>db-instance</code> events for the specified source. If you specify a
  /// <code>SourceType</code> but do not specify <code>SourceIds</code>, you
  /// receive notice of the events for that source type for all your RDS
  /// sources. If you don't specify either the SourceType or the
  /// <code>SourceIds</code>, you are notified of events generated from all RDS
  /// sources belonging to your customer account.
  ///
  /// For more information about subscribing to an event for RDS DB engines, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Subscribing.html">
  /// Subscribing to Amazon RDS event notification</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// For more information about subscribing to an event for Aurora DB engines,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Subscribing.html">
  /// Subscribing to Amazon RDS event notification</a> in the <i>Amazon Aurora
  /// User Guide</i>.
  ///
  /// May throw [EventSubscriptionQuotaExceededFault].
  /// May throw [SubscriptionAlreadyExistFault].
  /// May throw [SNSInvalidTopicFault].
  /// May throw [SNSNoAuthorizationFault].
  /// May throw [SNSTopicArnNotFoundFault].
  /// May throw [SubscriptionCategoryNotFoundFault].
  /// May throw [SourceNotFoundFault].
  ///
  /// Parameter [snsTopicArn] :
  /// The Amazon Resource Name (ARN) of the SNS topic created for event
  /// notification. SNS automatically creates the ARN when you create a topic
  /// and subscribe to it.
  /// <note>
  /// RDS doesn't support FIFO (first in, first out) topics. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">Message
  /// ordering and deduplication (FIFO topics)</a> in the <i>Amazon Simple
  /// Notification Service Developer Guide</i>.
  /// </note>
  ///
  /// Parameter [subscriptionName] :
  /// The name of the subscription.
  ///
  /// Constraints: The name must be less than 255 characters.
  ///
  /// Parameter [enabled] :
  /// Specifies whether to activate the subscription. If the event notification
  /// subscription isn't activated, the subscription is created but not active.
  ///
  /// Parameter [eventCategories] :
  /// A list of event categories for a particular source type
  /// (<code>SourceType</code>) that you want to subscribe to. You can see a
  /// list of the categories for a given source type in the "Amazon RDS event
  /// categories and event messages" section of the <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html">
  /// <i>Amazon RDS User Guide</i> </a> or the <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html">
  /// <i>Amazon Aurora User Guide</i> </a>. You can also see this list by using
  /// the <code>DescribeEventCategories</code> operation.
  ///
  /// Parameter [sourceIds] :
  /// The list of identifiers of the event sources for which events are
  /// returned. If not specified, then all sources are included in the response.
  /// An identifier must begin with a letter and must contain only ASCII
  /// letters, digits, and hyphens. It can't end with a hyphen or contain two
  /// consecutive hyphens.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If <code>SourceIds</code> are supplied, <code>SourceType</code> must also
  /// be provided.
  /// </li>
  /// <li>
  /// If the source type is a DB instance, a <code>DBInstanceIdentifier</code>
  /// value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB cluster, a <code>DBClusterIdentifier</code>
  /// value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB parameter group, a
  /// <code>DBParameterGroupName</code> value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB security group, a
  /// <code>DBSecurityGroupName</code> value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code>
  /// value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB cluster snapshot, a
  /// <code>DBClusterSnapshotIdentifier</code> value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is an RDS Proxy, a <code>DBProxyName</code> value must
  /// be supplied.
  /// </li>
  /// </ul>
  ///
  /// Parameter [sourceType] :
  /// The type of source that is generating the events. For example, if you want
  /// to be notified of events generated by a DB instance, you set this
  /// parameter to <code>db-instance</code>. For RDS Proxy events, specify
  /// <code>db-proxy</code>. If this value isn't specified, all events are
  /// returned.
  ///
  /// Valid Values:<code> db-instance | db-cluster | db-parameter-group |
  /// db-security-group | db-snapshot | db-cluster-snapshot | db-proxy |
  /// zero-etl | custom-engine-version | blue-green-deployment </code>
  Future<CreateEventSubscriptionResult> createEventSubscription({
    required String snsTopicArn,
    required String subscriptionName,
    bool? enabled,
    List<String>? eventCategories,
    List<String>? sourceIds,
    String? sourceType,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'SnsTopicArn': snsTopicArn,
      'SubscriptionName': subscriptionName,
      if (enabled != null) 'Enabled': enabled.toString(),
      if (eventCategories != null)
        if (eventCategories.isEmpty)
          'EventCategories': ''
        else
          for (var i1 = 0; i1 < eventCategories.length; i1++)
            'EventCategories.EventCategory.${i1 + 1}': eventCategories[i1],
      if (sourceIds != null)
        if (sourceIds.isEmpty)
          'SourceIds': ''
        else
          for (var i1 = 0; i1 < sourceIds.length; i1++)
            'SourceIds.SourceId.${i1 + 1}': sourceIds[i1],
      if (sourceType != null) 'SourceType': sourceType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateEventSubscription',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateEventSubscriptionResult',
    );
    return CreateEventSubscriptionResult.fromXml($result);
  }

  /// Creates an Aurora global database spread across multiple Amazon Web
  /// Services Regions. The global database contains a single primary cluster
  /// with read-write capability, and a read-only secondary cluster that
  /// receives data from the primary cluster through high-speed replication
  /// performed by the Aurora storage subsystem.
  ///
  /// You can create a global database that is initially empty, and then create
  /// the primary and secondary DB clusters in the global database. Or you can
  /// specify an existing Aurora cluster during the create operation, and this
  /// cluster becomes the primary cluster of the global database.
  /// <note>
  /// This operation applies only to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [GlobalClusterAlreadyExistsFault].
  /// May throw [GlobalClusterQuotaExceededFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBClusterNotFoundFault].
  ///
  /// Parameter [databaseName] :
  /// The name for your database of up to 64 alphanumeric characters. If you
  /// don't specify a name, Amazon Aurora doesn't create a database in the
  /// global database cluster.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified if <code>SourceDBClusterIdentifier</code> is specified.
  /// In this case, Amazon Aurora uses the database name from the source DB
  /// cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether to enable deletion protection for the new global
  /// database cluster. The global database can't be deleted when deletion
  /// protection is enabled.
  ///
  /// Parameter [engine] :
  /// The database engine to use for this global database cluster.
  ///
  /// Valid Values: <code>aurora-mysql | aurora-postgresql</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified if <code>SourceDBClusterIdentifier</code> is specified.
  /// In this case, Amazon Aurora uses the engine of the source DB cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [engineLifecycleSupport] :
  /// The life cycle type for this global database cluster.
  /// <note>
  /// By default, this value is set to
  /// <code>open-source-rds-extended-support</code>, which enrolls your global
  /// cluster into Amazon RDS Extended Support. At the end of standard support,
  /// you can avoid charges for Extended Support by setting the value to
  /// <code>open-source-rds-extended-support-disabled</code>. In this case,
  /// creating the global cluster will fail if the DB major version is past its
  /// end of standard support date.
  /// </note>
  /// This setting only applies to Aurora PostgreSQL-based global databases.
  ///
  /// You can use this setting to enroll your global cluster into Amazon RDS
  /// Extended Support. With RDS Extended Support, you can run the selected
  /// major engine version on your global cluster past the end of standard
  /// support for that engine version. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid Values: <code>open-source-rds-extended-support |
  /// open-source-rds-extended-support-disabled</code>
  ///
  /// Default: <code>open-source-rds-extended-support</code>
  ///
  /// Parameter [engineVersion] :
  /// The engine version to use for this global database cluster.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified if <code>SourceDBClusterIdentifier</code> is specified.
  /// In this case, Amazon Aurora uses the engine version of the source DB
  /// cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [globalClusterIdentifier] :
  /// The cluster identifier for this global database cluster. This parameter is
  /// stored as a lowercase string.
  ///
  /// Parameter [sourceDBClusterIdentifier] :
  /// The Amazon Resource Name (ARN) to use as the primary cluster of the global
  /// database.
  ///
  /// If you provide a value for this parameter, don't specify values for the
  /// following settings because Amazon Aurora uses the values from the
  /// specified source DB cluster:
  ///
  /// <ul>
  /// <li>
  /// <code>DatabaseName</code>
  /// </li>
  /// <li>
  /// <code>Engine</code>
  /// </li>
  /// <li>
  /// <code>EngineVersion</code>
  /// </li>
  /// <li>
  /// <code>StorageEncrypted</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [storageEncrypted] :
  /// Specifies whether to enable storage encryption for the new global database
  /// cluster.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified if <code>SourceDBClusterIdentifier</code> is specified.
  /// In this case, Amazon Aurora uses the setting from the source DB cluster.
  /// </li>
  /// </ul>
  Future<CreateGlobalClusterResult> createGlobalCluster({
    String? databaseName,
    bool? deletionProtection,
    String? engine,
    String? engineLifecycleSupport,
    String? engineVersion,
    String? globalClusterIdentifier,
    String? sourceDBClusterIdentifier,
    bool? storageEncrypted,
  }) async {
    final $request = <String, String>{
      if (databaseName != null) 'DatabaseName': databaseName,
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (engine != null) 'Engine': engine,
      if (engineLifecycleSupport != null)
        'EngineLifecycleSupport': engineLifecycleSupport,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (globalClusterIdentifier != null)
        'GlobalClusterIdentifier': globalClusterIdentifier,
      if (sourceDBClusterIdentifier != null)
        'SourceDBClusterIdentifier': sourceDBClusterIdentifier,
      if (storageEncrypted != null)
        'StorageEncrypted': storageEncrypted.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateGlobalCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateGlobalClusterResult',
    );
    return CreateGlobalClusterResult.fromXml($result);
  }

  /// Creates a zero-ETL integration with Amazon Redshift.
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [IntegrationAlreadyExistsFault].
  /// May throw [IntegrationQuotaExceededFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [IntegrationConflictOperationFault].
  ///
  /// Parameter [integrationName] :
  /// The name of the integration.
  ///
  /// Parameter [sourceArn] :
  /// The Amazon Resource Name (ARN) of the database to use as the source for
  /// replication.
  ///
  /// Parameter [targetArn] :
  /// The ARN of the Redshift data warehouse to use as the target for
  /// replication.
  ///
  /// Parameter [additionalEncryptionContext] :
  /// An optional set of non-secret key–value pairs that contains additional
  /// contextual information about the data. For more information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
  /// context</a> in the <i>Amazon Web Services Key Management Service Developer
  /// Guide</i>.
  ///
  /// You can only include this parameter if you specify the
  /// <code>KMSKeyId</code> parameter.
  ///
  /// Parameter [dataFilter] :
  /// Data filtering options for the integration. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/zero-etl.filtering.html">Data
  /// filtering for Aurora zero-ETL integrations with Amazon Redshift</a>.
  ///
  /// Valid for: Integrations with Aurora MySQL source DB clusters only
  ///
  /// Parameter [description] :
  /// A description of the integration.
  ///
  /// Parameter [kMSKeyId] :
  /// The Amazon Web Services Key Management System (Amazon Web Services KMS)
  /// key identifier for the key to use to encrypt the integration. If you don't
  /// specify an encryption key, RDS uses a default Amazon Web Services owned
  /// key.
  Future<Integration> createIntegration({
    required String integrationName,
    required String sourceArn,
    required String targetArn,
    Map<String, String>? additionalEncryptionContext,
    String? dataFilter,
    String? description,
    String? kMSKeyId,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'IntegrationName': integrationName,
      'SourceArn': sourceArn,
      'TargetArn': targetArn,
      if (additionalEncryptionContext != null)
        for (var e1 in additionalEncryptionContext.entries
            .toList()
            .asMap()
            .entries) ...{
          'AdditionalEncryptionContext.entry.${e1.key + 1}.key': e1.value.key,
          'AdditionalEncryptionContext.entry.${e1.key + 1}.value':
              e1.value.value,
        },
      if (dataFilter != null) 'DataFilter': dataFilter,
      if (description != null) 'Description': description,
      if (kMSKeyId != null) 'KMSKeyId': kMSKeyId,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateIntegration',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateIntegrationResult',
    );
    return Integration.fromXml($result);
  }

  /// Creates a new option group. You can create up to 20 option groups.
  ///
  /// This command doesn't apply to RDS Custom.
  ///
  /// May throw [OptionGroupAlreadyExistsFault].
  /// May throw [OptionGroupQuotaExceededFault].
  ///
  /// Parameter [engineName] :
  /// The name of the engine to associate this option group with.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mariadb</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [majorEngineVersion] :
  /// Specifies the major version of the engine that this option group should be
  /// associated with.
  ///
  /// Parameter [optionGroupDescription] :
  /// The description of the option group.
  ///
  /// Parameter [optionGroupName] :
  /// Specifies the name of the option group to be created.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul>
  /// Example: <code>myoptiongroup</code>
  ///
  /// Parameter [tags] :
  /// Tags to assign to the option group.
  Future<CreateOptionGroupResult> createOptionGroup({
    required String engineName,
    required String majorEngineVersion,
    required String optionGroupDescription,
    required String optionGroupName,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'EngineName': engineName,
      'MajorEngineVersion': majorEngineVersion,
      'OptionGroupDescription': optionGroupDescription,
      'OptionGroupName': optionGroupName,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateOptionGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateOptionGroupResult',
    );
    return CreateOptionGroupResult.fromXml($result);
  }

  /// Creates a tenant database in a DB instance that uses the multi-tenant
  /// configuration. Only RDS for Oracle container database (CDB) instances are
  /// supported.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [TenantDatabaseAlreadyExistsFault].
  /// May throw [TenantDatabaseQuotaExceededFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The user-supplied DB instance identifier. RDS creates your tenant database
  /// in this DB instance. This parameter isn't case-sensitive.
  ///
  /// Parameter [masterUserPassword] :
  /// The password for the master user in your tenant database.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 8 to 30 characters.
  /// </li>
  /// <li>
  /// Can include any printable ASCII character except forward slash
  /// (<code>/</code>), double quote (<code>"</code>), at symbol
  /// (<code>@</code>), ampersand (<code>&amp;</code>), or single quote
  /// (<code>'</code>).
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUsername] :
  /// The name for the master user account in your tenant database. RDS creates
  /// this user account in the tenant database and grants privileges to the
  /// master user. This parameter is case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 16 letters, numbers, or underscores.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't be a reserved word for the chosen database engine.
  /// </li>
  /// </ul>
  ///
  /// Parameter [tenantDBName] :
  /// The user-supplied name of the tenant database that you want to create in
  /// your DB instance. This parameter has the same constraints as
  /// <code>DBName</code> in <code>CreateDBInstance</code>.
  ///
  /// Parameter [characterSetName] :
  /// The character set for your tenant database. If you don't specify a value,
  /// the character set name defaults to <code>AL32UTF8</code>.
  ///
  /// Parameter [ncharCharacterSetName] :
  /// The <code>NCHAR</code> value for the tenant database.
  Future<CreateTenantDatabaseResult> createTenantDatabase({
    required String dBInstanceIdentifier,
    required String masterUserPassword,
    required String masterUsername,
    required String tenantDBName,
    String? characterSetName,
    String? ncharCharacterSetName,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      'MasterUserPassword': masterUserPassword,
      'MasterUsername': masterUsername,
      'TenantDBName': tenantDBName,
      if (characterSetName != null) 'CharacterSetName': characterSetName,
      if (ncharCharacterSetName != null)
        'NcharCharacterSetName': ncharCharacterSetName,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'CreateTenantDatabase',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'CreateTenantDatabaseResult',
    );
    return CreateTenantDatabaseResult.fromXml($result);
  }

  /// Deletes a blue/green deployment.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using
  /// Amazon RDS Blue/Green Deployments for database updates</a> in the
  /// <i>Amazon RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html">Using
  /// Amazon RDS Blue/Green Deployments for database updates</a> in the
  /// <i>Amazon Aurora User Guide</i>.
  ///
  /// May throw [BlueGreenDeploymentNotFoundFault].
  /// May throw [InvalidBlueGreenDeploymentStateFault].
  ///
  /// Parameter [blueGreenDeploymentIdentifier] :
  /// The unique identifier of the blue/green deployment to delete. This
  /// parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match an existing blue/green deployment identifier.
  /// </li>
  /// </ul>
  ///
  /// Parameter [deleteTarget] :
  /// Specifies whether to delete the resources in the green environment. You
  /// can't specify this option if the blue/green deployment <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_BlueGreenDeployment.html">status</a>
  /// is <code>SWITCHOVER_COMPLETED</code>.
  Future<DeleteBlueGreenDeploymentResponse> deleteBlueGreenDeployment({
    required String blueGreenDeploymentIdentifier,
    bool? deleteTarget,
  }) async {
    final $request = <String, String>{
      'BlueGreenDeploymentIdentifier': blueGreenDeploymentIdentifier,
      if (deleteTarget != null) 'DeleteTarget': deleteTarget.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteBlueGreenDeployment',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteBlueGreenDeploymentResult',
    );
    return DeleteBlueGreenDeploymentResponse.fromXml($result);
  }

  /// Deletes a custom engine version. To run this command, make sure you meet
  /// the following prerequisites:
  ///
  /// <ul>
  /// <li>
  /// The CEV must not be the default for RDS Custom. If it is, change the
  /// default before running this command.
  /// </li>
  /// <li>
  /// The CEV must not be associated with an RDS Custom DB instance, RDS Custom
  /// instance snapshot, or automated backup of your RDS Custom instance.
  /// </li>
  /// </ul>
  /// Typically, deletion takes a few minutes.
  /// <note>
  /// The MediaImport service that imports files from Amazon S3 to create CEVs
  /// isn't integrated with Amazon Web Services CloudTrail. If you turn on data
  /// logging for Amazon RDS in CloudTrail, calls to the
  /// <code>DeleteCustomDbEngineVersion</code> event aren't logged. However, you
  /// might see calls from the API gateway that accesses your Amazon S3 bucket.
  /// These calls originate from the MediaImport service for the
  /// <code>DeleteCustomDbEngineVersion</code> event.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.delete">Deleting
  /// a CEV</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [CustomDBEngineVersionNotFoundFault].
  /// May throw [InvalidCustomDBEngineVersionStateFault].
  ///
  /// Parameter [engine] :
  /// The database engine. RDS Custom for Oracle supports the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>custom-oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2-cdb</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [engineVersion] :
  /// The custom engine version (CEV) for your DB instance. This option is
  /// required for RDS Custom, but optional for Amazon RDS. The combination of
  /// <code>Engine</code> and <code>EngineVersion</code> is unique per customer
  /// per Amazon Web Services Region.
  Future<DBEngineVersion> deleteCustomDBEngineVersion({
    required String engine,
    required String engineVersion,
  }) async {
    final $request = <String, String>{
      'Engine': engine,
      'EngineVersion': engineVersion,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteCustomDBEngineVersion',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteCustomDBEngineVersionResult',
    );
    return DBEngineVersion.fromXml($result);
  }

  /// The DeleteDBCluster action deletes a previously provisioned DB cluster.
  /// When you delete a DB cluster, all automated backups for that DB cluster
  /// are deleted and can't be recovered. Manual DB cluster snapshots of the
  /// specified DB cluster are not deleted.
  ///
  /// If you're deleting a Multi-AZ DB cluster with read replicas, all cluster
  /// members are terminated and read replicas are promoted to standalone
  /// instances.
  ///
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBClusterSnapshotAlreadyExistsFault].
  /// May throw [SnapshotQuotaExceededFault].
  /// May throw [InvalidDBClusterSnapshotStateFault].
  /// May throw [DBClusterAutomatedBackupQuotaExceededFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier for the DB cluster to be deleted. This parameter
  /// isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match an existing DBClusterIdentifier.
  /// </li>
  /// </ul>
  ///
  /// Parameter [deleteAutomatedBackups] :
  /// Specifies whether to remove automated backups immediately after the DB
  /// cluster is deleted. This parameter isn't case-sensitive. The default is to
  /// remove automated backups immediately after the DB cluster is deleted.
  ///
  /// Parameter [finalDBSnapshotIdentifier] :
  /// The DB cluster snapshot identifier of the new DB cluster snapshot created
  /// when <code>SkipFinalSnapshot</code> is disabled.
  /// <note>
  /// Specifying this parameter and also skipping the creation of a final DB
  /// cluster snapshot with the <code>SkipFinalShapshot</code> parameter results
  /// in an error.
  /// </note>
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul>
  ///
  /// Parameter [skipFinalSnapshot] :
  /// Specifies whether to skip the creation of a final DB cluster snapshot
  /// before the DB cluster is deleted. If skip is specified, no DB cluster
  /// snapshot is created. If skip isn't specified, a DB cluster snapshot is
  /// created before the DB cluster is deleted. By default, skip isn't
  /// specified, and the DB cluster snapshot is created. By default, this
  /// parameter is disabled.
  /// <note>
  /// You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if
  /// <code>SkipFinalSnapshot</code> is disabled.
  /// </note>
  Future<DeleteDBClusterResult> deleteDBCluster({
    required String dBClusterIdentifier,
    bool? deleteAutomatedBackups,
    String? finalDBSnapshotIdentifier,
    bool? skipFinalSnapshot,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      if (deleteAutomatedBackups != null)
        'DeleteAutomatedBackups': deleteAutomatedBackups.toString(),
      if (finalDBSnapshotIdentifier != null)
        'FinalDBSnapshotIdentifier': finalDBSnapshotIdentifier,
      if (skipFinalSnapshot != null)
        'SkipFinalSnapshot': skipFinalSnapshot.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBClusterResult',
    );
    return DeleteDBClusterResult.fromXml($result);
  }

  /// Deletes automated backups using the <code>DbClusterResourceId</code> value
  /// of the source DB cluster or the Amazon Resource Name (ARN) of the
  /// automated backups.
  ///
  /// May throw [InvalidDBClusterAutomatedBackupStateFault].
  /// May throw [DBClusterAutomatedBackupNotFoundFault].
  ///
  /// Parameter [dbClusterResourceId] :
  /// The identifier for the source DB cluster, which can't be changed and which
  /// is unique to an Amazon Web Services Region.
  Future<DeleteDBClusterAutomatedBackupResult> deleteDBClusterAutomatedBackup({
    required String dbClusterResourceId,
  }) async {
    final $request = <String, String>{
      'DbClusterResourceId': dbClusterResourceId,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBClusterAutomatedBackup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBClusterAutomatedBackupResult',
    );
    return DeleteDBClusterAutomatedBackupResult.fromXml($result);
  }

  /// Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.
  /// <note>
  /// This action only applies to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [InvalidDBClusterEndpointStateFault].
  /// May throw [DBClusterEndpointNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  ///
  /// Parameter [dBClusterEndpointIdentifier] :
  /// The identifier associated with the custom endpoint. This parameter is
  /// stored as a lowercase string.
  Future<DBClusterEndpoint> deleteDBClusterEndpoint({
    required String dBClusterEndpointIdentifier,
  }) async {
    final $request = <String, String>{
      'DBClusterEndpointIdentifier': dBClusterEndpointIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBClusterEndpoint',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBClusterEndpointResult',
    );
    return DBClusterEndpoint.fromXml($result);
  }

  /// Deletes a specified DB cluster parameter group. The DB cluster parameter
  /// group to be deleted can't be associated with any DB clusters.
  ///
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [InvalidDBParameterGroupStateFault].
  /// May throw [DBParameterGroupNotFoundFault].
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of the DB cluster parameter group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be the name of an existing DB cluster parameter group.
  /// </li>
  /// <li>
  /// You can't delete a default DB cluster parameter group.
  /// </li>
  /// <li>
  /// Can't be associated with any DB clusters.
  /// </li>
  /// </ul>
  Future<void> deleteDBClusterParameterGroup({
    required String dBClusterParameterGroupName,
  }) async {
    final $request = <String, String>{
      'DBClusterParameterGroupName': dBClusterParameterGroupName,
    };
    await _protocol.send(
      $request,
      action: 'DeleteDBClusterParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Deletes a DB cluster snapshot. If the snapshot is being copied, the copy
  /// operation is terminated.
  /// <note>
  /// The DB cluster snapshot must be in the <code>available</code> state to be
  /// deleted.
  /// </note>
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [InvalidDBClusterSnapshotStateFault].
  /// May throw [DBClusterSnapshotNotFoundFault].
  ///
  /// Parameter [dBClusterSnapshotIdentifier] :
  /// The identifier of the DB cluster snapshot to delete.
  ///
  /// Constraints: Must be the name of an existing DB cluster snapshot in the
  /// <code>available</code> state.
  Future<DeleteDBClusterSnapshotResult> deleteDBClusterSnapshot({
    required String dBClusterSnapshotIdentifier,
  }) async {
    final $request = <String, String>{
      'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBClusterSnapshot',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBClusterSnapshotResult',
    );
    return DeleteDBClusterSnapshotResult.fromXml($result);
  }

  /// Deletes a previously provisioned DB instance. When you delete a DB
  /// instance, all automated backups for that instance are deleted and can't be
  /// recovered. However, manual DB snapshots of the DB instance aren't deleted.
  ///
  /// If you request a final DB snapshot, the status of the Amazon RDS DB
  /// instance is <code>deleting</code> until the DB snapshot is created. This
  /// operation can't be canceled or reverted after it begins. To monitor the
  /// status of this operation, use <code>DescribeDBInstance</code>.
  ///
  /// When a DB instance is in a failure state and has a status of
  /// <code>failed</code>, <code>incompatible-restore</code>, or
  /// <code>incompatible-network</code>, you can only delete it when you skip
  /// creation of the final snapshot with the <code>SkipFinalSnapshot</code>
  /// parameter.
  ///
  /// If the specified DB instance is part of an Amazon Aurora DB cluster, you
  /// can't delete the DB instance if both of the following conditions are true:
  ///
  /// <ul>
  /// <li>
  /// The DB cluster is a read replica of another Amazon Aurora DB cluster.
  /// </li>
  /// <li>
  /// The DB instance is the only instance in the DB cluster.
  /// </li>
  /// </ul>
  /// To delete a DB instance in this case, first use the
  /// <code>PromoteReadReplicaDBCluster</code> operation to promote the DB
  /// cluster so that it's no longer a read replica. After the promotion
  /// completes, use the <code>DeleteDBInstance</code> operation to delete the
  /// final instance in the DB cluster.
  /// <important>
  /// For RDS Custom DB instances, deleting the DB instance permanently deletes
  /// the EC2 instance and the associated EBS volumes. Make sure that you don't
  /// terminate or delete these resources before you delete the DB instance.
  /// Otherwise, deleting the DB instance and creation of the final snapshot
  /// might fail.
  /// </important>
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [DBSnapshotAlreadyExistsFault].
  /// May throw [SnapshotQuotaExceededFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBInstanceAutomatedBackupQuotaExceededFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The DB instance identifier for the DB instance to be deleted. This
  /// parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the name of an existing DB instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [deleteAutomatedBackups] :
  /// Specifies whether to remove automated backups immediately after the DB
  /// instance is deleted. This parameter isn't case-sensitive. The default is
  /// to remove automated backups immediately after the DB instance is deleted.
  ///
  /// Parameter [finalDBSnapshotIdentifier] :
  /// The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code>
  /// created when the <code>SkipFinalSnapshot</code> parameter is disabled.
  /// <note>
  /// If you enable this parameter and also enable SkipFinalShapshot, the
  /// command results in an error.
  /// </note>
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 255 letters or numbers.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// <li>
  /// Can't be specified when deleting a read replica.
  /// </li>
  /// </ul>
  ///
  /// Parameter [skipFinalSnapshot] :
  /// Specifies whether to skip the creation of a final DB snapshot before
  /// deleting the instance. If you enable this parameter, RDS doesn't create a
  /// DB snapshot. If you don't enable this parameter, RDS creates a DB snapshot
  /// before the DB instance is deleted. By default, skip isn't enabled, and the
  /// DB snapshot is created.
  /// <note>
  /// If you don't enable this parameter, you must specify the
  /// <code>FinalDBSnapshotIdentifier</code> parameter.
  /// </note>
  /// When a DB instance is in a failure state and has a status of
  /// <code>failed</code>, <code>incompatible-restore</code>, or
  /// <code>incompatible-network</code>, RDS can delete the instance only if you
  /// enable this parameter.
  ///
  /// If you delete a read replica or an RDS Custom instance, you must enable
  /// this setting.
  ///
  /// This setting is required for RDS Custom.
  Future<DeleteDBInstanceResult> deleteDBInstance({
    required String dBInstanceIdentifier,
    bool? deleteAutomatedBackups,
    String? finalDBSnapshotIdentifier,
    bool? skipFinalSnapshot,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      if (deleteAutomatedBackups != null)
        'DeleteAutomatedBackups': deleteAutomatedBackups.toString(),
      if (finalDBSnapshotIdentifier != null)
        'FinalDBSnapshotIdentifier': finalDBSnapshotIdentifier,
      if (skipFinalSnapshot != null)
        'SkipFinalSnapshot': skipFinalSnapshot.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBInstance',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBInstanceResult',
    );
    return DeleteDBInstanceResult.fromXml($result);
  }

  /// Deletes automated backups using the <code>DbiResourceId</code> value of
  /// the source DB instance or the Amazon Resource Name (ARN) of the automated
  /// backups.
  ///
  /// May throw [InvalidDBInstanceAutomatedBackupStateFault].
  /// May throw [DBInstanceAutomatedBackupNotFoundFault].
  ///
  /// Parameter [dBInstanceAutomatedBackupsArn] :
  /// The Amazon Resource Name (ARN) of the automated backups to delete, for
  /// example,
  /// <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [dbiResourceId] :
  /// The identifier for the source DB instance, which can't be changed and
  /// which is unique to an Amazon Web Services Region.
  Future<DeleteDBInstanceAutomatedBackupResult>
      deleteDBInstanceAutomatedBackup({
    String? dBInstanceAutomatedBackupsArn,
    String? dbiResourceId,
  }) async {
    final $request = <String, String>{
      if (dBInstanceAutomatedBackupsArn != null)
        'DBInstanceAutomatedBackupsArn': dBInstanceAutomatedBackupsArn,
      if (dbiResourceId != null) 'DbiResourceId': dbiResourceId,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBInstanceAutomatedBackup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBInstanceAutomatedBackupResult',
    );
    return DeleteDBInstanceAutomatedBackupResult.fromXml($result);
  }

  /// Deletes a specified DB parameter group. The DB parameter group to be
  /// deleted can't be associated with any DB instances.
  ///
  /// May throw [InvalidDBParameterGroupStateFault].
  /// May throw [DBParameterGroupNotFoundFault].
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be the name of an existing DB parameter group
  /// </li>
  /// <li>
  /// You can't delete a default DB parameter group
  /// </li>
  /// <li>
  /// Can't be associated with any DB instances
  /// </li>
  /// </ul>
  Future<void> deleteDBParameterGroup({
    required String dBParameterGroupName,
  }) async {
    final $request = <String, String>{
      'DBParameterGroupName': dBParameterGroupName,
    };
    await _protocol.send(
      $request,
      action: 'DeleteDBParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Deletes an existing DB proxy.
  ///
  /// May throw [DBProxyNotFoundFault].
  /// May throw [InvalidDBProxyStateFault].
  ///
  /// Parameter [dBProxyName] :
  /// The name of the DB proxy to delete.
  Future<DeleteDBProxyResponse> deleteDBProxy({
    required String dBProxyName,
  }) async {
    final $request = <String, String>{
      'DBProxyName': dBProxyName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBProxy',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBProxyResult',
    );
    return DeleteDBProxyResponse.fromXml($result);
  }

  /// Deletes a <code>DBProxyEndpoint</code>. Doing so removes the ability to
  /// access the DB proxy using the endpoint that you defined. The endpoint that
  /// you delete might have provided capabilities such as read/write or
  /// read-only operations, or using a different VPC than the DB proxy's default
  /// VPC.
  ///
  /// May throw [DBProxyEndpointNotFoundFault].
  /// May throw [InvalidDBProxyEndpointStateFault].
  ///
  /// Parameter [dBProxyEndpointName] :
  /// The name of the DB proxy endpoint to delete.
  Future<DeleteDBProxyEndpointResponse> deleteDBProxyEndpoint({
    required String dBProxyEndpointName,
  }) async {
    final $request = <String, String>{
      'DBProxyEndpointName': dBProxyEndpointName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBProxyEndpoint',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBProxyEndpointResult',
    );
    return DeleteDBProxyEndpointResponse.fromXml($result);
  }

  /// Deletes a DB security group.
  ///
  /// The specified DB security group must not be associated with any DB
  /// instances.
  /// <note>
  /// EC2-Classic was retired on August 15, 2022. If you haven't migrated from
  /// EC2-Classic to a VPC, we recommend that you migrate as soon as possible.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate
  /// from EC2-Classic to a VPC</a> in the <i>Amazon EC2 User Guide</i>, the
  /// blog <a
  /// href="http://aws.amazon.com/blogs/aws/ec2-classic-is-retiring-heres-how-to-prepare/">EC2-Classic
  /// Networking is Retiring – Here’s How to Prepare</a>, and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.Non-VPC2VPC.html">Moving
  /// a DB instance not in a VPC into a VPC</a> in the <i>Amazon RDS User
  /// Guide</i>.
  /// </note>
  ///
  /// May throw [InvalidDBSecurityGroupStateFault].
  /// May throw [DBSecurityGroupNotFoundFault].
  ///
  /// Parameter [dBSecurityGroupName] :
  /// The name of the DB security group to delete.
  /// <note>
  /// You can't delete the default DB security group.
  /// </note>
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// <li>
  /// Must not be "Default"
  /// </li>
  /// </ul>
  Future<void> deleteDBSecurityGroup({
    required String dBSecurityGroupName,
  }) async {
    final $request = <String, String>{
      'DBSecurityGroupName': dBSecurityGroupName,
    };
    await _protocol.send(
      $request,
      action: 'DeleteDBSecurityGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Deletes an Aurora Limitless Database DB shard group.
  ///
  /// May throw [DBShardGroupNotFoundFault].
  /// May throw [InvalidDBShardGroupStateFault].
  /// May throw [InvalidDBClusterStateFault].
  ///
  /// Parameter [dBShardGroupIdentifier] :
  /// Teh name of the DB shard group to delete.
  Future<DBShardGroup> deleteDBShardGroup({
    required String dBShardGroupIdentifier,
  }) async {
    final $request = <String, String>{
      'DBShardGroupIdentifier': dBShardGroupIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBShardGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBShardGroupResult',
    );
    return DBShardGroup.fromXml($result);
  }

  /// Deletes a DB snapshot. If the snapshot is being copied, the copy operation
  /// is terminated.
  /// <note>
  /// The DB snapshot must be in the <code>available</code> state to be deleted.
  /// </note>
  ///
  /// May throw [InvalidDBSnapshotStateFault].
  /// May throw [DBSnapshotNotFoundFault].
  ///
  /// Parameter [dBSnapshotIdentifier] :
  /// The DB snapshot identifier.
  ///
  /// Constraints: Must be the name of an existing DB snapshot in the
  /// <code>available</code> state.
  Future<DeleteDBSnapshotResult> deleteDBSnapshot({
    required String dBSnapshotIdentifier,
  }) async {
    final $request = <String, String>{
      'DBSnapshotIdentifier': dBSnapshotIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteDBSnapshot',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteDBSnapshotResult',
    );
    return DeleteDBSnapshotResult.fromXml($result);
  }

  /// Deletes a DB subnet group.
  /// <note>
  /// The specified database subnet group must not be associated with any DB
  /// instances.
  /// </note>
  ///
  /// May throw [InvalidDBSubnetGroupStateFault].
  /// May throw [InvalidDBSubnetStateFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  ///
  /// Parameter [dBSubnetGroupName] :
  /// The name of the database subnet group to delete.
  /// <note>
  /// You can't delete the default subnet group.
  /// </note>
  /// Constraints: Must match the name of an existing DBSubnetGroup. Must not be
  /// default.
  ///
  /// Example: <code>mydbsubnetgroup</code>
  Future<void> deleteDBSubnetGroup({
    required String dBSubnetGroupName,
  }) async {
    final $request = <String, String>{
      'DBSubnetGroupName': dBSubnetGroupName,
    };
    await _protocol.send(
      $request,
      action: 'DeleteDBSubnetGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Deletes an RDS event notification subscription.
  ///
  /// May throw [SubscriptionNotFoundFault].
  /// May throw [InvalidEventSubscriptionStateFault].
  ///
  /// Parameter [subscriptionName] :
  /// The name of the RDS event notification subscription you want to delete.
  Future<DeleteEventSubscriptionResult> deleteEventSubscription({
    required String subscriptionName,
  }) async {
    final $request = <String, String>{
      'SubscriptionName': subscriptionName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteEventSubscription',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteEventSubscriptionResult',
    );
    return DeleteEventSubscriptionResult.fromXml($result);
  }

  /// Deletes a global database cluster. The primary and secondary clusters must
  /// already be detached or destroyed first.
  /// <note>
  /// This action only applies to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [GlobalClusterNotFoundFault].
  /// May throw [InvalidGlobalClusterStateFault].
  ///
  /// Parameter [globalClusterIdentifier] :
  /// The cluster identifier of the global database cluster being deleted.
  Future<DeleteGlobalClusterResult> deleteGlobalCluster({
    required String globalClusterIdentifier,
  }) async {
    final $request = <String, String>{
      'GlobalClusterIdentifier': globalClusterIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteGlobalCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteGlobalClusterResult',
    );
    return DeleteGlobalClusterResult.fromXml($result);
  }

  /// Deletes a zero-ETL integration with Amazon Redshift.
  ///
  /// May throw [IntegrationNotFoundFault].
  /// May throw [IntegrationConflictOperationFault].
  /// May throw [InvalidIntegrationStateFault].
  ///
  /// Parameter [integrationIdentifier] :
  /// The unique identifier of the integration.
  Future<Integration> deleteIntegration({
    required String integrationIdentifier,
  }) async {
    final $request = <String, String>{
      'IntegrationIdentifier': integrationIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteIntegration',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteIntegrationResult',
    );
    return Integration.fromXml($result);
  }

  /// Deletes an existing option group.
  ///
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [InvalidOptionGroupStateFault].
  ///
  /// Parameter [optionGroupName] :
  /// The name of the option group to be deleted.
  /// <note>
  /// You can't delete default option groups.
  /// </note>
  Future<void> deleteOptionGroup({
    required String optionGroupName,
  }) async {
    final $request = <String, String>{
      'OptionGroupName': optionGroupName,
    };
    await _protocol.send(
      $request,
      action: 'DeleteOptionGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Deletes a tenant database from your DB instance. This command only applies
  /// to RDS for Oracle container database (CDB) instances.
  ///
  /// You can't delete a tenant database when it is the only tenant in the DB
  /// instance.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [TenantDatabaseNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The user-supplied identifier for the DB instance that contains the tenant
  /// database that you want to delete.
  ///
  /// Parameter [tenantDBName] :
  /// The user-supplied name of the tenant database that you want to remove from
  /// your DB instance. Amazon RDS deletes the tenant database with this name.
  /// This parameter isn’t case-sensitive.
  ///
  /// Parameter [finalDBSnapshotIdentifier] :
  /// The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code>
  /// created when the <code>SkipFinalSnapshot</code> parameter is disabled.
  /// <note>
  /// If you enable this parameter and also enable
  /// <code>SkipFinalShapshot</code>, the command results in an error.
  /// </note>
  ///
  /// Parameter [skipFinalSnapshot] :
  /// Specifies whether to skip the creation of a final DB snapshot before
  /// removing the tenant database from your DB instance. If you enable this
  /// parameter, RDS doesn't create a DB snapshot. If you don't enable this
  /// parameter, RDS creates a DB snapshot before it deletes the tenant
  /// database. By default, RDS doesn't skip the final snapshot. If you don't
  /// enable this parameter, you must specify the
  /// <code>FinalDBSnapshotIdentifier</code> parameter.
  Future<DeleteTenantDatabaseResult> deleteTenantDatabase({
    required String dBInstanceIdentifier,
    required String tenantDBName,
    String? finalDBSnapshotIdentifier,
    bool? skipFinalSnapshot,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      'TenantDBName': tenantDBName,
      if (finalDBSnapshotIdentifier != null)
        'FinalDBSnapshotIdentifier': finalDBSnapshotIdentifier,
      if (skipFinalSnapshot != null)
        'SkipFinalSnapshot': skipFinalSnapshot.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DeleteTenantDatabase',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeleteTenantDatabaseResult',
    );
    return DeleteTenantDatabaseResult.fromXml($result);
  }

  /// Remove the association between one or more <code>DBProxyTarget</code> data
  /// structures and a <code>DBProxyTargetGroup</code>.
  ///
  /// May throw [DBProxyTargetNotFoundFault].
  /// May throw [DBProxyTargetGroupNotFoundFault].
  /// May throw [DBProxyNotFoundFault].
  /// May throw [InvalidDBProxyStateFault].
  ///
  /// Parameter [dBProxyName] :
  /// The identifier of the <code>DBProxy</code> that is associated with the
  /// <code>DBProxyTargetGroup</code>.
  ///
  /// Parameter [dBClusterIdentifiers] :
  /// One or more DB cluster identifiers.
  ///
  /// Parameter [dBInstanceIdentifiers] :
  /// One or more DB instance identifiers.
  ///
  /// Parameter [targetGroupName] :
  /// The identifier of the <code>DBProxyTargetGroup</code>.
  Future<void> deregisterDBProxyTargets({
    required String dBProxyName,
    List<String>? dBClusterIdentifiers,
    List<String>? dBInstanceIdentifiers,
    String? targetGroupName,
  }) async {
    final $request = <String, String>{
      'DBProxyName': dBProxyName,
      if (dBClusterIdentifiers != null)
        if (dBClusterIdentifiers.isEmpty)
          'DBClusterIdentifiers': ''
        else
          for (var i1 = 0; i1 < dBClusterIdentifiers.length; i1++)
            'DBClusterIdentifiers.member.${i1 + 1}': dBClusterIdentifiers[i1],
      if (dBInstanceIdentifiers != null)
        if (dBInstanceIdentifiers.isEmpty)
          'DBInstanceIdentifiers': ''
        else
          for (var i1 = 0; i1 < dBInstanceIdentifiers.length; i1++)
            'DBInstanceIdentifiers.member.${i1 + 1}': dBInstanceIdentifiers[i1],
      if (targetGroupName != null) 'TargetGroupName': targetGroupName,
    };
    await _protocol.send(
      $request,
      action: 'DeregisterDBProxyTargets',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DeregisterDBProxyTargetsResult',
    );
  }

  /// Lists all of the attributes for a customer account. The attributes include
  /// Amazon RDS quotas for the account, such as the number of DB instances
  /// allowed. The description for a quota includes the quota name, current
  /// usage toward that quota, and the quota's maximum value.
  ///
  /// This command doesn't take any parameters.
  Future<AccountAttributesMessage> describeAccountAttributes() async {
    final $request = <String, String>{};
    final $result = await _protocol.send(
      $request,
      action: 'DescribeAccountAttributes',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeAccountAttributesResult',
    );
    return AccountAttributesMessage.fromXml($result);
  }

  /// Describes one or more blue/green deployments.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using
  /// Amazon RDS Blue/Green Deployments for database updates</a> in the
  /// <i>Amazon RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html">
  /// Using Amazon RDS Blue/Green Deployments for database updates</a> in the
  /// <i>Amazon Aurora User Guide</i>.
  ///
  /// May throw [BlueGreenDeploymentNotFoundFault].
  ///
  /// Parameter [blueGreenDeploymentIdentifier] :
  /// The blue/green deployment identifier. If you specify this parameter, the
  /// response only includes information about the specific blue/green
  /// deployment. This parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match an existing blue/green deployment identifier.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more blue/green deployments to describe.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>blue-green-deployment-identifier</code> - Accepts system-generated
  /// identifiers for blue/green deployments. The results list only includes
  /// information about the blue/green deployments with the specified
  /// identifiers.
  /// </li>
  /// <li>
  /// <code>blue-green-deployment-name</code> - Accepts user-supplied names for
  /// blue/green deployments. The results list only includes information about
  /// the blue/green deployments with the specified names.
  /// </li>
  /// <li>
  /// <code>source</code> - Accepts source databases for a blue/green
  /// deployment. The results list only includes information about the
  /// blue/green deployments with the specified source databases.
  /// </li>
  /// <li>
  /// <code>target</code> - Accepts target databases for a blue/green
  /// deployment. The results list only includes information about the
  /// blue/green deployments with the specified target databases.
  /// </li>
  /// </ul>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeBlueGreenDeployments</code> request. If you specify this
  /// parameter, the response only includes records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a minimum of 20.
  /// </li>
  /// <li>
  /// Can't exceed 100.
  /// </li>
  /// </ul>
  Future<DescribeBlueGreenDeploymentsResponse> describeBlueGreenDeployments({
    String? blueGreenDeploymentIdentifier,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    _s.validateNumRange(
      'maxRecords',
      maxRecords,
      20,
      100,
    );
    final $request = <String, String>{
      if (blueGreenDeploymentIdentifier != null)
        'BlueGreenDeploymentIdentifier': blueGreenDeploymentIdentifier,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeBlueGreenDeployments',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeBlueGreenDeploymentsResult',
    );
    return DescribeBlueGreenDeploymentsResponse.fromXml($result);
  }

  /// Lists the set of certificate authority (CA) certificates provided by
  /// Amazon RDS for this Amazon Web Services account.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  ///
  /// May throw [CertificateNotFoundFault].
  ///
  /// Parameter [certificateIdentifier] :
  /// The user-supplied certificate identifier. If this parameter is specified,
  /// information for only the identified certificate is returned. This
  /// parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match an existing CertificateIdentifier.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeCertificates</code> request. If this parameter is specified,
  /// the response includes only records beyond the marker, up to the value
  /// specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<CertificateMessage> describeCertificates({
    String? certificateIdentifier,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (certificateIdentifier != null)
        'CertificateIdentifier': certificateIdentifier,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeCertificates',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeCertificatesResult',
    );
    return CertificateMessage.fromXml($result);
  }

  /// Displays backups for both current and deleted DB clusters. For example,
  /// use this operation to find details about automated backups for previously
  /// deleted clusters. Current clusters are returned for both the
  /// <code>DescribeDBClusterAutomatedBackups</code> and
  /// <code>DescribeDBClusters</code> operations.
  ///
  /// All parameters are optional.
  ///
  /// May throw [DBClusterAutomatedBackupNotFoundFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// (Optional) The user-supplied DB cluster identifier. If this parameter is
  /// specified, it must match the identifier of an existing DB cluster. It
  /// returns information from the specific DB cluster's automated backup. This
  /// parameter isn't case-sensitive.
  ///
  /// Parameter [dbClusterResourceId] :
  /// The resource ID of the DB cluster that is the source of the automated
  /// backup. This parameter isn't case-sensitive.
  ///
  /// Parameter [filters] :
  /// A filter that specifies which resources to return based on status.
  ///
  /// Supported filters are the following:
  ///
  /// <ul>
  /// <li>
  /// <code>status</code>
  ///
  /// <ul>
  /// <li>
  /// <code>retained</code> - Automated backups for deleted clusters and after
  /// backup replication is stopped.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and Amazon
  /// Resource Names (ARNs). The results list includes only information about
  /// the DB cluster automated backups identified by these ARNs.
  /// </li>
  /// <li>
  /// <code>db-cluster-resource-id</code> - Accepts DB resource identifiers and
  /// Amazon Resource Names (ARNs). The results list includes only information
  /// about the DB cluster resources identified by these ARNs.
  /// </li>
  /// </ul>
  /// Returns all resources by default. The status for each resource is
  /// specified in the response.
  ///
  /// Parameter [marker] :
  /// The pagination token provided in the previous request. If this parameter
  /// is specified the response includes only records beyond the marker, up to
  /// <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  Future<DBClusterAutomatedBackupMessage> describeDBClusterAutomatedBackups({
    String? dBClusterIdentifier,
    String? dbClusterResourceId,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBClusterIdentifier != null)
        'DBClusterIdentifier': dBClusterIdentifier,
      if (dbClusterResourceId != null)
        'DbClusterResourceId': dbClusterResourceId,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBClusterAutomatedBackups',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBClusterAutomatedBackupsResult',
    );
    return DBClusterAutomatedBackupMessage.fromXml($result);
  }

  /// Returns information about backtracks for a DB cluster.
  ///
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  /// <note>
  /// This action only applies to Aurora MySQL DB clusters.
  /// </note>
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBClusterBacktrackNotFoundFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier of the DB cluster to be described. This
  /// parameter is stored as a lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 alphanumeric characters or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster1</code>
  ///
  /// Parameter [backtrackIdentifier] :
  /// If specified, this value is the backtrack identifier of the backtrack to
  /// be described.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain a valid universally unique identifier (UUID). For more
  /// information about UUIDs, see <a
  /// href="https://en.wikipedia.org/wiki/Universally_unique_identifier">Universally
  /// unique identifier</a>.
  /// </li>
  /// </ul>
  /// Example: <code>123e4567-e89b-12d3-a456-426655440000</code>
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more DB clusters to describe. Supported
  /// filters include the following:
  ///
  /// <ul>
  /// <li>
  /// <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The
  /// results list includes information about only the backtracks identified by
  /// these identifiers.
  /// </li>
  /// <li>
  /// <code>db-cluster-backtrack-status</code> - Accepts any of the following
  /// backtrack status values:
  ///
  /// <ul>
  /// <li>
  /// <code>applying</code>
  /// </li>
  /// <li>
  /// <code>completed</code>
  /// </li>
  /// <li>
  /// <code>failed</code>
  /// </li>
  /// <li>
  /// <code>pending</code>
  /// </li>
  /// </ul>
  /// The results list includes information about only the backtracks identified
  /// by these values.
  /// </li>
  /// </ul>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusterBacktracks</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DBClusterBacktrackMessage> describeDBClusterBacktracks({
    required String dBClusterIdentifier,
    String? backtrackIdentifier,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      if (backtrackIdentifier != null)
        'BacktrackIdentifier': backtrackIdentifier,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBClusterBacktracks',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBClusterBacktracksResult',
    );
    return DBClusterBacktrackMessage.fromXml($result);
  }

  /// Returns information about endpoints for an Amazon Aurora DB cluster.
  /// <note>
  /// This action only applies to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [DBClusterNotFoundFault].
  ///
  /// Parameter [dBClusterEndpointIdentifier] :
  /// The identifier of the endpoint to describe. This parameter is stored as a
  /// lowercase string.
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier of the DB cluster associated with the endpoint.
  /// This parameter is stored as a lowercase string.
  ///
  /// Parameter [filters] :
  /// A set of name-value pairs that define which endpoints to include in the
  /// output. The filters are specified as name-value pairs, in the format
  /// <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>.
  /// <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>,
  /// <code>db-cluster-endpoint-custom-type</code>,
  /// <code>db-cluster-endpoint-id</code>,
  /// <code>db-cluster-endpoint-status</code>. <code>Values</code> for the
  /// <code> db-cluster-endpoint-type</code> filter can be one or more of:
  /// <code>reader</code>, <code>writer</code>, <code>custom</code>.
  /// <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code>
  /// filter can be one or more of: <code>reader</code>, <code>any</code>.
  /// <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter
  /// can be one or more of: <code>available</code>, <code>creating</code>,
  /// <code>deleting</code>, <code>inactive</code>, <code>modifying</code>.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusterEndpoints</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DBClusterEndpointMessage> describeDBClusterEndpoints({
    String? dBClusterEndpointIdentifier,
    String? dBClusterIdentifier,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBClusterEndpointIdentifier != null)
        'DBClusterEndpointIdentifier': dBClusterEndpointIdentifier,
      if (dBClusterIdentifier != null)
        'DBClusterIdentifier': dBClusterIdentifier,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBClusterEndpoints',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBClusterEndpointsResult',
    );
    return DBClusterEndpointMessage.fromXml($result);
  }

  /// Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a
  /// <code>DBClusterParameterGroupName</code> parameter is specified, the list
  /// will contain only the description of the specified DB cluster parameter
  /// group.
  ///
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBParameterGroupNotFoundFault].
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of a specific DB cluster parameter group to return details for.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DBClusterParameterGroup.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusterParameterGroups</code> request. If this parameter
  /// is specified, the response includes only records beyond the marker, up to
  /// the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DBClusterParameterGroupsMessage> describeDBClusterParameterGroups({
    String? dBClusterParameterGroupName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBClusterParameterGroupName != null)
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBClusterParameterGroups',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBClusterParameterGroupsResult',
    );
    return DBClusterParameterGroupsMessage.fromXml($result);
  }

  /// Returns the detailed parameter list for a particular DB cluster parameter
  /// group.
  ///
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBParameterGroupNotFoundFault].
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of a specific DB cluster parameter group to return parameter
  /// details for.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DBClusterParameterGroup.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusterParameters</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [source] :
  /// A specific source to return parameters for.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>customer</code>
  /// </li>
  /// <li>
  /// <code>engine</code>
  /// </li>
  /// <li>
  /// <code>service</code>
  /// </li>
  /// </ul>
  Future<DBClusterParameterGroupDetails> describeDBClusterParameters({
    required String dBClusterParameterGroupName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? source,
  }) async {
    final $request = <String, String>{
      'DBClusterParameterGroupName': dBClusterParameterGroupName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (source != null) 'Source': source,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBClusterParameters',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBClusterParametersResult',
    );
    return DBClusterParameterGroupDetails.fromXml($result);
  }

  /// Returns a list of DB cluster snapshot attribute names and values for a
  /// manual DB cluster snapshot.
  ///
  /// When sharing snapshots with other Amazon Web Services accounts,
  /// <code>DescribeDBClusterSnapshotAttributes</code> returns the
  /// <code>restore</code> attribute and a list of IDs for the Amazon Web
  /// Services accounts that are authorized to copy or restore the manual DB
  /// cluster snapshot. If <code>all</code> is included in the list of values
  /// for the <code>restore</code> attribute, then the manual DB cluster
  /// snapshot is public and can be copied or restored by all Amazon Web
  /// Services accounts.
  ///
  /// To add or remove access for an Amazon Web Services account to copy or
  /// restore a manual DB cluster snapshot, or to make the manual DB cluster
  /// snapshot public or private, use the
  /// <code>ModifyDBClusterSnapshotAttribute</code> API action.
  ///
  /// May throw [DBClusterSnapshotNotFoundFault].
  ///
  /// Parameter [dBClusterSnapshotIdentifier] :
  /// The identifier for the DB cluster snapshot to describe the attributes for.
  Future<DescribeDBClusterSnapshotAttributesResult>
      describeDBClusterSnapshotAttributes({
    required String dBClusterSnapshotIdentifier,
  }) async {
    final $request = <String, String>{
      'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBClusterSnapshotAttributes',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBClusterSnapshotAttributesResult',
    );
    return DescribeDBClusterSnapshotAttributesResult.fromXml($result);
  }

  /// Returns information about DB cluster snapshots. This API action supports
  /// pagination.
  ///
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBClusterSnapshotNotFoundFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The ID of the DB cluster to retrieve the list of DB cluster snapshots for.
  /// This parameter can't be used in conjunction with the
  /// <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't
  /// case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the identifier of an existing DBCluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBClusterSnapshotIdentifier] :
  /// A specific DB cluster snapshot identifier to describe. This parameter
  /// can't be used in conjunction with the <code>DBClusterIdentifier</code>
  /// parameter. This value is stored as a lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the identifier of an existing DBClusterSnapshot.
  /// </li>
  /// <li>
  /// If this identifier is for an automated snapshot, the
  /// <code>SnapshotType</code> parameter must also be specified.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dbClusterResourceId] :
  /// A specific DB cluster resource ID to describe.
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more DB cluster snapshots to describe.
  ///
  /// Supported filters:
  ///
  /// <ul>
  /// <li>
  /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster
  /// Amazon Resource Names (ARNs).
  /// </li>
  /// <li>
  /// <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot
  /// identifiers.
  /// </li>
  /// <li>
  /// <code>snapshot-type</code> - Accepts types of DB cluster snapshots.
  /// </li>
  /// <li>
  /// <code>engine</code> - Accepts names of database engines.
  /// </li>
  /// </ul>
  ///
  /// Parameter [includePublic] :
  /// Specifies whether to include manual DB cluster snapshots that are public
  /// and can be copied or restored by any Amazon Web Services account. By
  /// default, the public snapshots are not included.
  ///
  /// You can share a manual DB cluster snapshot as public by using the
  /// <a>ModifyDBClusterSnapshotAttribute</a> API action.
  ///
  /// Parameter [includeShared] :
  /// Specifies whether to include shared manual DB cluster snapshots from other
  /// Amazon Web Services accounts that this Amazon Web Services account has
  /// been given permission to copy or restore. By default, these snapshots are
  /// not included.
  ///
  /// You can give an Amazon Web Services account permission to restore a manual
  /// DB cluster snapshot from another Amazon Web Services account by the
  /// <code>ModifyDBClusterSnapshotAttribute</code> API action.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusterSnapshots</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [snapshotType] :
  /// The type of DB cluster snapshots to be returned. You can specify one of
  /// the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>automated</code> - Return all DB cluster snapshots that have been
  /// automatically taken by Amazon RDS for my Amazon Web Services account.
  /// </li>
  /// <li>
  /// <code>manual</code> - Return all DB cluster snapshots that have been taken
  /// by my Amazon Web Services account.
  /// </li>
  /// <li>
  /// <code>shared</code> - Return all manual DB cluster snapshots that have
  /// been shared to my Amazon Web Services account.
  /// </li>
  /// <li>
  /// <code>public</code> - Return all DB cluster snapshots that have been
  /// marked as public.
  /// </li>
  /// </ul>
  /// If you don't specify a <code>SnapshotType</code> value, then both
  /// automated and manual DB cluster snapshots are returned. You can include
  /// shared DB cluster snapshots with these results by enabling the
  /// <code>IncludeShared</code> parameter. You can include public DB cluster
  /// snapshots with these results by enabling the <code>IncludePublic</code>
  /// parameter.
  ///
  /// The <code>IncludeShared</code> and <code>IncludePublic</code> parameters
  /// don't apply for <code>SnapshotType</code> values of <code>manual</code> or
  /// <code>automated</code>. The <code>IncludePublic</code> parameter doesn't
  /// apply when <code>SnapshotType</code> is set to <code>shared</code>. The
  /// <code>IncludeShared</code> parameter doesn't apply when
  /// <code>SnapshotType</code> is set to <code>public</code>.
  Future<DBClusterSnapshotMessage> describeDBClusterSnapshots({
    String? dBClusterIdentifier,
    String? dBClusterSnapshotIdentifier,
    String? dbClusterResourceId,
    List<Filter>? filters,
    bool? includePublic,
    bool? includeShared,
    String? marker,
    int? maxRecords,
    String? snapshotType,
  }) async {
    final $request = <String, String>{
      if (dBClusterIdentifier != null)
        'DBClusterIdentifier': dBClusterIdentifier,
      if (dBClusterSnapshotIdentifier != null)
        'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
      if (dbClusterResourceId != null)
        'DbClusterResourceId': dbClusterResourceId,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (includePublic != null) 'IncludePublic': includePublic.toString(),
      if (includeShared != null) 'IncludeShared': includeShared.toString(),
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (snapshotType != null) 'SnapshotType': snapshotType,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBClusterSnapshots',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBClusterSnapshotsResult',
    );
    return DBClusterSnapshotMessage.fromXml($result);
  }

  /// Describes existing Amazon Aurora DB clusters and Multi-AZ DB clusters.
  /// This API supports pagination.
  ///
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This operation can also return information for Amazon Neptune DB instances
  /// and Amazon DocumentDB instances.
  ///
  /// May throw [DBClusterNotFoundFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The user-supplied DB cluster identifier or the Amazon Resource Name (ARN)
  /// of the DB cluster. If this parameter is specified, information for only
  /// the specific DB cluster is returned. This parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match an existing DB cluster identifier.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more DB clusters to describe.
  ///
  /// Supported Filters:
  ///
  /// <ul>
  /// <li>
  /// <code>clone-group-id</code> - Accepts clone group identifiers. The results
  /// list only includes information about the DB clusters associated with these
  /// clone groups.
  /// </li>
  /// <li>
  /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster
  /// Amazon Resource Names (ARNs). The results list only includes information
  /// about the DB clusters identified by these ARNs.
  /// </li>
  /// <li>
  /// <code>db-cluster-resource-id</code> - Accepts DB cluster resource
  /// identifiers. The results list will only include information about the DB
  /// clusters identified by these DB cluster resource identifiers.
  /// </li>
  /// <li>
  /// <code>domain</code> - Accepts Active Directory directory IDs. The results
  /// list only includes information about the DB clusters associated with these
  /// domains.
  /// </li>
  /// <li>
  /// <code>engine</code> - Accepts engine names. The results list only includes
  /// information about the DB clusters for these engines.
  /// </li>
  /// </ul>
  ///
  /// Parameter [includeShared] :
  /// Specifies whether the output includes information about clusters shared
  /// from other Amazon Web Services accounts.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusters</code> request. If this parameter is specified,
  /// the response includes only records beyond the marker, up to the value
  /// specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100
  Future<DBClusterMessage> describeDBClusters({
    String? dBClusterIdentifier,
    List<Filter>? filters,
    bool? includeShared,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBClusterIdentifier != null)
        'DBClusterIdentifier': dBClusterIdentifier,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (includeShared != null) 'IncludeShared': includeShared.toString(),
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBClusters',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBClustersResult',
    );
    return DBClusterMessage.fromXml($result);
  }

  /// Describes the properties of specific versions of DB engines.
  ///
  /// Parameter [dBParameterGroupFamily] :
  /// The name of a specific DB parameter group family to return details for.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match an existing DB parameter group family.
  /// </li>
  /// </ul>
  ///
  /// Parameter [defaultOnly] :
  /// Specifies whether to return only the default version of the specified
  /// engine or the engine and major version combination.
  ///
  /// Parameter [engine] :
  /// The database engine to return version details for.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>aurora-mysql</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mariadb</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [engineVersion] :
  /// A specific database engine version to return details for.
  ///
  /// Example: <code>5.1.49</code>
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more DB engine versions to describe.
  ///
  /// Supported filters:
  ///
  /// <ul>
  /// <li>
  /// <code>db-parameter-group-family</code> - Accepts parameter groups family
  /// names. The results list only includes information about the DB engine
  /// versions for these parameter group families.
  /// </li>
  /// <li>
  /// <code>engine</code> - Accepts engine names. The results list only includes
  /// information about the DB engine versions for these engines.
  /// </li>
  /// <li>
  /// <code>engine-mode</code> - Accepts DB engine modes. The results list only
  /// includes information about the DB engine versions for these engine modes.
  /// Valid DB engine modes are the following:
  ///
  /// <ul>
  /// <li>
  /// <code>global</code>
  /// </li>
  /// <li>
  /// <code>multimaster</code>
  /// </li>
  /// <li>
  /// <code>parallelquery</code>
  /// </li>
  /// <li>
  /// <code>provisioned</code>
  /// </li>
  /// <li>
  /// <code>serverless</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>engine-version</code> - Accepts engine versions. The results list
  /// only includes information about the DB engine versions for these engine
  /// versions.
  /// </li>
  /// <li>
  /// <code>status</code> - Accepts engine version statuses. The results list
  /// only includes information about the DB engine versions for these statuses.
  /// Valid statuses are the following:
  ///
  /// <ul>
  /// <li>
  /// <code>available</code>
  /// </li>
  /// <li>
  /// <code>deprecated</code>
  /// </li>
  /// </ul> </li>
  /// </ul>
  ///
  /// Parameter [includeAll] :
  /// Specifies whether to also list the engine versions that aren't available.
  /// The default is to list only available engine versions.
  ///
  /// Parameter [listSupportedCharacterSets] :
  /// Specifies whether to list the supported character sets for each engine
  /// version.
  ///
  /// If this parameter is enabled and the requested engine supports the
  /// <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>,
  /// the response includes a list of supported character sets for each engine
  /// version.
  ///
  /// For RDS Custom, the default is not to list supported character sets. If
  /// you enable this parameter, RDS Custom returns no results.
  ///
  /// Parameter [listSupportedTimezones] :
  /// Specifies whether to list the supported time zones for each engine
  /// version.
  ///
  /// If this parameter is enabled and the requested engine supports the
  /// <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the
  /// response includes a list of supported time zones for each engine version.
  ///
  /// For RDS Custom, the default is not to list supported time zones. If you
  /// enable this parameter, RDS Custom returns no results.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more than the
  /// <code>MaxRecords</code> value is available, a pagination token called a
  /// marker is included in the response so you can retrieve the remaining
  /// results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DBEngineVersionMessage> describeDBEngineVersions({
    String? dBParameterGroupFamily,
    bool? defaultOnly,
    String? engine,
    String? engineVersion,
    List<Filter>? filters,
    bool? includeAll,
    bool? listSupportedCharacterSets,
    bool? listSupportedTimezones,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBParameterGroupFamily != null)
        'DBParameterGroupFamily': dBParameterGroupFamily,
      if (defaultOnly != null) 'DefaultOnly': defaultOnly.toString(),
      if (engine != null) 'Engine': engine,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (includeAll != null) 'IncludeAll': includeAll.toString(),
      if (listSupportedCharacterSets != null)
        'ListSupportedCharacterSets': listSupportedCharacterSets.toString(),
      if (listSupportedTimezones != null)
        'ListSupportedTimezones': listSupportedTimezones.toString(),
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBEngineVersions',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBEngineVersionsResult',
    );
    return DBEngineVersionMessage.fromXml($result);
  }

  /// Displays backups for both current and deleted instances. For example, use
  /// this operation to find details about automated backups for previously
  /// deleted instances. Current instances with retention periods greater than
  /// zero (0) are returned for both the
  /// <code>DescribeDBInstanceAutomatedBackups</code> and
  /// <code>DescribeDBInstances</code> operations.
  ///
  /// All parameters are optional.
  ///
  /// May throw [DBInstanceAutomatedBackupNotFoundFault].
  ///
  /// Parameter [dBInstanceAutomatedBackupsArn] :
  /// The Amazon Resource Name (ARN) of the replicated automated backups, for
  /// example,
  /// <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// (Optional) The user-supplied instance identifier. If this parameter is
  /// specified, it must match the identifier of an existing DB instance. It
  /// returns information from the specific DB instance's automated backup. This
  /// parameter isn't case-sensitive.
  ///
  /// Parameter [dbiResourceId] :
  /// The resource ID of the DB instance that is the source of the automated
  /// backup. This parameter isn't case-sensitive.
  ///
  /// Parameter [filters] :
  /// A filter that specifies which resources to return based on status.
  ///
  /// Supported filters are the following:
  ///
  /// <ul>
  /// <li>
  /// <code>status</code>
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - Automated backups for current instances.
  /// </li>
  /// <li>
  /// <code>creating</code> - Automated backups that are waiting for the first
  /// automated snapshot to be available.
  /// </li>
  /// <li>
  /// <code>retained</code> - Automated backups for deleted instances and after
  /// backup replication is stopped.
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon
  /// Resource Names (ARNs). The results list includes only information about
  /// the DB instance automated backups identified by these ARNs.
  /// </li>
  /// <li>
  /// <code>dbi-resource-id</code> - Accepts DB resource identifiers and Amazon
  /// Resource Names (ARNs). The results list includes only information about
  /// the DB instance resources identified by these ARNs.
  /// </li>
  /// </ul>
  /// Returns all resources by default. The status for each resource is
  /// specified in the response.
  ///
  /// Parameter [marker] :
  /// The pagination token provided in the previous request. If this parameter
  /// is specified the response includes only records beyond the marker, up to
  /// <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  Future<DBInstanceAutomatedBackupMessage> describeDBInstanceAutomatedBackups({
    String? dBInstanceAutomatedBackupsArn,
    String? dBInstanceIdentifier,
    String? dbiResourceId,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBInstanceAutomatedBackupsArn != null)
        'DBInstanceAutomatedBackupsArn': dBInstanceAutomatedBackupsArn,
      if (dBInstanceIdentifier != null)
        'DBInstanceIdentifier': dBInstanceIdentifier,
      if (dbiResourceId != null) 'DbiResourceId': dbiResourceId,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBInstanceAutomatedBackups',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBInstanceAutomatedBackupsResult',
    );
    return DBInstanceAutomatedBackupMessage.fromXml($result);
  }

  /// Describes provisioned RDS instances. This API supports pagination.
  /// <note>
  /// This operation can also return information for Amazon Neptune DB instances
  /// and Amazon DocumentDB instances.
  /// </note>
  ///
  /// May throw [DBInstanceNotFoundFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The user-supplied instance identifier or the Amazon Resource Name (ARN) of
  /// the DB instance. If this parameter is specified, information from only the
  /// specific DB instance is returned. This parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the identifier of an existing DB instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more DB instances to describe.
  ///
  /// Supported Filters:
  ///
  /// <ul>
  /// <li>
  /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster
  /// Amazon Resource Names (ARNs). The results list only includes information
  /// about the DB instances associated with the DB clusters identified by these
  /// ARNs.
  /// </li>
  /// <li>
  /// <code>db-instance-id</code> - Accepts DB instance identifiers and DB
  /// instance Amazon Resource Names (ARNs). The results list only includes
  /// information about the DB instances identified by these ARNs.
  /// </li>
  /// <li>
  /// <code>dbi-resource-id</code> - Accepts DB instance resource identifiers.
  /// The results list only includes information about the DB instances
  /// identified by these DB instance resource identifiers.
  /// </li>
  /// <li>
  /// <code>domain</code> - Accepts Active Directory directory IDs. The results
  /// list only includes information about the DB instances associated with
  /// these domains.
  /// </li>
  /// <li>
  /// <code>engine</code> - Accepts engine names. The results list only includes
  /// information about the DB instances for these engines.
  /// </li>
  /// </ul>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBInstances</code> request. If this parameter is specified,
  /// the response includes only records beyond the marker, up to the value
  /// specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DBInstanceMessage> describeDBInstances({
    String? dBInstanceIdentifier,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBInstanceIdentifier != null)
        'DBInstanceIdentifier': dBInstanceIdentifier,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBInstances',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBInstancesResult',
    );
    return DBInstanceMessage.fromXml($result);
  }

  /// Returns a list of DB log files for the DB instance.
  ///
  /// This command doesn't apply to RDS Custom.
  ///
  /// May throw [DBInstanceNotFoundFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The customer-assigned name of the DB instance that contains the log files
  /// you want to list.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DBInstance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [fileLastWritten] :
  /// Filters the available log files for files written since the specified
  /// date, in POSIX timestamp format with milliseconds.
  ///
  /// Parameter [fileSize] :
  /// Filters the available log files for files larger than the specified size.
  ///
  /// Parameter [filenameContains] :
  /// Filters the available log files for log file names that contain the
  /// specified string.
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// The pagination token provided in the previous request. If this parameter
  /// is specified the response includes only records beyond the marker, up to
  /// MaxRecords.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified MaxRecords value, a pagination token called a
  /// marker is included in the response so you can retrieve the remaining
  /// results.
  Future<DescribeDBLogFilesResponse> describeDBLogFiles({
    required String dBInstanceIdentifier,
    int? fileLastWritten,
    int? fileSize,
    String? filenameContains,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      if (fileLastWritten != null)
        'FileLastWritten': fileLastWritten.toString(),
      if (fileSize != null) 'FileSize': fileSize.toString(),
      if (filenameContains != null) 'FilenameContains': filenameContains,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBLogFiles',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBLogFilesResult',
    );
    return DescribeDBLogFilesResponse.fromXml($result);
  }

  /// Returns a list of <code>DBParameterGroup</code> descriptions. If a
  /// <code>DBParameterGroupName</code> is specified, the list will contain only
  /// the description of the specified DB parameter group.
  ///
  /// May throw [DBParameterGroupNotFoundFault].
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of a specific DB parameter group to return details for.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DBClusterParameterGroup.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBParameterGroups</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DBParameterGroupsMessage> describeDBParameterGroups({
    String? dBParameterGroupName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBParameterGroupName != null)
        'DBParameterGroupName': dBParameterGroupName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBParameterGroups',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBParameterGroupsResult',
    );
    return DBParameterGroupsMessage.fromXml($result);
  }

  /// Returns the detailed parameter list for a particular DB parameter group.
  ///
  /// May throw [DBParameterGroupNotFoundFault].
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of a specific DB parameter group to return details for.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DBParameterGroup.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBParameters</code> request. If this parameter is specified,
  /// the response includes only records beyond the marker, up to the value
  /// specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [source] :
  /// The parameter types to return.
  ///
  /// Default: All parameter types returned
  ///
  /// Valid Values: <code>user | system | engine-default</code>
  Future<DBParameterGroupDetails> describeDBParameters({
    required String dBParameterGroupName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? source,
  }) async {
    final $request = <String, String>{
      'DBParameterGroupName': dBParameterGroupName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (source != null) 'Source': source,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBParameters',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBParametersResult',
    );
    return DBParameterGroupDetails.fromXml($result);
  }

  /// Returns information about DB proxies.
  ///
  /// May throw [DBProxyNotFoundFault].
  ///
  /// Parameter [dBProxyName] :
  /// The name of the DB proxy. If you omit this parameter, the output includes
  /// information about all DB proxies owned by your Amazon Web Services account
  /// ID.
  ///
  /// Parameter [filters] :
  /// This parameter is not currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that the remaining results
  /// can be retrieved.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DescribeDBProxiesResponse> describeDBProxies({
    String? dBProxyName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    _s.validateNumRange(
      'maxRecords',
      maxRecords,
      20,
      100,
    );
    final $request = <String, String>{
      if (dBProxyName != null) 'DBProxyName': dBProxyName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBProxies',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBProxiesResult',
    );
    return DescribeDBProxiesResponse.fromXml($result);
  }

  /// Returns information about DB proxy endpoints.
  ///
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyEndpointNotFoundFault].
  ///
  /// Parameter [dBProxyEndpointName] :
  /// The name of a DB proxy endpoint to describe. If you omit this parameter,
  /// the output includes information about all DB proxy endpoints associated
  /// with the specified proxy.
  ///
  /// Parameter [dBProxyName] :
  /// The name of the DB proxy whose endpoints you want to describe. If you omit
  /// this parameter, the output includes information about all DB proxy
  /// endpoints associated with all your DB proxies.
  ///
  /// Parameter [filters] :
  /// This parameter is not currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that the remaining results
  /// can be retrieved.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DescribeDBProxyEndpointsResponse> describeDBProxyEndpoints({
    String? dBProxyEndpointName,
    String? dBProxyName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    _s.validateNumRange(
      'maxRecords',
      maxRecords,
      20,
      100,
    );
    final $request = <String, String>{
      if (dBProxyEndpointName != null)
        'DBProxyEndpointName': dBProxyEndpointName,
      if (dBProxyName != null) 'DBProxyName': dBProxyName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBProxyEndpoints',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBProxyEndpointsResult',
    );
    return DescribeDBProxyEndpointsResponse.fromXml($result);
  }

  /// Returns information about DB proxy target groups, represented by
  /// <code>DBProxyTargetGroup</code> data structures.
  ///
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyTargetGroupNotFoundFault].
  /// May throw [InvalidDBProxyStateFault].
  ///
  /// Parameter [dBProxyName] :
  /// The identifier of the <code>DBProxy</code> associated with the target
  /// group.
  ///
  /// Parameter [filters] :
  /// This parameter is not currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that the remaining results
  /// can be retrieved.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [targetGroupName] :
  /// The identifier of the <code>DBProxyTargetGroup</code> to describe.
  Future<DescribeDBProxyTargetGroupsResponse> describeDBProxyTargetGroups({
    required String dBProxyName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? targetGroupName,
  }) async {
    _s.validateNumRange(
      'maxRecords',
      maxRecords,
      20,
      100,
    );
    final $request = <String, String>{
      'DBProxyName': dBProxyName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (targetGroupName != null) 'TargetGroupName': targetGroupName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBProxyTargetGroups',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBProxyTargetGroupsResult',
    );
    return DescribeDBProxyTargetGroupsResponse.fromXml($result);
  }

  /// Returns information about <code>DBProxyTarget</code> objects. This API
  /// supports pagination.
  ///
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyTargetNotFoundFault].
  /// May throw [DBProxyTargetGroupNotFoundFault].
  /// May throw [InvalidDBProxyStateFault].
  ///
  /// Parameter [dBProxyName] :
  /// The identifier of the <code>DBProxyTarget</code> to describe.
  ///
  /// Parameter [filters] :
  /// This parameter is not currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that the remaining results
  /// can be retrieved.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [targetGroupName] :
  /// The identifier of the <code>DBProxyTargetGroup</code> to describe.
  Future<DescribeDBProxyTargetsResponse> describeDBProxyTargets({
    required String dBProxyName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? targetGroupName,
  }) async {
    _s.validateNumRange(
      'maxRecords',
      maxRecords,
      20,
      100,
    );
    final $request = <String, String>{
      'DBProxyName': dBProxyName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (targetGroupName != null) 'TargetGroupName': targetGroupName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBProxyTargets',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBProxyTargetsResult',
    );
    return DescribeDBProxyTargetsResponse.fromXml($result);
  }

  /// Describes the recommendations to resolve the issues for your DB instances,
  /// DB clusters, and DB parameter groups.
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more recommendations to describe.
  ///
  /// Supported Filters:
  ///
  /// <ul>
  /// <li>
  /// <code>recommendation-id</code> - Accepts a list of recommendation
  /// identifiers. The results list only includes the recommendations whose
  /// identifier is one of the specified filter values.
  /// </li>
  /// <li>
  /// <code>status</code> - Accepts a list of recommendation statuses.
  ///
  /// Valid values:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - The recommendations which are ready for you to
  /// apply.
  /// </li>
  /// <li>
  /// <code>pending</code> - The applied or scheduled recommendations which are
  /// in progress.
  /// </li>
  /// <li>
  /// <code>resolved</code> - The recommendations which are completed.
  /// </li>
  /// <li>
  /// <code>dismissed</code> - The recommendations that you dismissed.
  /// </li>
  /// </ul>
  /// The results list only includes the recommendations whose status is one of
  /// the specified filter values.
  /// </li>
  /// <li>
  /// <code>severity</code> - Accepts a list of recommendation severities. The
  /// results list only includes the recommendations whose severity is one of
  /// the specified filter values.
  ///
  /// Valid values:
  ///
  /// <ul>
  /// <li>
  /// <code>high</code>
  /// </li>
  /// <li>
  /// <code>medium</code>
  /// </li>
  /// <li>
  /// <code>low</code>
  /// </li>
  /// <li>
  /// <code>informational</code>
  /// </li>
  /// </ul> </li>
  /// <li>
  /// <code>type-id</code> - Accepts a list of recommendation type identifiers.
  /// The results list only includes the recommendations whose type is one of
  /// the specified filter values.
  /// </li>
  /// <li>
  /// <code>dbi-resource-id</code> - Accepts a list of database resource
  /// identifiers. The results list only includes the recommendations that
  /// generated for the specified databases.
  /// </li>
  /// <li>
  /// <code>cluster-resource-id</code> - Accepts a list of cluster resource
  /// identifiers. The results list only includes the recommendations that
  /// generated for the specified clusters.
  /// </li>
  /// <li>
  /// <code>pg-arn</code> - Accepts a list of parameter group ARNs. The results
  /// list only includes the recommendations that generated for the specified
  /// parameter groups.
  /// </li>
  /// <li>
  /// <code>cluster-pg-arn</code> - Accepts a list of cluster parameter group
  /// ARNs. The results list only includes the recommendations that generated
  /// for the specified cluster parameter groups.
  /// </li>
  /// </ul>
  ///
  /// Parameter [lastUpdatedAfter] :
  /// A filter to include only the recommendations that were updated after this
  /// specified time.
  ///
  /// Parameter [lastUpdatedBefore] :
  /// A filter to include only the recommendations that were updated before this
  /// specified time.
  ///
  /// Parameter [locale] :
  /// The language that you choose to return the list of recommendations.
  ///
  /// Valid values:
  ///
  /// <ul>
  /// <li>
  /// <code>en</code>
  /// </li>
  /// <li>
  /// <code>en_UK</code>
  /// </li>
  /// <li>
  /// <code>de</code>
  /// </li>
  /// <li>
  /// <code>es</code>
  /// </li>
  /// <li>
  /// <code>fr</code>
  /// </li>
  /// <li>
  /// <code>id</code>
  /// </li>
  /// <li>
  /// <code>it</code>
  /// </li>
  /// <li>
  /// <code>ja</code>
  /// </li>
  /// <li>
  /// <code>ko</code>
  /// </li>
  /// <li>
  /// <code>pt_BR</code>
  /// </li>
  /// <li>
  /// <code>zh_TW</code>
  /// </li>
  /// <li>
  /// <code>zh_CN</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBRecommendations</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of recommendations to include in the response. If more
  /// records exist than the specified <code>MaxRecords</code> value, a
  /// pagination token called a marker is included in the response so that you
  /// can retrieve the remaining results.
  Future<DBRecommendationsMessage> describeDBRecommendations({
    List<Filter>? filters,
    DateTime? lastUpdatedAfter,
    DateTime? lastUpdatedBefore,
    String? locale,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (lastUpdatedAfter != null)
        'LastUpdatedAfter': _s.iso8601ToJson(lastUpdatedAfter),
      if (lastUpdatedBefore != null)
        'LastUpdatedBefore': _s.iso8601ToJson(lastUpdatedBefore),
      if (locale != null) 'Locale': locale,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBRecommendations',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBRecommendationsResult',
    );
    return DBRecommendationsMessage.fromXml($result);
  }

  /// Returns a list of <code>DBSecurityGroup</code> descriptions. If a
  /// <code>DBSecurityGroupName</code> is specified, the list will contain only
  /// the descriptions of the specified DB security group.
  /// <note>
  /// EC2-Classic was retired on August 15, 2022. If you haven't migrated from
  /// EC2-Classic to a VPC, we recommend that you migrate as soon as possible.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate
  /// from EC2-Classic to a VPC</a> in the <i>Amazon EC2 User Guide</i>, the
  /// blog <a
  /// href="http://aws.amazon.com/blogs/aws/ec2-classic-is-retiring-heres-how-to-prepare/">EC2-Classic
  /// Networking is Retiring – Here’s How to Prepare</a>, and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.Non-VPC2VPC.html">Moving
  /// a DB instance not in a VPC into a VPC</a> in the <i>Amazon RDS User
  /// Guide</i>.
  /// </note>
  ///
  /// May throw [DBSecurityGroupNotFoundFault].
  ///
  /// Parameter [dBSecurityGroupName] :
  /// The name of the DB security group to return details for.
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBSecurityGroups</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DBSecurityGroupMessage> describeDBSecurityGroups({
    String? dBSecurityGroupName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBSecurityGroupName != null)
        'DBSecurityGroupName': dBSecurityGroupName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBSecurityGroups',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBSecurityGroupsResult',
    );
    return DBSecurityGroupMessage.fromXml($result);
  }

  /// Describes existing Aurora Limitless Database DB shard groups.
  ///
  /// May throw [DBShardGroupNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  ///
  /// Parameter [dBShardGroupIdentifier] :
  /// The user-supplied DB shard group identifier or the Amazon Resource Name
  /// (ARN) of the DB shard group. If this parameter is specified, information
  /// for only the specific DB shard group is returned. This parameter isn't
  /// case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match an existing DB shard group identifier.
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more DB shard groups to describe.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBShardGroups</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100
  Future<DescribeDBShardGroupsResponse> describeDBShardGroups({
    String? dBShardGroupIdentifier,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    _s.validateNumRange(
      'maxRecords',
      maxRecords,
      20,
      100,
    );
    final $request = <String, String>{
      if (dBShardGroupIdentifier != null)
        'DBShardGroupIdentifier': dBShardGroupIdentifier,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBShardGroups',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBShardGroupsResult',
    );
    return DescribeDBShardGroupsResponse.fromXml($result);
  }

  /// Returns a list of DB snapshot attribute names and values for a manual DB
  /// snapshot.
  ///
  /// When sharing snapshots with other Amazon Web Services accounts,
  /// <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code>
  /// attribute and a list of IDs for the Amazon Web Services accounts that are
  /// authorized to copy or restore the manual DB snapshot. If <code>all</code>
  /// is included in the list of values for the <code>restore</code> attribute,
  /// then the manual DB snapshot is public and can be copied or restored by all
  /// Amazon Web Services accounts.
  ///
  /// To add or remove access for an Amazon Web Services account to copy or
  /// restore a manual DB snapshot, or to make the manual DB snapshot public or
  /// private, use the <code>ModifyDBSnapshotAttribute</code> API action.
  ///
  /// May throw [DBSnapshotNotFoundFault].
  ///
  /// Parameter [dBSnapshotIdentifier] :
  /// The identifier for the DB snapshot to describe the attributes for.
  Future<DescribeDBSnapshotAttributesResult> describeDBSnapshotAttributes({
    required String dBSnapshotIdentifier,
  }) async {
    final $request = <String, String>{
      'DBSnapshotIdentifier': dBSnapshotIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBSnapshotAttributes',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBSnapshotAttributesResult',
    );
    return DescribeDBSnapshotAttributesResult.fromXml($result);
  }

  /// Describes the tenant databases that exist in a DB snapshot. This command
  /// only applies to RDS for Oracle DB instances in the multi-tenant
  /// configuration.
  ///
  /// You can use this command to inspect the tenant databases within a snapshot
  /// before restoring it. You can't directly interact with the tenant databases
  /// in a DB snapshot. If you restore a snapshot that was taken from DB
  /// instance using the multi-tenant configuration, you restore all its tenant
  /// databases.
  ///
  /// May throw [DBSnapshotNotFoundFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The ID of the DB instance used to create the DB snapshots. This parameter
  /// isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the identifier of an existing
  /// <code>DBInstance</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSnapshotIdentifier] :
  /// The ID of a DB snapshot that contains the tenant databases to describe.
  /// This value is stored as a lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If you specify this parameter, the value must match the ID of an existing
  /// DB snapshot.
  /// </li>
  /// <li>
  /// If you specify an automatic snapshot, you must also specify
  /// <code>SnapshotType</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dbiResourceId] :
  /// A specific DB resource identifier to describe.
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more tenant databases to describe.
  ///
  /// Supported filters:
  ///
  /// <ul>
  /// <li>
  /// <code>tenant-db-name</code> - Tenant database names. The results list only
  /// includes information about the tenant databases that match these tenant DB
  /// names.
  /// </li>
  /// <li>
  /// <code>tenant-database-resource-id</code> - Tenant database resource
  /// identifiers. The results list only includes information about the tenant
  /// databases contained within the DB snapshots.
  /// </li>
  /// <li>
  /// <code>dbi-resource-id</code> - DB instance resource identifiers. The
  /// results list only includes information about snapshots containing tenant
  /// databases contained within the DB instances identified by these resource
  /// identifiers.
  /// </li>
  /// <li>
  /// <code>db-instance-id</code> - Accepts DB instance identifiers and DB
  /// instance Amazon Resource Names (ARNs).
  /// </li>
  /// <li>
  /// <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.
  /// </li>
  /// <li>
  /// <code>snapshot-type</code> - Accepts types of DB snapshots.
  /// </li>
  /// </ul>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBSnapshotTenantDatabases</code> request. If this parameter
  /// is specified, the response includes only records beyond the marker, up to
  /// the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Parameter [snapshotType] :
  /// The type of DB snapshots to be returned. You can specify one of the
  /// following values:
  ///
  /// <ul>
  /// <li>
  /// <code>automated</code> – All DB snapshots that have been automatically
  /// taken by Amazon RDS for my Amazon Web Services account.
  /// </li>
  /// <li>
  /// <code>manual</code> – All DB snapshots that have been taken by my Amazon
  /// Web Services account.
  /// </li>
  /// <li>
  /// <code>shared</code> – All manual DB snapshots that have been shared to my
  /// Amazon Web Services account.
  /// </li>
  /// <li>
  /// <code>public</code> – All DB snapshots that have been marked as public.
  /// </li>
  /// <li>
  /// <code>awsbackup</code> – All DB snapshots managed by the Amazon Web
  /// Services Backup service.
  /// </li>
  /// </ul>
  Future<DBSnapshotTenantDatabasesMessage> describeDBSnapshotTenantDatabases({
    String? dBInstanceIdentifier,
    String? dBSnapshotIdentifier,
    String? dbiResourceId,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? snapshotType,
  }) async {
    final $request = <String, String>{
      if (dBInstanceIdentifier != null)
        'DBInstanceIdentifier': dBInstanceIdentifier,
      if (dBSnapshotIdentifier != null)
        'DBSnapshotIdentifier': dBSnapshotIdentifier,
      if (dbiResourceId != null) 'DbiResourceId': dbiResourceId,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (snapshotType != null) 'SnapshotType': snapshotType,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBSnapshotTenantDatabases',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBSnapshotTenantDatabasesResult',
    );
    return DBSnapshotTenantDatabasesMessage.fromXml($result);
  }

  /// Returns information about DB snapshots. This API action supports
  /// pagination.
  ///
  /// May throw [DBSnapshotNotFoundFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The ID of the DB instance to retrieve the list of DB snapshots for. This
  /// parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the identifier of an existing DBInstance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSnapshotIdentifier] :
  /// A specific DB snapshot identifier to describe. This value is stored as a
  /// lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the identifier of an existing DBSnapshot.
  /// </li>
  /// <li>
  /// If this identifier is for an automated snapshot, the
  /// <code>SnapshotType</code> parameter must also be specified.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dbiResourceId] :
  /// A specific DB resource ID to describe.
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more DB snapshots to describe.
  ///
  /// Supported filters:
  ///
  /// <ul>
  /// <li>
  /// <code>db-instance-id</code> - Accepts DB instance identifiers and DB
  /// instance Amazon Resource Names (ARNs).
  /// </li>
  /// <li>
  /// <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.
  /// </li>
  /// <li>
  /// <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.
  /// </li>
  /// <li>
  /// <code>snapshot-type</code> - Accepts types of DB snapshots.
  /// </li>
  /// <li>
  /// <code>engine</code> - Accepts names of database engines.
  /// </li>
  /// </ul>
  ///
  /// Parameter [includePublic] :
  /// Specifies whether to include manual DB cluster snapshots that are public
  /// and can be copied or restored by any Amazon Web Services account. By
  /// default, the public snapshots are not included.
  ///
  /// You can share a manual DB snapshot as public by using the
  /// <a>ModifyDBSnapshotAttribute</a> API.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [includeShared] :
  /// Specifies whether to include shared manual DB cluster snapshots from other
  /// Amazon Web Services accounts that this Amazon Web Services account has
  /// been given permission to copy or restore. By default, these snapshots are
  /// not included.
  ///
  /// You can give an Amazon Web Services account permission to restore a manual
  /// DB snapshot from another Amazon Web Services account by using the
  /// <code>ModifyDBSnapshotAttribute</code> API action.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBSnapshots</code> request. If this parameter is specified,
  /// the response includes only records beyond the marker, up to the value
  /// specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [snapshotType] :
  /// The type of snapshots to be returned. You can specify one of the following
  /// values:
  ///
  /// <ul>
  /// <li>
  /// <code>automated</code> - Return all DB snapshots that have been
  /// automatically taken by Amazon RDS for my Amazon Web Services account.
  /// </li>
  /// <li>
  /// <code>manual</code> - Return all DB snapshots that have been taken by my
  /// Amazon Web Services account.
  /// </li>
  /// <li>
  /// <code>shared</code> - Return all manual DB snapshots that have been shared
  /// to my Amazon Web Services account.
  /// </li>
  /// <li>
  /// <code>public</code> - Return all DB snapshots that have been marked as
  /// public.
  /// </li>
  /// <li>
  /// <code>awsbackup</code> - Return the DB snapshots managed by the Amazon Web
  /// Services Backup service.
  ///
  /// For information about Amazon Web Services Backup, see the <a
  /// href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html">
  /// <i>Amazon Web Services Backup Developer Guide.</i> </a>
  ///
  /// The <code>awsbackup</code> type does not apply to Aurora.
  /// </li>
  /// </ul>
  /// If you don't specify a <code>SnapshotType</code> value, then both
  /// automated and manual snapshots are returned. Shared and public DB
  /// snapshots are not included in the returned results by default. You can
  /// include shared snapshots with these results by enabling the
  /// <code>IncludeShared</code> parameter. You can include public snapshots
  /// with these results by enabling the <code>IncludePublic</code> parameter.
  ///
  /// The <code>IncludeShared</code> and <code>IncludePublic</code> parameters
  /// don't apply for <code>SnapshotType</code> values of <code>manual</code> or
  /// <code>automated</code>. The <code>IncludePublic</code> parameter doesn't
  /// apply when <code>SnapshotType</code> is set to <code>shared</code>. The
  /// <code>IncludeShared</code> parameter doesn't apply when
  /// <code>SnapshotType</code> is set to <code>public</code>.
  Future<DBSnapshotMessage> describeDBSnapshots({
    String? dBInstanceIdentifier,
    String? dBSnapshotIdentifier,
    String? dbiResourceId,
    List<Filter>? filters,
    bool? includePublic,
    bool? includeShared,
    String? marker,
    int? maxRecords,
    String? snapshotType,
  }) async {
    final $request = <String, String>{
      if (dBInstanceIdentifier != null)
        'DBInstanceIdentifier': dBInstanceIdentifier,
      if (dBSnapshotIdentifier != null)
        'DBSnapshotIdentifier': dBSnapshotIdentifier,
      if (dbiResourceId != null) 'DbiResourceId': dbiResourceId,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (includePublic != null) 'IncludePublic': includePublic.toString(),
      if (includeShared != null) 'IncludeShared': includeShared.toString(),
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (snapshotType != null) 'SnapshotType': snapshotType,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBSnapshots',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBSnapshotsResult',
    );
    return DBSnapshotMessage.fromXml($result);
  }

  /// Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is
  /// specified, the list will contain only the descriptions of the specified
  /// DBSubnetGroup.
  ///
  /// For an overview of CIDR ranges, go to the <a
  /// href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia
  /// Tutorial</a>.
  ///
  /// May throw [DBSubnetGroupNotFoundFault].
  ///
  /// Parameter [dBSubnetGroupName] :
  /// The name of the DB subnet group to return details for.
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous DescribeDBSubnetGroups
  /// request. If this parameter is specified, the response includes only
  /// records beyond the marker, up to the value specified by
  /// <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DBSubnetGroupMessage> describeDBSubnetGroups({
    String? dBSubnetGroupName,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeDBSubnetGroups',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeDBSubnetGroupsResult',
    );
    return DBSubnetGroupMessage.fromXml($result);
  }

  /// Returns the default engine and system parameter information for the
  /// cluster database engine.
  ///
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Parameter [dBParameterGroupFamily] :
  /// The name of the DB cluster parameter group family to return engine
  /// parameter information for.
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeEngineDefaultClusterParameters</code> request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DescribeEngineDefaultClusterParametersResult>
      describeEngineDefaultClusterParameters({
    required String dBParameterGroupFamily,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      'DBParameterGroupFamily': dBParameterGroupFamily,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeEngineDefaultClusterParameters',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeEngineDefaultClusterParametersResult',
    );
    return DescribeEngineDefaultClusterParametersResult.fromXml($result);
  }

  /// Returns the default engine and system parameter information for the
  /// specified database engine.
  ///
  /// Parameter [dBParameterGroupFamily] :
  /// The name of the DB parameter group family.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>aurora-mysql5.7</code>
  /// </li>
  /// <li>
  /// <code>aurora-mysql8.0</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql10</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql11</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql12</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql13</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql14</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee-19</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee-cdb-19</code>
  /// </li>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mariadb10.2</code>
  /// </li>
  /// <li>
  /// <code>mariadb10.3</code>
  /// </li>
  /// <li>
  /// <code>mariadb10.4</code>
  /// </li>
  /// <li>
  /// <code>mariadb10.5</code>
  /// </li>
  /// <li>
  /// <code>mariadb10.6</code>
  /// </li>
  /// <li>
  /// <code>mysql5.7</code>
  /// </li>
  /// <li>
  /// <code>mysql8.0</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-19</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb-19</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb-21</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-19</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb-19</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb-21</code>
  /// </li>
  /// <li>
  /// <code>postgres10</code>
  /// </li>
  /// <li>
  /// <code>postgres11</code>
  /// </li>
  /// <li>
  /// <code>postgres12</code>
  /// </li>
  /// <li>
  /// <code>postgres13</code>
  /// </li>
  /// <li>
  /// <code>postgres14</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee-11.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee-12.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee-13.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee-14.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee-15.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex-11.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex-12.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex-13.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex-14.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex-15.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se-11.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se-12.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se-13.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se-14.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se-15.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web-11.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web-12.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web-13.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web-14.0</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web-15.0</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeEngineDefaultParameters</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DescribeEngineDefaultParametersResult>
      describeEngineDefaultParameters({
    required String dBParameterGroupFamily,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      'DBParameterGroupFamily': dBParameterGroupFamily,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeEngineDefaultParameters',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeEngineDefaultParametersResult',
    );
    return DescribeEngineDefaultParametersResult.fromXml($result);
  }

  /// Displays a list of categories for all event source types, or, if
  /// specified, for a specified source type. You can also see this list in the
  /// "Amazon RDS event categories and event messages" section of the <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html">
  /// <i>Amazon RDS User Guide</i> </a> or the <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html">
  /// <i>Amazon Aurora User Guide</i> </a>.
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [sourceType] :
  /// The type of source that is generating the events. For RDS Proxy events,
  /// specify <code>db-proxy</code>.
  ///
  /// Valid Values: <code>db-instance</code> | <code>db-cluster</code> |
  /// <code>db-parameter-group</code> | <code>db-security-group</code> |
  /// <code>db-snapshot</code> | <code>db-cluster-snapshot</code> |
  /// <code>db-proxy</code>
  Future<EventCategoriesMessage> describeEventCategories({
    List<Filter>? filters,
    String? sourceType,
  }) async {
    final $request = <String, String>{
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (sourceType != null) 'SourceType': sourceType,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeEventCategories',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeEventCategoriesResult',
    );
    return EventCategoriesMessage.fromXml($result);
  }

  /// Lists all the subscription descriptions for a customer account. The
  /// description for a subscription includes <code>SubscriptionName</code>,
  /// <code>SNSTopicARN</code>, <code>CustomerID</code>,
  /// <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>,
  /// and <code>Status</code>.
  ///
  /// If you specify a <code>SubscriptionName</code>, lists the description for
  /// that subscription.
  ///
  /// May throw [SubscriptionNotFoundFault].
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// DescribeOrderableDBInstanceOptions request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code> .
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [subscriptionName] :
  /// The name of the RDS event notification subscription you want to describe.
  Future<EventSubscriptionsMessage> describeEventSubscriptions({
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? subscriptionName,
  }) async {
    final $request = <String, String>{
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (subscriptionName != null) 'SubscriptionName': subscriptionName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeEventSubscriptions',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeEventSubscriptionsResult',
    );
    return EventSubscriptionsMessage.fromXml($result);
  }

  /// Returns events related to DB instances, DB clusters, DB parameter groups,
  /// DB security groups, DB snapshots, DB cluster snapshots, and RDS Proxies
  /// for the past 14 days. Events specific to a particular DB instance, DB
  /// cluster, DB parameter group, DB security group, DB snapshot, DB cluster
  /// snapshot group, or RDS Proxy can be obtained by providing the name as a
  /// parameter.
  ///
  /// For more information on working with events, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/working-with-events.html">Monitoring
  /// Amazon RDS events</a> in the <i>Amazon RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/working-with-events.html">Monitoring
  /// Amazon Aurora events</a> in the <i>Amazon Aurora User Guide</i>.
  /// <note>
  /// By default, RDS returns events that were generated in the past hour.
  /// </note>
  ///
  /// Parameter [duration] :
  /// The number of minutes to retrieve events for.
  ///
  /// Default: 60
  ///
  /// Parameter [endTime] :
  /// The end of the time interval for which to retrieve events, specified in
  /// ISO 8601 format. For more information about ISO 8601, go to the <a
  /// href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
  ///
  /// Example: 2009-07-08T18:00Z
  ///
  /// Parameter [eventCategories] :
  /// A list of event categories that trigger notifications for a event
  /// notification subscription.
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous DescribeEvents
  /// request. If this parameter is specified, the response includes only
  /// records beyond the marker, up to the value specified by
  /// <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [sourceIdentifier] :
  /// The identifier of the event source for which events are returned. If not
  /// specified, then all sources are included in the response.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If <code>SourceIdentifier</code> is supplied, <code>SourceType</code> must
  /// also be provided.
  /// </li>
  /// <li>
  /// If the source type is a DB instance, a <code>DBInstanceIdentifier</code>
  /// value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB cluster, a <code>DBClusterIdentifier</code>
  /// value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB parameter group, a
  /// <code>DBParameterGroupName</code> value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB security group, a
  /// <code>DBSecurityGroupName</code> value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code>
  /// value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is a DB cluster snapshot, a
  /// <code>DBClusterSnapshotIdentifier</code> value must be supplied.
  /// </li>
  /// <li>
  /// If the source type is an RDS Proxy, a <code>DBProxyName</code> value must
  /// be supplied.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  ///
  /// Parameter [sourceType] :
  /// The event source to retrieve events for. If no value is specified, all
  /// events are returned.
  ///
  /// Parameter [startTime] :
  /// The beginning of the time interval to retrieve events for, specified in
  /// ISO 8601 format. For more information about ISO 8601, go to the <a
  /// href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
  ///
  /// Example: 2009-07-08T18:00Z
  Future<EventsMessage> describeEvents({
    int? duration,
    DateTime? endTime,
    List<String>? eventCategories,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? sourceIdentifier,
    SourceType? sourceType,
    DateTime? startTime,
  }) async {
    final $request = <String, String>{
      if (duration != null) 'Duration': duration.toString(),
      if (endTime != null) 'EndTime': _s.iso8601ToJson(endTime),
      if (eventCategories != null)
        if (eventCategories.isEmpty)
          'EventCategories': ''
        else
          for (var i1 = 0; i1 < eventCategories.length; i1++)
            'EventCategories.EventCategory.${i1 + 1}': eventCategories[i1],
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (sourceIdentifier != null) 'SourceIdentifier': sourceIdentifier,
      if (sourceType != null) 'SourceType': sourceType.value,
      if (startTime != null) 'StartTime': _s.iso8601ToJson(startTime),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeEvents',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeEventsResult',
    );
    return EventsMessage.fromXml($result);
  }

  /// Returns information about a snapshot or cluster export to Amazon S3. This
  /// API operation supports pagination.
  ///
  /// May throw [ExportTaskNotFoundFault].
  ///
  /// Parameter [exportTaskIdentifier] :
  /// The identifier of the snapshot or cluster export task to be described.
  ///
  /// Parameter [filters] :
  /// Filters specify one or more snapshot or cluster exports to describe. The
  /// filters are specified as name-value pairs that define what to include in
  /// the output. Filter names and values are case-sensitive.
  ///
  /// Supported filters include the following:
  ///
  /// <ul>
  /// <li>
  /// <code>export-task-identifier</code> - An identifier for the snapshot or
  /// cluster export task.
  /// </li>
  /// <li>
  /// <code>s3-bucket</code> - The Amazon S3 bucket the data is exported to.
  /// </li>
  /// <li>
  /// <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot
  /// or cluster exported to Amazon S3.
  /// </li>
  /// <li>
  /// <code>status</code> - The status of the export task. Must be lowercase.
  /// Valid statuses are the following:
  ///
  /// <ul>
  /// <li>
  /// <code>canceled</code>
  /// </li>
  /// <li>
  /// <code>canceling</code>
  /// </li>
  /// <li>
  /// <code>complete</code>
  /// </li>
  /// <li>
  /// <code>failed</code>
  /// </li>
  /// <li>
  /// <code>in_progress</code>
  /// </li>
  /// <li>
  /// <code>starting</code>
  /// </li>
  /// </ul> </li>
  /// </ul>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeExportTasks</code> request. If you specify this parameter,
  /// the response includes only records beyond the marker, up to the value
  /// specified by the <code>MaxRecords</code> parameter.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified value, a pagination token called a marker is
  /// included in the response. You can use the marker in a later
  /// <code>DescribeExportTasks</code> request to retrieve the remaining
  /// results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [sourceArn] :
  /// The Amazon Resource Name (ARN) of the snapshot or cluster exported to
  /// Amazon S3.
  ///
  /// Parameter [sourceType] :
  /// The type of source for the export.
  Future<ExportTasksMessage> describeExportTasks({
    String? exportTaskIdentifier,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? sourceArn,
    ExportSourceType? sourceType,
  }) async {
    _s.validateNumRange(
      'maxRecords',
      maxRecords,
      20,
      100,
    );
    final $request = <String, String>{
      if (exportTaskIdentifier != null)
        'ExportTaskIdentifier': exportTaskIdentifier,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (sourceArn != null) 'SourceArn': sourceArn,
      if (sourceType != null) 'SourceType': sourceType.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeExportTasks',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeExportTasksResult',
    );
    return ExportTasksMessage.fromXml($result);
  }

  /// Returns information about Aurora global database clusters. This API
  /// supports pagination.
  ///
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  /// <note>
  /// This action only applies to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [GlobalClusterNotFoundFault].
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more global database clusters to describe.
  /// This parameter is case-sensitive.
  ///
  /// Currently, the only supported filter is <code>region</code>.
  ///
  /// If used, the request returns information about any global cluster with at
  /// least one member (primary or secondary) in the specified Amazon Web
  /// Services Regions.
  ///
  /// Parameter [globalClusterIdentifier] :
  /// The user-supplied DB cluster identifier. If this parameter is specified,
  /// information from only the specific DB cluster is returned. This parameter
  /// isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match an existing DBClusterIdentifier.
  /// </li>
  /// </ul>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeGlobalClusters</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<GlobalClustersMessage> describeGlobalClusters({
    List<Filter>? filters,
    String? globalClusterIdentifier,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (globalClusterIdentifier != null)
        'GlobalClusterIdentifier': globalClusterIdentifier,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeGlobalClusters',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeGlobalClustersResult',
    );
    return GlobalClustersMessage.fromXml($result);
  }

  /// Describe one or more zero-ETL integrations with Amazon Redshift.
  ///
  /// May throw [IntegrationNotFoundFault].
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more resources to return.
  ///
  /// Parameter [integrationIdentifier] :
  /// The unique identifier of the integration.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeIntegrations</code> request. If this parameter is specified,
  /// the response includes only records beyond the marker, up to the value
  /// specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<DescribeIntegrationsResponse> describeIntegrations({
    List<Filter>? filters,
    String? integrationIdentifier,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (integrationIdentifier != null)
        'IntegrationIdentifier': integrationIdentifier,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeIntegrations',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeIntegrationsResult',
    );
    return DescribeIntegrationsResponse.fromXml($result);
  }

  /// Describes all available options for the specified engine.
  ///
  /// Parameter [engineName] :
  /// The name of the engine to describe options for.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mariadb</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [majorEngineVersion] :
  /// If specified, filters the results to include only options for the
  /// specified major engine version.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  Future<OptionGroupOptionsMessage> describeOptionGroupOptions({
    required String engineName,
    List<Filter>? filters,
    String? majorEngineVersion,
    String? marker,
    int? maxRecords,
  }) async {
    final $request = <String, String>{
      'EngineName': engineName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (majorEngineVersion != null) 'MajorEngineVersion': majorEngineVersion,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeOptionGroupOptions',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeOptionGroupOptionsResult',
    );
    return OptionGroupOptionsMessage.fromXml($result);
  }

  /// Describes the available option groups.
  ///
  /// May throw [OptionGroupNotFoundFault].
  ///
  /// Parameter [engineName] :
  /// A filter to only include option groups associated with this database
  /// engine.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mariadb</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [majorEngineVersion] :
  /// Filters the list of option groups to only include groups associated with a
  /// specific database engine version. If specified, then EngineName must also
  /// be specified.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous DescribeOptionGroups
  /// request. If this parameter is specified, the response includes only
  /// records beyond the marker, up to the value specified by
  /// <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [optionGroupName] :
  /// The name of the option group to describe. Can't be supplied together with
  /// EngineName or MajorEngineVersion.
  Future<OptionGroups> describeOptionGroups({
    String? engineName,
    List<Filter>? filters,
    String? majorEngineVersion,
    String? marker,
    int? maxRecords,
    String? optionGroupName,
  }) async {
    final $request = <String, String>{
      if (engineName != null) 'EngineName': engineName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (majorEngineVersion != null) 'MajorEngineVersion': majorEngineVersion,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeOptionGroups',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeOptionGroupsResult',
    );
    return OptionGroups.fromXml($result);
  }

  /// Describes the orderable DB instance options for a specified DB engine.
  ///
  /// Parameter [engine] :
  /// The name of the database engine to describe DB instance options for.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>aurora-mysql</code>
  /// </li>
  /// <li>
  /// <code>aurora-postgresql</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mariadb</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [availabilityZoneGroup] :
  /// The Availability Zone group associated with a Local Zone. Specify this
  /// parameter to retrieve available options for the Local Zones in the group.
  ///
  /// Omit this parameter to show the available options in the specified Amazon
  /// Web Services Region.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [dBInstanceClass] :
  /// A filter to include only the available options for the specified DB
  /// instance class.
  ///
  /// Parameter [engineVersion] :
  /// A filter to include only the available options for the specified engine
  /// version.
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [licenseModel] :
  /// A filter to include only the available options for the specified license
  /// model.
  ///
  /// RDS Custom supports only the BYOL licensing model.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// DescribeOrderableDBInstanceOptions request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 1000.
  ///
  /// Parameter [vpc] :
  /// Specifies whether to show only VPC or non-VPC offerings. RDS Custom
  /// supports only VPC offerings.
  ///
  /// RDS Custom supports only VPC offerings. If you describe non-VPC offerings
  /// for RDS Custom, the output shows VPC offerings.
  Future<OrderableDBInstanceOptionsMessage> describeOrderableDBInstanceOptions({
    required String engine,
    String? availabilityZoneGroup,
    String? dBInstanceClass,
    String? engineVersion,
    List<Filter>? filters,
    String? licenseModel,
    String? marker,
    int? maxRecords,
    bool? vpc,
  }) async {
    final $request = <String, String>{
      'Engine': engine,
      if (availabilityZoneGroup != null)
        'AvailabilityZoneGroup': availabilityZoneGroup,
      if (dBInstanceClass != null) 'DBInstanceClass': dBInstanceClass,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (licenseModel != null) 'LicenseModel': licenseModel,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (vpc != null) 'Vpc': vpc.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeOrderableDBInstanceOptions',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeOrderableDBInstanceOptionsResult',
    );
    return OrderableDBInstanceOptionsMessage.fromXml($result);
  }

  /// Returns a list of resources (for example, DB instances) that have at least
  /// one pending maintenance action.
  ///
  /// May throw [ResourceNotFoundFault].
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more resources to return pending
  /// maintenance actions for.
  ///
  /// Supported filters:
  ///
  /// <ul>
  /// <li>
  /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster
  /// Amazon Resource Names (ARNs). The results list only includes pending
  /// maintenance actions for the DB clusters identified by these ARNs.
  /// </li>
  /// <li>
  /// <code>db-instance-id</code> - Accepts DB instance identifiers and DB
  /// instance ARNs. The results list only includes pending maintenance actions
  /// for the DB instances identified by these ARNs.
  /// </li>
  /// </ul>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribePendingMaintenanceActions</code> request. If this parameter
  /// is specified, the response includes only records beyond the marker, up to
  /// a number of records specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [resourceIdentifier] :
  /// The ARN of a resource to return pending maintenance actions for.
  Future<PendingMaintenanceActionsMessage> describePendingMaintenanceActions({
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? resourceIdentifier,
  }) async {
    final $request = <String, String>{
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (resourceIdentifier != null) 'ResourceIdentifier': resourceIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribePendingMaintenanceActions',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribePendingMaintenanceActionsResult',
    );
    return PendingMaintenanceActionsMessage.fromXml($result);
  }

  /// Returns information about reserved DB instances for this account, or about
  /// a specified reserved DB instance.
  ///
  /// May throw [ReservedDBInstanceNotFoundFault].
  ///
  /// Parameter [dBInstanceClass] :
  /// The DB instance class filter value. Specify this parameter to show only
  /// those reservations matching the specified DB instances class.
  ///
  /// Parameter [duration] :
  /// The duration filter value, specified in years or seconds. Specify this
  /// parameter to show only reservations for this duration.
  ///
  /// Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [leaseId] :
  /// The lease identifier filter value. Specify this parameter to show only the
  /// reservation that matches the specified lease ID.
  /// <note>
  /// Amazon Web Services Support might request the lease ID for an issue
  /// related to a reserved DB instance.
  /// </note>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more than the
  /// <code>MaxRecords</code> value is available, a pagination token called a
  /// marker is included in the response so you can retrieve the remaining
  /// results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [multiAZ] :
  /// Specifies whether to show only those reservations that support Multi-AZ.
  ///
  /// Parameter [offeringType] :
  /// The offering type filter value. Specify this parameter to show only the
  /// available offerings matching the specified offering type.
  ///
  /// Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront"
  /// </code>
  ///
  /// Parameter [productDescription] :
  /// The product description filter value. Specify this parameter to show only
  /// those reservations matching the specified product description.
  ///
  /// Parameter [reservedDBInstanceId] :
  /// The reserved DB instance identifier filter value. Specify this parameter
  /// to show only the reservation that matches the specified reservation ID.
  ///
  /// Parameter [reservedDBInstancesOfferingId] :
  /// The offering identifier filter value. Specify this parameter to show only
  /// purchased reservations matching the specified offering identifier.
  Future<ReservedDBInstanceMessage> describeReservedDBInstances({
    String? dBInstanceClass,
    String? duration,
    List<Filter>? filters,
    String? leaseId,
    String? marker,
    int? maxRecords,
    bool? multiAZ,
    String? offeringType,
    String? productDescription,
    String? reservedDBInstanceId,
    String? reservedDBInstancesOfferingId,
  }) async {
    final $request = <String, String>{
      if (dBInstanceClass != null) 'DBInstanceClass': dBInstanceClass,
      if (duration != null) 'Duration': duration,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (leaseId != null) 'LeaseId': leaseId,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (multiAZ != null) 'MultiAZ': multiAZ.toString(),
      if (offeringType != null) 'OfferingType': offeringType,
      if (productDescription != null) 'ProductDescription': productDescription,
      if (reservedDBInstanceId != null)
        'ReservedDBInstanceId': reservedDBInstanceId,
      if (reservedDBInstancesOfferingId != null)
        'ReservedDBInstancesOfferingId': reservedDBInstancesOfferingId,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeReservedDBInstances',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeReservedDBInstancesResult',
    );
    return ReservedDBInstanceMessage.fromXml($result);
  }

  /// Lists available reserved DB instance offerings.
  ///
  /// May throw [ReservedDBInstancesOfferingNotFoundFault].
  ///
  /// Parameter [dBInstanceClass] :
  /// The DB instance class filter value. Specify this parameter to show only
  /// the available offerings matching the specified DB instance class.
  ///
  /// Parameter [duration] :
  /// Duration filter value, specified in years or seconds. Specify this
  /// parameter to show only reservations for this duration.
  ///
  /// Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more than the
  /// <code>MaxRecords</code> value is available, a pagination token called a
  /// marker is included in the response so you can retrieve the remaining
  /// results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [multiAZ] :
  /// Specifies whether to show only those reservations that support Multi-AZ.
  ///
  /// Parameter [offeringType] :
  /// The offering type filter value. Specify this parameter to show only the
  /// available offerings matching the specified offering type.
  ///
  /// Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront"
  /// </code>
  ///
  /// Parameter [productDescription] :
  /// Product description filter value. Specify this parameter to show only the
  /// available offerings that contain the specified product description.
  /// <note>
  /// The results show offerings that partially match the filter value.
  /// </note>
  ///
  /// Parameter [reservedDBInstancesOfferingId] :
  /// The offering identifier filter value. Specify this parameter to show only
  /// the available offering that matches the specified reservation identifier.
  ///
  /// Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code>
  Future<ReservedDBInstancesOfferingMessage>
      describeReservedDBInstancesOfferings({
    String? dBInstanceClass,
    String? duration,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    bool? multiAZ,
    String? offeringType,
    String? productDescription,
    String? reservedDBInstancesOfferingId,
  }) async {
    final $request = <String, String>{
      if (dBInstanceClass != null) 'DBInstanceClass': dBInstanceClass,
      if (duration != null) 'Duration': duration,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (multiAZ != null) 'MultiAZ': multiAZ.toString(),
      if (offeringType != null) 'OfferingType': offeringType,
      if (productDescription != null) 'ProductDescription': productDescription,
      if (reservedDBInstancesOfferingId != null)
        'ReservedDBInstancesOfferingId': reservedDBInstancesOfferingId,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeReservedDBInstancesOfferings',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeReservedDBInstancesOfferingsResult',
    );
    return ReservedDBInstancesOfferingMessage.fromXml($result);
  }

  /// Returns a list of the source Amazon Web Services Regions where the current
  /// Amazon Web Services Region can create a read replica, copy a DB snapshot
  /// from, or replicate automated backups from.
  ///
  /// Use this operation to determine whether cross-Region features are
  /// supported between other Regions and your current Region. This operation
  /// supports pagination.
  ///
  /// To return information about the Regions that are enabled for your account,
  /// or all Regions, use the EC2 operation <code>DescribeRegions</code>. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html">
  /// DescribeRegions</a> in the <i>Amazon EC2 API Reference</i>.
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeSourceRegions</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so you can retrieve the
  /// remaining results.
  ///
  /// Default: 100
  ///
  /// Constraints: Minimum 20, maximum 100.
  ///
  /// Parameter [regionName] :
  /// The source Amazon Web Services Region name. For example,
  /// <code>us-east-1</code>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must specify a valid Amazon Web Services Region name.
  /// </li>
  /// </ul>
  Future<SourceRegionMessage> describeSourceRegions({
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? regionName,
  }) async {
    final $request = <String, String>{
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (regionName != null) 'RegionName': regionName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeSourceRegions',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeSourceRegionsResult',
    );
    return SourceRegionMessage.fromXml($result);
  }

  /// Describes the tenant databases in a DB instance that uses the multi-tenant
  /// configuration. Only RDS for Oracle CDB instances are supported.
  ///
  /// May throw [DBInstanceNotFoundFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The user-supplied DB instance identifier, which must match the identifier
  /// of an existing instance owned by the Amazon Web Services account. This
  /// parameter isn't case-sensitive.
  ///
  /// Parameter [filters] :
  /// A filter that specifies one or more database tenants to describe.
  ///
  /// Supported filters:
  ///
  /// <ul>
  /// <li>
  /// <code>tenant-db-name</code> - Tenant database names. The results list only
  /// includes information about the tenant databases that match these tenant DB
  /// names.
  /// </li>
  /// <li>
  /// <code>tenant-database-resource-id</code> - Tenant database resource
  /// identifiers.
  /// </li>
  /// <li>
  /// <code>dbi-resource-id</code> - DB instance resource identifiers. The
  /// results list only includes information about the tenants contained within
  /// the DB instances identified by these resource identifiers.
  /// </li>
  /// </ul>
  ///
  /// Parameter [marker] :
  /// An optional pagination token provided by a previous
  /// <code>DescribeTenantDatabases</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  ///
  /// Parameter [maxRecords] :
  /// The maximum number of records to include in the response. If more records
  /// exist than the specified <code>MaxRecords</code> value, a pagination token
  /// called a marker is included in the response so that you can retrieve the
  /// remaining results.
  ///
  /// Parameter [tenantDBName] :
  /// The user-supplied tenant database name, which must match the name of an
  /// existing tenant database on the specified DB instance owned by your Amazon
  /// Web Services account. This parameter isn’t case-sensitive.
  Future<TenantDatabasesMessage> describeTenantDatabases({
    String? dBInstanceIdentifier,
    List<Filter>? filters,
    String? marker,
    int? maxRecords,
    String? tenantDBName,
  }) async {
    final $request = <String, String>{
      if (dBInstanceIdentifier != null)
        'DBInstanceIdentifier': dBInstanceIdentifier,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
      if (marker != null) 'Marker': marker,
      if (maxRecords != null) 'MaxRecords': maxRecords.toString(),
      if (tenantDBName != null) 'TenantDBName': tenantDBName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeTenantDatabases',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeTenantDatabasesResult',
    );
    return TenantDatabasesMessage.fromXml($result);
  }

  /// You can call <code>DescribeValidDBInstanceModifications</code> to learn
  /// what modifications you can make to your DB instance. You can use this
  /// information when you call <code>ModifyDBInstance</code>.
  ///
  /// This command doesn't apply to RDS Custom.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The customer identifier or the ARN of your DB instance.
  Future<DescribeValidDBInstanceModificationsResult>
      describeValidDBInstanceModifications({
    required String dBInstanceIdentifier,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DescribeValidDBInstanceModifications',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DescribeValidDBInstanceModificationsResult',
    );
    return DescribeValidDBInstanceModificationsResult.fromXml($result);
  }

  /// Disables the HTTP endpoint for the specified DB cluster. Disabling this
  /// endpoint disables RDS Data API.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using
  /// RDS Data API</a> in the <i>Amazon Aurora User Guide</i>.
  /// <note>
  /// This operation applies only to Aurora PostgreSQL Serverless v2 and
  /// provisioned DB clusters. To disable the HTTP endpoint for Aurora
  /// Serverless v1 DB clusters, use the <code>EnableHttpEndpoint</code>
  /// parameter of the <code>ModifyDBCluster</code> operation.
  /// </note>
  ///
  /// May throw [ResourceNotFoundFault].
  /// May throw [InvalidResourceStateFault].
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the DB cluster.
  Future<DisableHttpEndpointResponse> disableHttpEndpoint({
    required String resourceArn,
  }) async {
    final $request = <String, String>{
      'ResourceArn': resourceArn,
    };
    final $result = await _protocol.send(
      $request,
      action: 'DisableHttpEndpoint',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DisableHttpEndpointResult',
    );
    return DisableHttpEndpointResponse.fromXml($result);
  }

  /// Downloads all or a portion of the specified log file, up to 1 MB in size.
  ///
  /// This command doesn't apply to RDS Custom.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBLogFileNotFoundFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The customer-assigned name of the DB instance that contains the log files
  /// you want to list.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DBInstance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [logFileName] :
  /// The name of the log file to be downloaded.
  ///
  /// Parameter [marker] :
  /// The pagination token provided in the previous request or "0". If the
  /// Marker parameter is specified the response includes only records beyond
  /// the marker until the end of the file or up to NumberOfLines.
  ///
  /// Parameter [numberOfLines] :
  /// The number of lines to download. If the number of lines specified results
  /// in a file over 1 MB in size, the file is truncated at 1 MB in size.
  ///
  /// If the NumberOfLines parameter is specified, then the block of lines
  /// returned can be from the beginning or the end of the log file, depending
  /// on the value of the Marker parameter.
  ///
  /// <ul>
  /// <li>
  /// If neither Marker or NumberOfLines are specified, the entire log file is
  /// returned up to a maximum of 10000 lines, starting with the most recent log
  /// entries first.
  /// </li>
  /// <li>
  /// If NumberOfLines is specified and Marker isn't specified, then the most
  /// recent lines from the end of the log file are returned.
  /// </li>
  /// <li>
  /// If Marker is specified as "0", then the specified number of lines from the
  /// beginning of the log file are returned.
  /// </li>
  /// <li>
  /// You can download the log file in blocks of lines by specifying the size of
  /// the block using the NumberOfLines parameter, and by specifying a value of
  /// "0" for the Marker parameter in your first request. Include the Marker
  /// value returned in the response as the Marker value for the next request,
  /// continuing until the AdditionalDataPending response element returns false.
  /// </li>
  /// </ul>
  Future<DownloadDBLogFilePortionDetails> downloadDBLogFilePortion({
    required String dBInstanceIdentifier,
    required String logFileName,
    String? marker,
    int? numberOfLines,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      'LogFileName': logFileName,
      if (marker != null) 'Marker': marker,
      if (numberOfLines != null) 'NumberOfLines': numberOfLines.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'DownloadDBLogFilePortion',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'DownloadDBLogFilePortionResult',
    );
    return DownloadDBLogFilePortionDetails.fromXml($result);
  }

  /// Enables the HTTP endpoint for the DB cluster. By default, the HTTP
  /// endpoint isn't enabled.
  ///
  /// When enabled, this endpoint provides a connectionless web service API (RDS
  /// Data API) for running SQL queries on the Aurora DB cluster. You can also
  /// query your database from inside the RDS console with the RDS query editor.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using
  /// RDS Data API</a> in the <i>Amazon Aurora User Guide</i>.
  /// <note>
  /// This operation applies only to Aurora PostgreSQL Serverless v2 and
  /// provisioned DB clusters. To enable the HTTP endpoint for Aurora Serverless
  /// v1 DB clusters, use the <code>EnableHttpEndpoint</code> parameter of the
  /// <code>ModifyDBCluster</code> operation.
  /// </note>
  ///
  /// May throw [ResourceNotFoundFault].
  /// May throw [InvalidResourceStateFault].
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the DB cluster.
  Future<EnableHttpEndpointResponse> enableHttpEndpoint({
    required String resourceArn,
  }) async {
    final $request = <String, String>{
      'ResourceArn': resourceArn,
    };
    final $result = await _protocol.send(
      $request,
      action: 'EnableHttpEndpoint',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'EnableHttpEndpointResult',
    );
    return EnableHttpEndpointResponse.fromXml($result);
  }

  /// Forces a failover for a DB cluster.
  ///
  /// For an Aurora DB cluster, failover for a DB cluster promotes one of the
  /// Aurora Replicas (read-only instances) in the DB cluster to be the primary
  /// DB instance (the cluster writer).
  ///
  /// For a Multi-AZ DB cluster, after RDS terminates the primary DB instance,
  /// the internal monitoring system detects that the primary DB instance is
  /// unhealthy and promotes a readable standby (read-only instances) in the DB
  /// cluster to be the primary DB instance (the cluster writer). Failover times
  /// are typically less than 35 seconds.
  ///
  /// An Amazon Aurora DB cluster automatically fails over to an Aurora Replica,
  /// if one exists, when the primary DB instance fails. A Multi-AZ DB cluster
  /// automatically fails over to a readable standby DB instance when the
  /// primary DB instance fails.
  ///
  /// To simulate a failure of a primary instance for testing, you can force a
  /// failover. Because each instance in a DB cluster has its own endpoint
  /// address, make sure to clean up and re-establish any existing connections
  /// that use those endpoint addresses when the failover is complete.
  ///
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The identifier of the DB cluster to force a failover for. This parameter
  /// isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DB cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [targetDBInstanceIdentifier] :
  /// The name of the DB instance to promote to the primary DB instance.
  ///
  /// Specify the DB instance identifier for an Aurora Replica or a Multi-AZ
  /// readable standby in the DB cluster, for example
  /// <code>mydbcluster-replica1</code>.
  ///
  /// This setting isn't supported for RDS for MySQL Multi-AZ DB clusters.
  Future<FailoverDBClusterResult> failoverDBCluster({
    required String dBClusterIdentifier,
    String? targetDBInstanceIdentifier,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      if (targetDBInstanceIdentifier != null)
        'TargetDBInstanceIdentifier': targetDBInstanceIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'FailoverDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'FailoverDBClusterResult',
    );
    return FailoverDBClusterResult.fromXml($result);
  }

  /// Promotes the specified secondary DB cluster to be the primary DB cluster
  /// in the global database cluster to fail over or switch over a global
  /// database. Switchover operations were previously called "managed planned
  /// failovers."
  /// <note>
  /// Although this operation can be used either to fail over or to switch over
  /// a global database cluster, its intended use is for global database
  /// failover. To switch over a global database cluster, we recommend that you
  /// use the <a>SwitchoverGlobalCluster</a> operation instead.
  /// </note>
  /// How you use this operation depends on whether you are failing over or
  /// switching over your global database cluster:
  ///
  /// <ul>
  /// <li>
  /// Failing over - Specify the <code>AllowDataLoss</code> parameter and don't
  /// specify the <code>Switchover</code> parameter.
  /// </li>
  /// <li>
  /// Switching over - Specify the <code>Switchover</code> parameter or omit it,
  /// but don't specify the <code>AllowDataLoss</code> parameter.
  /// </li>
  /// </ul>
  /// <b>About failing over and switching over</b>
  ///
  /// While failing over and switching over a global database cluster both
  /// change the primary DB cluster, you use these operations for different
  /// reasons:
  ///
  /// <ul>
  /// <li>
  /// <i>Failing over</i> - Use this operation to respond to an unplanned event,
  /// such as a Regional disaster in the primary Region. Failing over can result
  /// in a loss of write transaction data that wasn't replicated to the chosen
  /// secondary before the failover event occurred. However, the recovery
  /// process that promotes a DB instance on the chosen seconday DB cluster to
  /// be the primary writer DB instance guarantees that the data is in a
  /// transactionally consistent state.
  ///
  /// For more information about failing over an Amazon Aurora global database,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-disaster-recovery.html#aurora-global-database-failover.managed-unplanned">Performing
  /// managed failovers for Aurora global databases</a> in the <i>Amazon Aurora
  /// User Guide</i>.
  /// </li>
  /// <li>
  /// <i>Switching over</i> - Use this operation on a healthy global database
  /// cluster for planned events, such as Regional rotation or to fail back to
  /// the original primary DB cluster after a failover operation. With this
  /// operation, there is no data loss.
  ///
  /// For more information about switching over an Amazon Aurora global
  /// database, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-disaster-recovery.html#aurora-global-database-disaster-recovery.managed-failover">Performing
  /// switchovers for Aurora global databases</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  /// </li>
  /// </ul>
  ///
  /// May throw [GlobalClusterNotFoundFault].
  /// May throw [InvalidGlobalClusterStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBClusterNotFoundFault].
  ///
  /// Parameter [globalClusterIdentifier] :
  /// The identifier of the global database cluster (Aurora global database)
  /// this operation should apply to. The identifier is the unique key assigned
  /// by the user when the Aurora global database is created. In other words,
  /// it's the name of the Aurora global database.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing global database cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [targetDbClusterIdentifier] :
  /// The identifier of the secondary Aurora DB cluster that you want to promote
  /// to the primary for the global database cluster. Use the Amazon Resource
  /// Name (ARN) for the identifier so that Aurora can locate the cluster in its
  /// Amazon Web Services Region.
  ///
  /// Parameter [allowDataLoss] :
  /// Specifies whether to allow data loss for this global database cluster
  /// operation. Allowing data loss triggers a global failover operation.
  ///
  /// If you don't specify <code>AllowDataLoss</code>, the global database
  /// cluster operation defaults to a switchover.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified together with the <code>Switchover</code> parameter.
  /// </li>
  /// </ul>
  ///
  /// Parameter [switchover] :
  /// Specifies whether to switch over this global database cluster.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified together with the <code>AllowDataLoss</code> parameter.
  /// </li>
  /// </ul>
  Future<FailoverGlobalClusterResult> failoverGlobalCluster({
    required String globalClusterIdentifier,
    required String targetDbClusterIdentifier,
    bool? allowDataLoss,
    bool? switchover,
  }) async {
    final $request = <String, String>{
      'GlobalClusterIdentifier': globalClusterIdentifier,
      'TargetDbClusterIdentifier': targetDbClusterIdentifier,
      if (allowDataLoss != null) 'AllowDataLoss': allowDataLoss.toString(),
      if (switchover != null) 'Switchover': switchover.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'FailoverGlobalCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'FailoverGlobalClusterResult',
    );
    return FailoverGlobalClusterResult.fromXml($result);
  }

  /// Lists all tags on an Amazon RDS resource.
  ///
  /// For an overview on tagging an Amazon RDS resource, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging
  /// Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBSnapshotNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyTargetGroupNotFoundFault].
  /// May throw [BlueGreenDeploymentNotFoundFault].
  /// May throw [IntegrationNotFoundFault].
  /// May throw [TenantDatabaseNotFoundFault].
  /// May throw [DBSnapshotTenantDatabaseNotFoundFault].
  ///
  /// Parameter [resourceName] :
  /// The Amazon RDS resource with tags to be listed. This value is an Amazon
  /// Resource Name (ARN). For information about creating an ARN, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
  /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// Parameter [filters] :
  /// This parameter isn't currently supported.
  Future<TagListMessage> listTagsForResource({
    required String resourceName,
    List<Filter>? filters,
  }) async {
    final $request = <String, String>{
      'ResourceName': resourceName,
      if (filters != null)
        if (filters.isEmpty)
          'Filters': ''
        else
          for (var i1 = 0; i1 < filters.length; i1++)
            for (var e3 in filters[i1].toQueryMap().entries)
              'Filters.Filter.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ListTagsForResource',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ListTagsForResourceResult',
    );
    return TagListMessage.fromXml($result);
  }

  /// Changes the audit policy state of a database activity stream to either
  /// locked (default) or unlocked. A locked policy is read-only, whereas an
  /// unlocked policy is read/write. If your activity stream is started and
  /// locked, you can unlock it, customize your audit policy, and then lock your
  /// activity stream. Restarting the activity stream isn't required. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/DBActivityStreams.Modifying.html">
  /// Modifying a database activity stream</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// This operation is supported for RDS for Oracle and Microsoft SQL Server.
  ///
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [ResourceNotFoundFault].
  /// May throw [DBInstanceNotFoundFault].
  ///
  /// Parameter [auditPolicyState] :
  /// The audit policy state. When a policy is unlocked, it is read/write. When
  /// it is locked, it is read-only. You can edit your audit policy only when
  /// the activity stream is unlocked or stopped.
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the RDS for Oracle or Microsoft SQL
  /// Server DB instance. For example,
  /// <code>arn:aws:rds:us-east-1:12345667890:db:my-orcl-db</code>.
  Future<ModifyActivityStreamResponse> modifyActivityStream({
    AuditPolicyState? auditPolicyState,
    String? resourceArn,
  }) async {
    final $request = <String, String>{
      if (auditPolicyState != null) 'AuditPolicyState': auditPolicyState.value,
      if (resourceArn != null) 'ResourceArn': resourceArn,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyActivityStream',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyActivityStreamResult',
    );
    return ModifyActivityStreamResponse.fromXml($result);
  }

  /// Override the system-default Secure Sockets Layer/Transport Layer Security
  /// (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the
  /// override.
  ///
  /// By using this operation, you can specify an RDS-approved SSL/TLS
  /// certificate for new DB instances that is different from the default
  /// certificate provided by RDS. You can also use this operation to remove the
  /// override, so that new DB instances use the default certificate provided by
  /// RDS.
  ///
  /// You might need to override the default certificate in the following
  /// situations:
  ///
  /// <ul>
  /// <li>
  /// You already migrated your applications to support the latest certificate
  /// authority (CA) certificate, but the new CA certificate is not yet the RDS
  /// default CA certificate for the specified Amazon Web Services Region.
  /// </li>
  /// <li>
  /// RDS has already moved to a new default CA certificate for the specified
  /// Amazon Web Services Region, but you are still in the process of supporting
  /// the new CA certificate. In this case, you temporarily need additional time
  /// to finish your application changes.
  /// </li>
  /// </ul>
  /// For more information about rotating your SSL/TLS certificate for RDS DB
  /// engines, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html">
  /// Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// For more information about rotating your SSL/TLS certificate for Aurora DB
  /// engines, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html">
  /// Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// May throw [CertificateNotFoundFault].
  ///
  /// Parameter [certificateIdentifier] :
  /// The new default certificate identifier to override the current one with.
  ///
  /// To determine the valid values, use the <code>describe-certificates</code>
  /// CLI command or the <code>DescribeCertificates</code> API operation.
  ///
  /// Parameter [removeCustomerOverride] :
  /// Specifies whether to remove the override for the default certificate. If
  /// the override is removed, the default certificate is the system default.
  Future<ModifyCertificatesResult> modifyCertificates({
    String? certificateIdentifier,
    bool? removeCustomerOverride,
  }) async {
    final $request = <String, String>{
      if (certificateIdentifier != null)
        'CertificateIdentifier': certificateIdentifier,
      if (removeCustomerOverride != null)
        'RemoveCustomerOverride': removeCustomerOverride.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyCertificates',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyCertificatesResult',
    );
    return ModifyCertificatesResult.fromXml($result);
  }

  /// Set the capacity of an Aurora Serverless v1 DB cluster to a specific
  /// value.
  ///
  /// Aurora Serverless v1 scales seamlessly based on the workload on the DB
  /// cluster. In some cases, the capacity might not scale fast enough to meet a
  /// sudden change in workload, such as a large number of new transactions.
  /// Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity
  /// explicitly.
  ///
  /// After this call sets the DB cluster capacity, Aurora Serverless v1 can
  /// automatically scale the DB cluster based on the cooldown period for
  /// scaling up and the cooldown period for scaling down.
  ///
  /// For more information about Aurora Serverless v1, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using
  /// Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.
  /// <important>
  /// If you call <code>ModifyCurrentDBClusterCapacity</code> with the default
  /// <code>TimeoutAction</code>, connections that prevent Aurora Serverless v1
  /// from finding a scaling point might be dropped. For more information about
  /// scaling points, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling">
  /// Autoscaling for Aurora Serverless v1</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  /// </important> <note>
  /// This operation only applies to Aurora Serverless v1 DB clusters.
  /// </note>
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBClusterCapacityFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier for the cluster being modified. This parameter
  /// isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DB cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [capacity] :
  /// The DB cluster capacity.
  ///
  /// When you change the capacity of a paused Aurora Serverless v1 DB cluster,
  /// it automatically resumes.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// For Aurora MySQL, valid capacity values are <code>1</code>,
  /// <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>,
  /// <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.
  /// </li>
  /// <li>
  /// For Aurora PostgreSQL, valid capacity values are <code>2</code>,
  /// <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>,
  /// <code>64</code>, <code>192</code>, and <code>384</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [secondsBeforeTimeout] :
  /// The amount of time, in seconds, that Aurora Serverless v1 tries to find a
  /// scaling point to perform seamless scaling before enforcing the timeout
  /// action. The default is 300.
  ///
  /// Specify a value between 10 and 600 seconds.
  ///
  /// Parameter [timeoutAction] :
  /// The action to take when the timeout is reached, either
  /// <code>ForceApplyCapacityChange</code> or
  /// <code>RollbackCapacityChange</code>.
  ///
  /// <code>ForceApplyCapacityChange</code>, the default, sets the capacity to
  /// the specified value as soon as possible.
  ///
  /// <code>RollbackCapacityChange</code> ignores the capacity change if a
  /// scaling point isn't found in the timeout period.
  Future<DBClusterCapacityInfo> modifyCurrentDBClusterCapacity({
    required String dBClusterIdentifier,
    int? capacity,
    int? secondsBeforeTimeout,
    String? timeoutAction,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      if (capacity != null) 'Capacity': capacity.toString(),
      if (secondsBeforeTimeout != null)
        'SecondsBeforeTimeout': secondsBeforeTimeout.toString(),
      if (timeoutAction != null) 'TimeoutAction': timeoutAction,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyCurrentDBClusterCapacity',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyCurrentDBClusterCapacityResult',
    );
    return DBClusterCapacityInfo.fromXml($result);
  }

  /// Modifies the status of a custom engine version (CEV). You can find CEVs to
  /// modify by calling <code>DescribeDBEngineVersions</code>.
  /// <note>
  /// The MediaImport service that imports files from Amazon S3 to create CEVs
  /// isn't integrated with Amazon Web Services CloudTrail. If you turn on data
  /// logging for Amazon RDS in CloudTrail, calls to the
  /// <code>ModifyCustomDbEngineVersion</code> event aren't logged. However, you
  /// might see calls from the API gateway that accesses your Amazon S3 bucket.
  /// These calls originate from the MediaImport service for the
  /// <code>ModifyCustomDbEngineVersion</code> event.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.modify">Modifying
  /// CEV status</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [CustomDBEngineVersionNotFoundFault].
  /// May throw [InvalidCustomDBEngineVersionStateFault].
  ///
  /// Parameter [engine] :
  /// The database engine. RDS Custom for Oracle supports the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>custom-oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>custom-oracle-se2-cdb</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [engineVersion] :
  /// The custom engine version (CEV) that you want to modify. This option is
  /// required for RDS Custom for Oracle, but optional for Amazon RDS. The
  /// combination of <code>Engine</code> and <code>EngineVersion</code> is
  /// unique per customer per Amazon Web Services Region.
  ///
  /// Parameter [description] :
  /// An optional description of your CEV.
  ///
  /// Parameter [status] :
  /// The availability status to be assigned to the CEV. Valid values are as
  /// follows:
  /// <dl> <dt>available</dt> <dd>
  /// You can use this CEV to create a new RDS Custom DB instance.
  /// </dd> <dt>inactive</dt> <dd>
  /// You can create a new RDS Custom instance by restoring a DB snapshot with
  /// this CEV. You can't patch or create new instances with this CEV.
  /// </dd> </dl>
  /// You can change any status to any status. A typical reason to change status
  /// is to prevent the accidental use of a CEV, or to make a deprecated CEV
  /// eligible for use again. For example, you might change the status of your
  /// CEV from <code>available</code> to <code>inactive</code>, and from
  /// <code>inactive</code> back to <code>available</code>. To change the
  /// availability status of the CEV, it must not currently be in use by an RDS
  /// Custom instance, snapshot, or automated backup.
  Future<DBEngineVersion> modifyCustomDBEngineVersion({
    required String engine,
    required String engineVersion,
    String? description,
    CustomEngineVersionStatus? status,
  }) async {
    final $request = <String, String>{
      'Engine': engine,
      'EngineVersion': engineVersion,
      if (description != null) 'Description': description,
      if (status != null) 'Status': status.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyCustomDBEngineVersion',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyCustomDBEngineVersionResult',
    );
    return DBEngineVersion.fromXml($result);
  }

  /// Modifies the settings of an Amazon Aurora DB cluster or a Multi-AZ DB
  /// cluster. You can change one or more settings by specifying these
  /// parameters and the new values in the request.
  ///
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [InvalidDBSubnetGroupStateFault].
  /// May throw [InvalidSubnet].
  /// May throw [DBClusterParameterGroupNotFoundFault].
  /// May throw [InvalidDBSecurityGroupStateFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [DBClusterAlreadyExistsFault].
  /// May throw [DBInstanceAlreadyExistsFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [StorageTypeNotAvailableFault].
  /// May throw [OptionGroupNotFoundFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier for the cluster being modified. This parameter
  /// isn't case-sensitive.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DB cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [allocatedStorage] :
  /// The amount of storage in gibibytes (GiB) to allocate to each DB instance
  /// in the Multi-AZ DB cluster.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [allowEngineModeChange] :
  /// Specifies whether engine mode changes from <code>serverless</code> to
  /// <code>provisioned</code> are allowed.
  ///
  /// Valid for Cluster Type: Aurora Serverless v1 DB clusters only
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// You must allow engine mode changes when specifying a different value for
  /// the <code>EngineMode</code> parameter from the DB cluster's current engine
  /// mode.
  /// </li>
  /// </ul>
  ///
  /// Parameter [allowMajorVersionUpgrade] :
  /// Specifies whether major version upgrades are allowed.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// You must allow major version upgrades when specifying a value for the
  /// <code>EngineVersion</code> parameter that is a different major version
  /// than the DB cluster's current version.
  /// </li>
  /// </ul>
  ///
  /// Parameter [applyImmediately] :
  /// Specifies whether the modifications in this request and any pending
  /// modifications are asynchronously applied as soon as possible, regardless
  /// of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster.
  /// If this parameter is disabled, changes to the DB cluster are applied
  /// during the next maintenance window.
  ///
  /// Most modifications can be applied immediately or during the next scheduled
  /// maintenance window. Some modifications, such as turning on deletion
  /// protection and changing the master password, are applied
  /// immediately—regardless of when you choose to apply them.
  ///
  /// By default, this parameter is disabled.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [autoMinorVersionUpgrade] :
  /// Specifies whether minor engine upgrades are applied automatically to the
  /// DB cluster during the maintenance window. By default, minor engine
  /// upgrades are applied automatically.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [awsBackupRecoveryPointArn] :
  /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web
  /// Services Backup.
  ///
  /// Parameter [backtrackWindow] :
  /// The target backtrack window, in seconds. To disable backtracking, set this
  /// value to <code>0</code>.
  ///
  /// Valid for Cluster Type: Aurora MySQL DB clusters only
  ///
  /// Default: <code>0</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If specified, this value must be set to a number from 0 to 259,200 (72
  /// hours).
  /// </li>
  /// </ul>
  ///
  /// Parameter [backupRetentionPeriod] :
  /// The number of days for which automated backups are retained. Specify a
  /// minimum value of <code>1</code>.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Default: <code>1</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a value from 1 to 35.
  /// </li>
  /// </ul>
  ///
  /// Parameter [cACertificateIdentifier] :
  /// The CA certificate identifier to use for the DB cluster's server
  /// certificate.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters
  ///
  /// Parameter [cloudwatchLogsExportConfiguration] :
  /// The configuration setting for the log types to be enabled for export to
  /// CloudWatch Logs for a specific DB cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// The following values are valid for each DB engine:
  ///
  /// <ul>
  /// <li>
  /// Aurora MySQL - <code>audit | error | general | slowquery</code>
  /// </li>
  /// <li>
  /// Aurora PostgreSQL - <code>postgresql</code>
  /// </li>
  /// <li>
  /// RDS for MySQL - <code>error | general | slowquery</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - <code>postgresql | upgrade</code>
  /// </li>
  /// </ul>
  /// For more information about exporting CloudWatch Logs for Amazon RDS, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">
  /// Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon
  /// RDS User Guide</i>.
  ///
  /// For more information about exporting CloudWatch Logs for Amazon Aurora,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the DB cluster to snapshots of the
  /// DB cluster. The default is not to copy them.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [dBClusterInstanceClass] :
  /// The compute and memory capacity of each DB instance in the Multi-AZ DB
  /// cluster, for example <code>db.m6gd.xlarge</code>. Not all DB instance
  /// classes are available in all Amazon Web Services Regions, or for all
  /// database engines.
  ///
  /// For the full list of DB instance classes and availability for your engine,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">
  /// DB Instance Class</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of the DB cluster parameter group to use for the DB cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [dBInstanceParameterGroupName] :
  /// The name of the DB parameter group to apply to all instances of the DB
  /// cluster.
  /// <note>
  /// When you apply a parameter group using the
  /// <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't
  /// rebooted automatically. Also, parameter changes are applied immediately
  /// rather than during the next maintenance window.
  /// </note>
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Default: The existing name setting
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// The DB parameter group must be in the same DB parameter group family as
  /// this DB cluster.
  /// </li>
  /// <li>
  /// The <code>DBInstanceParameterGroupName</code> parameter is valid in
  /// combination with the <code>AllowMajorVersionUpgrade</code> parameter for a
  /// major version upgrade only.
  /// </li>
  /// </ul>
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether the DB cluster has deletion protection enabled. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [domain] :
  /// The Active Directory directory ID to move the DB cluster to. Specify
  /// <code>none</code> to remove the cluster from its current domain. The
  /// domain must be created prior to this operation.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos
  /// Authentication</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [domainIAMRoleName] :
  /// The name of the IAM role to use when making API calls to the Directory
  /// Service.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [enableGlobalWriteForwarding] :
  /// Specifies whether to enable this DB cluster to forward write operations to
  /// the primary cluster of a global cluster (Aurora global database). By
  /// default, write operations are not allowed on Aurora DB clusters that are
  /// secondary clusters in an Aurora global database.
  ///
  /// You can set this value only on Aurora DB clusters that are members of an
  /// Aurora global database. With this parameter enabled, a secondary cluster
  /// can forward writes to the current primary cluster, and the resulting
  /// changes are replicated back to this cluster. For the primary DB cluster of
  /// an Aurora global database, this value is used immediately if the primary
  /// is demoted by a global cluster API operation, but it does nothing until
  /// then.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [enableHttpEndpoint] :
  /// Specifies whether to enable the HTTP endpoint for an Aurora Serverless v1
  /// DB cluster. By default, the HTTP endpoint isn't enabled.
  ///
  /// When enabled, the HTTP endpoint provides a connectionless web service API
  /// (RDS Data API) for running SQL queries on the Aurora Serverless v1 DB
  /// cluster. You can also query your database from inside the RDS console with
  /// the RDS query editor.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using
  /// RDS Data API</a> in the <i>Amazon Aurora User Guide</i>.
  /// <note>
  /// This parameter applies only to Aurora Serverless v1 DB clusters. To enable
  /// or disable the HTTP endpoint for an Aurora PostgreSQL Serverless v2 or
  /// provisioned DB cluster, use the <code>EnableHttpEndpoint</code> and
  /// <code>DisableHttpEndpoint</code> operations.
  /// </note>
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [enableLimitlessDatabase] :
  /// Specifies whether to enable Aurora Limitless Database. You must enable
  /// Aurora Limitless Database to create a DB shard group.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [enableLocalWriteForwarding] :
  /// Specifies whether read replicas can forward write operations to the writer
  /// DB instance in the DB cluster. By default, write operations aren't allowed
  /// on reader DB instances.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [enablePerformanceInsights] :
  /// Specifies whether to turn on Performance Insights for the DB cluster.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">
  /// Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [engineMode] :
  /// The DB engine mode of the DB cluster, either <code>provisioned</code> or
  /// <code>serverless</code>.
  /// <note>
  /// The DB engine mode can be modified only from <code>serverless</code> to
  /// <code>provisioned</code>.
  /// </note>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html">
  /// CreateDBCluster</a>.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [engineVersion] :
  /// The version number of the database engine to which you want to upgrade.
  /// Changing this parameter results in an outage. The change is applied during
  /// the next maintenance window unless <code>ApplyImmediately</code> is
  /// enabled.
  ///
  /// If the cluster that you're modifying has one or more read replicas, all
  /// replicas must be running an engine version that's the same or later than
  /// the version you specify.
  ///
  /// To list all of the available engine versions for Aurora MySQL, use the
  /// following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// To list all of the available engine versions for Aurora PostgreSQL, use
  /// the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql
  /// --query "DBEngineVersions[].EngineVersion"</code>
  ///
  /// To list all of the available engine versions for RDS for MySQL, use the
  /// following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine mysql --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// To list all of the available engine versions for RDS for PostgreSQL, use
  /// the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine postgres --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [iops] :
  /// The amount of Provisioned IOPS (input/output operations per second) to be
  /// initially allocated for each DB instance in the Multi-AZ DB cluster.
  ///
  /// For information about valid IOPS values, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon
  /// RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a multiple between .5 and 50 of the storage amount for the DB
  /// cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [manageMasterUserPassword] :
  /// Specifies whether to manage the master user password with Amazon Web
  /// Services Secrets Manager.
  ///
  /// If the DB cluster doesn't manage the master user password with Amazon Web
  /// Services Secrets Manager, you can turn on this management. In this case,
  /// you can't specify <code>MasterUserPassword</code>.
  ///
  /// If the DB cluster already manages the master user password with Amazon Web
  /// Services Secrets Manager, and you specify that the master user password is
  /// not managed with Amazon Web Services Secrets Manager, then you must
  /// specify <code>MasterUserPassword</code>. In this case, RDS deletes the
  /// secret and uses the new password for the master user specified by
  /// <code>MasterUserPassword</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// Aurora User Guide.</i>
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [masterUserPassword] :
  /// The new password for the master database user.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 8 to 41 characters.
  /// </li>
  /// <li>
  /// Can contain any printable ASCII character except "/", """, or "@".
  /// </li>
  /// <li>
  /// Can't be specified if <code>ManageMasterUserPassword</code> is turned on.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserSecretKmsKeyId] :
  /// The Amazon Web Services KMS key identifier to encrypt a secret that is
  /// automatically generated and managed in Amazon Web Services Secrets
  /// Manager.
  ///
  /// This setting is valid only if both of the following conditions are met:
  ///
  /// <ul>
  /// <li>
  /// The DB cluster doesn't manage the master user password in Amazon Web
  /// Services Secrets Manager.
  ///
  /// If the DB cluster already manages the master user password in Amazon Web
  /// Services Secrets Manager, you can't change the KMS key that is used to
  /// encrypt the secret.
  /// </li>
  /// <li>
  /// You are turning on <code>ManageMasterUserPassword</code> to manage the
  /// master user password in Amazon Web Services Secrets Manager.
  ///
  /// If you are turning on <code>ManageMasterUserPassword</code> and don't
  /// specify <code>MasterUserSecretKmsKeyId</code>, then the
  /// <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If
  /// the secret is in a different Amazon Web Services account, then you can't
  /// use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and
  /// you must use a customer managed KMS key.
  /// </li>
  /// </ul>
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// There is a default KMS key for your Amazon Web Services account. Your
  /// Amazon Web Services account has a different default KMS key for each
  /// Amazon Web Services Region.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [monitoringInterval] :
  /// The interval, in seconds, between points when Enhanced Monitoring metrics
  /// are collected for the DB cluster. To turn off collecting Enhanced
  /// Monitoring metrics, specify <code>0</code>.
  ///
  /// If <code>MonitoringRoleArn</code> is specified, also set
  /// <code>MonitoringInterval</code> to a value other than <code>0</code>.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Valid Values: <code>0 | 1 | 5 | 10 | 15 | 30 | 60</code>
  ///
  /// Default: <code>0</code>
  ///
  /// Parameter [monitoringRoleArn] :
  /// The Amazon Resource Name (ARN) for the IAM role that permits RDS to send
  /// Enhanced Monitoring metrics to Amazon CloudWatch Logs. An example is
  /// <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on
  /// creating a monitoring role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
  /// create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// If <code>MonitoringInterval</code> is set to a value other than
  /// <code>0</code>, supply a <code>MonitoringRoleArn</code> value.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [networkType] :
  /// The network type of the DB cluster.
  ///
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4
  /// protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User
  /// Guide.</i>
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Valid Values: <code>IPV4 | DUAL</code>
  ///
  /// Parameter [newDBClusterIdentifier] :
  /// The new DB cluster identifier for the DB cluster when renaming a DB
  /// cluster. This value is stored as a lowercase string.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// The first character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster2</code>
  ///
  /// Parameter [optionGroupName] :
  /// The option group to associate the DB cluster with.
  ///
  /// DB clusters are associated with a default option group that can't be
  /// modified.
  ///
  /// Parameter [performanceInsightsKMSKeyId] :
  /// The Amazon Web Services KMS key identifier for encryption of Performance
  /// Insights data.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  ///
  /// If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>,
  /// then Amazon RDS uses your default KMS key. There is a default KMS key for
  /// your Amazon Web Services account. Your Amazon Web Services account has a
  /// different default KMS key for each Amazon Web Services Region.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Parameter [performanceInsightsRetentionPeriod] :
  /// The number of days to retain Performance Insights data.
  ///
  /// Valid for Cluster Type: Multi-AZ DB clusters only
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>7</code>
  /// </li>
  /// <li>
  /// <i>month</i> * 31, where <i>month</i> is a number of months from 1-23.
  /// Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months *
  /// 31), <code>589</code> (19 months * 31)
  /// </li>
  /// <li>
  /// <code>731</code>
  /// </li>
  /// </ul>
  /// Default: <code>7</code> days
  ///
  /// If you specify a retention period that isn't valid, such as
  /// <code>94</code>, Amazon RDS issues an error.
  ///
  /// Parameter [port] :
  /// The port number on which the DB cluster accepts connections.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Valid Values: <code>1150-65535</code>
  ///
  /// Default: The same port as the original DB cluster.
  ///
  /// Parameter [preferredBackupWindow] :
  /// The daily time range during which automated backups are created if
  /// automated backups are enabled, using the
  /// <code>BackupRetentionPeriod</code> parameter.
  ///
  /// The default is a 30-minute window selected at random from an 8-hour block
  /// of time for each Amazon Web Services Region. To view the time blocks
  /// available, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
  /// Backup window</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>hh24:mi-hh24:mi</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred maintenance window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [preferredMaintenanceWindow] :
  /// The weekly time range during which system maintenance can occur, in
  /// Universal Coordinated Time (UTC).
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// The default is a 30-minute window selected at random from an 8-hour block
  /// of time for each Amazon Web Services Region, occurring on a random day of
  /// the week. To see the time blocks available, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
  /// Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.
  /// </li>
  /// <li>
  /// Days must be one of <code>Mon | Tue | Wed | Thu | Fri | Sat | Sun</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [rotateMasterUserPassword] :
  /// Specifies whether to rotate the secret managed by Amazon Web Services
  /// Secrets Manager for the master user password.
  ///
  /// This setting is valid only if the master user password is managed by RDS
  /// in Amazon Web Services Secrets Manager for the DB cluster. The secret
  /// value contains the updated password.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// Aurora User Guide.</i>
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// You must apply the change immediately when rotating the master user
  /// password.
  /// </li>
  /// </ul>
  ///
  /// Parameter [scalingConfiguration] :
  /// The scaling properties of the DB cluster. You can only modify scaling
  /// properties for DB clusters in <code>serverless</code> DB engine mode.
  ///
  /// Valid for Cluster Type: Aurora DB clusters only
  ///
  /// Parameter [storageType] :
  /// The storage type to associate with the DB cluster.
  ///
  /// For information on storage types for Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Overview.StorageReliability.html#aurora-storage-type">Storage
  /// configurations for Amazon Aurora DB clusters</a>. For information on
  /// storage types for Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/create-multi-az-db-cluster.html#create-multi-az-db-cluster-settings">Settings
  /// for creating Multi-AZ DB clusters</a>.
  ///
  /// When specified for a Multi-AZ DB cluster, a value for the
  /// <code>Iops</code> parameter is required.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// Aurora DB clusters - <code>aurora | aurora-iopt1</code>
  /// </li>
  /// <li>
  /// Multi-AZ DB clusters - <code>io1 | io2 | gp3</code>
  /// </li>
  /// </ul>
  /// Default:
  ///
  /// <ul>
  /// <li>
  /// Aurora DB clusters - <code>aurora</code>
  /// </li>
  /// <li>
  /// Multi-AZ DB clusters - <code>io1</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of EC2 VPC security groups to associate with this DB cluster.
  ///
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  Future<ModifyDBClusterResult> modifyDBCluster({
    required String dBClusterIdentifier,
    int? allocatedStorage,
    bool? allowEngineModeChange,
    bool? allowMajorVersionUpgrade,
    bool? applyImmediately,
    bool? autoMinorVersionUpgrade,
    String? awsBackupRecoveryPointArn,
    int? backtrackWindow,
    int? backupRetentionPeriod,
    String? cACertificateIdentifier,
    CloudwatchLogsExportConfiguration? cloudwatchLogsExportConfiguration,
    bool? copyTagsToSnapshot,
    String? dBClusterInstanceClass,
    String? dBClusterParameterGroupName,
    String? dBInstanceParameterGroupName,
    bool? deletionProtection,
    String? domain,
    String? domainIAMRoleName,
    bool? enableGlobalWriteForwarding,
    bool? enableHttpEndpoint,
    bool? enableIAMDatabaseAuthentication,
    bool? enableLimitlessDatabase,
    bool? enableLocalWriteForwarding,
    bool? enablePerformanceInsights,
    String? engineMode,
    String? engineVersion,
    int? iops,
    bool? manageMasterUserPassword,
    String? masterUserPassword,
    String? masterUserSecretKmsKeyId,
    int? monitoringInterval,
    String? monitoringRoleArn,
    String? networkType,
    String? newDBClusterIdentifier,
    String? optionGroupName,
    String? performanceInsightsKMSKeyId,
    int? performanceInsightsRetentionPeriod,
    int? port,
    String? preferredBackupWindow,
    String? preferredMaintenanceWindow,
    bool? rotateMasterUserPassword,
    ScalingConfiguration? scalingConfiguration,
    ServerlessV2ScalingConfiguration? serverlessV2ScalingConfiguration,
    String? storageType,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      if (allocatedStorage != null)
        'AllocatedStorage': allocatedStorage.toString(),
      if (allowEngineModeChange != null)
        'AllowEngineModeChange': allowEngineModeChange.toString(),
      if (allowMajorVersionUpgrade != null)
        'AllowMajorVersionUpgrade': allowMajorVersionUpgrade.toString(),
      if (applyImmediately != null)
        'ApplyImmediately': applyImmediately.toString(),
      if (autoMinorVersionUpgrade != null)
        'AutoMinorVersionUpgrade': autoMinorVersionUpgrade.toString(),
      if (awsBackupRecoveryPointArn != null)
        'AwsBackupRecoveryPointArn': awsBackupRecoveryPointArn,
      if (backtrackWindow != null)
        'BacktrackWindow': backtrackWindow.toString(),
      if (backupRetentionPeriod != null)
        'BackupRetentionPeriod': backupRetentionPeriod.toString(),
      if (cACertificateIdentifier != null)
        'CACertificateIdentifier': cACertificateIdentifier,
      if (cloudwatchLogsExportConfiguration != null)
        for (var e1 in cloudwatchLogsExportConfiguration.toQueryMap().entries)
          'CloudwatchLogsExportConfiguration.${e1.key}': e1.value,
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (dBClusterInstanceClass != null)
        'DBClusterInstanceClass': dBClusterInstanceClass,
      if (dBClusterParameterGroupName != null)
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
      if (dBInstanceParameterGroupName != null)
        'DBInstanceParameterGroupName': dBInstanceParameterGroupName,
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (domain != null) 'Domain': domain,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (enableGlobalWriteForwarding != null)
        'EnableGlobalWriteForwarding': enableGlobalWriteForwarding.toString(),
      if (enableHttpEndpoint != null)
        'EnableHttpEndpoint': enableHttpEndpoint.toString(),
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (enableLimitlessDatabase != null)
        'EnableLimitlessDatabase': enableLimitlessDatabase.toString(),
      if (enableLocalWriteForwarding != null)
        'EnableLocalWriteForwarding': enableLocalWriteForwarding.toString(),
      if (enablePerformanceInsights != null)
        'EnablePerformanceInsights': enablePerformanceInsights.toString(),
      if (engineMode != null) 'EngineMode': engineMode,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (iops != null) 'Iops': iops.toString(),
      if (manageMasterUserPassword != null)
        'ManageMasterUserPassword': manageMasterUserPassword.toString(),
      if (masterUserPassword != null) 'MasterUserPassword': masterUserPassword,
      if (masterUserSecretKmsKeyId != null)
        'MasterUserSecretKmsKeyId': masterUserSecretKmsKeyId,
      if (monitoringInterval != null)
        'MonitoringInterval': monitoringInterval.toString(),
      if (monitoringRoleArn != null) 'MonitoringRoleArn': monitoringRoleArn,
      if (networkType != null) 'NetworkType': networkType,
      if (newDBClusterIdentifier != null)
        'NewDBClusterIdentifier': newDBClusterIdentifier,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (performanceInsightsKMSKeyId != null)
        'PerformanceInsightsKMSKeyId': performanceInsightsKMSKeyId,
      if (performanceInsightsRetentionPeriod != null)
        'PerformanceInsightsRetentionPeriod':
            performanceInsightsRetentionPeriod.toString(),
      if (port != null) 'Port': port.toString(),
      if (preferredBackupWindow != null)
        'PreferredBackupWindow': preferredBackupWindow,
      if (preferredMaintenanceWindow != null)
        'PreferredMaintenanceWindow': preferredMaintenanceWindow,
      if (rotateMasterUserPassword != null)
        'RotateMasterUserPassword': rotateMasterUserPassword.toString(),
      if (scalingConfiguration != null)
        for (var e1 in scalingConfiguration.toQueryMap().entries)
          'ScalingConfiguration.${e1.key}': e1.value,
      if (serverlessV2ScalingConfiguration != null)
        for (var e1 in serverlessV2ScalingConfiguration.toQueryMap().entries)
          'ServerlessV2ScalingConfiguration.${e1.key}': e1.value,
      if (storageType != null) 'StorageType': storageType,
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBClusterResult',
    );
    return ModifyDBClusterResult.fromXml($result);
  }

  /// Modifies the properties of an endpoint in an Amazon Aurora DB cluster.
  /// <note>
  /// This operation only applies to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBClusterEndpointStateFault].
  /// May throw [DBClusterEndpointNotFoundFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBClusterEndpointIdentifier] :
  /// The identifier of the endpoint to modify. This parameter is stored as a
  /// lowercase string.
  ///
  /// Parameter [endpointType] :
  /// The type of the endpoint. One of: <code>READER</code>,
  /// <code>WRITER</code>, <code>ANY</code>.
  ///
  /// Parameter [excludedMembers] :
  /// List of DB instance identifiers that aren't part of the custom endpoint
  /// group. All other eligible instances are reachable through the custom
  /// endpoint. Only relevant if the list of static members is empty.
  ///
  /// Parameter [staticMembers] :
  /// List of DB instance identifiers that are part of the custom endpoint
  /// group.
  Future<DBClusterEndpoint> modifyDBClusterEndpoint({
    required String dBClusterEndpointIdentifier,
    String? endpointType,
    List<String>? excludedMembers,
    List<String>? staticMembers,
  }) async {
    final $request = <String, String>{
      'DBClusterEndpointIdentifier': dBClusterEndpointIdentifier,
      if (endpointType != null) 'EndpointType': endpointType,
      if (excludedMembers != null)
        if (excludedMembers.isEmpty)
          'ExcludedMembers': ''
        else
          for (var i1 = 0; i1 < excludedMembers.length; i1++)
            'ExcludedMembers.member.${i1 + 1}': excludedMembers[i1],
      if (staticMembers != null)
        if (staticMembers.isEmpty)
          'StaticMembers': ''
        else
          for (var i1 = 0; i1 < staticMembers.length; i1++)
            'StaticMembers.member.${i1 + 1}': staticMembers[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBClusterEndpoint',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBClusterEndpointResult',
    );
    return DBClusterEndpoint.fromXml($result);
  }

  /// Modifies the parameters of a DB cluster parameter group. To modify more
  /// than one parameter, submit a list of the following:
  /// <code>ParameterName</code>, <code>ParameterValue</code>, and
  /// <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a
  /// single request.
  /// <important>
  /// After you create a DB cluster parameter group, you should wait at least 5
  /// minutes before creating your first DB cluster that uses that DB cluster
  /// parameter group as the default parameter group. This allows Amazon RDS to
  /// fully complete the create operation before the parameter group is used as
  /// the default for a new DB cluster. This is especially important for
  /// parameters that are critical when creating the default database for a DB
  /// cluster, such as the character set for the default database defined by the
  /// <code>character_set_database</code> parameter. You can use the
  /// <i>Parameter Groups</i> option of the <a
  /// href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
  /// <code>DescribeDBClusterParameters</code> operation to verify that your DB
  /// cluster parameter group has been created or modified.
  ///
  /// If the modified DB cluster parameter group is used by an Aurora Serverless
  /// v1 cluster, Aurora applies the update immediately. The cluster restart
  /// might interrupt your workload. In that case, your application must reopen
  /// any connections and retry any transactions that were active when the
  /// parameter changes took effect.
  /// </important>
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [InvalidDBParameterGroupStateFault].
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of the DB cluster parameter group to modify.
  ///
  /// Parameter [parameters] :
  /// A list of parameters in the DB cluster parameter group to modify.
  ///
  /// Valid Values (for the application method): <code>immediate |
  /// pending-reboot</code>
  /// <note>
  /// You can use the <code>immediate</code> value with dynamic parameters only.
  /// You can use the <code>pending-reboot</code> value for both dynamic and
  /// static parameters.
  ///
  /// When the application method is <code>immediate</code>, changes to dynamic
  /// parameters are applied immediately to the DB clusters associated with the
  /// parameter group. When the application method is
  /// <code>pending-reboot</code>, changes to dynamic and static parameters are
  /// applied after a reboot without failover to the DB clusters associated with
  /// the parameter group.
  /// </note>
  Future<DBClusterParameterGroupNameMessage> modifyDBClusterParameterGroup({
    required String dBClusterParameterGroupName,
    required List<Parameter> parameters,
  }) async {
    final $request = <String, String>{
      'DBClusterParameterGroupName': dBClusterParameterGroupName,
      if (parameters.isEmpty)
        'Parameters': ''
      else
        for (var i1 = 0; i1 < parameters.length; i1++)
          for (var e3 in parameters[i1].toQueryMap().entries)
            'Parameters.Parameter.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBClusterParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBClusterParameterGroupResult',
    );
    return DBClusterParameterGroupNameMessage.fromXml($result);
  }

  /// Adds an attribute and values to, or removes an attribute and values from,
  /// a manual DB cluster snapshot.
  ///
  /// To share a manual DB cluster snapshot with other Amazon Web Services
  /// accounts, specify <code>restore</code> as the <code>AttributeName</code>
  /// and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the
  /// Amazon Web Services accounts that are authorized to restore the manual DB
  /// cluster snapshot. Use the value <code>all</code> to make the manual DB
  /// cluster snapshot public, which means that it can be copied or restored by
  /// all Amazon Web Services accounts.
  /// <note>
  /// Don't add the <code>all</code> value for any manual DB cluster snapshots
  /// that contain private information that you don't want available to all
  /// Amazon Web Services accounts.
  /// </note>
  /// If a manual DB cluster snapshot is encrypted, it can be shared, but only
  /// by specifying a list of authorized Amazon Web Services account IDs for the
  /// <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a
  /// value for that parameter in this case.
  ///
  /// To view which Amazon Web Services accounts have access to copy or restore
  /// a manual DB cluster snapshot, or whether a manual DB cluster snapshot is
  /// public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API
  /// operation. The accounts are returned as values for the
  /// <code>restore</code> attribute.
  ///
  /// May throw [DBClusterSnapshotNotFoundFault].
  /// May throw [InvalidDBClusterSnapshotStateFault].
  /// May throw [SharedSnapshotQuotaExceededFault].
  ///
  /// Parameter [attributeName] :
  /// The name of the DB cluster snapshot attribute to modify.
  ///
  /// To manage authorization for other Amazon Web Services accounts to copy or
  /// restore a manual DB cluster snapshot, set this value to
  /// <code>restore</code>.
  /// <note>
  /// To view the list of attributes available to modify, use the
  /// <a>DescribeDBClusterSnapshotAttributes</a> API operation.
  /// </note>
  ///
  /// Parameter [dBClusterSnapshotIdentifier] :
  /// The identifier for the DB cluster snapshot to modify the attributes for.
  ///
  /// Parameter [valuesToAdd] :
  /// A list of DB cluster snapshot attributes to add to the attribute specified
  /// by <code>AttributeName</code>.
  ///
  /// To authorize other Amazon Web Services accounts to copy or restore a
  /// manual DB cluster snapshot, set this list to include one or more Amazon
  /// Web Services account IDs, or <code>all</code> to make the manual DB
  /// cluster snapshot restorable by any Amazon Web Services account. Do not add
  /// the <code>all</code> value for any manual DB cluster snapshots that
  /// contain private information that you don't want available to all Amazon
  /// Web Services accounts.
  ///
  /// Parameter [valuesToRemove] :
  /// A list of DB cluster snapshot attributes to remove from the attribute
  /// specified by <code>AttributeName</code>.
  ///
  /// To remove authorization for other Amazon Web Services accounts to copy or
  /// restore a manual DB cluster snapshot, set this list to include one or more
  /// Amazon Web Services account identifiers, or <code>all</code> to remove
  /// authorization for any Amazon Web Services account to copy or restore the
  /// DB cluster snapshot. If you specify <code>all</code>, an Amazon Web
  /// Services account whose account ID is explicitly added to the
  /// <code>restore</code> attribute can still copy or restore a manual DB
  /// cluster snapshot.
  Future<ModifyDBClusterSnapshotAttributeResult>
      modifyDBClusterSnapshotAttribute({
    required String attributeName,
    required String dBClusterSnapshotIdentifier,
    List<String>? valuesToAdd,
    List<String>? valuesToRemove,
  }) async {
    final $request = <String, String>{
      'AttributeName': attributeName,
      'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
      if (valuesToAdd != null)
        if (valuesToAdd.isEmpty)
          'ValuesToAdd': ''
        else
          for (var i1 = 0; i1 < valuesToAdd.length; i1++)
            'ValuesToAdd.AttributeValue.${i1 + 1}': valuesToAdd[i1],
      if (valuesToRemove != null)
        if (valuesToRemove.isEmpty)
          'ValuesToRemove': ''
        else
          for (var i1 = 0; i1 < valuesToRemove.length; i1++)
            'ValuesToRemove.AttributeValue.${i1 + 1}': valuesToRemove[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBClusterSnapshotAttribute',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBClusterSnapshotAttributeResult',
    );
    return ModifyDBClusterSnapshotAttributeResult.fromXml($result);
  }

  /// Modifies settings for a DB instance. You can change one or more database
  /// configuration parameters by specifying these parameters and the new values
  /// in the request. To learn what modifications you can make to your DB
  /// instance, call <code>DescribeValidDBInstanceModifications</code> before
  /// you call <code>ModifyDBInstance</code>.
  ///
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [InvalidDBSecurityGroupStateFault].
  /// May throw [DBInstanceAlreadyExistsFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBSecurityGroupNotFoundFault].
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [ProvisionedIopsNotAvailableInAZFault].
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [DBUpgradeDependencyFailureFault].
  /// May throw [StorageTypeNotSupportedFault].
  /// May throw [AuthorizationNotFoundFault].
  /// May throw [CertificateNotFoundFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [BackupPolicyNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [NetworkTypeNotSupported].
  /// May throw [TenantDatabaseQuotaExceededFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The identifier of DB instance to modify. This value is stored as a
  /// lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DB instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [allocatedStorage] :
  /// The new amount of storage in gibibytes (GiB) to allocate for the DB
  /// instance.
  ///
  /// For RDS for Db2, MariaDB, RDS for MySQL, RDS for Oracle, and RDS for
  /// PostgreSQL, the value supplied must be at least 10% greater than the
  /// current value. Values that are not at least 10% greater than the existing
  /// value are rounded up so that they are 10% greater than the current value.
  ///
  /// For the valid values for allocated storage for each engine, see
  /// <code>CreateDBInstance</code>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// When you increase the allocated storage for a DB instance that uses
  /// Provisioned IOPS (<code>gp3</code>, <code>io1</code>, or <code>io2</code>
  /// storage type), you must also specify the <code>Iops</code> parameter. You
  /// can use the current value for <code>Iops</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [allowMajorVersionUpgrade] :
  /// Specifies whether major version upgrades are allowed. Changing this
  /// parameter doesn't result in an outage and the change is asynchronously
  /// applied as soon as possible.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Major version upgrades must be allowed when specifying a value for the
  /// <code>EngineVersion</code> parameter that's a different major version than
  /// the DB instance's current version.
  /// </li>
  /// </ul>
  ///
  /// Parameter [applyImmediately] :
  /// Specifies whether the modifications in this request and any pending
  /// modifications are asynchronously applied as soon as possible, regardless
  /// of the <code>PreferredMaintenanceWindow</code> setting for the DB
  /// instance. By default, this parameter is disabled.
  ///
  /// If this parameter is disabled, changes to the DB instance are applied
  /// during the next maintenance window. Some parameter changes can cause an
  /// outage and are applied on the next call to <a>RebootDBInstance</a>, or the
  /// next failure reboot. Review the table of parameters in <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying
  /// a DB Instance</a> in the <i>Amazon RDS User Guide</i> to see the impact of
  /// enabling or disabling <code>ApplyImmediately</code> for each modified
  /// parameter and to determine when the changes are applied.
  ///
  /// Parameter [autoMinorVersionUpgrade] :
  /// Specifies whether minor version upgrades are applied automatically to the
  /// DB instance during the maintenance window. An outage occurs when all the
  /// following conditions are met:
  ///
  /// <ul>
  /// <li>
  /// The automatic upgrade is enabled for the maintenance window.
  /// </li>
  /// <li>
  /// A newer minor version is available.
  /// </li>
  /// <li>
  /// RDS has enabled automatic patching for the engine version.
  /// </li>
  /// </ul>
  /// If any of the preceding conditions isn't met, Amazon RDS applies the
  /// change as soon as possible and doesn't cause an outage.
  ///
  /// For an RDS Custom DB instance, don't enable this setting. Otherwise, the
  /// operation returns an error.
  ///
  /// Parameter [automationMode] :
  /// The automation mode of the RDS Custom DB instance. If <code>full</code>,
  /// the DB instance automates monitoring and instance recovery. If <code>all
  /// paused</code>, the instance pauses automation for the duration set by
  /// <code>ResumeFullAutomationModeMinutes</code>.
  ///
  /// Parameter [awsBackupRecoveryPointArn] :
  /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web
  /// Services Backup.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [backupRetentionPeriod] :
  /// The number of days to retain automated backups. Setting this parameter to
  /// a positive number enables backups. Setting this parameter to 0 disables
  /// automated backups.
  /// <note>
  /// Enabling and disabling backups can result in a brief I/O suspension that
  /// lasts from a few seconds to a few minutes, depending on the size and class
  /// of your DB instance.
  /// </note>
  /// These changes are applied during the next maintenance window unless the
  /// <code>ApplyImmediately</code> parameter is enabled for this request. If
  /// you change the parameter from one non-zero value to another non-zero
  /// value, the change is asynchronously applied as soon as possible.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The retention
  /// period for automated backups is managed by the DB cluster. For more
  /// information, see <code>ModifyDBCluster</code>.
  ///
  /// Default: Uses existing setting
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a value from 0 to 35.
  /// </li>
  /// <li>
  /// Can't be set to 0 if the DB instance is a source to read replicas.
  /// </li>
  /// <li>
  /// Can't be set to 0 for an RDS Custom for Oracle DB instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [cACertificateIdentifier] :
  /// The CA certificate identifier to use for the DB instance's server
  /// certificate.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  ///
  /// Parameter [certificateRotationRestart] :
  /// Specifies whether the DB instance is restarted when you rotate your
  /// SSL/TLS certificate.
  ///
  /// By default, the DB instance is restarted when you rotate your SSL/TLS
  /// certificate. The certificate is not updated until the DB instance is
  /// restarted.
  /// <important>
  /// Set this parameter only if you are <i>not</i> using SSL/TLS to connect to
  /// the DB instance.
  /// </important>
  /// If you are using SSL/TLS to connect to the DB instance, follow the
  /// appropriate instructions for your DB engine to rotate your SSL/TLS
  /// certificate:
  ///
  /// <ul>
  /// <li>
  /// For more information about rotating your SSL/TLS certificate for RDS DB
  /// engines, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html">
  /// Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User
  /// Guide.</i>
  /// </li>
  /// <li>
  /// For more information about rotating your SSL/TLS certificate for Aurora DB
  /// engines, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html">
  /// Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  /// </li>
  /// </ul>
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [cloudwatchLogsExportConfiguration] :
  /// The log types to be enabled for export to CloudWatch Logs for a specific
  /// DB instance.
  ///
  /// A change to the <code>CloudwatchLogsExportConfiguration</code> parameter
  /// is always applied to the DB instance immediately. Therefore, the
  /// <code>ApplyImmediately</code> parameter has no effect.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the DB instance to snapshots of
  /// the DB instance. By default, tags aren't copied.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. Copying tags to
  /// snapshots is managed by the DB cluster. Setting this value for an Aurora
  /// DB instance has no effect on the DB cluster setting. For more information,
  /// see <code>ModifyDBCluster</code>.
  ///
  /// Parameter [dBInstanceClass] :
  /// The new compute and memory capacity of the DB instance, for example
  /// <code>db.m4.large</code>. Not all DB instance classes are available in all
  /// Amazon Web Services Regions, or for all database engines. For the full
  /// list of DB instance classes, and availability for your engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB
  /// Instance Class</a> in the <i>Amazon RDS User Guide</i> or <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.html">Aurora
  /// DB instance classes</a> in the <i>Amazon Aurora User Guide</i>. For RDS
  /// Custom, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits.html#custom-reqs-limits.instances">DB
  /// instance class support for RDS Custom for Oracle</a> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits-MS.html#custom-reqs-limits.instancesMS">
  /// DB instance class support for RDS Custom for SQL Server</a>.
  ///
  /// If you modify the DB instance class, an outage occurs during the change.
  /// The change is applied during the next maintenance window, unless you
  /// specify <code>ApplyImmediately</code> in your request.
  ///
  /// Default: Uses existing setting
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If you are modifying the DB instance class and upgrading the engine
  /// version at the same time, the currently running engine version must be
  /// supported on the specified DB instance class. Otherwise, the operation
  /// returns an error. In this case, first run the operation to upgrade the
  /// engine version, and then run it again to modify the DB instance class.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group to apply to the DB instance.
  ///
  /// Changing this setting doesn't result in an outage. The parameter group
  /// name itself is changed immediately, but the actual parameter changes are
  /// not applied until you reboot the instance without failover. In this case,
  /// the DB instance isn't rebooted automatically, and the parameter changes
  /// aren't applied during the next maintenance window. However, if you modify
  /// dynamic parameters in the newly associated DB parameter group, these
  /// changes are applied immediately without a reboot.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Default: Uses existing setting
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the same DB parameter group family as the DB instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBPortNumber] :
  /// The port number on which the database accepts connections.
  ///
  /// The value of the <code>DBPortNumber</code> parameter must not match any of
  /// the port values specified for options in the option group for the DB
  /// instance.
  ///
  /// If you change the <code>DBPortNumber</code> value, your database restarts
  /// regardless of the value of the <code>ApplyImmediately</code> parameter.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Valid Values: <code>1150-65535</code>
  ///
  /// Default:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora - <code>3306</code>
  /// </li>
  /// <li>
  /// RDS for Db2 - <code>50000</code>
  /// </li>
  /// <li>
  /// RDS for MariaDB - <code>3306</code>
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - <code>1433</code>
  /// </li>
  /// <li>
  /// RDS for MySQL - <code>3306</code>
  /// </li>
  /// <li>
  /// RDS for Oracle - <code>1521</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - <code>5432</code>
  /// </li>
  /// </ul>
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// For RDS for Microsoft SQL Server, the value can't be <code>1234</code>,
  /// <code>1434</code>, <code>3260</code>, <code>3343</code>,
  /// <code>3389</code>, <code>47001</code>, or <code>49152-49156</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSecurityGroups] :
  /// A list of DB security groups to authorize on this DB instance. Changing
  /// this setting doesn't result in an outage and the change is asynchronously
  /// applied as soon as possible.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match existing DB security groups.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSubnetGroupName] :
  /// The new DB subnet group for the DB instance. You can use this parameter to
  /// move your DB instance to a different VPC. If your DB instance isn't in a
  /// VPC, you can also use this parameter to move your DB instance into a VPC.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Working
  /// with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Changing the subnet group causes an outage during the change. The change
  /// is applied during the next maintenance window, unless you enable
  /// <code>ApplyImmediately</code>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match existing DB subnet group.
  /// </li>
  /// </ul>
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [dedicatedLogVolume] :
  /// Indicates whether the DB instance has a dedicated log volume (DLV)
  /// enabled.
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether the DB instance has deletion protection enabled. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
  /// Deleting a DB Instance</a>.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. You can enable
  /// or disable deletion protection for the DB cluster. For more information,
  /// see <code>ModifyDBCluster</code>. DB instances in a DB cluster can be
  /// deleted even when deletion protection is enabled for the DB cluster.
  ///
  /// Parameter [disableDomain] :
  /// Specifies whether to remove the DB instance from the Active Directory
  /// domain.
  ///
  /// Parameter [domain] :
  /// The Active Directory directory ID to move the DB instance to. Specify
  /// <code>none</code> to remove the instance from its current domain. You must
  /// create the domain before this operation. Currently, you can create only
  /// Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in
  /// an Active Directory Domain.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
  /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [domainAuthSecretArn] :
  /// The ARN for the Secrets Manager secret with the credentials for the user
  /// joining the domain.
  ///
  /// Example:
  /// <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code>
  ///
  /// Parameter [domainDnsIps] :
  /// The IPv4 DNS IP addresses of your primary and secondary Active Directory
  /// domain controllers.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Two IP addresses must be provided. If there isn't a secondary domain
  /// controller, use the IP address of the primary domain controller for both
  /// entries in the list.
  /// </li>
  /// </ul>
  /// Example: <code>123.124.125.126,234.235.236.237</code>
  ///
  /// Parameter [domainFqdn] :
  /// The fully qualified domain name (FQDN) of an Active Directory domain.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example: <code>mymanagedADtest.mymanagedAD.mydomain</code>
  ///
  /// Parameter [domainIAMRoleName] :
  /// The name of the IAM role to use when making API calls to the Directory
  /// Service.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [domainOu] :
  /// The Active Directory organizational unit for your DB instance to join.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the distinguished name format.
  /// </li>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example:
  /// <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code>
  ///
  /// Parameter [enableCustomerOwnedIp] :
  /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS
  /// on Outposts DB instance.
  ///
  /// A <i>CoIP</i> provides local or external connectivity to resources in your
  /// Outpost subnets through your on-premises network. For some use cases, a
  /// CoIP can provide lower latency for connections to the DB instance from
  /// outside of its virtual private cloud (VPC) on your local network.
  ///
  /// For more information about RDS on Outposts, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
  /// with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// For more information about CoIPs, see <a
  /// href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned
  /// IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// This setting doesn't apply to Amazon Aurora. Mapping Amazon Web Services
  /// IAM accounts to database accounts is managed by the DB cluster.
  ///
  /// For more information about IAM database authentication, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [enablePerformanceInsights] :
  /// Specifies whether to enable Performance Insights for the DB instance.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using
  /// Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [engine] :
  /// The target Oracle DB engine when you convert a non-CDB to a CDB. This
  /// intermediate step is necessary to upgrade an Oracle Database 19c non-CDB
  /// to an Oracle Database 21c CDB.
  ///
  /// Note the following requirements:
  ///
  /// <ul>
  /// <li>
  /// Make sure that you specify <code>oracle-ee-cdb</code> or
  /// <code>oracle-se2-cdb</code>.
  /// </li>
  /// <li>
  /// Make sure that your DB engine runs Oracle Database 19c with an April 2021
  /// or later RU.
  /// </li>
  /// </ul>
  /// Note the following limitations:
  ///
  /// <ul>
  /// <li>
  /// You can't convert a CDB to a non-CDB.
  /// </li>
  /// <li>
  /// You can't convert a replica database.
  /// </li>
  /// <li>
  /// You can't convert a non-CDB to a CDB and upgrade the engine version in the
  /// same command.
  /// </li>
  /// <li>
  /// You can't convert the existing custom parameter or option group when it
  /// has options or parameters that are permanent or persistent. In this
  /// situation, the DB instance reverts to the default option and parameter
  /// group. To avoid reverting to the default, specify a new parameter group
  /// with <code>--db-parameter-group-name</code> and a new option group with
  /// <code>--option-group-name</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [engineVersion] :
  /// The version number of the database engine to upgrade to. Changing this
  /// parameter results in an outage and the change is applied during the next
  /// maintenance window unless the <code>ApplyImmediately</code> parameter is
  /// enabled for this request.
  ///
  /// For major version upgrades, if a nondefault DB parameter group is
  /// currently in use, a new DB parameter group in the DB parameter group
  /// family for the new engine version must be specified. The new DB parameter
  /// group can be the default for that DB parameter group family.
  ///
  /// If you specify only a major version, Amazon RDS updates the DB instance to
  /// the default minor version if the current minor version is lower. For
  /// information about valid engine versions, see
  /// <code>CreateDBInstance</code>, or call
  /// <code>DescribeDBEngineVersions</code>.
  ///
  /// If the instance that you're modifying is acting as a read replica, the
  /// engine version that you specify must be the same or higher than the
  /// version that the source DB instance or cluster is running.
  ///
  /// In RDS Custom for Oracle, this parameter is supported for read replicas
  /// only if they are in the <code>PATCH_DB_FAILURE</code> lifecycle.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If you are upgrading the engine version and modifying the DB instance
  /// class at the same time, the currently running engine version must be
  /// supported on the specified DB instance class. Otherwise, the operation
  /// returns an error. In this case, first run the operation to upgrade the
  /// engine version, and then run it again to modify the DB instance class.
  /// </li>
  /// </ul>
  ///
  /// Parameter [iops] :
  /// The new Provisioned IOPS (I/O operations per second) value for the RDS
  /// instance.
  ///
  /// Changing this setting doesn't result in an outage and the change is
  /// applied during the next maintenance window unless the
  /// <code>ApplyImmediately</code> parameter is enabled for this request. If
  /// you are migrating from Provisioned IOPS to standard storage, set this
  /// value to 0. The DB instance will require a reboot for the change in
  /// storage type to take effect.
  ///
  /// If you choose to migrate your DB instance from using standard storage to
  /// using Provisioned IOPS, or from using Provisioned IOPS to using standard
  /// storage, the process can take time. The duration of the migration depends
  /// on several factors such as database load, storage size, storage type
  /// (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and
  /// the number of prior scale storage operations. Typical migration times are
  /// under 24 hours, but the process can take up to several days in some cases.
  /// During the migration, the DB instance is available for use, but might
  /// experience performance degradation. While the migration takes place,
  /// nightly backups for the instance are suspended. No other Amazon RDS
  /// operations can take place for the instance, including modifying the
  /// instance, rebooting the instance, deleting the instance, creating a read
  /// replica for the instance, and creating a DB snapshot of the instance.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// For RDS for MariaDB, RDS for MySQL, RDS for Oracle, and RDS for PostgreSQL
  /// - The value supplied must be at least 10% greater than the current value.
  /// Values that are not at least 10% greater than the existing value are
  /// rounded up so that they are 10% greater than the current value.
  /// </li>
  /// <li>
  /// When you increase the Provisioned IOPS, you must also specify the
  /// <code>AllocatedStorage</code> parameter. You can use the current value for
  /// <code>AllocatedStorage</code>.
  /// </li>
  /// </ul>
  /// Default: Uses existing setting
  ///
  /// Parameter [licenseModel] :
  /// The license model for the DB instance.
  ///
  /// This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// RDS for Db2 - <code>bring-your-own-license</code>
  /// </li>
  /// <li>
  /// RDS for MariaDB - <code>general-public-license</code>
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - <code>license-included</code>
  /// </li>
  /// <li>
  /// RDS for MySQL - <code>general-public-license</code>
  /// </li>
  /// <li>
  /// RDS for Oracle - <code>bring-your-own-license | license-included</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - <code>postgresql-license</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [manageMasterUserPassword] :
  /// Specifies whether to manage the master user password with Amazon Web
  /// Services Secrets Manager.
  ///
  /// If the DB instance doesn't manage the master user password with Amazon Web
  /// Services Secrets Manager, you can turn on this management. In this case,
  /// you can't specify <code>MasterUserPassword</code>.
  ///
  /// If the DB instance already manages the master user password with Amazon
  /// Web Services Secrets Manager, and you specify that the master user
  /// password is not managed with Amazon Web Services Secrets Manager, then you
  /// must specify <code>MasterUserPassword</code>. In this case, Amazon RDS
  /// deletes the secret and uses the new password for the master user specified
  /// by <code>MasterUserPassword</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't manage the master user password with Amazon Web Services Secrets
  /// Manager if <code>MasterUserPassword</code> is specified.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserPassword] :
  /// The new password for the master user.
  ///
  /// Changing this parameter doesn't result in an outage and the change is
  /// asynchronously applied as soon as possible. Between the time of the
  /// request and the completion of the request, the
  /// <code>MasterUserPassword</code> element exists in the
  /// <code>PendingModifiedValues</code> element of the operation response.
  /// <note>
  /// Amazon RDS API operations never return the password, so this operation
  /// provides a way to regain access to a primary instance user if the password
  /// is lost. This includes restoring privileges that might have been
  /// accidentally revoked.
  /// </note>
  /// This setting doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (The password for the master user is managed by the DB
  /// cluster. For more information, see <code>ModifyDBCluster</code>.)
  /// </li>
  /// <li>
  /// RDS Custom
  /// </li>
  /// </ul>
  /// Default: Uses existing setting
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified if <code>ManageMasterUserPassword</code> is turned on.
  /// </li>
  /// <li>
  /// Can include any printable ASCII character except "/", """, or "@". For RDS
  /// for Oracle, can't include the "&amp;" (ampersand) or the "'" (single
  /// quotes) character.
  /// </li>
  /// </ul>
  /// Length Constraints:
  ///
  /// <ul>
  /// <li>
  /// RDS for Db2 - Must contain from 8 to 255 characters.
  /// </li>
  /// <li>
  /// RDS for MariaDB - Must contain from 8 to 41 characters.
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - Must contain from 8 to 128 characters.
  /// </li>
  /// <li>
  /// RDS for MySQL - Must contain from 8 to 41 characters.
  /// </li>
  /// <li>
  /// RDS for Oracle - Must contain from 8 to 30 characters.
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - Must contain from 8 to 128 characters.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserSecretKmsKeyId] :
  /// The Amazon Web Services KMS key identifier to encrypt a secret that is
  /// automatically generated and managed in Amazon Web Services Secrets
  /// Manager.
  ///
  /// This setting is valid only if both of the following conditions are met:
  ///
  /// <ul>
  /// <li>
  /// The DB instance doesn't manage the master user password in Amazon Web
  /// Services Secrets Manager.
  ///
  /// If the DB instance already manages the master user password in Amazon Web
  /// Services Secrets Manager, you can't change the KMS key used to encrypt the
  /// secret.
  /// </li>
  /// <li>
  /// You are turning on <code>ManageMasterUserPassword</code> to manage the
  /// master user password in Amazon Web Services Secrets Manager.
  ///
  /// If you are turning on <code>ManageMasterUserPassword</code> and don't
  /// specify <code>MasterUserSecretKmsKeyId</code>, then the
  /// <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If
  /// the secret is in a different Amazon Web Services account, then you can't
  /// use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and
  /// you must use a customer managed KMS key.
  /// </li>
  /// </ul>
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// There is a default KMS key for your Amazon Web Services account. Your
  /// Amazon Web Services account has a different default KMS key for each
  /// Amazon Web Services Region.
  ///
  /// Parameter [maxAllocatedStorage] :
  /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically
  /// scale the storage of the DB instance.
  ///
  /// For more information about this setting, including limitations that apply
  /// to it, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
  /// Managing capacity automatically with Amazon RDS storage autoscaling</a> in
  /// the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [monitoringInterval] :
  /// The interval, in seconds, between points when Enhanced Monitoring metrics
  /// are collected for the DB instance. To disable collection of Enhanced
  /// Monitoring metrics, specify <code>0</code>.
  ///
  /// If <code>MonitoringRoleArn</code> is specified, set
  /// <code>MonitoringInterval</code> to a value other than <code>0</code>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Valid Values: <code>0 | 1 | 5 | 10 | 15 | 30 | 60</code>
  ///
  /// Default: <code>0</code>
  ///
  /// Parameter [monitoringRoleArn] :
  /// The ARN for the IAM role that permits RDS to send enhanced monitoring
  /// metrics to Amazon CloudWatch Logs. For example,
  /// <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on
  /// creating a monitoring role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
  /// create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// If <code>MonitoringInterval</code> is set to a value other than
  /// <code>0</code>, supply a <code>MonitoringRoleArn</code> value.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [multiAZ] :
  /// Specifies whether the DB instance is a Multi-AZ deployment. Changing this
  /// parameter doesn't result in an outage. The change is applied during the
  /// next maintenance window unless the <code>ApplyImmediately</code> parameter
  /// is enabled for this request.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [multiTenant] :
  /// Specifies whether the to convert your DB instance from the single-tenant
  /// conﬁguration to the multi-tenant conﬁguration. This parameter is supported
  /// only for RDS for Oracle CDB instances.
  ///
  /// During the conversion, RDS creates an initial tenant database and
  /// associates the DB name, master user name, character set, and national
  /// character set metadata with this database. The tags associated with the
  /// instance also propagate to the initial tenant database. You can add more
  /// tenant databases to your DB instance by using the
  /// <code>CreateTenantDatabase</code> operation.
  /// <important>
  /// The conversion to the multi-tenant configuration is permanent and
  /// irreversible, so you can't later convert back to the single-tenant
  /// configuration. When you specify this parameter, you must also specify
  /// <code>ApplyImmediately</code>.
  /// </important>
  ///
  /// Parameter [networkType] :
  /// The network type of the DB instance.
  ///
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB instance. A <code>DBSubnetGroup</code> can support only the
  /// IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// Valid Values: <code>IPV4 | DUAL</code>
  ///
  /// Parameter [newDBInstanceIdentifier] :
  /// The new identifier for the DB instance when renaming a DB instance. When
  /// you change the DB instance identifier, an instance reboot occurs
  /// immediately if you enable <code>ApplyImmediately</code>, or will occur
  /// during the next maintenance window if you disable
  /// <code>ApplyImmediately</code>. This value is stored as a lowercase string.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// The first character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>mydbinstance</code>
  ///
  /// Parameter [optionGroupName] :
  /// The option group to associate the DB instance with.
  ///
  /// Changing this parameter doesn't result in an outage, with one exception.
  /// If the parameter change results in an option group that enables OEM, it
  /// can cause a brief period, lasting less than a second, during which new
  /// connections are rejected but existing connections aren't interrupted.
  ///
  /// The change is applied during the next maintenance window unless the
  /// <code>ApplyImmediately</code> parameter is enabled for this request.
  ///
  /// Permanent options, such as the TDE option for Oracle Advanced Security
  /// TDE, can't be removed from an option group, and that option group can't be
  /// removed from a DB instance after it is associated with a DB instance.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [performanceInsightsKMSKeyId] :
  /// The Amazon Web Services KMS key identifier for encryption of Performance
  /// Insights data.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  ///
  /// If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>,
  /// then Amazon RDS uses your default KMS key. There is a default KMS key for
  /// your Amazon Web Services account. Your Amazon Web Services account has a
  /// different default KMS key for each Amazon Web Services Region.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [performanceInsightsRetentionPeriod] :
  /// The number of days to retain Performance Insights data.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>7</code>
  /// </li>
  /// <li>
  /// <i>month</i> * 31, where <i>month</i> is a number of months from 1-23.
  /// Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months *
  /// 31), <code>589</code> (19 months * 31)
  /// </li>
  /// <li>
  /// <code>731</code>
  /// </li>
  /// </ul>
  /// Default: <code>7</code> days
  ///
  /// If you specify a retention period that isn't valid, such as
  /// <code>94</code>, Amazon RDS returns an error.
  ///
  /// Parameter [preferredBackupWindow] :
  /// The daily time range during which automated backups are created if
  /// automated backups are enabled, as determined by the
  /// <code>BackupRetentionPeriod</code> parameter. Changing this parameter
  /// doesn't result in an outage and the change is asynchronously applied as
  /// soon as possible. The default is a 30-minute window selected at random
  /// from an 8-hour block of time for each Amazon Web Services Region. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup
  /// window</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. The daily time
  /// range for creating automated backups is managed by the DB cluster. For
  /// more information, see <code>ModifyDBCluster</code>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>hh24:mi-hh24:mi</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred maintenance window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [preferredMaintenanceWindow] :
  /// The weekly time range during which system maintenance can occur, which
  /// might result in an outage. Changing this parameter doesn't result in an
  /// outage, except in the following situation, and the change is
  /// asynchronously applied as soon as possible. If there are pending actions
  /// that cause a reboot, and the maintenance window is changed to include the
  /// current time, then changing this parameter causes a reboot of the DB
  /// instance. If you change this window to the current time, there must be at
  /// least 30 minutes between the current time and end of the window to ensure
  /// pending changes are applied.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon
  /// RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Default: Uses existing setting
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.
  /// </li>
  /// <li>
  /// The day values must be <code>mon | tue | wed | thu | fri | sat |
  /// sun</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred backup window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [processorFeatures] :
  /// The number of CPU cores and the number of threads per core for the DB
  /// instance class of the DB instance.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [promotionTier] :
  /// The order of priority in which an Aurora Replica is promoted to the
  /// primary instance after a failure of the existing primary instance. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance">
  /// Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Default: <code>1</code>
  ///
  /// Valid Values: <code>0 - 15</code>
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB instance is publicly accessible.
  ///
  /// When the DB cluster is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB cluster's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB cluster's VPC. Access to the DB cluster is ultimately
  /// controlled by the security group it uses. That public access isn't
  /// permitted if the security group assigned to the DB cluster doesn't permit
  /// it.
  ///
  /// When the DB instance isn't publicly accessible, it is an internal DB
  /// instance with a DNS name that resolves to a private IP address.
  ///
  /// <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The
  /// DB instance must be part of a public subnet and
  /// <code>PubliclyAccessible</code> must be enabled for it to be publicly
  /// accessible.
  ///
  /// Changes to the <code>PubliclyAccessible</code> parameter are applied
  /// immediately regardless of the value of the <code>ApplyImmediately</code>
  /// parameter.
  ///
  /// Parameter [replicaMode] :
  /// A value that sets the open mode of a replica database to either mounted or
  /// read-only.
  /// <note>
  /// Currently, this parameter is only supported for Oracle DB instances.
  /// </note>
  /// Mounted DB replicas are included in Oracle Enterprise Edition. The main
  /// use case for mounted replicas is cross-Region disaster recovery. The
  /// primary database doesn't use Active Data Guard to transmit information to
  /// the mounted replica. Because it doesn't accept user connections, a mounted
  /// replica can't serve a read-only workload. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working
  /// with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [resumeFullAutomationModeMinutes] :
  /// The number of minutes to pause the automation. When the time period ends,
  /// RDS Custom resumes full automation.
  ///
  /// Default: <code>60</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be at least 60.
  /// </li>
  /// <li>
  /// Must be no more than 1,440.
  /// </li>
  /// </ul>
  ///
  /// Parameter [rotateMasterUserPassword] :
  /// Specifies whether to rotate the secret managed by Amazon Web Services
  /// Secrets Manager for the master user password.
  ///
  /// This setting is valid only if the master user password is managed by RDS
  /// in Amazon Web Services Secrets Manager for the DB cluster. The secret
  /// value contains the updated password.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// You must apply the change immediately when rotating the master user
  /// password.
  /// </li>
  /// </ul>
  ///
  /// Parameter [storageThroughput] :
  /// The storage throughput value for the DB instance.
  ///
  /// This setting applies only to the <code>gp3</code> storage type.
  ///
  /// This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
  ///
  /// Parameter [storageType] :
  /// The storage type to associate with the DB instance.
  ///
  /// If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code> you
  /// must also include a value for the <code>Iops</code> parameter.
  ///
  /// If you choose to migrate your DB instance from using standard storage to
  /// using Provisioned IOPS, or from using Provisioned IOPS to using standard
  /// storage, the process can take time. The duration of the migration depends
  /// on several factors such as database load, storage size, storage type
  /// (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and
  /// the number of prior scale storage operations. Typical migration times are
  /// under 24 hours, but the process can take up to several days in some cases.
  /// During the migration, the DB instance is available for use, but might
  /// experience performance degradation. While the migration takes place,
  /// nightly backups for the instance are suspended. No other Amazon RDS
  /// operations can take place for the instance, including modifying the
  /// instance, rebooting the instance, deleting the instance, creating a read
  /// replica for the instance, and creating a DB snapshot of the instance.
  ///
  /// Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code>
  ///
  /// Default: <code>io1</code>, if the <code>Iops</code> parameter is
  /// specified. Otherwise, <code>gp2</code>.
  ///
  /// Parameter [tdeCredentialArn] :
  /// The ARN from the key store with which to associate the instance for TDE
  /// encryption.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [tdeCredentialPassword] :
  /// The password for the given ARN from the key store in order to access the
  /// device.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [useDefaultProcessorFeatures] :
  /// Specifies whether the DB instance class of the DB instance uses its
  /// default processor features.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of Amazon EC2 VPC security groups to associate with this DB
  /// instance. This change is asynchronously applied as soon as possible.
  ///
  /// This setting doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (The associated list of EC2 VPC security groups is managed
  /// by the DB cluster. For more information, see
  /// <code>ModifyDBCluster</code>.)
  /// </li>
  /// <li>
  /// RDS Custom
  /// </li>
  /// </ul>
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match existing VPC security group IDs.
  /// </li>
  /// </ul>
  Future<ModifyDBInstanceResult> modifyDBInstance({
    required String dBInstanceIdentifier,
    int? allocatedStorage,
    bool? allowMajorVersionUpgrade,
    bool? applyImmediately,
    bool? autoMinorVersionUpgrade,
    AutomationMode? automationMode,
    String? awsBackupRecoveryPointArn,
    int? backupRetentionPeriod,
    String? cACertificateIdentifier,
    bool? certificateRotationRestart,
    CloudwatchLogsExportConfiguration? cloudwatchLogsExportConfiguration,
    bool? copyTagsToSnapshot,
    String? dBInstanceClass,
    String? dBParameterGroupName,
    int? dBPortNumber,
    List<String>? dBSecurityGroups,
    String? dBSubnetGroupName,
    bool? dedicatedLogVolume,
    bool? deletionProtection,
    bool? disableDomain,
    String? domain,
    String? domainAuthSecretArn,
    List<String>? domainDnsIps,
    String? domainFqdn,
    String? domainIAMRoleName,
    String? domainOu,
    bool? enableCustomerOwnedIp,
    bool? enableIAMDatabaseAuthentication,
    bool? enablePerformanceInsights,
    String? engine,
    String? engineVersion,
    int? iops,
    String? licenseModel,
    bool? manageMasterUserPassword,
    String? masterUserPassword,
    String? masterUserSecretKmsKeyId,
    int? maxAllocatedStorage,
    int? monitoringInterval,
    String? monitoringRoleArn,
    bool? multiAZ,
    bool? multiTenant,
    String? networkType,
    String? newDBInstanceIdentifier,
    String? optionGroupName,
    String? performanceInsightsKMSKeyId,
    int? performanceInsightsRetentionPeriod,
    String? preferredBackupWindow,
    String? preferredMaintenanceWindow,
    List<ProcessorFeature>? processorFeatures,
    int? promotionTier,
    bool? publiclyAccessible,
    ReplicaMode? replicaMode,
    int? resumeFullAutomationModeMinutes,
    bool? rotateMasterUserPassword,
    int? storageThroughput,
    String? storageType,
    String? tdeCredentialArn,
    String? tdeCredentialPassword,
    bool? useDefaultProcessorFeatures,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      if (allocatedStorage != null)
        'AllocatedStorage': allocatedStorage.toString(),
      if (allowMajorVersionUpgrade != null)
        'AllowMajorVersionUpgrade': allowMajorVersionUpgrade.toString(),
      if (applyImmediately != null)
        'ApplyImmediately': applyImmediately.toString(),
      if (autoMinorVersionUpgrade != null)
        'AutoMinorVersionUpgrade': autoMinorVersionUpgrade.toString(),
      if (automationMode != null) 'AutomationMode': automationMode.value,
      if (awsBackupRecoveryPointArn != null)
        'AwsBackupRecoveryPointArn': awsBackupRecoveryPointArn,
      if (backupRetentionPeriod != null)
        'BackupRetentionPeriod': backupRetentionPeriod.toString(),
      if (cACertificateIdentifier != null)
        'CACertificateIdentifier': cACertificateIdentifier,
      if (certificateRotationRestart != null)
        'CertificateRotationRestart': certificateRotationRestart.toString(),
      if (cloudwatchLogsExportConfiguration != null)
        for (var e1 in cloudwatchLogsExportConfiguration.toQueryMap().entries)
          'CloudwatchLogsExportConfiguration.${e1.key}': e1.value,
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (dBInstanceClass != null) 'DBInstanceClass': dBInstanceClass,
      if (dBParameterGroupName != null)
        'DBParameterGroupName': dBParameterGroupName,
      if (dBPortNumber != null) 'DBPortNumber': dBPortNumber.toString(),
      if (dBSecurityGroups != null)
        if (dBSecurityGroups.isEmpty)
          'DBSecurityGroups': ''
        else
          for (var i1 = 0; i1 < dBSecurityGroups.length; i1++)
            'DBSecurityGroups.DBSecurityGroupName.${i1 + 1}':
                dBSecurityGroups[i1],
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (dedicatedLogVolume != null)
        'DedicatedLogVolume': dedicatedLogVolume.toString(),
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (disableDomain != null) 'DisableDomain': disableDomain.toString(),
      if (domain != null) 'Domain': domain,
      if (domainAuthSecretArn != null)
        'DomainAuthSecretArn': domainAuthSecretArn,
      if (domainDnsIps != null)
        if (domainDnsIps.isEmpty)
          'DomainDnsIps': ''
        else
          for (var i1 = 0; i1 < domainDnsIps.length; i1++)
            'DomainDnsIps.member.${i1 + 1}': domainDnsIps[i1],
      if (domainFqdn != null) 'DomainFqdn': domainFqdn,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (domainOu != null) 'DomainOu': domainOu,
      if (enableCustomerOwnedIp != null)
        'EnableCustomerOwnedIp': enableCustomerOwnedIp.toString(),
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (enablePerformanceInsights != null)
        'EnablePerformanceInsights': enablePerformanceInsights.toString(),
      if (engine != null) 'Engine': engine,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (iops != null) 'Iops': iops.toString(),
      if (licenseModel != null) 'LicenseModel': licenseModel,
      if (manageMasterUserPassword != null)
        'ManageMasterUserPassword': manageMasterUserPassword.toString(),
      if (masterUserPassword != null) 'MasterUserPassword': masterUserPassword,
      if (masterUserSecretKmsKeyId != null)
        'MasterUserSecretKmsKeyId': masterUserSecretKmsKeyId,
      if (maxAllocatedStorage != null)
        'MaxAllocatedStorage': maxAllocatedStorage.toString(),
      if (monitoringInterval != null)
        'MonitoringInterval': monitoringInterval.toString(),
      if (monitoringRoleArn != null) 'MonitoringRoleArn': monitoringRoleArn,
      if (multiAZ != null) 'MultiAZ': multiAZ.toString(),
      if (multiTenant != null) 'MultiTenant': multiTenant.toString(),
      if (networkType != null) 'NetworkType': networkType,
      if (newDBInstanceIdentifier != null)
        'NewDBInstanceIdentifier': newDBInstanceIdentifier,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (performanceInsightsKMSKeyId != null)
        'PerformanceInsightsKMSKeyId': performanceInsightsKMSKeyId,
      if (performanceInsightsRetentionPeriod != null)
        'PerformanceInsightsRetentionPeriod':
            performanceInsightsRetentionPeriod.toString(),
      if (preferredBackupWindow != null)
        'PreferredBackupWindow': preferredBackupWindow,
      if (preferredMaintenanceWindow != null)
        'PreferredMaintenanceWindow': preferredMaintenanceWindow,
      if (processorFeatures != null)
        if (processorFeatures.isEmpty)
          'ProcessorFeatures': ''
        else
          for (var i1 = 0; i1 < processorFeatures.length; i1++)
            for (var e3 in processorFeatures[i1].toQueryMap().entries)
              'ProcessorFeatures.ProcessorFeature.${i1 + 1}.${e3.key}':
                  e3.value,
      if (promotionTier != null) 'PromotionTier': promotionTier.toString(),
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
      if (replicaMode != null) 'ReplicaMode': replicaMode.value,
      if (resumeFullAutomationModeMinutes != null)
        'ResumeFullAutomationModeMinutes':
            resumeFullAutomationModeMinutes.toString(),
      if (rotateMasterUserPassword != null)
        'RotateMasterUserPassword': rotateMasterUserPassword.toString(),
      if (storageThroughput != null)
        'StorageThroughput': storageThroughput.toString(),
      if (storageType != null) 'StorageType': storageType,
      if (tdeCredentialArn != null) 'TdeCredentialArn': tdeCredentialArn,
      if (tdeCredentialPassword != null)
        'TdeCredentialPassword': tdeCredentialPassword,
      if (useDefaultProcessorFeatures != null)
        'UseDefaultProcessorFeatures': useDefaultProcessorFeatures.toString(),
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBInstance',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBInstanceResult',
    );
    return ModifyDBInstanceResult.fromXml($result);
  }

  /// Modifies the parameters of a DB parameter group. To modify more than one
  /// parameter, submit a list of the following: <code>ParameterName</code>,
  /// <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20
  /// parameters can be modified in a single request.
  /// <important>
  /// After you modify a DB parameter group, you should wait at least 5 minutes
  /// before creating your first DB instance that uses that DB parameter group
  /// as the default parameter group. This allows Amazon RDS to fully complete
  /// the modify operation before the parameter group is used as the default for
  /// a new DB instance. This is especially important for parameters that are
  /// critical when creating the default database for a DB instance, such as the
  /// character set for the default database defined by the
  /// <code>character_set_database</code> parameter. You can use the
  /// <i>Parameter Groups</i> option of the <a
  /// href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
  /// <i>DescribeDBParameters</i> command to verify that your DB parameter group
  /// has been created or modified.
  /// </important>
  ///
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [InvalidDBParameterGroupStateFault].
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing
  /// <code>DBParameterGroup</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [parameters] :
  /// An array of parameter names, values, and the application methods for the
  /// parameter update. At least one parameter name, value, and application
  /// method must be supplied; later arguments are optional. A maximum of 20
  /// parameters can be modified in a single request.
  ///
  /// Valid Values (for the application method): <code>immediate |
  /// pending-reboot</code>
  ///
  /// You can use the <code>immediate</code> value with dynamic parameters only.
  /// You can use the <code>pending-reboot</code> value for both dynamic and
  /// static parameters.
  ///
  /// When the application method is <code>immediate</code>, changes to dynamic
  /// parameters are applied immediately to the DB instances associated with the
  /// parameter group.
  ///
  /// When the application method is <code>pending-reboot</code>, changes to
  /// dynamic and static parameters are applied after a reboot without failover
  /// to the DB instances associated with the parameter group.
  /// <note>
  /// You can't use <code>pending-reboot</code> with dynamic parameters on RDS
  /// for SQL Server DB instances. Use <code>immediate</code>.
  /// </note>
  /// For more information on modifying DB parameters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html">Working
  /// with DB parameter groups</a> in the <i>Amazon RDS User Guide</i>.
  Future<DBParameterGroupNameMessage> modifyDBParameterGroup({
    required String dBParameterGroupName,
    required List<Parameter> parameters,
  }) async {
    final $request = <String, String>{
      'DBParameterGroupName': dBParameterGroupName,
      if (parameters.isEmpty)
        'Parameters': ''
      else
        for (var i1 = 0; i1 < parameters.length; i1++)
          for (var e3 in parameters[i1].toQueryMap().entries)
            'Parameters.Parameter.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBParameterGroupResult',
    );
    return DBParameterGroupNameMessage.fromXml($result);
  }

  /// Changes the settings for an existing DB proxy.
  ///
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyAlreadyExistsFault].
  /// May throw [InvalidDBProxyStateFault].
  ///
  /// Parameter [dBProxyName] :
  /// The identifier for the <code>DBProxy</code> to modify.
  ///
  /// Parameter [auth] :
  /// The new authentication settings for the <code>DBProxy</code>.
  ///
  /// Parameter [debugLogging] :
  /// Whether the proxy includes detailed information about SQL statements in
  /// its logs. This information helps you to debug issues involving SQL
  /// behavior or the performance and scalability of the proxy connections. The
  /// debug information includes the text of SQL statements that you submit
  /// through the proxy. Thus, only enable this setting when needed for
  /// debugging, and only when you have security measures in place to safeguard
  /// any sensitive information that appears in the logs.
  ///
  /// Parameter [idleClientTimeout] :
  /// The number of seconds that a connection to the proxy can be inactive
  /// before the proxy disconnects it. You can set this value higher or lower
  /// than the connection timeout limit for the associated database.
  ///
  /// Parameter [newDBProxyName] :
  /// The new identifier for the <code>DBProxy</code>. An identifier must begin
  /// with a letter and must contain only ASCII letters, digits, and hyphens; it
  /// can't end with a hyphen or contain two consecutive hyphens.
  ///
  /// Parameter [requireTLS] :
  /// Whether Transport Layer Security (TLS) encryption is required for
  /// connections to the proxy. By enabling this setting, you can enforce
  /// encrypted TLS connections to the proxy, even if the associated database
  /// doesn't use TLS.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to
  /// access secrets in Amazon Web Services Secrets Manager.
  ///
  /// Parameter [securityGroups] :
  /// The new list of security groups for the <code>DBProxy</code>.
  Future<ModifyDBProxyResponse> modifyDBProxy({
    required String dBProxyName,
    List<UserAuthConfig>? auth,
    bool? debugLogging,
    int? idleClientTimeout,
    String? newDBProxyName,
    bool? requireTLS,
    String? roleArn,
    List<String>? securityGroups,
  }) async {
    final $request = <String, String>{
      'DBProxyName': dBProxyName,
      if (auth != null)
        if (auth.isEmpty)
          'Auth': ''
        else
          for (var i1 = 0; i1 < auth.length; i1++)
            for (var e3 in auth[i1].toQueryMap().entries)
              'Auth.member.${i1 + 1}.${e3.key}': e3.value,
      if (debugLogging != null) 'DebugLogging': debugLogging.toString(),
      if (idleClientTimeout != null)
        'IdleClientTimeout': idleClientTimeout.toString(),
      if (newDBProxyName != null) 'NewDBProxyName': newDBProxyName,
      if (requireTLS != null) 'RequireTLS': requireTLS.toString(),
      if (roleArn != null) 'RoleArn': roleArn,
      if (securityGroups != null)
        if (securityGroups.isEmpty)
          'SecurityGroups': ''
        else
          for (var i1 = 0; i1 < securityGroups.length; i1++)
            'SecurityGroups.member.${i1 + 1}': securityGroups[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBProxy',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBProxyResult',
    );
    return ModifyDBProxyResponse.fromXml($result);
  }

  /// Changes the settings for an existing DB proxy endpoint.
  ///
  /// May throw [DBProxyEndpointNotFoundFault].
  /// May throw [DBProxyEndpointAlreadyExistsFault].
  /// May throw [InvalidDBProxyEndpointStateFault].
  /// May throw [InvalidDBProxyStateFault].
  ///
  /// Parameter [dBProxyEndpointName] :
  /// The name of the DB proxy sociated with the DB proxy endpoint that you want
  /// to modify.
  ///
  /// Parameter [newDBProxyEndpointName] :
  /// The new identifier for the <code>DBProxyEndpoint</code>. An identifier
  /// must begin with a letter and must contain only ASCII letters, digits, and
  /// hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// The VPC security group IDs for the DB proxy endpoint. When the DB proxy
  /// endpoint uses a different VPC than the original proxy, you also specify a
  /// different set of security group IDs than for the original proxy.
  Future<ModifyDBProxyEndpointResponse> modifyDBProxyEndpoint({
    required String dBProxyEndpointName,
    String? newDBProxyEndpointName,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBProxyEndpointName': dBProxyEndpointName,
      if (newDBProxyEndpointName != null)
        'NewDBProxyEndpointName': newDBProxyEndpointName,
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.member.${i1 + 1}': vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBProxyEndpoint',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBProxyEndpointResult',
    );
    return ModifyDBProxyEndpointResponse.fromXml($result);
  }

  /// Modifies the properties of a <code>DBProxyTargetGroup</code>.
  ///
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyTargetGroupNotFoundFault].
  /// May throw [InvalidDBProxyStateFault].
  ///
  /// Parameter [dBProxyName] :
  /// The name of the proxy.
  ///
  /// Parameter [targetGroupName] :
  /// The name of the target group to modify.
  ///
  /// Parameter [connectionPoolConfig] :
  /// The settings that determine the size and behavior of the connection pool
  /// for the target group.
  ///
  /// Parameter [newName] :
  /// The new name for the modified <code>DBProxyTarget</code>. An identifier
  /// must begin with a letter and must contain only ASCII letters, digits, and
  /// hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  Future<ModifyDBProxyTargetGroupResponse> modifyDBProxyTargetGroup({
    required String dBProxyName,
    required String targetGroupName,
    ConnectionPoolConfiguration? connectionPoolConfig,
    String? newName,
  }) async {
    final $request = <String, String>{
      'DBProxyName': dBProxyName,
      'TargetGroupName': targetGroupName,
      if (connectionPoolConfig != null)
        for (var e1 in connectionPoolConfig.toQueryMap().entries)
          'ConnectionPoolConfig.${e1.key}': e1.value,
      if (newName != null) 'NewName': newName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBProxyTargetGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBProxyTargetGroupResult',
    );
    return ModifyDBProxyTargetGroupResponse.fromXml($result);
  }

  /// Updates the recommendation status and recommended action status for the
  /// specified recommendation.
  ///
  /// Parameter [recommendationId] :
  /// The identifier of the recommendation to update.
  ///
  /// Parameter [locale] :
  /// The language of the modified recommendation.
  ///
  /// Parameter [recommendedActionUpdates] :
  /// The list of recommended action status to update. You can update multiple
  /// recommended actions at one time.
  ///
  /// Parameter [status] :
  /// The recommendation status to update.
  ///
  /// Valid values:
  ///
  /// <ul>
  /// <li>
  /// active
  /// </li>
  /// <li>
  /// dismissed
  /// </li>
  /// </ul>
  Future<DBRecommendationMessage> modifyDBRecommendation({
    required String recommendationId,
    String? locale,
    List<RecommendedActionUpdate>? recommendedActionUpdates,
    String? status,
  }) async {
    final $request = <String, String>{
      'RecommendationId': recommendationId,
      if (locale != null) 'Locale': locale,
      if (recommendedActionUpdates != null)
        if (recommendedActionUpdates.isEmpty)
          'RecommendedActionUpdates': ''
        else
          for (var i1 = 0; i1 < recommendedActionUpdates.length; i1++)
            for (var e3 in recommendedActionUpdates[i1].toQueryMap().entries)
              'RecommendedActionUpdates.member.${i1 + 1}.${e3.key}': e3.value,
      if (status != null) 'Status': status,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBRecommendation',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBRecommendationResult',
    );
    return DBRecommendationMessage.fromXml($result);
  }

  /// Modifies the settings of an Aurora Limitless Database DB shard group. You
  /// can change one or more settings by specifying these parameters and the new
  /// values in the request.
  ///
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBShardGroupAlreadyExistsFault].
  /// May throw [DBShardGroupNotFoundFault].
  /// May throw [InvalidMaxAcuFault].
  ///
  /// Parameter [dBShardGroupIdentifier] :
  /// The name of the DB shard group to modify.
  ///
  /// Parameter [maxACU] :
  /// The maximum capacity of the DB shard group in Aurora capacity units
  /// (ACUs).
  Future<DBShardGroup> modifyDBShardGroup({
    required String dBShardGroupIdentifier,
    double? maxACU,
  }) async {
    final $request = <String, String>{
      'DBShardGroupIdentifier': dBShardGroupIdentifier,
      if (maxACU != null) 'MaxACU': maxACU.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBShardGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBShardGroupResult',
    );
    return DBShardGroup.fromXml($result);
  }

  /// Updates a manual DB snapshot with a new engine version. The snapshot can
  /// be encrypted or unencrypted, but not shared or public.
  ///
  /// Amazon RDS supports upgrading DB snapshots for MySQL, PostgreSQL, and
  /// Oracle. This operation doesn't apply to RDS Custom or RDS for Db2.
  ///
  /// May throw [DBSnapshotNotFoundFault].
  ///
  /// Parameter [dBSnapshotIdentifier] :
  /// The identifier of the DB snapshot to modify.
  ///
  /// Parameter [engineVersion] :
  /// The engine version to upgrade the DB snapshot to.
  ///
  /// The following are the database engines and engine versions that are
  /// available when you upgrade a DB snapshot.
  ///
  /// <b>MySQL</b>
  ///
  /// For the list of engine versions that are available for upgrading a DB
  /// snapshot, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/mysql-upgrade-snapshot.html">
  /// Upgrading a MySQL DB snapshot engine version</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// <b>Oracle</b>
  ///
  /// <ul>
  /// <li>
  /// <code>19.0.0.0.ru-2022-01.rur-2022-01.r1</code> (supported for 12.2.0.1 DB
  /// snapshots)
  /// </li>
  /// <li>
  /// <code>19.0.0.0.ru-2022-07.rur-2022-07.r1</code> (supported for 12.1.0.2 DB
  /// snapshots)
  /// </li>
  /// <li>
  /// <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)
  /// </li>
  /// <li>
  /// <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)
  /// </li>
  /// <li>
  /// <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)
  /// </li>
  /// </ul>
  /// <b>PostgreSQL</b>
  ///
  /// For the list of engine versions that are available for upgrading a DB
  /// snapshot, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBSnapshot.PostgreSQL.html">
  /// Upgrading a PostgreSQL DB snapshot engine version</a> in the <i>Amazon RDS
  /// User Guide.</i>
  ///
  /// Parameter [optionGroupName] :
  /// The option group to identify with the upgraded DB snapshot.
  ///
  /// You can specify this parameter when you upgrade an Oracle DB snapshot. The
  /// same option group considerations apply when upgrading a DB snapshot as
  /// when upgrading a DB instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option
  /// group considerations</a> in the <i>Amazon RDS User Guide.</i>
  Future<ModifyDBSnapshotResult> modifyDBSnapshot({
    required String dBSnapshotIdentifier,
    String? engineVersion,
    String? optionGroupName,
  }) async {
    final $request = <String, String>{
      'DBSnapshotIdentifier': dBSnapshotIdentifier,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBSnapshot',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBSnapshotResult',
    );
    return ModifyDBSnapshotResult.fromXml($result);
  }

  /// Adds an attribute and values to, or removes an attribute and values from,
  /// a manual DB snapshot.
  ///
  /// To share a manual DB snapshot with other Amazon Web Services accounts,
  /// specify <code>restore</code> as the <code>AttributeName</code> and use the
  /// <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web
  /// Services accounts that are authorized to restore the manual DB snapshot.
  /// Uses the value <code>all</code> to make the manual DB snapshot public,
  /// which means it can be copied or restored by all Amazon Web Services
  /// accounts.
  /// <note>
  /// Don't add the <code>all</code> value for any manual DB snapshots that
  /// contain private information that you don't want available to all Amazon
  /// Web Services accounts.
  /// </note>
  /// If the manual DB snapshot is encrypted, it can be shared, but only by
  /// specifying a list of authorized Amazon Web Services account IDs for the
  /// <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a
  /// value for that parameter in this case.
  ///
  /// To view which Amazon Web Services accounts have access to copy or restore
  /// a manual DB snapshot, or whether a manual DB snapshot public or private,
  /// use the <a>DescribeDBSnapshotAttributes</a> API operation. The accounts
  /// are returned as values for the <code>restore</code> attribute.
  ///
  /// May throw [DBSnapshotNotFoundFault].
  /// May throw [InvalidDBSnapshotStateFault].
  /// May throw [SharedSnapshotQuotaExceededFault].
  ///
  /// Parameter [attributeName] :
  /// The name of the DB snapshot attribute to modify.
  ///
  /// To manage authorization for other Amazon Web Services accounts to copy or
  /// restore a manual DB snapshot, set this value to <code>restore</code>.
  /// <note>
  /// To view the list of attributes available to modify, use the
  /// <a>DescribeDBSnapshotAttributes</a> API operation.
  /// </note>
  ///
  /// Parameter [dBSnapshotIdentifier] :
  /// The identifier for the DB snapshot to modify the attributes for.
  ///
  /// Parameter [valuesToAdd] :
  /// A list of DB snapshot attributes to add to the attribute specified by
  /// <code>AttributeName</code>.
  ///
  /// To authorize other Amazon Web Services accounts to copy or restore a
  /// manual snapshot, set this list to include one or more Amazon Web Services
  /// account IDs, or <code>all</code> to make the manual DB snapshot restorable
  /// by any Amazon Web Services account. Do not add the <code>all</code> value
  /// for any manual DB snapshots that contain private information that you
  /// don't want available to all Amazon Web Services accounts.
  ///
  /// Parameter [valuesToRemove] :
  /// A list of DB snapshot attributes to remove from the attribute specified by
  /// <code>AttributeName</code>.
  ///
  /// To remove authorization for other Amazon Web Services accounts to copy or
  /// restore a manual snapshot, set this list to include one or more Amazon Web
  /// Services account identifiers, or <code>all</code> to remove authorization
  /// for any Amazon Web Services account to copy or restore the DB snapshot. If
  /// you specify <code>all</code>, an Amazon Web Services account whose account
  /// ID is explicitly added to the <code>restore</code> attribute can still
  /// copy or restore the manual DB snapshot.
  Future<ModifyDBSnapshotAttributeResult> modifyDBSnapshotAttribute({
    required String attributeName,
    required String dBSnapshotIdentifier,
    List<String>? valuesToAdd,
    List<String>? valuesToRemove,
  }) async {
    final $request = <String, String>{
      'AttributeName': attributeName,
      'DBSnapshotIdentifier': dBSnapshotIdentifier,
      if (valuesToAdd != null)
        if (valuesToAdd.isEmpty)
          'ValuesToAdd': ''
        else
          for (var i1 = 0; i1 < valuesToAdd.length; i1++)
            'ValuesToAdd.AttributeValue.${i1 + 1}': valuesToAdd[i1],
      if (valuesToRemove != null)
        if (valuesToRemove.isEmpty)
          'ValuesToRemove': ''
        else
          for (var i1 = 0; i1 < valuesToRemove.length; i1++)
            'ValuesToRemove.AttributeValue.${i1 + 1}': valuesToRemove[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBSnapshotAttribute',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBSnapshotAttributeResult',
    );
    return ModifyDBSnapshotAttributeResult.fromXml($result);
  }

  /// Modifies an existing DB subnet group. DB subnet groups must contain at
  /// least one subnet in at least two AZs in the Amazon Web Services Region.
  ///
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [DBSubnetQuotaExceededFault].
  /// May throw [SubnetAlreadyInUse].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [InvalidSubnet].
  ///
  /// Parameter [dBSubnetGroupName] :
  /// The name for the DB subnet group. This value is stored as a lowercase
  /// string. You can't modify the default subnet group.
  ///
  /// Constraints: Must match the name of an existing DBSubnetGroup. Must not be
  /// default.
  ///
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [subnetIds] :
  /// The EC2 subnet IDs for the DB subnet group.
  ///
  /// Parameter [dBSubnetGroupDescription] :
  /// The description for the DB subnet group.
  Future<ModifyDBSubnetGroupResult> modifyDBSubnetGroup({
    required String dBSubnetGroupName,
    required List<String> subnetIds,
    String? dBSubnetGroupDescription,
  }) async {
    final $request = <String, String>{
      'DBSubnetGroupName': dBSubnetGroupName,
      if (subnetIds.isEmpty)
        'SubnetIds': ''
      else
        for (var i1 = 0; i1 < subnetIds.length; i1++)
          'SubnetIds.SubnetIdentifier.${i1 + 1}': subnetIds[i1],
      if (dBSubnetGroupDescription != null)
        'DBSubnetGroupDescription': dBSubnetGroupDescription,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyDBSubnetGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyDBSubnetGroupResult',
    );
    return ModifyDBSubnetGroupResult.fromXml($result);
  }

  /// Modifies an existing RDS event notification subscription. You can't modify
  /// the source identifiers using this call. To change source identifiers for a
  /// subscription, use the <code>AddSourceIdentifierToSubscription</code> and
  /// <code>RemoveSourceIdentifierFromSubscription</code> calls.
  ///
  /// You can see a list of the event categories for a given source type
  /// (<code>SourceType</code>) in <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a>
  /// in the <i>Amazon RDS User Guide</i> or by using the
  /// <code>DescribeEventCategories</code> operation.
  ///
  /// May throw [EventSubscriptionQuotaExceededFault].
  /// May throw [SubscriptionNotFoundFault].
  /// May throw [SNSInvalidTopicFault].
  /// May throw [SNSNoAuthorizationFault].
  /// May throw [SNSTopicArnNotFoundFault].
  /// May throw [SubscriptionCategoryNotFoundFault].
  ///
  /// Parameter [subscriptionName] :
  /// The name of the RDS event notification subscription.
  ///
  /// Parameter [enabled] :
  /// Specifies whether to activate the subscription.
  ///
  /// Parameter [eventCategories] :
  /// A list of event categories for a source type (<code>SourceType</code>)
  /// that you want to subscribe to. You can see a list of the categories for a
  /// given source type in <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a>
  /// in the <i>Amazon RDS User Guide</i> or by using the
  /// <code>DescribeEventCategories</code> operation.
  ///
  /// Parameter [snsTopicArn] :
  /// The Amazon Resource Name (ARN) of the SNS topic created for event
  /// notification. The ARN is created by Amazon SNS when you create a topic and
  /// subscribe to it.
  ///
  /// Parameter [sourceType] :
  /// The type of source that is generating the events. For example, if you want
  /// to be notified of events generated by a DB instance, you would set this
  /// parameter to db-instance. For RDS Proxy events, specify
  /// <code>db-proxy</code>. If this value isn't specified, all events are
  /// returned.
  ///
  /// Valid Values:<code> db-instance | db-cluster | db-parameter-group |
  /// db-security-group | db-snapshot | db-cluster-snapshot | db-proxy |
  /// zero-etl | custom-engine-version | blue-green-deployment </code>
  Future<ModifyEventSubscriptionResult> modifyEventSubscription({
    required String subscriptionName,
    bool? enabled,
    List<String>? eventCategories,
    String? snsTopicArn,
    String? sourceType,
  }) async {
    final $request = <String, String>{
      'SubscriptionName': subscriptionName,
      if (enabled != null) 'Enabled': enabled.toString(),
      if (eventCategories != null)
        if (eventCategories.isEmpty)
          'EventCategories': ''
        else
          for (var i1 = 0; i1 < eventCategories.length; i1++)
            'EventCategories.EventCategory.${i1 + 1}': eventCategories[i1],
      if (snsTopicArn != null) 'SnsTopicArn': snsTopicArn,
      if (sourceType != null) 'SourceType': sourceType,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyEventSubscription',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyEventSubscriptionResult',
    );
    return ModifyEventSubscriptionResult.fromXml($result);
  }

  /// Modifies a setting for an Amazon Aurora global database cluster. You can
  /// change one or more database configuration parameters by specifying these
  /// parameters and the new values in the request. For more information on
  /// Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  /// <note>
  /// This operation only applies to Aurora global database clusters.
  /// </note>
  ///
  /// May throw [GlobalClusterNotFoundFault].
  /// May throw [InvalidGlobalClusterStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [allowMajorVersionUpgrade] :
  /// Specifies whether to allow major version upgrades.
  ///
  /// Constraints: Must be enabled if you specify a value for the
  /// <code>EngineVersion</code> parameter that's a different major version than
  /// the global cluster's current version.
  ///
  /// If you upgrade the major version of a global database, the cluster and DB
  /// instance parameter groups are set to the default parameter groups for the
  /// new version. Apply any custom parameter groups after completing the
  /// upgrade.
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether to enable deletion protection for the global database
  /// cluster. The global database cluster can't be deleted when deletion
  /// protection is enabled.
  ///
  /// Parameter [engineVersion] :
  /// The version number of the database engine to which you want to upgrade.
  ///
  /// To list all of the available engine versions for <code>aurora-mysql</code>
  /// (for MySQL-based Aurora global databases), use the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query
  /// '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
  ///
  /// To list all of the available engine versions for
  /// <code>aurora-postgresql</code> (for PostgreSQL-based Aurora global
  /// databases), use the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql
  /// --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
  ///
  /// Parameter [globalClusterIdentifier] :
  /// The cluster identifier for the global cluster to modify. This parameter
  /// isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing global database cluster.
  /// </li>
  /// </ul>
  ///
  /// Parameter [newGlobalClusterIdentifier] :
  /// The new cluster identifier for the global database cluster. This value is
  /// stored as a lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// The first character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster2</code>
  Future<ModifyGlobalClusterResult> modifyGlobalCluster({
    bool? allowMajorVersionUpgrade,
    bool? deletionProtection,
    String? engineVersion,
    String? globalClusterIdentifier,
    String? newGlobalClusterIdentifier,
  }) async {
    final $request = <String, String>{
      if (allowMajorVersionUpgrade != null)
        'AllowMajorVersionUpgrade': allowMajorVersionUpgrade.toString(),
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (globalClusterIdentifier != null)
        'GlobalClusterIdentifier': globalClusterIdentifier,
      if (newGlobalClusterIdentifier != null)
        'NewGlobalClusterIdentifier': newGlobalClusterIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyGlobalCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyGlobalClusterResult',
    );
    return ModifyGlobalClusterResult.fromXml($result);
  }

  /// Modifies a zero-ETL integration with Amazon Redshift.
  /// <note>
  /// Currently, you can only modify integrations that have Aurora MySQL source
  /// DB clusters. Integrations with Aurora PostgreSQL and RDS sources currently
  /// don't support modifying the integration.
  /// </note>
  ///
  /// May throw [IntegrationNotFoundFault].
  /// May throw [InvalidIntegrationStateFault].
  /// May throw [IntegrationConflictOperationFault].
  ///
  /// Parameter [integrationIdentifier] :
  /// The unique identifier of the integration to modify.
  ///
  /// Parameter [dataFilter] :
  /// A new data filter for the integration. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Zero_ETL_Filtering.html">Data
  /// filtering for Aurora zero-ETL integrations with Amazon Redshift</a>.
  ///
  /// Parameter [description] :
  /// A new description for the integration.
  ///
  /// Parameter [integrationName] :
  /// A new name for the integration.
  Future<Integration> modifyIntegration({
    required String integrationIdentifier,
    String? dataFilter,
    String? description,
    String? integrationName,
  }) async {
    final $request = <String, String>{
      'IntegrationIdentifier': integrationIdentifier,
      if (dataFilter != null) 'DataFilter': dataFilter,
      if (description != null) 'Description': description,
      if (integrationName != null) 'IntegrationName': integrationName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyIntegration',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyIntegrationResult',
    );
    return Integration.fromXml($result);
  }

  /// Modifies an existing option group.
  ///
  /// May throw [InvalidOptionGroupStateFault].
  /// May throw [OptionGroupNotFoundFault].
  ///
  /// Parameter [optionGroupName] :
  /// The name of the option group to be modified.
  ///
  /// Permanent options, such as the TDE option for Oracle Advanced Security
  /// TDE, can't be removed from an option group, and that option group can't be
  /// removed from a DB instance once it is associated with a DB instance
  ///
  /// Parameter [applyImmediately] :
  /// Specifies whether to apply the change immediately or during the next
  /// maintenance window for each instance associated with the option group.
  ///
  /// Parameter [optionsToInclude] :
  /// Options in this list are added to the option group or, if already present,
  /// the specified configuration is used to update the existing configuration.
  ///
  /// Parameter [optionsToRemove] :
  /// Options in this list are removed from the option group.
  Future<ModifyOptionGroupResult> modifyOptionGroup({
    required String optionGroupName,
    bool? applyImmediately,
    List<OptionConfiguration>? optionsToInclude,
    List<String>? optionsToRemove,
  }) async {
    final $request = <String, String>{
      'OptionGroupName': optionGroupName,
      if (applyImmediately != null)
        'ApplyImmediately': applyImmediately.toString(),
      if (optionsToInclude != null)
        if (optionsToInclude.isEmpty)
          'OptionsToInclude': ''
        else
          for (var i1 = 0; i1 < optionsToInclude.length; i1++)
            for (var e3 in optionsToInclude[i1].toQueryMap().entries)
              'OptionsToInclude.OptionConfiguration.${i1 + 1}.${e3.key}':
                  e3.value,
      if (optionsToRemove != null)
        if (optionsToRemove.isEmpty)
          'OptionsToRemove': ''
        else
          for (var i1 = 0; i1 < optionsToRemove.length; i1++)
            'OptionsToRemove.member.${i1 + 1}': optionsToRemove[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyOptionGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyOptionGroupResult',
    );
    return ModifyOptionGroupResult.fromXml($result);
  }

  /// Modifies an existing tenant database in a DB instance. You can change the
  /// tenant database name or the master user password. This operation is
  /// supported only for RDS for Oracle CDB instances using the multi-tenant
  /// configuration.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [TenantDatabaseNotFoundFault].
  /// May throw [TenantDatabaseAlreadyExistsFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The identifier of the DB instance that contains the tenant database that
  /// you are modifying. This parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DB instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [tenantDBName] :
  /// The user-supplied name of the tenant database that you want to modify.
  /// This parameter isn’t case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing tenant database.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserPassword] :
  /// The new password for the master user of the specified tenant database in
  /// your DB instance.
  /// <note>
  /// Amazon RDS operations never return the password, so this action provides a
  /// way to regain access to a tenant database user if the password is lost.
  /// This includes restoring privileges that might have been accidentally
  /// revoked.
  /// </note>
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can include any printable ASCII character except <code>/</code>,
  /// <code>"</code> (double quote), <code>@</code>, <code>&amp;</code>
  /// (ampersand), and <code>'</code> (single quote).
  /// </li>
  /// </ul>
  /// Length constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain between 8 and 30 characters.
  /// </li>
  /// </ul>
  ///
  /// Parameter [newTenantDBName] :
  /// The new name of the tenant database when renaming a tenant database. This
  /// parameter isn’t case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be the string null or any other reserved word.
  /// </li>
  /// <li>
  /// Can't be longer than 8 characters.
  /// </li>
  /// </ul>
  Future<ModifyTenantDatabaseResult> modifyTenantDatabase({
    required String dBInstanceIdentifier,
    required String tenantDBName,
    String? masterUserPassword,
    String? newTenantDBName,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      'TenantDBName': tenantDBName,
      if (masterUserPassword != null) 'MasterUserPassword': masterUserPassword,
      if (newTenantDBName != null) 'NewTenantDBName': newTenantDBName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'ModifyTenantDatabase',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ModifyTenantDatabaseResult',
    );
    return ModifyTenantDatabaseResult.fromXml($result);
  }

  /// Promotes a read replica DB instance to a standalone DB instance.
  /// <note>
  /// <ul>
  /// <li>
  /// Backup duration is a function of the amount of changes to the database
  /// since the previous backup. If you plan to promote a read replica to a
  /// standalone instance, we recommend that you enable backups and complete at
  /// least one backup prior to promotion. In addition, a read replica cannot be
  /// promoted to a standalone instance when it is in the
  /// <code>backing-up</code> status. If you have enabled backups on your read
  /// replica, configure the automated backup window so that daily backups do
  /// not interfere with read replica promotion.
  /// </li>
  /// <li>
  /// This command doesn't apply to Aurora MySQL, Aurora PostgreSQL, or RDS
  /// Custom.
  /// </li>
  /// </ul> </note>
  ///
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [DBInstanceNotFoundFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The DB instance identifier. This value is stored as a lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing read replica DB instance.
  /// </li>
  /// </ul>
  /// Example: <code>mydbinstance</code>
  ///
  /// Parameter [backupRetentionPeriod] :
  /// The number of days for which automated backups are retained. Setting this
  /// parameter to a positive number enables backups. Setting this parameter to
  /// 0 disables automated backups.
  ///
  /// Default: 1
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a value from 0 to 35.
  /// </li>
  /// <li>
  /// Can't be set to 0 if the DB instance is a source to read replicas.
  /// </li>
  /// </ul>
  ///
  /// Parameter [preferredBackupWindow] :
  /// The daily time range during which automated backups are created if
  /// automated backups are enabled, using the
  /// <code>BackupRetentionPeriod</code> parameter.
  ///
  /// The default is a 30-minute window selected at random from an 8-hour block
  /// of time for each Amazon Web Services Region. To see the time blocks
  /// available, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html">
  /// Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>hh24:mi-hh24:mi</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred maintenance window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  Future<PromoteReadReplicaResult> promoteReadReplica({
    required String dBInstanceIdentifier,
    int? backupRetentionPeriod,
    String? preferredBackupWindow,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      if (backupRetentionPeriod != null)
        'BackupRetentionPeriod': backupRetentionPeriod.toString(),
      if (preferredBackupWindow != null)
        'PreferredBackupWindow': preferredBackupWindow,
    };
    final $result = await _protocol.send(
      $request,
      action: 'PromoteReadReplica',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'PromoteReadReplicaResult',
    );
    return PromoteReadReplicaResult.fromXml($result);
  }

  /// Promotes a read replica DB cluster to a standalone DB cluster.
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The identifier of the DB cluster read replica to promote. This parameter
  /// isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DB cluster read replica.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster-replica1</code>
  Future<PromoteReadReplicaDBClusterResult> promoteReadReplicaDBCluster({
    required String dBClusterIdentifier,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'PromoteReadReplicaDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'PromoteReadReplicaDBClusterResult',
    );
    return PromoteReadReplicaDBClusterResult.fromXml($result);
  }

  /// Purchases a reserved DB instance offering.
  ///
  /// May throw [ReservedDBInstancesOfferingNotFoundFault].
  /// May throw [ReservedDBInstanceAlreadyExistsFault].
  /// May throw [ReservedDBInstanceQuotaExceededFault].
  ///
  /// Parameter [reservedDBInstancesOfferingId] :
  /// The ID of the Reserved DB instance offering to purchase.
  ///
  /// Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
  ///
  /// Parameter [dBInstanceCount] :
  /// The number of instances to reserve.
  ///
  /// Default: <code>1</code>
  ///
  /// Parameter [reservedDBInstanceId] :
  /// Customer-specified identifier to track this reservation.
  ///
  /// Example: myreservationID
  Future<PurchaseReservedDBInstancesOfferingResult>
      purchaseReservedDBInstancesOffering({
    required String reservedDBInstancesOfferingId,
    int? dBInstanceCount,
    String? reservedDBInstanceId,
    List<Tag>? tags,
  }) async {
    final $request = <String, String>{
      'ReservedDBInstancesOfferingId': reservedDBInstancesOfferingId,
      if (dBInstanceCount != null)
        'DBInstanceCount': dBInstanceCount.toString(),
      if (reservedDBInstanceId != null)
        'ReservedDBInstanceId': reservedDBInstanceId,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
    };
    final $result = await _protocol.send(
      $request,
      action: 'PurchaseReservedDBInstancesOffering',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'PurchaseReservedDBInstancesOfferingResult',
    );
    return PurchaseReservedDBInstancesOfferingResult.fromXml($result);
  }

  /// You might need to reboot your DB cluster, usually for maintenance reasons.
  /// For example, if you make certain modifications, or if you change the DB
  /// cluster parameter group associated with the DB cluster, reboot the DB
  /// cluster for the changes to take effect.
  ///
  /// Rebooting a DB cluster restarts the database engine service. Rebooting a
  /// DB cluster results in a momentary outage, during which the DB cluster
  /// status is set to rebooting.
  ///
  /// Use this operation only for a non-Aurora Multi-AZ DB cluster.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier. This parameter is stored as a lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DBCluster.
  /// </li>
  /// </ul>
  Future<RebootDBClusterResult> rebootDBCluster({
    required String dBClusterIdentifier,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'RebootDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RebootDBClusterResult',
    );
    return RebootDBClusterResult.fromXml($result);
  }

  /// You might need to reboot your DB instance, usually for maintenance
  /// reasons. For example, if you make certain modifications, or if you change
  /// the DB parameter group associated with the DB instance, you must reboot
  /// the instance for the changes to take effect.
  ///
  /// Rebooting a DB instance restarts the database engine service. Rebooting a
  /// DB instance results in a momentary outage, during which the DB instance
  /// status is set to rebooting.
  ///
  /// For more information about rebooting, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting
  /// a DB Instance</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// This command doesn't apply to RDS Custom.
  ///
  /// If your DB instance is part of a Multi-AZ DB cluster, you can reboot the
  /// DB cluster with the <code>RebootDBCluster</code> operation.
  ///
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [DBInstanceNotFoundFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The DB instance identifier. This parameter is stored as a lowercase
  /// string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DBInstance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [forceFailover] :
  /// Specifies whether the reboot is conducted through a Multi-AZ failover.
  ///
  /// Constraint: You can't enable force failover if the instance isn't
  /// configured for Multi-AZ.
  Future<RebootDBInstanceResult> rebootDBInstance({
    required String dBInstanceIdentifier,
    bool? forceFailover,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      if (forceFailover != null) 'ForceFailover': forceFailover.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'RebootDBInstance',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RebootDBInstanceResult',
    );
    return RebootDBInstanceResult.fromXml($result);
  }

  /// You might need to reboot your DB shard group, usually for maintenance
  /// reasons. For example, if you make certain modifications, reboot the DB
  /// shard group for the changes to take effect.
  ///
  /// This operation applies only to Aurora Limitless Database DBb shard groups.
  ///
  /// May throw [DBShardGroupNotFoundFault].
  /// May throw [InvalidDBShardGroupStateFault].
  ///
  /// Parameter [dBShardGroupIdentifier] :
  /// The name of the DB shard group to reboot.
  Future<DBShardGroup> rebootDBShardGroup({
    required String dBShardGroupIdentifier,
  }) async {
    final $request = <String, String>{
      'DBShardGroupIdentifier': dBShardGroupIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'RebootDBShardGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RebootDBShardGroupResult',
    );
    return DBShardGroup.fromXml($result);
  }

  /// Associate one or more <code>DBProxyTarget</code> data structures with a
  /// <code>DBProxyTargetGroup</code>.
  ///
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyTargetGroupNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBProxyTargetAlreadyRegisteredFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBProxyStateFault].
  /// May throw [InsufficientAvailableIPsInSubnetFault].
  ///
  /// Parameter [dBProxyName] :
  /// The identifier of the <code>DBProxy</code> that is associated with the
  /// <code>DBProxyTargetGroup</code>.
  ///
  /// Parameter [dBClusterIdentifiers] :
  /// One or more DB cluster identifiers.
  ///
  /// Parameter [dBInstanceIdentifiers] :
  /// One or more DB instance identifiers.
  ///
  /// Parameter [targetGroupName] :
  /// The identifier of the <code>DBProxyTargetGroup</code>.
  Future<RegisterDBProxyTargetsResponse> registerDBProxyTargets({
    required String dBProxyName,
    List<String>? dBClusterIdentifiers,
    List<String>? dBInstanceIdentifiers,
    String? targetGroupName,
  }) async {
    final $request = <String, String>{
      'DBProxyName': dBProxyName,
      if (dBClusterIdentifiers != null)
        if (dBClusterIdentifiers.isEmpty)
          'DBClusterIdentifiers': ''
        else
          for (var i1 = 0; i1 < dBClusterIdentifiers.length; i1++)
            'DBClusterIdentifiers.member.${i1 + 1}': dBClusterIdentifiers[i1],
      if (dBInstanceIdentifiers != null)
        if (dBInstanceIdentifiers.isEmpty)
          'DBInstanceIdentifiers': ''
        else
          for (var i1 = 0; i1 < dBInstanceIdentifiers.length; i1++)
            'DBInstanceIdentifiers.member.${i1 + 1}': dBInstanceIdentifiers[i1],
      if (targetGroupName != null) 'TargetGroupName': targetGroupName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'RegisterDBProxyTargets',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RegisterDBProxyTargetsResult',
    );
    return RegisterDBProxyTargetsResponse.fromXml($result);
  }

  /// Detaches an Aurora secondary cluster from an Aurora global database
  /// cluster. The cluster becomes a standalone cluster with read-write
  /// capability instead of being read-only and receiving data from a primary
  /// cluster in a different Region.
  /// <note>
  /// This operation only applies to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [GlobalClusterNotFoundFault].
  /// May throw [InvalidGlobalClusterStateFault].
  /// May throw [DBClusterNotFoundFault].
  ///
  /// Parameter [dbClusterIdentifier] :
  /// The Amazon Resource Name (ARN) identifying the cluster that was detached
  /// from the Aurora global database cluster.
  ///
  /// Parameter [globalClusterIdentifier] :
  /// The cluster identifier to detach from the Aurora global database cluster.
  Future<RemoveFromGlobalClusterResult> removeFromGlobalCluster({
    String? dbClusterIdentifier,
    String? globalClusterIdentifier,
  }) async {
    final $request = <String, String>{
      if (dbClusterIdentifier != null)
        'DbClusterIdentifier': dbClusterIdentifier,
      if (globalClusterIdentifier != null)
        'GlobalClusterIdentifier': globalClusterIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'RemoveFromGlobalCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RemoveFromGlobalClusterResult',
    );
    return RemoveFromGlobalClusterResult.fromXml($result);
  }

  /// Removes the asssociation of an Amazon Web Services Identity and Access
  /// Management (IAM) role from a DB cluster.
  ///
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBClusterRoleNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The name of the DB cluster to disassociate the IAM role from.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role to disassociate from the
  /// Aurora DB cluster, for example
  /// <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ///
  /// Parameter [featureName] :
  /// The name of the feature for the DB cluster that the IAM role is to be
  /// disassociated from. For information about supported feature names, see
  /// <a>DBEngineVersion</a>.
  Future<void> removeRoleFromDBCluster({
    required String dBClusterIdentifier,
    required String roleArn,
    String? featureName,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      'RoleArn': roleArn,
      if (featureName != null) 'FeatureName': featureName,
    };
    await _protocol.send(
      $request,
      action: 'RemoveRoleFromDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Disassociates an Amazon Web Services Identity and Access Management (IAM)
  /// role from a DB instance.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBInstanceRoleNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The name of the DB instance to disassociate the IAM role from.
  ///
  /// Parameter [featureName] :
  /// The name of the feature for the DB instance that the IAM role is to be
  /// disassociated from. For information about supported feature names, see
  /// <code>DBEngineVersion</code>.
  ///
  /// Parameter [roleArn] :
  /// The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB
  /// instance, for example,
  /// <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  Future<void> removeRoleFromDBInstance({
    required String dBInstanceIdentifier,
    required String featureName,
    required String roleArn,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      'FeatureName': featureName,
      'RoleArn': roleArn,
    };
    await _protocol.send(
      $request,
      action: 'RemoveRoleFromDBInstance',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Removes a source identifier from an existing RDS event notification
  /// subscription.
  ///
  /// May throw [SubscriptionNotFoundFault].
  /// May throw [SourceNotFoundFault].
  ///
  /// Parameter [sourceIdentifier] :
  /// The source identifier to be removed from the subscription, such as the
  /// <b>DB instance identifier</b> for a DB instance or the name of a security
  /// group.
  ///
  /// Parameter [subscriptionName] :
  /// The name of the RDS event notification subscription you want to remove a
  /// source identifier from.
  Future<RemoveSourceIdentifierFromSubscriptionResult>
      removeSourceIdentifierFromSubscription({
    required String sourceIdentifier,
    required String subscriptionName,
  }) async {
    final $request = <String, String>{
      'SourceIdentifier': sourceIdentifier,
      'SubscriptionName': subscriptionName,
    };
    final $result = await _protocol.send(
      $request,
      action: 'RemoveSourceIdentifierFromSubscription',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RemoveSourceIdentifierFromSubscriptionResult',
    );
    return RemoveSourceIdentifierFromSubscriptionResult.fromXml($result);
  }

  /// Removes metadata tags from an Amazon RDS resource.
  ///
  /// For an overview on tagging an Amazon RDS resource, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging
  /// Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [DBSnapshotNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBProxyNotFoundFault].
  /// May throw [DBProxyTargetGroupNotFoundFault].
  /// May throw [BlueGreenDeploymentNotFoundFault].
  /// May throw [IntegrationNotFoundFault].
  /// May throw [TenantDatabaseNotFoundFault].
  /// May throw [DBSnapshotTenantDatabaseNotFoundFault].
  ///
  /// Parameter [resourceName] :
  /// The Amazon RDS resource that the tags are removed from. This value is an
  /// Amazon Resource Name (ARN). For information about creating an ARN, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
  /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// Parameter [tagKeys] :
  /// The tag key (name) of the tag to be removed.
  Future<void> removeTagsFromResource({
    required String resourceName,
    required List<String> tagKeys,
  }) async {
    final $request = <String, String>{
      'ResourceName': resourceName,
      if (tagKeys.isEmpty)
        'TagKeys': ''
      else
        for (var i1 = 0; i1 < tagKeys.length; i1++)
          'TagKeys.member.${i1 + 1}': tagKeys[i1],
    };
    await _protocol.send(
      $request,
      action: 'RemoveTagsFromResource',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
    );
  }

  /// Modifies the parameters of a DB cluster parameter group to the default
  /// value. To reset specific parameters submit a list of the following:
  /// <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the
  /// entire DB cluster parameter group, specify the
  /// <code>DBClusterParameterGroupName</code> and
  /// <code>ResetAllParameters</code> parameters.
  ///
  /// When resetting the entire group, dynamic parameters are updated
  /// immediately and static parameters are set to <code>pending-reboot</code>
  /// to take effect on the next DB instance restart or
  /// <code>RebootDBInstance</code> request. You must call
  /// <code>RebootDBInstance</code> for every DB instance in your DB cluster
  /// that you want the updated static parameter to apply to.
  ///
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// May throw [InvalidDBParameterGroupStateFault].
  /// May throw [DBParameterGroupNotFoundFault].
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of the DB cluster parameter group to reset.
  ///
  /// Parameter [parameters] :
  /// A list of parameter names in the DB cluster parameter group to reset to
  /// the default values. You can't use this parameter if the
  /// <code>ResetAllParameters</code> parameter is enabled.
  ///
  /// Parameter [resetAllParameters] :
  /// Specifies whether to reset all parameters in the DB cluster parameter
  /// group to their default values. You can't use this parameter if there is a
  /// list of parameter names specified for the <code>Parameters</code>
  /// parameter.
  Future<DBClusterParameterGroupNameMessage> resetDBClusterParameterGroup({
    required String dBClusterParameterGroupName,
    List<Parameter>? parameters,
    bool? resetAllParameters,
  }) async {
    final $request = <String, String>{
      'DBClusterParameterGroupName': dBClusterParameterGroupName,
      if (parameters != null)
        if (parameters.isEmpty)
          'Parameters': ''
        else
          for (var i1 = 0; i1 < parameters.length; i1++)
            for (var e3 in parameters[i1].toQueryMap().entries)
              'Parameters.Parameter.${i1 + 1}.${e3.key}': e3.value,
      if (resetAllParameters != null)
        'ResetAllParameters': resetAllParameters.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'ResetDBClusterParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ResetDBClusterParameterGroupResult',
    );
    return DBClusterParameterGroupNameMessage.fromXml($result);
  }

  /// Modifies the parameters of a DB parameter group to the engine/system
  /// default value. To reset specific parameters, provide a list of the
  /// following: <code>ParameterName</code> and <code>ApplyMethod</code>. To
  /// reset the entire DB parameter group, specify the
  /// <code>DBParameterGroup</code> name and <code>ResetAllParameters</code>
  /// parameters. When resetting the entire group, dynamic parameters are
  /// updated immediately and static parameters are set to
  /// <code>pending-reboot</code> to take effect on the next DB instance restart
  /// or <code>RebootDBInstance</code> request.
  ///
  /// May throw [InvalidDBParameterGroupStateFault].
  /// May throw [DBParameterGroupNotFoundFault].
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the name of an existing <code>DBParameterGroup</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [parameters] :
  /// To reset the entire DB parameter group, specify the
  /// <code>DBParameterGroup</code> name and <code>ResetAllParameters</code>
  /// parameters. To reset specific parameters, provide a list of the following:
  /// <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20
  /// parameters can be modified in a single request.
  ///
  /// <b>MySQL</b>
  ///
  /// Valid Values (for Apply method): <code>immediate</code> |
  /// <code>pending-reboot</code>
  ///
  /// You can use the immediate value with dynamic parameters only. You can use
  /// the <code>pending-reboot</code> value for both dynamic and static
  /// parameters, and changes are applied when DB instance reboots.
  ///
  /// <b>MariaDB</b>
  ///
  /// Valid Values (for Apply method): <code>immediate</code> |
  /// <code>pending-reboot</code>
  ///
  /// You can use the immediate value with dynamic parameters only. You can use
  /// the <code>pending-reboot</code> value for both dynamic and static
  /// parameters, and changes are applied when DB instance reboots.
  ///
  /// <b>Oracle</b>
  ///
  /// Valid Values (for Apply method): <code>pending-reboot</code>
  ///
  /// Parameter [resetAllParameters] :
  /// Specifies whether to reset all parameters in the DB parameter group to
  /// default values. By default, all parameters in the DB parameter group are
  /// reset to default values.
  Future<DBParameterGroupNameMessage> resetDBParameterGroup({
    required String dBParameterGroupName,
    List<Parameter>? parameters,
    bool? resetAllParameters,
  }) async {
    final $request = <String, String>{
      'DBParameterGroupName': dBParameterGroupName,
      if (parameters != null)
        if (parameters.isEmpty)
          'Parameters': ''
        else
          for (var i1 = 0; i1 < parameters.length; i1++)
            for (var e3 in parameters[i1].toQueryMap().entries)
              'Parameters.Parameter.${i1 + 1}.${e3.key}': e3.value,
      if (resetAllParameters != null)
        'ResetAllParameters': resetAllParameters.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'ResetDBParameterGroup',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'ResetDBParameterGroupResult',
    );
    return DBParameterGroupNameMessage.fromXml($result);
  }

  /// Creates an Amazon Aurora DB cluster from MySQL data stored in an Amazon S3
  /// bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and
  /// the data must be created using the Percona XtraBackup utility as described
  /// in <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.ExtMySQL.html#AuroraMySQL.Migrating.ExtMySQL.S3">
  /// Migrating Data from MySQL by Using an Amazon S3 Bucket</a> in the
  /// <i>Amazon Aurora User Guide</i>.
  /// <note>
  /// This operation only restores the DB cluster, not the DB instances for that
  /// DB cluster. You must invoke the <code>CreateDBInstance</code> operation to
  /// create DB instances for the restored DB cluster, specifying the identifier
  /// of the restored DB cluster in <code>DBClusterIdentifier</code>. You can
  /// create DB instances only after the <code>RestoreDBClusterFromS3</code>
  /// operation has completed and the DB cluster is available.
  /// </note>
  /// For more information on Amazon Aurora, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  /// <note>
  /// This operation only applies to Aurora DB clusters. The source DB engine
  /// must be MySQL.
  /// </note>
  ///
  /// May throw [DBClusterAlreadyExistsFault].
  /// May throw [DBClusterQuotaExceededFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBSubnetGroupStateFault].
  /// May throw [InvalidSubnet].
  /// May throw [InvalidS3BucketFault].
  /// May throw [DBClusterParameterGroupNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [InsufficientStorageClusterCapacityFault].
  /// May throw [StorageTypeNotSupportedFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The name of the DB cluster to create from the source data in the Amazon S3
  /// bucket. This parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>my-cluster1</code>
  ///
  /// Parameter [engine] :
  /// The name of the database engine to be used for this DB cluster.
  ///
  /// Valid Values: <code>aurora-mysql</code> (for Aurora MySQL)
  ///
  /// Parameter [masterUsername] :
  /// The name of the master user for the restored DB cluster.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 16 letters or numbers.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't be a reserved word for the chosen database engine.
  /// </li>
  /// </ul>
  ///
  /// Parameter [s3BucketName] :
  /// The name of the Amazon S3 bucket that contains the data used to create the
  /// Amazon Aurora DB cluster.
  ///
  /// Parameter [s3IngestionRoleArn] :
  /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and
  /// Access Management (IAM) role that authorizes Amazon RDS to access the
  /// Amazon S3 bucket on your behalf.
  ///
  /// Parameter [sourceEngine] :
  /// The identifier for the database engine that was backed up to create the
  /// files stored in the Amazon S3 bucket.
  ///
  /// Valid Values: <code>mysql</code>
  ///
  /// Parameter [sourceEngineVersion] :
  /// The version of the database that the backup files were created from.
  ///
  /// MySQL versions 5.7 and 8.0 are supported.
  ///
  /// Example: <code>5.7.40</code>, <code>8.0.28</code>
  ///
  /// Parameter [availabilityZones] :
  /// A list of Availability Zones (AZs) where instances in the restored DB
  /// cluster can be created.
  ///
  /// Parameter [backtrackWindow] :
  /// The target backtrack window, in seconds. To disable backtracking, set this
  /// value to 0.
  /// <note>
  /// Currently, Backtrack is only supported for Aurora MySQL DB clusters.
  /// </note>
  /// Default: 0
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If specified, this value must be set to a number from 0 to 259,200 (72
  /// hours).
  /// </li>
  /// </ul>
  ///
  /// Parameter [backupRetentionPeriod] :
  /// The number of days for which automated backups of the restored DB cluster
  /// are retained. You must specify a minimum value of 1.
  ///
  /// Default: 1
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a value from 1 to 35
  /// </li>
  /// </ul>
  ///
  /// Parameter [characterSetName] :
  /// A value that indicates that the restored DB cluster should be associated
  /// with the specified CharacterSet.
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the restored DB cluster to
  /// snapshots of the restored DB cluster. The default is not to copy them.
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of the DB cluster parameter group to associate with the restored
  /// DB cluster. If this argument is omitted, the default parameter group for
  /// the engine version is used.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DBClusterParameterGroup.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSubnetGroupName] :
  /// A DB subnet group to associate with the restored DB cluster.
  ///
  /// Constraints: If supplied, must match the name of an existing
  /// DBSubnetGroup.
  ///
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [databaseName] :
  /// The database name for the restored DB cluster.
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether to enable deletion protection for the DB cluster. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled.
  ///
  /// Parameter [domain] :
  /// Specify the Active Directory directory ID to restore the DB cluster in.
  /// The domain must be created prior to this operation.
  ///
  /// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication
  /// to authenticate users that connect to the DB cluster. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos
  /// Authentication</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Parameter [domainIAMRoleName] :
  /// Specify the name of the IAM role to be used when making API calls to the
  /// Directory Service.
  ///
  /// Parameter [enableCloudwatchLogsExports] :
  /// The list of logs that the restored DB cluster is to export to CloudWatch
  /// Logs. The values in the list depend on the DB engine being used.
  ///
  /// <b>Aurora MySQL</b>
  ///
  /// Possible values are <code>audit</code>, <code>error</code>,
  /// <code>general</code>, and <code>slowquery</code>.
  ///
  /// For more information about exporting CloudWatch Logs for Amazon Aurora,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Parameter [engineLifecycleSupport] :
  /// The life cycle type for this DB cluster.
  /// <note>
  /// By default, this value is set to
  /// <code>open-source-rds-extended-support</code>, which enrolls your DB
  /// cluster into Amazon RDS Extended Support. At the end of standard support,
  /// you can avoid charges for Extended Support by setting the value to
  /// <code>open-source-rds-extended-support-disabled</code>. In this case, RDS
  /// automatically upgrades your restored DB cluster to a higher engine
  /// version, if the major engine version is past its end of standard support
  /// date.
  /// </note>
  /// You can use this setting to enroll your DB cluster into Amazon RDS
  /// Extended Support. With RDS Extended Support, you can run the selected
  /// major engine version on your DB cluster past the end of standard support
  /// for that engine version. For more information, see the following sections:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (PostgreSQL only) - <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i>
  /// </li>
  /// <li>
  /// Amazon RDS - <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>
  /// </li>
  /// </ul>
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Valid Values: <code>open-source-rds-extended-support |
  /// open-source-rds-extended-support-disabled</code>
  ///
  /// Default: <code>open-source-rds-extended-support</code>
  ///
  /// Parameter [engineVersion] :
  /// The version number of the database engine to use.
  ///
  /// To list all of the available engine versions for <code>aurora-mysql</code>
  /// (Aurora MySQL), use the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// <b>Aurora MySQL</b>
  ///
  /// Examples: <code>5.7.mysql_aurora.2.12.0</code>,
  /// <code>8.0.mysql_aurora.3.04.0</code>
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier for an encrypted DB cluster.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// If the StorageEncrypted parameter is enabled, and you do not specify a
  /// value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use
  /// your default KMS key. There is a default KMS key for your Amazon Web
  /// Services account. Your Amazon Web Services account has a different default
  /// KMS key for each Amazon Web Services Region.
  ///
  /// Parameter [manageMasterUserPassword] :
  /// Specifies whether to manage the master user password with Amazon Web
  /// Services Secrets Manager.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// Aurora User Guide.</i>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't manage the master user password with Amazon Web Services Secrets
  /// Manager if <code>MasterUserPassword</code> is specified.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserPassword] :
  /// The password for the master database user. This password can contain any
  /// printable ASCII character except "/", """, or "@".
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 8 to 41 characters.
  /// </li>
  /// <li>
  /// Can't be specified if <code>ManageMasterUserPassword</code> is turned on.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserSecretKmsKeyId] :
  /// The Amazon Web Services KMS key identifier to encrypt a secret that is
  /// automatically generated and managed in Amazon Web Services Secrets
  /// Manager.
  ///
  /// This setting is valid only if the master user password is managed by RDS
  /// in Amazon Web Services Secrets Manager for the DB cluster.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the
  /// <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If
  /// the secret is in a different Amazon Web Services account, then you can't
  /// use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and
  /// you must use a customer managed KMS key.
  ///
  /// There is a default KMS key for your Amazon Web Services account. Your
  /// Amazon Web Services account has a different default KMS key for each
  /// Amazon Web Services Region.
  ///
  /// Parameter [networkType] :
  /// The network type of the DB cluster.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>IPV4</code>
  /// </li>
  /// <li>
  /// <code>DUAL</code>
  /// </li>
  /// </ul>
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4
  /// protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User
  /// Guide.</i>
  ///
  /// Parameter [optionGroupName] :
  /// A value that indicates that the restored DB cluster should be associated
  /// with the specified option group.
  ///
  /// Permanent options can't be removed from an option group. An option group
  /// can't be removed from a DB cluster once it is associated with a DB
  /// cluster.
  ///
  /// Parameter [port] :
  /// The port number on which the instances in the restored DB cluster accept
  /// connections.
  ///
  /// Default: <code>3306</code>
  ///
  /// Parameter [preferredBackupWindow] :
  /// The daily time range during which automated backups are created if
  /// automated backups are enabled using the <code>BackupRetentionPeriod</code>
  /// parameter.
  ///
  /// The default is a 30-minute window selected at random from an 8-hour block
  /// of time for each Amazon Web Services Region. To view the time blocks
  /// available, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
  /// Backup window</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>hh24:mi-hh24:mi</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred maintenance window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [preferredMaintenanceWindow] :
  /// The weekly time range during which system maintenance can occur, in
  /// Universal Coordinated Time (UTC).
  ///
  /// Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
  ///
  /// The default is a 30-minute window selected at random from an 8-hour block
  /// of time for each Amazon Web Services Region, occurring on a random day of
  /// the week. To see the time blocks available, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
  /// Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora
  /// User Guide</i>.
  ///
  /// Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
  ///
  /// Constraints: Minimum 30-minute window.
  ///
  /// Parameter [s3Prefix] :
  /// The prefix for all of the file names that contain the data used to create
  /// the Amazon Aurora DB cluster. If you do not specify a
  /// <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created
  /// by using all of the files in the Amazon S3 bucket.
  ///
  /// Parameter [storageEncrypted] :
  /// Specifies whether the restored DB cluster is encrypted.
  ///
  /// Parameter [storageType] :
  /// Specifies the storage type to be associated with the DB cluster.
  ///
  /// Valid Values: <code>aurora</code>, <code>aurora-iopt1</code>
  ///
  /// Default: <code>aurora</code>
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of EC2 VPC security groups to associate with the restored DB
  /// cluster.
  Future<RestoreDBClusterFromS3Result> restoreDBClusterFromS3({
    required String dBClusterIdentifier,
    required String engine,
    required String masterUsername,
    required String s3BucketName,
    required String s3IngestionRoleArn,
    required String sourceEngine,
    required String sourceEngineVersion,
    List<String>? availabilityZones,
    int? backtrackWindow,
    int? backupRetentionPeriod,
    String? characterSetName,
    bool? copyTagsToSnapshot,
    String? dBClusterParameterGroupName,
    String? dBSubnetGroupName,
    String? databaseName,
    bool? deletionProtection,
    String? domain,
    String? domainIAMRoleName,
    List<String>? enableCloudwatchLogsExports,
    bool? enableIAMDatabaseAuthentication,
    String? engineLifecycleSupport,
    String? engineVersion,
    String? kmsKeyId,
    bool? manageMasterUserPassword,
    String? masterUserPassword,
    String? masterUserSecretKmsKeyId,
    String? networkType,
    String? optionGroupName,
    int? port,
    String? preferredBackupWindow,
    String? preferredMaintenanceWindow,
    String? s3Prefix,
    ServerlessV2ScalingConfiguration? serverlessV2ScalingConfiguration,
    bool? storageEncrypted,
    String? storageType,
    List<Tag>? tags,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      'Engine': engine,
      'MasterUsername': masterUsername,
      'S3BucketName': s3BucketName,
      'S3IngestionRoleArn': s3IngestionRoleArn,
      'SourceEngine': sourceEngine,
      'SourceEngineVersion': sourceEngineVersion,
      if (availabilityZones != null)
        if (availabilityZones.isEmpty)
          'AvailabilityZones': ''
        else
          for (var i1 = 0; i1 < availabilityZones.length; i1++)
            'AvailabilityZones.AvailabilityZone.${i1 + 1}':
                availabilityZones[i1],
      if (backtrackWindow != null)
        'BacktrackWindow': backtrackWindow.toString(),
      if (backupRetentionPeriod != null)
        'BackupRetentionPeriod': backupRetentionPeriod.toString(),
      if (characterSetName != null) 'CharacterSetName': characterSetName,
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (dBClusterParameterGroupName != null)
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (databaseName != null) 'DatabaseName': databaseName,
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (domain != null) 'Domain': domain,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (enableCloudwatchLogsExports != null)
        if (enableCloudwatchLogsExports.isEmpty)
          'EnableCloudwatchLogsExports': ''
        else
          for (var i1 = 0; i1 < enableCloudwatchLogsExports.length; i1++)
            'EnableCloudwatchLogsExports.member.${i1 + 1}':
                enableCloudwatchLogsExports[i1],
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (engineLifecycleSupport != null)
        'EngineLifecycleSupport': engineLifecycleSupport,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (manageMasterUserPassword != null)
        'ManageMasterUserPassword': manageMasterUserPassword.toString(),
      if (masterUserPassword != null) 'MasterUserPassword': masterUserPassword,
      if (masterUserSecretKmsKeyId != null)
        'MasterUserSecretKmsKeyId': masterUserSecretKmsKeyId,
      if (networkType != null) 'NetworkType': networkType,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (port != null) 'Port': port.toString(),
      if (preferredBackupWindow != null)
        'PreferredBackupWindow': preferredBackupWindow,
      if (preferredMaintenanceWindow != null)
        'PreferredMaintenanceWindow': preferredMaintenanceWindow,
      if (s3Prefix != null) 'S3Prefix': s3Prefix,
      if (serverlessV2ScalingConfiguration != null)
        for (var e1 in serverlessV2ScalingConfiguration.toQueryMap().entries)
          'ServerlessV2ScalingConfiguration.${e1.key}': e1.value,
      if (storageEncrypted != null)
        'StorageEncrypted': storageEncrypted.toString(),
      if (storageType != null) 'StorageType': storageType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'RestoreDBClusterFromS3',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RestoreDBClusterFromS3Result',
    );
    return RestoreDBClusterFromS3Result.fromXml($result);
  }

  /// Creates a new DB cluster from a DB snapshot or DB cluster snapshot.
  ///
  /// The target DB cluster is created from the source snapshot with a default
  /// configuration. If you don't specify a security group, the new DB cluster
  /// is associated with the default security group.
  /// <note>
  /// This operation only restores the DB cluster, not the DB instances for that
  /// DB cluster. You must invoke the <code>CreateDBInstance</code> operation to
  /// create DB instances for the restored DB cluster, specifying the identifier
  /// of the restored DB cluster in <code>DBClusterIdentifier</code>. You can
  /// create DB instances only after the
  /// <code>RestoreDBClusterFromSnapshot</code> operation has completed and the
  /// DB cluster is available.
  /// </note>
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// May throw [DBClusterAlreadyExistsFault].
  /// May throw [DBClusterQuotaExceededFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [DBSnapshotNotFoundFault].
  /// May throw [DBClusterSnapshotNotFoundFault].
  /// May throw [InsufficientDBClusterCapacityFault].
  /// May throw [InsufficientStorageClusterCapacityFault].
  /// May throw [InvalidDBSnapshotStateFault].
  /// May throw [InvalidDBClusterSnapshotStateFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [InvalidRestoreFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [InvalidSubnet].
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [DBClusterParameterGroupNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The name of the DB cluster to create from the DB snapshot or DB cluster
  /// snapshot. This parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul>
  /// Example: <code>my-snapshot-id</code>
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [engine] :
  /// The database engine to use for the new DB cluster.
  ///
  /// Default: The same as source
  ///
  /// Constraint: Must be compatible with the engine of the source
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [snapshotIdentifier] :
  /// The identifier for the DB snapshot or DB cluster snapshot to restore from.
  ///
  /// You can use either the name or the Amazon Resource Name (ARN) to specify a
  /// DB cluster snapshot. However, you can use only the ARN to specify a DB
  /// snapshot.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing Snapshot.
  /// </li>
  /// </ul>
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [availabilityZones] :
  /// Provides the list of Availability Zones (AZs) where instances in the
  /// restored DB cluster can be created.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [backtrackWindow] :
  /// The target backtrack window, in seconds. To disable backtracking, set this
  /// value to 0.
  /// <note>
  /// Currently, Backtrack is only supported for Aurora MySQL DB clusters.
  /// </note>
  /// Default: 0
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If specified, this value must be set to a number from 0 to 259,200 (72
  /// hours).
  /// </li>
  /// </ul>
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the restored DB cluster to
  /// snapshots of the restored DB cluster. The default is not to copy them.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [dBClusterInstanceClass] :
  /// The compute and memory capacity of the each DB instance in the Multi-AZ DB
  /// cluster, for example db.m6gd.xlarge. Not all DB instance classes are
  /// available in all Amazon Web Services Regions, or for all database engines.
  ///
  /// For the full list of DB instance classes, and availability for your
  /// engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB
  /// Instance Class</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Valid for: Multi-AZ DB clusters only
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of the DB cluster parameter group to associate with this DB
  /// cluster. If this argument is omitted, the default DB cluster parameter
  /// group for the specified engine is used.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing default DB cluster
  /// parameter group.
  /// </li>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [dBSubnetGroupName] :
  /// The name of the DB subnet group to use for the new DB cluster.
  ///
  /// Constraints: If supplied, must match the name of an existing DB subnet
  /// group.
  ///
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [databaseName] :
  /// The database name for the restored DB cluster.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether to enable deletion protection for the DB cluster. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [domain] :
  /// The Active Directory directory ID to restore the DB cluster in. The domain
  /// must be created prior to this operation. Currently, only MySQL, Microsoft
  /// SQL Server, Oracle, and PostgreSQL DB instances can be created in an
  /// Active Directory Domain.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
  /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [domainIAMRoleName] :
  /// The name of the IAM role to be used when making API calls to the Directory
  /// Service.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [enableCloudwatchLogsExports] :
  /// The list of logs that the restored DB cluster is to export to Amazon
  /// CloudWatch Logs. The values in the list depend on the DB engine being
  /// used.
  ///
  /// <b>RDS for MySQL</b>
  ///
  /// Possible values are <code>error</code>, <code>general</code>, and
  /// <code>slowquery</code>.
  ///
  /// <b>RDS for PostgreSQL</b>
  ///
  /// Possible values are <code>postgresql</code> and <code>upgrade</code>.
  ///
  /// <b>Aurora MySQL</b>
  ///
  /// Possible values are <code>audit</code>, <code>error</code>,
  /// <code>general</code>, and <code>slowquery</code>.
  ///
  /// <b>Aurora PostgreSQL</b>
  ///
  /// Possible value is <code>postgresql</code>.
  ///
  /// For more information about exporting CloudWatch Logs for Amazon RDS, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// For more information about exporting CloudWatch Logs for Amazon Aurora,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [engineLifecycleSupport] :
  /// The life cycle type for this DB cluster.
  /// <note>
  /// By default, this value is set to
  /// <code>open-source-rds-extended-support</code>, which enrolls your DB
  /// cluster into Amazon RDS Extended Support. At the end of standard support,
  /// you can avoid charges for Extended Support by setting the value to
  /// <code>open-source-rds-extended-support-disabled</code>. In this case, RDS
  /// automatically upgrades your restored DB cluster to a higher engine
  /// version, if the major engine version is past its end of standard support
  /// date.
  /// </note>
  /// You can use this setting to enroll your DB cluster into Amazon RDS
  /// Extended Support. With RDS Extended Support, you can run the selected
  /// major engine version on your DB cluster past the end of standard support
  /// for that engine version. For more information, see the following sections:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (PostgreSQL only) - <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i>
  /// </li>
  /// <li>
  /// Amazon RDS - <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>
  /// </li>
  /// </ul>
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Valid Values: <code>open-source-rds-extended-support |
  /// open-source-rds-extended-support-disabled</code>
  ///
  /// Default: <code>open-source-rds-extended-support</code>
  ///
  /// Parameter [engineMode] :
  /// The DB engine mode of the DB cluster, either <code>provisioned</code> or
  /// <code>serverless</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html">
  /// CreateDBCluster</a>.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [engineVersion] :
  /// The version of the database engine to use for the new DB cluster. If you
  /// don't specify an engine version, the default version for the database
  /// engine in the Amazon Web Services Region is used.
  ///
  /// To list all of the available engine versions for Aurora MySQL, use the
  /// following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// To list all of the available engine versions for Aurora PostgreSQL, use
  /// the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql
  /// --query "DBEngineVersions[].EngineVersion"</code>
  ///
  /// To list all of the available engine versions for RDS for MySQL, use the
  /// following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine mysql --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// To list all of the available engine versions for RDS for PostgreSQL, use
  /// the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine postgres --query
  /// "DBEngineVersions[].EngineVersion"</code>
  ///
  /// <b>Aurora MySQL</b>
  ///
  /// See <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html">Database
  /// engine updates for Amazon Aurora MySQL</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// <b>Aurora PostgreSQL</b>
  ///
  /// See <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html">Amazon
  /// Aurora PostgreSQL releases and engine versions</a> in the <i>Amazon Aurora
  /// User Guide</i>.
  ///
  /// <b>MySQL</b>
  ///
  /// See <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">Amazon
  /// RDS for MySQL</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// <b>PostgreSQL</b>
  ///
  /// See <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon
  /// RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [iops] :
  /// The amount of Provisioned IOPS (input/output operations per second) to be
  /// initially allocated for each DB instance in the Multi-AZ DB cluster.
  ///
  /// For information about valid IOPS values, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon
  /// RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Constraints: Must be a multiple between .5 and 50 of the storage amount
  /// for the DB instance.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier to use when restoring an
  /// encrypted DB cluster from a DB snapshot or DB cluster snapshot.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// When you don't specify a value for the <code>KmsKeyId</code> parameter,
  /// then the following occurs:
  ///
  /// <ul>
  /// <li>
  /// If the DB snapshot or DB cluster snapshot in
  /// <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster
  /// is encrypted using the KMS key that was used to encrypt the DB snapshot or
  /// DB cluster snapshot.
  /// </li>
  /// <li>
  /// If the DB snapshot or DB cluster snapshot in
  /// <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB
  /// cluster isn't encrypted.
  /// </li>
  /// </ul>
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [networkType] :
  /// The network type of the DB cluster.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>IPV4</code>
  /// </li>
  /// <li>
  /// <code>DUAL</code>
  /// </li>
  /// </ul>
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4
  /// protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User
  /// Guide.</i>
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [optionGroupName] :
  /// The name of the option group to use for the restored DB cluster.
  ///
  /// DB clusters are associated with a default option group that can't be
  /// modified.
  ///
  /// Parameter [port] :
  /// The port number on which the new DB cluster accepts connections.
  ///
  /// Constraints: This value must be <code>1150-65535</code>
  ///
  /// Default: The same port as the original DB cluster.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB cluster is publicly accessible.
  ///
  /// When the DB cluster is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB cluster's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB cluster's VPC. Access to the DB cluster is ultimately
  /// controlled by the security group it uses. That public access is not
  /// permitted if the security group assigned to the DB cluster doesn't permit
  /// it.
  ///
  /// When the DB cluster isn't publicly accessible, it is an internal DB
  /// cluster with a DNS name that resolves to a private IP address.
  ///
  /// Default: The default behavior varies depending on whether
  /// <code>DBSubnetGroupName</code> is specified.
  ///
  /// If <code>DBSubnetGroupName</code> isn't specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the default VPC in the target Region doesn’t have an internet gateway
  /// attached to it, the DB cluster is private.
  /// </li>
  /// <li>
  /// If the default VPC in the target Region has an internet gateway attached
  /// to it, the DB cluster is public.
  /// </li>
  /// </ul>
  /// If <code>DBSubnetGroupName</code> is specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the subnets are part of a VPC that doesn’t have an internet gateway
  /// attached to it, the DB cluster is private.
  /// </li>
  /// <li>
  /// If the subnets are part of a VPC that has an internet gateway attached to
  /// it, the DB cluster is public.
  /// </li>
  /// </ul>
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [rdsCustomClusterConfiguration] :
  /// Reserved for future use.
  ///
  /// Parameter [scalingConfiguration] :
  /// For DB clusters in <code>serverless</code> DB engine mode, the scaling
  /// properties of the DB cluster.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [storageType] :
  /// Specifies the storage type to be associated with the DB cluster.
  ///
  /// When specified for a Multi-AZ DB cluster, a value for the
  /// <code>Iops</code> parameter is required.
  ///
  /// Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> (Aurora DB
  /// clusters); <code>io1</code> (Multi-AZ DB clusters)
  ///
  /// Default: <code>aurora</code> (Aurora DB clusters); <code>io1</code>
  /// (Multi-AZ DB clusters)
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [tags] :
  /// The tags to be assigned to the restored DB cluster.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of VPC security groups that the new DB cluster will belong to.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  Future<RestoreDBClusterFromSnapshotResult> restoreDBClusterFromSnapshot({
    required String dBClusterIdentifier,
    required String engine,
    required String snapshotIdentifier,
    List<String>? availabilityZones,
    int? backtrackWindow,
    bool? copyTagsToSnapshot,
    String? dBClusterInstanceClass,
    String? dBClusterParameterGroupName,
    String? dBSubnetGroupName,
    String? databaseName,
    bool? deletionProtection,
    String? domain,
    String? domainIAMRoleName,
    List<String>? enableCloudwatchLogsExports,
    bool? enableIAMDatabaseAuthentication,
    String? engineLifecycleSupport,
    String? engineMode,
    String? engineVersion,
    int? iops,
    String? kmsKeyId,
    String? networkType,
    String? optionGroupName,
    int? port,
    bool? publiclyAccessible,
    RdsCustomClusterConfiguration? rdsCustomClusterConfiguration,
    ScalingConfiguration? scalingConfiguration,
    ServerlessV2ScalingConfiguration? serverlessV2ScalingConfiguration,
    String? storageType,
    List<Tag>? tags,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      'Engine': engine,
      'SnapshotIdentifier': snapshotIdentifier,
      if (availabilityZones != null)
        if (availabilityZones.isEmpty)
          'AvailabilityZones': ''
        else
          for (var i1 = 0; i1 < availabilityZones.length; i1++)
            'AvailabilityZones.AvailabilityZone.${i1 + 1}':
                availabilityZones[i1],
      if (backtrackWindow != null)
        'BacktrackWindow': backtrackWindow.toString(),
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (dBClusterInstanceClass != null)
        'DBClusterInstanceClass': dBClusterInstanceClass,
      if (dBClusterParameterGroupName != null)
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (databaseName != null) 'DatabaseName': databaseName,
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (domain != null) 'Domain': domain,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (enableCloudwatchLogsExports != null)
        if (enableCloudwatchLogsExports.isEmpty)
          'EnableCloudwatchLogsExports': ''
        else
          for (var i1 = 0; i1 < enableCloudwatchLogsExports.length; i1++)
            'EnableCloudwatchLogsExports.member.${i1 + 1}':
                enableCloudwatchLogsExports[i1],
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (engineLifecycleSupport != null)
        'EngineLifecycleSupport': engineLifecycleSupport,
      if (engineMode != null) 'EngineMode': engineMode,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (iops != null) 'Iops': iops.toString(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (networkType != null) 'NetworkType': networkType,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (port != null) 'Port': port.toString(),
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
      if (rdsCustomClusterConfiguration != null)
        for (var e1 in rdsCustomClusterConfiguration.toQueryMap().entries)
          'RdsCustomClusterConfiguration.${e1.key}': e1.value,
      if (scalingConfiguration != null)
        for (var e1 in scalingConfiguration.toQueryMap().entries)
          'ScalingConfiguration.${e1.key}': e1.value,
      if (serverlessV2ScalingConfiguration != null)
        for (var e1 in serverlessV2ScalingConfiguration.toQueryMap().entries)
          'ServerlessV2ScalingConfiguration.${e1.key}': e1.value,
      if (storageType != null) 'StorageType': storageType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'RestoreDBClusterFromSnapshot',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RestoreDBClusterFromSnapshotResult',
    );
    return RestoreDBClusterFromSnapshotResult.fromXml($result);
  }

  /// Restores a DB cluster to an arbitrary point in time. Users can restore to
  /// any point in time before <code>LatestRestorableTime</code> for up to
  /// <code>BackupRetentionPeriod</code> days. The target DB cluster is created
  /// from the source DB cluster with the same configuration as the original DB
  /// cluster, except that the new DB cluster is created with the default DB
  /// security group.
  /// <note>
  /// For Aurora, this operation only restores the DB cluster, not the DB
  /// instances for that DB cluster. You must invoke the
  /// <code>CreateDBInstance</code> operation to create DB instances for the
  /// restored DB cluster, specifying the identifier of the restored DB cluster
  /// in <code>DBClusterIdentifier</code>. You can create DB instances only
  /// after the <code>RestoreDBClusterToPointInTime</code> operation has
  /// completed and the DB cluster is available.
  /// </note>
  /// For more information on Amazon Aurora DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
  /// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// May throw [DBClusterAlreadyExistsFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBClusterQuotaExceededFault].
  /// May throw [DBClusterSnapshotNotFoundFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [InsufficientDBClusterCapacityFault].
  /// May throw [InsufficientStorageClusterCapacityFault].
  /// May throw [InvalidDBClusterSnapshotStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBSnapshotStateFault].
  /// May throw [InvalidRestoreFault].
  /// May throw [InvalidSubnet].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [DBClusterParameterGroupNotFoundFault].
  /// May throw [DBClusterAutomatedBackupNotFoundFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The name of the new DB cluster to be created.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul>
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [backtrackWindow] :
  /// The target backtrack window, in seconds. To disable backtracking, set this
  /// value to 0.
  ///
  /// Default: 0
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If specified, this value must be set to a number from 0 to 259,200 (72
  /// hours).
  /// </li>
  /// </ul>
  /// Valid for: Aurora MySQL DB clusters only
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the restored DB cluster to
  /// snapshots of the restored DB cluster. The default is not to copy them.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [dBClusterInstanceClass] :
  /// The compute and memory capacity of the each DB instance in the Multi-AZ DB
  /// cluster, for example db.m6gd.xlarge. Not all DB instance classes are
  /// available in all Amazon Web Services Regions, or for all database engines.
  ///
  /// For the full list of DB instance classes, and availability for your
  /// engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB
  /// instance class</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Valid for: Multi-AZ DB clusters only
  ///
  /// Parameter [dBClusterParameterGroupName] :
  /// The name of the custom DB cluster parameter group to associate with this
  /// DB cluster.
  ///
  /// If the <code>DBClusterParameterGroupName</code> parameter is omitted, the
  /// default DB cluster parameter group for the specified engine is used.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DB cluster parameter
  /// group.
  /// </li>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [dBSubnetGroupName] :
  /// The DB subnet group name to use for the new DB cluster.
  ///
  /// Constraints: If supplied, must match the name of an existing
  /// DBSubnetGroup.
  ///
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether to enable deletion protection for the DB cluster. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [domain] :
  /// The Active Directory directory ID to restore the DB cluster in. The domain
  /// must be created prior to this operation.
  ///
  /// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication
  /// to authenticate users that connect to the DB cluster. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos
  /// Authentication</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [domainIAMRoleName] :
  /// The name of the IAM role to be used when making API calls to the Directory
  /// Service.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [enableCloudwatchLogsExports] :
  /// The list of logs that the restored DB cluster is to export to CloudWatch
  /// Logs. The values in the list depend on the DB engine being used.
  ///
  /// <b>RDS for MySQL</b>
  ///
  /// Possible values are <code>error</code>, <code>general</code>, and
  /// <code>slowquery</code>.
  ///
  /// <b>RDS for PostgreSQL</b>
  ///
  /// Possible values are <code>postgresql</code> and <code>upgrade</code>.
  ///
  /// <b>Aurora MySQL</b>
  ///
  /// Possible values are <code>audit</code>, <code>error</code>,
  /// <code>general</code>, and <code>slowquery</code>.
  ///
  /// <b>Aurora PostgreSQL</b>
  ///
  /// Possible value is <code>postgresql</code>.
  ///
  /// For more information about exporting CloudWatch Logs for Amazon RDS, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// For more information about exporting CloudWatch Logs for Amazon Aurora,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [engineLifecycleSupport] :
  /// The life cycle type for this DB cluster.
  /// <note>
  /// By default, this value is set to
  /// <code>open-source-rds-extended-support</code>, which enrolls your DB
  /// cluster into Amazon RDS Extended Support. At the end of standard support,
  /// you can avoid charges for Extended Support by setting the value to
  /// <code>open-source-rds-extended-support-disabled</code>. In this case, RDS
  /// automatically upgrades your restored DB cluster to a higher engine
  /// version, if the major engine version is past its end of standard support
  /// date.
  /// </note>
  /// You can use this setting to enroll your DB cluster into Amazon RDS
  /// Extended Support. With RDS Extended Support, you can run the selected
  /// major engine version on your DB cluster past the end of standard support
  /// for that engine version. For more information, see the following sections:
  ///
  /// <ul>
  /// <li>
  /// Amazon Aurora (PostgreSQL only) - <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i>
  /// </li>
  /// <li>
  /// Amazon RDS - <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>
  /// </li>
  /// </ul>
  /// Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Valid Values: <code>open-source-rds-extended-support |
  /// open-source-rds-extended-support-disabled</code>
  ///
  /// Default: <code>open-source-rds-extended-support</code>
  ///
  /// Parameter [engineMode] :
  /// The engine mode of the new cluster. Specify <code>provisioned</code> or
  /// <code>serverless</code>, depending on the type of the cluster you are
  /// creating. You can create an Aurora Serverless v1 clone from a provisioned
  /// cluster, or a provisioned clone from an Aurora Serverless v1 cluster. To
  /// create a clone that is an Aurora Serverless v1 cluster, the original
  /// cluster must be an Aurora Serverless v1 cluster or an encrypted
  /// provisioned cluster.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [iops] :
  /// The amount of Provisioned IOPS (input/output operations per second) to be
  /// initially allocated for each DB instance in the Multi-AZ DB cluster.
  ///
  /// For information about valid IOPS values, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon
  /// RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Constraints: Must be a multiple between .5 and 50 of the storage amount
  /// for the DB instance.
  ///
  /// Valid for: Multi-AZ DB clusters only
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier to use when restoring an
  /// encrypted DB cluster from an encrypted DB cluster.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// You can restore to a new DB cluster and encrypt the new DB cluster with a
  /// KMS key that is different from the KMS key used to encrypt the source DB
  /// cluster. The new DB cluster is encrypted with the KMS key identified by
  /// the <code>KmsKeyId</code> parameter.
  ///
  /// If you don't specify a value for the <code>KmsKeyId</code> parameter, then
  /// the following occurs:
  ///
  /// <ul>
  /// <li>
  /// If the DB cluster is encrypted, then the restored DB cluster is encrypted
  /// using the KMS key that was used to encrypt the source DB cluster.
  /// </li>
  /// <li>
  /// If the DB cluster isn't encrypted, then the restored DB cluster isn't
  /// encrypted.
  /// </li>
  /// </ul>
  /// If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't
  /// encrypted, then the restore request is rejected.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [networkType] :
  /// The network type of the DB cluster.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>IPV4</code>
  /// </li>
  /// <li>
  /// <code>DUAL</code>
  /// </li>
  /// </ul>
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4
  /// protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User
  /// Guide.</i>
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [optionGroupName] :
  /// The name of the option group for the new DB cluster.
  ///
  /// DB clusters are associated with a default option group that can't be
  /// modified.
  ///
  /// Parameter [port] :
  /// The port number on which the new DB cluster accepts connections.
  ///
  /// Constraints: A value from <code>1150-65535</code>.
  ///
  /// Default: The default port for the engine.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB cluster is publicly accessible.
  ///
  /// When the DB cluster is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB cluster's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB cluster's VPC. Access to the DB cluster is ultimately
  /// controlled by the security group it uses. That public access is not
  /// permitted if the security group assigned to the DB cluster doesn't permit
  /// it.
  ///
  /// When the DB cluster isn't publicly accessible, it is an internal DB
  /// cluster with a DNS name that resolves to a private IP address.
  ///
  /// Default: The default behavior varies depending on whether
  /// <code>DBSubnetGroupName</code> is specified.
  ///
  /// If <code>DBSubnetGroupName</code> isn't specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the default VPC in the target Region doesn’t have an internet gateway
  /// attached to it, the DB cluster is private.
  /// </li>
  /// <li>
  /// If the default VPC in the target Region has an internet gateway attached
  /// to it, the DB cluster is public.
  /// </li>
  /// </ul>
  /// If <code>DBSubnetGroupName</code> is specified, and
  /// <code>PubliclyAccessible</code> isn't specified, the following applies:
  ///
  /// <ul>
  /// <li>
  /// If the subnets are part of a VPC that doesn’t have an internet gateway
  /// attached to it, the DB cluster is private.
  /// </li>
  /// <li>
  /// If the subnets are part of a VPC that has an internet gateway attached to
  /// it, the DB cluster is public.
  /// </li>
  /// </ul>
  /// Valid for: Multi-AZ DB clusters only
  ///
  /// Parameter [rdsCustomClusterConfiguration] :
  /// Reserved for future use.
  ///
  /// Parameter [restoreToTime] :
  /// The date and time to restore the DB cluster to.
  ///
  /// Valid Values: Value must be a time in Universal Coordinated Time (UTC)
  /// format
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be before the latest restorable time for the DB instance
  /// </li>
  /// <li>
  /// Must be specified if <code>UseLatestRestorableTime</code> parameter isn't
  /// provided
  /// </li>
  /// <li>
  /// Can't be specified if the <code>UseLatestRestorableTime</code> parameter
  /// is enabled
  /// </li>
  /// <li>
  /// Can't be specified if the <code>RestoreType</code> parameter is
  /// <code>copy-on-write</code>
  /// </li>
  /// </ul>
  /// Example: <code>2015-03-07T23:45:00Z</code>
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [restoreType] :
  /// The type of restore to be performed. You can specify one of the following
  /// values:
  ///
  /// <ul>
  /// <li>
  /// <code>full-copy</code> - The new DB cluster is restored as a full copy of
  /// the source DB cluster.
  /// </li>
  /// <li>
  /// <code>copy-on-write</code> - The new DB cluster is restored as a clone of
  /// the source DB cluster.
  /// </li>
  /// </ul>
  /// If you don't specify a <code>RestoreType</code> value, then the new DB
  /// cluster is restored as a full copy of the source DB cluster.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [scalingConfiguration] :
  /// For DB clusters in <code>serverless</code> DB engine mode, the scaling
  /// properties of the DB cluster.
  ///
  /// Valid for: Aurora DB clusters only
  ///
  /// Parameter [sourceDBClusterIdentifier] :
  /// The identifier of the source DB cluster from which to restore.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DBCluster.
  /// </li>
  /// </ul>
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [sourceDbClusterResourceId] :
  /// The resource ID of the source DB cluster from which to restore.
  ///
  /// Parameter [storageType] :
  /// Specifies the storage type to be associated with the DB cluster.
  ///
  /// When specified for a Multi-AZ DB cluster, a value for the
  /// <code>Iops</code> parameter is required.
  ///
  /// Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> (Aurora DB
  /// clusters); <code>io1</code> (Multi-AZ DB clusters)
  ///
  /// Default: <code>aurora</code> (Aurora DB clusters); <code>io1</code>
  /// (Multi-AZ DB clusters)
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [useLatestRestorableTime] :
  /// Specifies whether to restore the DB cluster to the latest restorable
  /// backup time. By default, the DB cluster isn't restored to the latest
  /// restorable backup time.
  ///
  /// Constraints: Can't be specified if <code>RestoreToTime</code> parameter is
  /// provided.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of VPC security groups that the new DB cluster belongs to.
  ///
  /// Valid for: Aurora DB clusters and Multi-AZ DB clusters
  Future<RestoreDBClusterToPointInTimeResult> restoreDBClusterToPointInTime({
    required String dBClusterIdentifier,
    int? backtrackWindow,
    bool? copyTagsToSnapshot,
    String? dBClusterInstanceClass,
    String? dBClusterParameterGroupName,
    String? dBSubnetGroupName,
    bool? deletionProtection,
    String? domain,
    String? domainIAMRoleName,
    List<String>? enableCloudwatchLogsExports,
    bool? enableIAMDatabaseAuthentication,
    String? engineLifecycleSupport,
    String? engineMode,
    int? iops,
    String? kmsKeyId,
    String? networkType,
    String? optionGroupName,
    int? port,
    bool? publiclyAccessible,
    RdsCustomClusterConfiguration? rdsCustomClusterConfiguration,
    DateTime? restoreToTime,
    String? restoreType,
    ScalingConfiguration? scalingConfiguration,
    ServerlessV2ScalingConfiguration? serverlessV2ScalingConfiguration,
    String? sourceDBClusterIdentifier,
    String? sourceDbClusterResourceId,
    String? storageType,
    List<Tag>? tags,
    bool? useLatestRestorableTime,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
      if (backtrackWindow != null)
        'BacktrackWindow': backtrackWindow.toString(),
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (dBClusterInstanceClass != null)
        'DBClusterInstanceClass': dBClusterInstanceClass,
      if (dBClusterParameterGroupName != null)
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (domain != null) 'Domain': domain,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (enableCloudwatchLogsExports != null)
        if (enableCloudwatchLogsExports.isEmpty)
          'EnableCloudwatchLogsExports': ''
        else
          for (var i1 = 0; i1 < enableCloudwatchLogsExports.length; i1++)
            'EnableCloudwatchLogsExports.member.${i1 + 1}':
                enableCloudwatchLogsExports[i1],
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (engineLifecycleSupport != null)
        'EngineLifecycleSupport': engineLifecycleSupport,
      if (engineMode != null) 'EngineMode': engineMode,
      if (iops != null) 'Iops': iops.toString(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (networkType != null) 'NetworkType': networkType,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (port != null) 'Port': port.toString(),
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
      if (rdsCustomClusterConfiguration != null)
        for (var e1 in rdsCustomClusterConfiguration.toQueryMap().entries)
          'RdsCustomClusterConfiguration.${e1.key}': e1.value,
      if (restoreToTime != null)
        'RestoreToTime': _s.iso8601ToJson(restoreToTime),
      if (restoreType != null) 'RestoreType': restoreType,
      if (scalingConfiguration != null)
        for (var e1 in scalingConfiguration.toQueryMap().entries)
          'ScalingConfiguration.${e1.key}': e1.value,
      if (serverlessV2ScalingConfiguration != null)
        for (var e1 in serverlessV2ScalingConfiguration.toQueryMap().entries)
          'ServerlessV2ScalingConfiguration.${e1.key}': e1.value,
      if (sourceDBClusterIdentifier != null)
        'SourceDBClusterIdentifier': sourceDBClusterIdentifier,
      if (sourceDbClusterResourceId != null)
        'SourceDbClusterResourceId': sourceDbClusterResourceId,
      if (storageType != null) 'StorageType': storageType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (useLatestRestorableTime != null)
        'UseLatestRestorableTime': useLatestRestorableTime.toString(),
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'RestoreDBClusterToPointInTime',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RestoreDBClusterToPointInTimeResult',
    );
    return RestoreDBClusterToPointInTimeResult.fromXml($result);
  }

  /// Creates a new DB instance from a DB snapshot. The target database is
  /// created from the source database restore point with most of the source's
  /// original configuration, including the default security group and DB
  /// parameter group. By default, the new DB instance is created as a Single-AZ
  /// deployment, except when the instance is a SQL Server instance that has an
  /// option group associated with mirroring. In this case, the instance becomes
  /// a Multi-AZ deployment, not a Single-AZ deployment.
  ///
  /// If you want to replace your original DB instance with the new, restored DB
  /// instance, then rename your original DB instance before you call the
  /// <code>RestoreDBInstanceFromDBSnapshot</code> operation. RDS doesn't allow
  /// two DB instances with the same name. After you have renamed your original
  /// DB instance with a different identifier, then you can pass the original
  /// name of the DB instance as the <code>DBInstanceIdentifier</code> in the
  /// call to the <code>RestoreDBInstanceFromDBSnapshot</code> operation. The
  /// result is that you replace the original DB instance with the DB instance
  /// created from the snapshot.
  ///
  /// If you are restoring from a shared manual DB snapshot, the
  /// <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB
  /// snapshot.
  /// <note>
  /// This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For
  /// Aurora, use <code>RestoreDBClusterFromSnapshot</code>.
  /// </note>
  ///
  /// May throw [DBInstanceAlreadyExistsFault].
  /// May throw [DBSnapshotNotFoundFault].
  /// May throw [InstanceQuotaExceededFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  /// May throw [InvalidDBSnapshotStateFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [InvalidRestoreFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [InvalidSubnet].
  /// May throw [ProvisionedIopsNotAvailableInAZFault].
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [StorageTypeNotSupportedFault].
  /// May throw [AuthorizationNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [DBSecurityGroupNotFoundFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [BackupPolicyNotFoundFault].
  /// May throw [NetworkTypeNotSupported].
  /// May throw [DBClusterSnapshotNotFoundFault].
  /// May throw [CertificateNotFoundFault].
  /// May throw [TenantDatabaseQuotaExceededFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The name of the DB instance to create from the DB snapshot. This parameter
  /// isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 numbers, letters, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>my-snapshot-id</code>
  ///
  /// Parameter [allocatedStorage] :
  /// The amount of storage (in gibibytes) to allocate initially for the DB
  /// instance. Follow the allocation rules specified in CreateDBInstance.
  /// <note>
  /// Be sure to allocate enough storage for your new DB instance so that the
  /// restore operation can succeed. You can also allocate additional storage
  /// for future growth.
  /// </note>
  ///
  /// Parameter [autoMinorVersionUpgrade] :
  /// Specifies whether to automatically apply minor version upgrades to the DB
  /// instance during the maintenance window.
  ///
  /// If you restore an RDS Custom DB instance, you must disable this parameter.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone (AZ) where the DB instance will be created.
  ///
  /// Default: A random, system-chosen Availability Zone.
  ///
  /// Constraint: You can't specify the <code>AvailabilityZone</code> parameter
  /// if the DB instance is a Multi-AZ deployment.
  ///
  /// Example: <code>us-east-1a</code>
  ///
  /// Parameter [backupTarget] :
  /// Specifies where automated backups and manual snapshots are stored for the
  /// restored DB instance.
  ///
  /// Possible values are <code>outposts</code> (Amazon Web Services Outposts)
  /// and <code>region</code> (Amazon Web Services Region). The default is
  /// <code>region</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
  /// with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// Parameter [cACertificateIdentifier] :
  /// The CA certificate identifier to use for the DB instance's server
  /// certificate.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the restored DB instance to
  /// snapshots of the DB instance.
  ///
  /// In most cases, tags aren't copied by default. However, when you restore a
  /// DB instance from a DB snapshot, RDS checks whether you specify new tags.
  /// If yes, the new tags are added to the restored DB instance. If there are
  /// no new tags, RDS looks for the tags from the source DB instance for the DB
  /// snapshot, and then adds those tags to the restored DB instance.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html#USER_Tagging.CopyTags">
  /// Copying tags to DB instance snapshots</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// Parameter [customIamInstanceProfile] :
  /// The instance profile associated with the underlying Amazon EC2 instance of
  /// an RDS Custom DB instance. The instance profile must meet the following
  /// requirements:
  ///
  /// <ul>
  /// <li>
  /// The profile must exist in your account.
  /// </li>
  /// <li>
  /// The profile must have an IAM role that Amazon EC2 has permissions to
  /// assume.
  /// </li>
  /// <li>
  /// The instance profile name and the associated IAM role name must start with
  /// the prefix <code>AWSRDSCustom</code>.
  /// </li>
  /// </ul>
  /// For the list of permissions required for the IAM role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
  /// Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting is required for RDS Custom.
  ///
  /// Parameter [dBClusterSnapshotIdentifier] :
  /// The identifier for the Multi-AZ DB cluster snapshot to restore from.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing Multi-AZ DB cluster snapshot.
  /// </li>
  /// <li>
  /// Can't be specified when <code>DBSnapshotIdentifier</code> is specified.
  /// </li>
  /// <li>
  /// Must be specified when <code>DBSnapshotIdentifier</code> isn't specified.
  /// </li>
  /// <li>
  /// If you are restoring from a shared manual Multi-AZ DB cluster snapshot,
  /// the <code>DBClusterSnapshotIdentifier</code> must be the ARN of the shared
  /// snapshot.
  /// </li>
  /// <li>
  /// Can't be the identifier of an Aurora DB cluster snapshot.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBInstanceClass] :
  /// The compute and memory capacity of the Amazon RDS DB instance, for example
  /// db.m4.large. Not all DB instance classes are available in all Amazon Web
  /// Services Regions, or for all database engines. For the full list of DB
  /// instance classes, and availability for your engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB
  /// Instance Class</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Default: The same DBInstanceClass as the original DB instance.
  ///
  /// Parameter [dBName] :
  /// The name of the database for the restored DB instance.
  ///
  /// This parameter only applies to RDS for Oracle and RDS for SQL Server DB
  /// instances. It doesn't apply to the other engines or to RDS Custom DB
  /// instances.
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group to associate with this DB instance.
  ///
  /// If you don't specify a value for <code>DBParameterGroupName</code>, then
  /// RDS uses the default <code>DBParameterGroup</code> for the specified DB
  /// engine.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DB parameter group.
  /// </li>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSnapshotIdentifier] :
  /// The identifier for the DB snapshot to restore from.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DB snapshot.
  /// </li>
  /// <li>
  /// Can't be specified when <code>DBClusterSnapshotIdentifier</code> is
  /// specified.
  /// </li>
  /// <li>
  /// Must be specified when <code>DBClusterSnapshotIdentifier</code> isn't
  /// specified.
  /// </li>
  /// <li>
  /// If you are restoring from a shared manual DB snapshot, the
  /// <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB
  /// snapshot.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSubnetGroupName] :
  /// The name of the DB subnet group to use for the new instance.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DB subnet group.
  /// </li>
  /// </ul>
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [dedicatedLogVolume] :
  /// Specifies whether to enable a dedicated log volume (DLV) for the DB
  /// instance.
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether to enable deletion protection for the DB instance. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
  /// Deleting a DB Instance</a>.
  ///
  /// Parameter [domain] :
  /// The Active Directory directory ID to restore the DB instance in. The
  /// domain/ must be created prior to this operation. Currently, you can create
  /// only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances
  /// in an Active Directory Domain.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
  /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [domainAuthSecretArn] :
  /// The ARN for the Secrets Manager secret with the credentials for the user
  /// joining the domain.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example:
  /// <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code>
  ///
  /// Parameter [domainDnsIps] :
  /// The IPv4 DNS IP addresses of your primary and secondary Active Directory
  /// domain controllers.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Two IP addresses must be provided. If there isn't a secondary domain
  /// controller, use the IP address of the primary domain controller for both
  /// entries in the list.
  /// </li>
  /// </ul>
  /// Example: <code>123.124.125.126,234.235.236.237</code>
  ///
  /// Parameter [domainFqdn] :
  /// The fully qualified domain name (FQDN) of an Active Directory domain.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example: <code>mymanagedADtest.mymanagedAD.mydomain</code>
  ///
  /// Parameter [domainIAMRoleName] :
  /// The name of the IAM role to use when making API calls to the Directory
  /// Service.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [domainOu] :
  /// The Active Directory organizational unit for your DB instance to join.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the distinguished name format.
  /// </li>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example:
  /// <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code>
  ///
  /// Parameter [enableCloudwatchLogsExports] :
  /// The list of logs for the restored DB instance to export to CloudWatch
  /// Logs. The values in the list depend on the DB engine. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [enableCustomerOwnedIp] :
  /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS
  /// on Outposts DB instance.
  ///
  /// A <i>CoIP</i> provides local or external connectivity to resources in your
  /// Outpost subnets through your on-premises network. For some use cases, a
  /// CoIP can provide lower latency for connections to the DB instance from
  /// outside of its virtual private cloud (VPC) on your local network.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// For more information about RDS on Outposts, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
  /// with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// For more information about CoIPs, see <a
  /// href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned
  /// IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// is disabled.
  ///
  /// For more information about IAM database authentication, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [engine] :
  /// The database engine to use for the new instance.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Default: The same as source
  ///
  /// Constraint: Must be compatible with the engine of the source. For example,
  /// you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mariadb</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [engineLifecycleSupport] :
  /// The life cycle type for this DB instance.
  /// <note>
  /// By default, this value is set to
  /// <code>open-source-rds-extended-support</code>, which enrolls your DB
  /// instance into Amazon RDS Extended Support. At the end of standard support,
  /// you can avoid charges for Extended Support by setting the value to
  /// <code>open-source-rds-extended-support-disabled</code>. In this case, RDS
  /// automatically upgrades your restored DB instance to a higher engine
  /// version, if the major engine version is past its end of standard support
  /// date.
  /// </note>
  /// You can use this setting to enroll your DB instance into Amazon RDS
  /// Extended Support. With RDS Extended Support, you can run the selected
  /// major engine version on your DB instance past the end of standard support
  /// for that engine version. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting applies only to RDS for MySQL and RDS for PostgreSQL. For
  /// Amazon Aurora DB instances, the life cycle type is managed by the DB
  /// cluster.
  ///
  /// Valid Values: <code>open-source-rds-extended-support |
  /// open-source-rds-extended-support-disabled</code>
  ///
  /// Default: <code>open-source-rds-extended-support</code>
  ///
  /// Parameter [iops] :
  /// Specifies the amount of provisioned IOPS for the DB instance, expressed in
  /// I/O operations per second. If this parameter isn't specified, the IOPS
  /// value is taken from the backup. If this parameter is set to 0, the new
  /// instance is converted to a non-PIOPS instance. The conversion takes
  /// additional time, though your DB instance is available for connections
  /// before the conversion starts.
  ///
  /// The provisioned IOPS value must follow the requirements for your database
  /// engine. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon
  /// RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Constraints: Must be an integer greater than 1000.
  ///
  /// Parameter [licenseModel] :
  /// License model information for the restored DB instance.
  /// <note>
  /// License models for RDS for Db2 require additional configuration. The Bring
  /// Your Own License (BYOL) model requires a custom parameter group. The Db2
  /// license through Amazon Web Services Marketplace model requires an Amazon
  /// Web Services Marketplace subscription. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/db2-licensing.html">RDS
  /// for Db2 licensing options</a> in the <i>Amazon RDS User Guide</i>.
  /// </note>
  /// This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// RDS for Db2 - <code>bring-your-own-license | marketplace-license</code>
  /// </li>
  /// <li>
  /// RDS for MariaDB - <code>general-public-license</code>
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - <code>license-included</code>
  /// </li>
  /// <li>
  /// RDS for MySQL - <code>general-public-license</code>
  /// </li>
  /// <li>
  /// RDS for Oracle - <code>bring-your-own-license | license-included</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - <code>postgresql-license</code>
  /// </li>
  /// </ul>
  /// Default: Same as the source.
  ///
  /// Parameter [multiAZ] :
  /// Specifies whether the DB instance is a Multi-AZ deployment.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Constraint: You can't specify the <code>AvailabilityZone</code> parameter
  /// if the DB instance is a Multi-AZ deployment.
  ///
  /// Parameter [networkType] :
  /// The network type of the DB instance.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>IPV4</code>
  /// </li>
  /// <li>
  /// <code>DUAL</code>
  /// </li>
  /// </ul>
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB instance. A <code>DBSubnetGroup</code> can support only the
  /// IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// Parameter [optionGroupName] :
  /// The name of the option group to be used for the restored DB instance.
  ///
  /// Permanent options, such as the TDE option for Oracle Advanced Security
  /// TDE, can't be removed from an option group, and that option group can't be
  /// removed from a DB instance after it is associated with a DB instance.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [port] :
  /// The port number on which the database accepts connections.
  ///
  /// Default: The same port as the original DB instance
  ///
  /// Constraints: Value must be <code>1150-65535</code>
  ///
  /// Parameter [processorFeatures] :
  /// The number of CPU cores and the number of threads per core for the DB
  /// instance class of the DB instance.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB instance is publicly accessible.
  ///
  /// When the DB instance is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB instance's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB instance's VPC. Access to the DB instance is ultimately
  /// controlled by the security group it uses. That public access is not
  /// permitted if the security group assigned to the DB instance doesn't permit
  /// it.
  ///
  /// When the DB instance isn't publicly accessible, it is an internal DB
  /// instance with a DNS name that resolves to a private IP address.
  ///
  /// For more information, see <a>CreateDBInstance</a>.
  ///
  /// Parameter [storageThroughput] :
  /// Specifies the storage throughput value for the DB instance.
  ///
  /// This setting doesn't apply to RDS Custom or Amazon Aurora.
  ///
  /// Parameter [storageType] :
  /// Specifies the storage type to be associated with the DB instance.
  ///
  /// Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code>
  ///
  /// If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>,
  /// you must also include a value for the <code>Iops</code> parameter.
  ///
  /// Default: <code>io1</code> if the <code>Iops</code> parameter is specified,
  /// otherwise <code>gp2</code>
  ///
  /// Parameter [tdeCredentialArn] :
  /// The ARN from the key store with which to associate the instance for TDE
  /// encryption.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [tdeCredentialPassword] :
  /// The password for the given ARN from the key store in order to access the
  /// device.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [useDefaultProcessorFeatures] :
  /// Specifies whether the DB instance class of the DB instance uses its
  /// default processor features.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of EC2 VPC security groups to associate with this DB instance.
  ///
  /// Default: The default EC2 VPC security group for the DB subnet group's VPC.
  Future<RestoreDBInstanceFromDBSnapshotResult>
      restoreDBInstanceFromDBSnapshot({
    required String dBInstanceIdentifier,
    int? allocatedStorage,
    bool? autoMinorVersionUpgrade,
    String? availabilityZone,
    String? backupTarget,
    String? cACertificateIdentifier,
    bool? copyTagsToSnapshot,
    String? customIamInstanceProfile,
    String? dBClusterSnapshotIdentifier,
    String? dBInstanceClass,
    String? dBName,
    String? dBParameterGroupName,
    String? dBSnapshotIdentifier,
    String? dBSubnetGroupName,
    bool? dedicatedLogVolume,
    bool? deletionProtection,
    String? domain,
    String? domainAuthSecretArn,
    List<String>? domainDnsIps,
    String? domainFqdn,
    String? domainIAMRoleName,
    String? domainOu,
    List<String>? enableCloudwatchLogsExports,
    bool? enableCustomerOwnedIp,
    bool? enableIAMDatabaseAuthentication,
    String? engine,
    String? engineLifecycleSupport,
    int? iops,
    String? licenseModel,
    bool? multiAZ,
    String? networkType,
    String? optionGroupName,
    int? port,
    List<ProcessorFeature>? processorFeatures,
    bool? publiclyAccessible,
    int? storageThroughput,
    String? storageType,
    List<Tag>? tags,
    String? tdeCredentialArn,
    String? tdeCredentialPassword,
    bool? useDefaultProcessorFeatures,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      if (allocatedStorage != null)
        'AllocatedStorage': allocatedStorage.toString(),
      if (autoMinorVersionUpgrade != null)
        'AutoMinorVersionUpgrade': autoMinorVersionUpgrade.toString(),
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (backupTarget != null) 'BackupTarget': backupTarget,
      if (cACertificateIdentifier != null)
        'CACertificateIdentifier': cACertificateIdentifier,
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (customIamInstanceProfile != null)
        'CustomIamInstanceProfile': customIamInstanceProfile,
      if (dBClusterSnapshotIdentifier != null)
        'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
      if (dBInstanceClass != null) 'DBInstanceClass': dBInstanceClass,
      if (dBName != null) 'DBName': dBName,
      if (dBParameterGroupName != null)
        'DBParameterGroupName': dBParameterGroupName,
      if (dBSnapshotIdentifier != null)
        'DBSnapshotIdentifier': dBSnapshotIdentifier,
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (dedicatedLogVolume != null)
        'DedicatedLogVolume': dedicatedLogVolume.toString(),
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (domain != null) 'Domain': domain,
      if (domainAuthSecretArn != null)
        'DomainAuthSecretArn': domainAuthSecretArn,
      if (domainDnsIps != null)
        if (domainDnsIps.isEmpty)
          'DomainDnsIps': ''
        else
          for (var i1 = 0; i1 < domainDnsIps.length; i1++)
            'DomainDnsIps.member.${i1 + 1}': domainDnsIps[i1],
      if (domainFqdn != null) 'DomainFqdn': domainFqdn,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (domainOu != null) 'DomainOu': domainOu,
      if (enableCloudwatchLogsExports != null)
        if (enableCloudwatchLogsExports.isEmpty)
          'EnableCloudwatchLogsExports': ''
        else
          for (var i1 = 0; i1 < enableCloudwatchLogsExports.length; i1++)
            'EnableCloudwatchLogsExports.member.${i1 + 1}':
                enableCloudwatchLogsExports[i1],
      if (enableCustomerOwnedIp != null)
        'EnableCustomerOwnedIp': enableCustomerOwnedIp.toString(),
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (engine != null) 'Engine': engine,
      if (engineLifecycleSupport != null)
        'EngineLifecycleSupport': engineLifecycleSupport,
      if (iops != null) 'Iops': iops.toString(),
      if (licenseModel != null) 'LicenseModel': licenseModel,
      if (multiAZ != null) 'MultiAZ': multiAZ.toString(),
      if (networkType != null) 'NetworkType': networkType,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (port != null) 'Port': port.toString(),
      if (processorFeatures != null)
        if (processorFeatures.isEmpty)
          'ProcessorFeatures': ''
        else
          for (var i1 = 0; i1 < processorFeatures.length; i1++)
            for (var e3 in processorFeatures[i1].toQueryMap().entries)
              'ProcessorFeatures.ProcessorFeature.${i1 + 1}.${e3.key}':
                  e3.value,
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
      if (storageThroughput != null)
        'StorageThroughput': storageThroughput.toString(),
      if (storageType != null) 'StorageType': storageType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (tdeCredentialArn != null) 'TdeCredentialArn': tdeCredentialArn,
      if (tdeCredentialPassword != null)
        'TdeCredentialPassword': tdeCredentialPassword,
      if (useDefaultProcessorFeatures != null)
        'UseDefaultProcessorFeatures': useDefaultProcessorFeatures.toString(),
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'RestoreDBInstanceFromDBSnapshot',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RestoreDBInstanceFromDBSnapshotResult',
    );
    return RestoreDBInstanceFromDBSnapshotResult.fromXml($result);
  }

  /// Amazon Relational Database Service (Amazon RDS) supports importing MySQL
  /// databases by using backup files. You can create a backup of your
  /// on-premises database, store it on Amazon Simple Storage Service (Amazon
  /// S3), and then restore the backup file onto a new Amazon RDS DB instance
  /// running MySQL. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing
  /// Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// This operation doesn't apply to RDS Custom.
  ///
  /// May throw [DBInstanceAlreadyExistsFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [DBSecurityGroupNotFoundFault].
  /// May throw [InstanceQuotaExceededFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [InvalidSubnet].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [InvalidS3BucketFault].
  /// May throw [ProvisionedIopsNotAvailableInAZFault].
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [StorageTypeNotSupportedFault].
  /// May throw [AuthorizationNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [BackupPolicyNotFoundFault].
  /// May throw [NetworkTypeNotSupported].
  /// May throw [CertificateNotFoundFault].
  ///
  /// Parameter [dBInstanceClass] :
  /// The compute and memory capacity of the DB instance, for example
  /// db.m4.large. Not all DB instance classes are available in all Amazon Web
  /// Services Regions, or for all database engines. For the full list of DB
  /// instance classes, and availability for your engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB
  /// Instance Class</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Importing from Amazon S3 isn't supported on the db.t2.micro DB instance
  /// class.
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The DB instance identifier. This parameter is stored as a lowercase
  /// string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  /// Example: <code>mydbinstance</code>
  ///
  /// Parameter [engine] :
  /// The name of the database engine to be used for this instance.
  ///
  /// Valid Values: <code>mysql</code>
  ///
  /// Parameter [s3BucketName] :
  /// The name of your Amazon S3 bucket that contains your database backup file.
  ///
  /// Parameter [s3IngestionRoleArn] :
  /// An Amazon Web Services Identity and Access Management (IAM) role with a
  /// trust policy and a permissions policy that allows Amazon RDS to access
  /// your Amazon S3 bucket. For information about this role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html#MySQL.Procedural.Importing.Enabling.IAM">
  /// Creating an IAM role manually</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Parameter [sourceEngine] :
  /// The name of the engine of your source database.
  ///
  /// Valid Values: <code>mysql</code>
  ///
  /// Parameter [sourceEngineVersion] :
  /// The version of the database that the backup files were created from.
  ///
  /// MySQL versions 5.6 and 5.7 are supported.
  ///
  /// Example: <code>5.6.40</code>
  ///
  /// Parameter [allocatedStorage] :
  /// The amount of storage (in gibibytes) to allocate initially for the DB
  /// instance. Follow the allocation rules specified in
  /// <code>CreateDBInstance</code>.
  /// <note>
  /// Be sure to allocate enough storage for your new DB instance so that the
  /// restore operation can succeed. You can also allocate additional storage
  /// for future growth.
  /// </note>
  ///
  /// Parameter [autoMinorVersionUpgrade] :
  /// Specifies whether to automatically apply minor engine upgrades to the DB
  /// instance during the maintenance window. By default, minor engine upgrades
  /// are not applied automatically.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone that the DB instance is created in. For information
  /// about Amazon Web Services Regions and Availability Zones, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions
  /// and Availability Zones</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Default: A random, system-chosen Availability Zone in the endpoint's
  /// Amazon Web Services Region.
  ///
  /// Example: <code>us-east-1d</code>
  ///
  /// Constraint: The <code>AvailabilityZone</code> parameter can't be specified
  /// if the DB instance is a Multi-AZ deployment. The specified Availability
  /// Zone must be in the same Amazon Web Services Region as the current
  /// endpoint.
  ///
  /// Parameter [backupRetentionPeriod] :
  /// The number of days for which automated backups are retained. Setting this
  /// parameter to a positive number enables backups. For more information, see
  /// <code>CreateDBInstance</code>.
  ///
  /// Parameter [cACertificateIdentifier] :
  /// The CA certificate identifier to use for the DB instance's server
  /// certificate.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the DB instance to snapshots of
  /// the DB instance. By default, tags are not copied.
  ///
  /// Parameter [dBName] :
  /// The name of the database to create when the DB instance is created. Follow
  /// the naming rules specified in <code>CreateDBInstance</code>.
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group to associate with this DB instance.
  ///
  /// If you do not specify a value for <code>DBParameterGroupName</code>, then
  /// the default <code>DBParameterGroup</code> for the specified DB engine is
  /// used.
  ///
  /// Parameter [dBSecurityGroups] :
  /// A list of DB security groups to associate with this DB instance.
  ///
  /// Default: The default DB security group for the database engine.
  ///
  /// Parameter [dBSubnetGroupName] :
  /// A DB subnet group to associate with this DB instance.
  ///
  /// Constraints: If supplied, must match the name of an existing
  /// DBSubnetGroup.
  ///
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [dedicatedLogVolume] :
  /// Specifies whether to enable a dedicated log volume (DLV) for the DB
  /// instance.
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether to enable deletion protection for the DB instance. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
  /// Deleting a DB Instance</a>.
  ///
  /// Parameter [enableCloudwatchLogsExports] :
  /// The list of logs that the restored DB instance is to export to CloudWatch
  /// Logs. The values in the list depend on the DB engine being used. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// For more information about IAM database authentication, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// Parameter [enablePerformanceInsights] :
  /// Specifies whether to enable Performance Insights for the DB instance.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using
  /// Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Parameter [engineLifecycleSupport] :
  /// The life cycle type for this DB instance.
  /// <note>
  /// By default, this value is set to
  /// <code>open-source-rds-extended-support</code>, which enrolls your DB
  /// instance into Amazon RDS Extended Support. At the end of standard support,
  /// you can avoid charges for Extended Support by setting the value to
  /// <code>open-source-rds-extended-support-disabled</code>. In this case, RDS
  /// automatically upgrades your restored DB instance to a higher engine
  /// version, if the major engine version is past its end of standard support
  /// date.
  /// </note>
  /// You can use this setting to enroll your DB instance into Amazon RDS
  /// Extended Support. With RDS Extended Support, you can run the selected
  /// major engine version on your DB instance past the end of standard support
  /// for that engine version. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting applies only to RDS for MySQL and RDS for PostgreSQL. For
  /// Amazon Aurora DB instances, the life cycle type is managed by the DB
  /// cluster.
  ///
  /// Valid Values: <code>open-source-rds-extended-support |
  /// open-source-rds-extended-support-disabled</code>
  ///
  /// Default: <code>open-source-rds-extended-support</code>
  ///
  /// Parameter [engineVersion] :
  /// The version number of the database engine to use. Choose the latest minor
  /// version of your database engine. For information about engine versions,
  /// see <code>CreateDBInstance</code>, or call
  /// <code>DescribeDBEngineVersions</code>.
  ///
  /// Parameter [iops] :
  /// The amount of Provisioned IOPS (input/output operations per second) to
  /// allocate initially for the DB instance. For information about valid IOPS
  /// values, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon
  /// RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier for an encrypted DB instance.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// If the <code>StorageEncrypted</code> parameter is enabled, and you do not
  /// specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS
  /// will use your default KMS key. There is a default KMS key for your Amazon
  /// Web Services account. Your Amazon Web Services account has a different
  /// default KMS key for each Amazon Web Services Region.
  ///
  /// Parameter [licenseModel] :
  /// The license model for this DB instance. Use
  /// <code>general-public-license</code>.
  ///
  /// Parameter [manageMasterUserPassword] :
  /// Specifies whether to manage the master user password with Amazon Web
  /// Services Secrets Manager.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't manage the master user password with Amazon Web Services Secrets
  /// Manager if <code>MasterUserPassword</code> is specified.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserPassword] :
  /// The password for the master user.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified if <code>ManageMasterUserPassword</code> is turned on.
  /// </li>
  /// <li>
  /// Can include any printable ASCII character except "/", """, or "@". For RDS
  /// for Oracle, can't include the "&amp;" (ampersand) or the "'" (single
  /// quotes) character.
  /// </li>
  /// </ul>
  /// Length Constraints:
  ///
  /// <ul>
  /// <li>
  /// RDS for Db2 - Must contain from 8 to 128 characters.
  /// </li>
  /// <li>
  /// RDS for MariaDB - Must contain from 8 to 41 characters.
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - Must contain from 8 to 128 characters.
  /// </li>
  /// <li>
  /// RDS for MySQL - Must contain from 8 to 41 characters.
  /// </li>
  /// <li>
  /// RDS for Oracle - Must contain from 8 to 30 characters.
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - Must contain from 8 to 128 characters.
  /// </li>
  /// </ul>
  ///
  /// Parameter [masterUserSecretKmsKeyId] :
  /// The Amazon Web Services KMS key identifier to encrypt a secret that is
  /// automatically generated and managed in Amazon Web Services Secrets
  /// Manager.
  ///
  /// This setting is valid only if the master user password is managed by RDS
  /// in Amazon Web Services Secrets Manager for the DB instance.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
  /// Web Services account, specify the key ARN or alias ARN.
  ///
  /// If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the
  /// <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If
  /// the secret is in a different Amazon Web Services account, then you can't
  /// use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and
  /// you must use a customer managed KMS key.
  ///
  /// There is a default KMS key for your Amazon Web Services account. Your
  /// Amazon Web Services account has a different default KMS key for each
  /// Amazon Web Services Region.
  ///
  /// Parameter [masterUsername] :
  /// The name for the master user.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 16 letters or numbers.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't be a reserved word for the chosen database engine.
  /// </li>
  /// </ul>
  ///
  /// Parameter [maxAllocatedStorage] :
  /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically
  /// scale the storage of the DB instance.
  ///
  /// For more information about this setting, including limitations that apply
  /// to it, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
  /// Managing capacity automatically with Amazon RDS storage autoscaling</a> in
  /// the <i>Amazon RDS User Guide</i>.
  ///
  /// Parameter [monitoringInterval] :
  /// The interval, in seconds, between points when Enhanced Monitoring metrics
  /// are collected for the DB instance. To disable collecting Enhanced
  /// Monitoring metrics, specify 0.
  ///
  /// If <code>MonitoringRoleArn</code> is specified, then you must also set
  /// <code>MonitoringInterval</code> to a value other than 0.
  ///
  /// Valid Values: 0, 1, 5, 10, 15, 30, 60
  ///
  /// Default: <code>0</code>
  ///
  /// Parameter [monitoringRoleArn] :
  /// The ARN for the IAM role that permits RDS to send enhanced monitoring
  /// metrics to Amazon CloudWatch Logs. For example,
  /// <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on
  /// creating a monitoring role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting
  /// Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// If <code>MonitoringInterval</code> is set to a value other than 0, then
  /// you must supply a <code>MonitoringRoleArn</code> value.
  ///
  /// Parameter [multiAZ] :
  /// Specifies whether the DB instance is a Multi-AZ deployment. If the DB
  /// instance is a Multi-AZ deployment, you can't set the
  /// <code>AvailabilityZone</code> parameter.
  ///
  /// Parameter [networkType] :
  /// The network type of the DB instance.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>IPV4</code>
  /// </li>
  /// <li>
  /// <code>DUAL</code>
  /// </li>
  /// </ul>
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB instance. A <code>DBSubnetGroup</code> can support only the
  /// IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// Parameter [optionGroupName] :
  /// The name of the option group to associate with this DB instance. If this
  /// argument is omitted, the default option group for the specified engine is
  /// used.
  ///
  /// Parameter [performanceInsightsKMSKeyId] :
  /// The Amazon Web Services KMS key identifier for encryption of Performance
  /// Insights data.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  ///
  /// If you do not specify a value for
  /// <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your
  /// default KMS key. There is a default KMS key for your Amazon Web Services
  /// account. Your Amazon Web Services account has a different default KMS key
  /// for each Amazon Web Services Region.
  ///
  /// Parameter [performanceInsightsRetentionPeriod] :
  /// The number of days to retain Performance Insights data. The default is 7
  /// days. The following values are valid:
  ///
  /// <ul>
  /// <li>
  /// 7
  /// </li>
  /// <li>
  /// <i>month</i> * 31, where <i>month</i> is a number of months from 1-23
  /// </li>
  /// <li>
  /// 731
  /// </li>
  /// </ul>
  /// For example, the following values are valid:
  ///
  /// <ul>
  /// <li>
  /// 93 (3 months * 31)
  /// </li>
  /// <li>
  /// 341 (11 months * 31)
  /// </li>
  /// <li>
  /// 589 (19 months * 31)
  /// </li>
  /// <li>
  /// 731
  /// </li>
  /// </ul>
  /// If you specify a retention period such as 94, which isn't a valid value,
  /// RDS issues an error.
  ///
  /// Parameter [port] :
  /// The port number on which the database accepts connections.
  ///
  /// Type: Integer
  ///
  /// Valid Values: <code>1150</code>-<code>65535</code>
  ///
  /// Default: <code>3306</code>
  ///
  /// Parameter [preferredBackupWindow] :
  /// The time range each day during which automated backups are created if
  /// automated backups are enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup
  /// window</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>hh24:mi-hh24:mi</code>.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred maintenance window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [preferredMaintenanceWindow] :
  /// The time range each week during which system maintenance can occur, in
  /// Universal Coordinated Time (UTC). For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon
  /// RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.
  /// </li>
  /// <li>
  /// Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
  /// </li>
  /// <li>
  /// Must be in Universal Coordinated Time (UTC).
  /// </li>
  /// <li>
  /// Must not conflict with the preferred backup window.
  /// </li>
  /// <li>
  /// Must be at least 30 minutes.
  /// </li>
  /// </ul>
  ///
  /// Parameter [processorFeatures] :
  /// The number of CPU cores and the number of threads per core for the DB
  /// instance class of the DB instance.
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB instance is publicly accessible.
  ///
  /// When the DB instance is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB instance's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB instance's VPC. Access to the DB instance is ultimately
  /// controlled by the security group it uses. That public access is not
  /// permitted if the security group assigned to the DB instance doesn't permit
  /// it.
  ///
  /// When the DB instance isn't publicly accessible, it is an internal DB
  /// instance with a DNS name that resolves to a private IP address.
  ///
  /// For more information, see <a>CreateDBInstance</a>.
  ///
  /// Parameter [s3Prefix] :
  /// The prefix of your Amazon S3 bucket.
  ///
  /// Parameter [storageEncrypted] :
  /// Specifies whether the new DB instance is encrypted or not.
  ///
  /// Parameter [storageThroughput] :
  /// Specifies the storage throughput value for the DB instance.
  ///
  /// This setting doesn't apply to RDS Custom or Amazon Aurora.
  ///
  /// Parameter [storageType] :
  /// Specifies the storage type to be associated with the DB instance.
  ///
  /// Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code>
  ///
  /// If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>,
  /// you must also include a value for the <code>Iops</code> parameter.
  ///
  /// Default: <code>io1</code> if the <code>Iops</code> parameter is specified;
  /// otherwise <code>gp2</code>
  ///
  /// Parameter [tags] :
  /// A list of tags to associate with this DB instance. For more information,
  /// see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging
  /// Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
  ///
  /// Parameter [useDefaultProcessorFeatures] :
  /// Specifies whether the DB instance class of the DB instance uses its
  /// default processor features.
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of VPC security groups to associate with this DB instance.
  Future<RestoreDBInstanceFromS3Result> restoreDBInstanceFromS3({
    required String dBInstanceClass,
    required String dBInstanceIdentifier,
    required String engine,
    required String s3BucketName,
    required String s3IngestionRoleArn,
    required String sourceEngine,
    required String sourceEngineVersion,
    int? allocatedStorage,
    bool? autoMinorVersionUpgrade,
    String? availabilityZone,
    int? backupRetentionPeriod,
    String? cACertificateIdentifier,
    bool? copyTagsToSnapshot,
    String? dBName,
    String? dBParameterGroupName,
    List<String>? dBSecurityGroups,
    String? dBSubnetGroupName,
    bool? dedicatedLogVolume,
    bool? deletionProtection,
    List<String>? enableCloudwatchLogsExports,
    bool? enableIAMDatabaseAuthentication,
    bool? enablePerformanceInsights,
    String? engineLifecycleSupport,
    String? engineVersion,
    int? iops,
    String? kmsKeyId,
    String? licenseModel,
    bool? manageMasterUserPassword,
    String? masterUserPassword,
    String? masterUserSecretKmsKeyId,
    String? masterUsername,
    int? maxAllocatedStorage,
    int? monitoringInterval,
    String? monitoringRoleArn,
    bool? multiAZ,
    String? networkType,
    String? optionGroupName,
    String? performanceInsightsKMSKeyId,
    int? performanceInsightsRetentionPeriod,
    int? port,
    String? preferredBackupWindow,
    String? preferredMaintenanceWindow,
    List<ProcessorFeature>? processorFeatures,
    bool? publiclyAccessible,
    String? s3Prefix,
    bool? storageEncrypted,
    int? storageThroughput,
    String? storageType,
    List<Tag>? tags,
    bool? useDefaultProcessorFeatures,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'DBInstanceClass': dBInstanceClass,
      'DBInstanceIdentifier': dBInstanceIdentifier,
      'Engine': engine,
      'S3BucketName': s3BucketName,
      'S3IngestionRoleArn': s3IngestionRoleArn,
      'SourceEngine': sourceEngine,
      'SourceEngineVersion': sourceEngineVersion,
      if (allocatedStorage != null)
        'AllocatedStorage': allocatedStorage.toString(),
      if (autoMinorVersionUpgrade != null)
        'AutoMinorVersionUpgrade': autoMinorVersionUpgrade.toString(),
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (backupRetentionPeriod != null)
        'BackupRetentionPeriod': backupRetentionPeriod.toString(),
      if (cACertificateIdentifier != null)
        'CACertificateIdentifier': cACertificateIdentifier,
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (dBName != null) 'DBName': dBName,
      if (dBParameterGroupName != null)
        'DBParameterGroupName': dBParameterGroupName,
      if (dBSecurityGroups != null)
        if (dBSecurityGroups.isEmpty)
          'DBSecurityGroups': ''
        else
          for (var i1 = 0; i1 < dBSecurityGroups.length; i1++)
            'DBSecurityGroups.DBSecurityGroupName.${i1 + 1}':
                dBSecurityGroups[i1],
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (dedicatedLogVolume != null)
        'DedicatedLogVolume': dedicatedLogVolume.toString(),
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (enableCloudwatchLogsExports != null)
        if (enableCloudwatchLogsExports.isEmpty)
          'EnableCloudwatchLogsExports': ''
        else
          for (var i1 = 0; i1 < enableCloudwatchLogsExports.length; i1++)
            'EnableCloudwatchLogsExports.member.${i1 + 1}':
                enableCloudwatchLogsExports[i1],
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (enablePerformanceInsights != null)
        'EnablePerformanceInsights': enablePerformanceInsights.toString(),
      if (engineLifecycleSupport != null)
        'EngineLifecycleSupport': engineLifecycleSupport,
      if (engineVersion != null) 'EngineVersion': engineVersion,
      if (iops != null) 'Iops': iops.toString(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (licenseModel != null) 'LicenseModel': licenseModel,
      if (manageMasterUserPassword != null)
        'ManageMasterUserPassword': manageMasterUserPassword.toString(),
      if (masterUserPassword != null) 'MasterUserPassword': masterUserPassword,
      if (masterUserSecretKmsKeyId != null)
        'MasterUserSecretKmsKeyId': masterUserSecretKmsKeyId,
      if (masterUsername != null) 'MasterUsername': masterUsername,
      if (maxAllocatedStorage != null)
        'MaxAllocatedStorage': maxAllocatedStorage.toString(),
      if (monitoringInterval != null)
        'MonitoringInterval': monitoringInterval.toString(),
      if (monitoringRoleArn != null) 'MonitoringRoleArn': monitoringRoleArn,
      if (multiAZ != null) 'MultiAZ': multiAZ.toString(),
      if (networkType != null) 'NetworkType': networkType,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (performanceInsightsKMSKeyId != null)
        'PerformanceInsightsKMSKeyId': performanceInsightsKMSKeyId,
      if (performanceInsightsRetentionPeriod != null)
        'PerformanceInsightsRetentionPeriod':
            performanceInsightsRetentionPeriod.toString(),
      if (port != null) 'Port': port.toString(),
      if (preferredBackupWindow != null)
        'PreferredBackupWindow': preferredBackupWindow,
      if (preferredMaintenanceWindow != null)
        'PreferredMaintenanceWindow': preferredMaintenanceWindow,
      if (processorFeatures != null)
        if (processorFeatures.isEmpty)
          'ProcessorFeatures': ''
        else
          for (var i1 = 0; i1 < processorFeatures.length; i1++)
            for (var e3 in processorFeatures[i1].toQueryMap().entries)
              'ProcessorFeatures.ProcessorFeature.${i1 + 1}.${e3.key}':
                  e3.value,
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
      if (s3Prefix != null) 'S3Prefix': s3Prefix,
      if (storageEncrypted != null)
        'StorageEncrypted': storageEncrypted.toString(),
      if (storageThroughput != null)
        'StorageThroughput': storageThroughput.toString(),
      if (storageType != null) 'StorageType': storageType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (useDefaultProcessorFeatures != null)
        'UseDefaultProcessorFeatures': useDefaultProcessorFeatures.toString(),
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'RestoreDBInstanceFromS3',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RestoreDBInstanceFromS3Result',
    );
    return RestoreDBInstanceFromS3Result.fromXml($result);
  }

  /// Restores a DB instance to an arbitrary point in time. You can restore to
  /// any point in time before the time identified by the
  /// <code>LatestRestorableTime</code> property. You can restore to a point up
  /// to the number of days specified by the <code>BackupRetentionPeriod</code>
  /// property.
  ///
  /// The target database is created with most of the original configuration,
  /// but in a system-selected Availability Zone, with the default security
  /// group, the default subnet group, and the default DB parameter group. By
  /// default, the new DB instance is created as a single-AZ deployment except
  /// when the instance is a SQL Server instance that has an option group that
  /// is associated with mirroring; in this case, the instance becomes a
  /// mirrored deployment and not a single-AZ deployment.
  /// <note>
  /// This operation doesn't apply to Aurora MySQL and Aurora PostgreSQL. For
  /// Aurora, use <code>RestoreDBClusterToPointInTime</code>.
  /// </note>
  ///
  /// May throw [DBInstanceAlreadyExistsFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InstanceQuotaExceededFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [PointInTimeRestoreNotEnabledFault].
  /// May throw [StorageQuotaExceededFault].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [InvalidRestoreFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [InvalidSubnet].
  /// May throw [ProvisionedIopsNotAvailableInAZFault].
  /// May throw [OptionGroupNotFoundFault].
  /// May throw [StorageTypeNotSupportedFault].
  /// May throw [AuthorizationNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [DBSecurityGroupNotFoundFault].
  /// May throw [DomainNotFoundFault].
  /// May throw [BackupPolicyNotFoundFault].
  /// May throw [DBParameterGroupNotFoundFault].
  /// May throw [DBInstanceAutomatedBackupNotFoundFault].
  /// May throw [NetworkTypeNotSupported].
  /// May throw [TenantDatabaseQuotaExceededFault].
  /// May throw [CertificateNotFoundFault].
  ///
  /// Parameter [targetDBInstanceIdentifier] :
  /// The name of the new DB instance to create.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must contain from 1 to 63 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  ///
  /// Parameter [allocatedStorage] :
  /// The amount of storage (in gibibytes) to allocate initially for the DB
  /// instance. Follow the allocation rules specified in
  /// <code>CreateDBInstance</code>.
  /// <note>
  /// Be sure to allocate enough storage for your new DB instance so that the
  /// restore operation can succeed. You can also allocate additional storage
  /// for future growth.
  /// </note>
  ///
  /// Parameter [autoMinorVersionUpgrade] :
  /// Specifies whether minor version upgrades are applied automatically to the
  /// DB instance during the maintenance window.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [availabilityZone] :
  /// The Availability Zone (AZ) where the DB instance will be created.
  ///
  /// Default: A random, system-chosen Availability Zone.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// You can't specify the <code>AvailabilityZone</code> parameter if the DB
  /// instance is a Multi-AZ deployment.
  /// </li>
  /// </ul>
  /// Example: <code>us-east-1a</code>
  ///
  /// Parameter [backupTarget] :
  /// The location for storing automated backups and manual snapshots for the
  /// restored DB instance.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>outposts</code> (Amazon Web Services Outposts)
  /// </li>
  /// <li>
  /// <code>region</code> (Amazon Web Services Region)
  /// </li>
  /// </ul>
  /// Default: <code>region</code>
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
  /// with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// Parameter [cACertificateIdentifier] :
  /// The CA certificate identifier to use for the DB instance's server
  /// certificate.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  ///
  /// Parameter [copyTagsToSnapshot] :
  /// Specifies whether to copy all tags from the restored DB instance to
  /// snapshots of the DB instance. By default, tags are not copied.
  ///
  /// Parameter [customIamInstanceProfile] :
  /// The instance profile associated with the underlying Amazon EC2 instance of
  /// an RDS Custom DB instance. The instance profile must meet the following
  /// requirements:
  ///
  /// <ul>
  /// <li>
  /// The profile must exist in your account.
  /// </li>
  /// <li>
  /// The profile must have an IAM role that Amazon EC2 has permissions to
  /// assume.
  /// </li>
  /// <li>
  /// The instance profile name and the associated IAM role name must start with
  /// the prefix <code>AWSRDSCustom</code>.
  /// </li>
  /// </ul>
  /// For the list of permissions required for the IAM role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
  /// Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting is required for RDS Custom.
  ///
  /// Parameter [dBInstanceClass] :
  /// The compute and memory capacity of the Amazon RDS DB instance, for example
  /// db.m4.large. Not all DB instance classes are available in all Amazon Web
  /// Services Regions, or for all database engines. For the full list of DB
  /// instance classes, and availability for your engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB
  /// Instance Class</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Default: The same DB instance class as the original DB instance.
  ///
  /// Parameter [dBName] :
  /// The database name for the restored DB instance.
  ///
  /// This parameter doesn't apply to the following DB instances:
  ///
  /// <ul>
  /// <li>
  /// RDS Custom
  /// </li>
  /// <li>
  /// RDS for Db2
  /// </li>
  /// <li>
  /// RDS for MariaDB
  /// </li>
  /// <li>
  /// RDS for MySQL
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBParameterGroupName] :
  /// The name of the DB parameter group to associate with this DB instance.
  ///
  /// If you do not specify a value for <code>DBParameterGroupName</code>, then
  /// the default <code>DBParameterGroup</code> for the specified DB engine is
  /// used.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DB parameter group.
  /// </li>
  /// <li>
  /// Must be 1 to 255 letters, numbers, or hyphens.
  /// </li>
  /// <li>
  /// First character must be a letter.
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens.
  /// </li>
  /// </ul>
  ///
  /// Parameter [dBSubnetGroupName] :
  /// The DB subnet group name to use for the new instance.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If supplied, must match the name of an existing DB subnet group.
  /// </li>
  /// </ul>
  /// Example: <code>mydbsubnetgroup</code>
  ///
  /// Parameter [dedicatedLogVolume] :
  /// Specifies whether to enable a dedicated log volume (DLV) for the DB
  /// instance.
  ///
  /// Parameter [deletionProtection] :
  /// Specifies whether the DB instance has deletion protection enabled. The
  /// database can't be deleted when deletion protection is enabled. By default,
  /// deletion protection isn't enabled. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
  /// Deleting a DB Instance</a>.
  ///
  /// Parameter [domain] :
  /// The Active Directory directory ID to restore the DB instance in. Create
  /// the domain before running this command. Currently, you can create only the
  /// MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an
  /// Active Directory Domain.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
  /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// Parameter [domainAuthSecretArn] :
  /// The ARN for the Secrets Manager secret with the credentials for the user
  /// joining the domain.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example:
  /// <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code>
  ///
  /// Parameter [domainDnsIps] :
  /// The IPv4 DNS IP addresses of your primary and secondary Active Directory
  /// domain controllers.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Two IP addresses must be provided. If there isn't a secondary domain
  /// controller, use the IP address of the primary domain controller for both
  /// entries in the list.
  /// </li>
  /// </ul>
  /// Example: <code>123.124.125.126,234.235.236.237</code>
  ///
  /// Parameter [domainFqdn] :
  /// The fully qualified domain name (FQDN) of an Active Directory domain.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example: <code>mymanagedADtest.mymanagedAD.mydomain</code>
  ///
  /// Parameter [domainIAMRoleName] :
  /// The name of the IAM role to use when making API calls to the Directory
  /// Service.
  ///
  /// This setting doesn't apply to RDS Custom DB instances.
  ///
  /// Parameter [domainOu] :
  /// The Active Directory organizational unit for your DB instance to join.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be in the distinguished name format.
  /// </li>
  /// <li>
  /// Can't be longer than 64 characters.
  /// </li>
  /// </ul>
  /// Example:
  /// <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code>
  ///
  /// Parameter [enableCloudwatchLogsExports] :
  /// The list of logs that the restored DB instance is to export to CloudWatch
  /// Logs. The values in the list depend on the DB engine being used. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
  /// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User
  /// Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [enableCustomerOwnedIp] :
  /// Specifies whether to enable a customer-owned IP address (CoIP) for an RDS
  /// on Outposts DB instance.
  ///
  /// A <i>CoIP</i> provides local or external connectivity to resources in your
  /// Outpost subnets through your on-premises network. For some use cases, a
  /// CoIP can provide lower latency for connections to the DB instance from
  /// outside of its virtual private cloud (VPC) on your local network.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// For more information about RDS on Outposts, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
  /// with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// For more information about CoIPs, see <a
  /// href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned
  /// IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.
  ///
  /// Parameter [enableIAMDatabaseAuthentication] :
  /// Specifies whether to enable mapping of Amazon Web Services Identity and
  /// Access Management (IAM) accounts to database accounts. By default, mapping
  /// isn't enabled.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// For more information about IAM database authentication, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
  /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon
  /// RDS User Guide.</i>
  ///
  /// Parameter [engine] :
  /// The database engine to use for the new instance.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>db2-ae</code>
  /// </li>
  /// <li>
  /// <code>db2-se</code>
  /// </li>
  /// <li>
  /// <code>mariadb</code>
  /// </li>
  /// <li>
  /// <code>mysql</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee</code>
  /// </li>
  /// <li>
  /// <code>oracle-ee-cdb</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2</code>
  /// </li>
  /// <li>
  /// <code>oracle-se2-cdb</code>
  /// </li>
  /// <li>
  /// <code>postgres</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ee</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-se</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-ex</code>
  /// </li>
  /// <li>
  /// <code>sqlserver-web</code>
  /// </li>
  /// </ul>
  /// Default: The same as source
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be compatible with the engine of the source.
  /// </li>
  /// </ul>
  ///
  /// Parameter [engineLifecycleSupport] :
  /// The life cycle type for this DB instance.
  /// <note>
  /// By default, this value is set to
  /// <code>open-source-rds-extended-support</code>, which enrolls your DB
  /// instance into Amazon RDS Extended Support. At the end of standard support,
  /// you can avoid charges for Extended Support by setting the value to
  /// <code>open-source-rds-extended-support-disabled</code>. In this case, RDS
  /// automatically upgrades your restored DB instance to a higher engine
  /// version, if the major engine version is past its end of standard support
  /// date.
  /// </note>
  /// You can use this setting to enroll your DB instance into Amazon RDS
  /// Extended Support. With RDS Extended Support, you can run the selected
  /// major engine version on your DB instance past the end of standard support
  /// for that engine version. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using
  /// Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting applies only to RDS for MySQL and RDS for PostgreSQL. For
  /// Amazon Aurora DB instances, the life cycle type is managed by the DB
  /// cluster.
  ///
  /// Valid Values: <code>open-source-rds-extended-support |
  /// open-source-rds-extended-support-disabled</code>
  ///
  /// Default: <code>open-source-rds-extended-support</code>
  ///
  /// Parameter [iops] :
  /// The amount of Provisioned IOPS (input/output operations per second) to
  /// initially allocate for the DB instance.
  ///
  /// This setting doesn't apply to SQL Server.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be an integer greater than 1000.
  /// </li>
  /// </ul>
  ///
  /// Parameter [licenseModel] :
  /// The license model information for the restored DB instance.
  /// <note>
  /// License models for RDS for Db2 require additional configuration. The Bring
  /// Your Own License (BYOL) model requires a custom parameter group. The Db2
  /// license through Amazon Web Services Marketplace model requires an Amazon
  /// Web Services Marketplace subscription. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/db2-licensing.html">RDS
  /// for Db2 licensing options</a> in the <i>Amazon RDS User Guide</i>.
  /// </note>
  /// This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// RDS for Db2 - <code>bring-your-own-license | marketplace-license</code>
  /// </li>
  /// <li>
  /// RDS for MariaDB - <code>general-public-license</code>
  /// </li>
  /// <li>
  /// RDS for Microsoft SQL Server - <code>license-included</code>
  /// </li>
  /// <li>
  /// RDS for MySQL - <code>general-public-license</code>
  /// </li>
  /// <li>
  /// RDS for Oracle - <code>bring-your-own-license | license-included</code>
  /// </li>
  /// <li>
  /// RDS for PostgreSQL - <code>postgresql-license</code>
  /// </li>
  /// </ul>
  /// Default: Same as the source.
  ///
  /// Parameter [maxAllocatedStorage] :
  /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically
  /// scale the storage of the DB instance.
  ///
  /// For more information about this setting, including limitations that apply
  /// to it, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
  /// Managing capacity automatically with Amazon RDS storage autoscaling</a> in
  /// the <i>Amazon RDS User Guide</i>.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [multiAZ] :
  /// Secifies whether the DB instance is a Multi-AZ deployment.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// You can't specify the <code>AvailabilityZone</code> parameter if the DB
  /// instance is a Multi-AZ deployment.
  /// </li>
  /// </ul>
  ///
  /// Parameter [networkType] :
  /// The network type of the DB instance.
  ///
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB instance. A <code>DBSubnetGroup</code> can support only the
  /// IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon RDS User
  /// Guide.</i>
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>IPV4</code>
  /// </li>
  /// <li>
  /// <code>DUAL</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [optionGroupName] :
  /// The name of the option group to use for the restored DB instance.
  ///
  /// Permanent options, such as the TDE option for Oracle Advanced Security
  /// TDE, can't be removed from an option group, and that option group can't be
  /// removed from a DB instance after it is associated with a DB instance
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [port] :
  /// The port number on which the database accepts connections.
  ///
  /// Default: The same port as the original DB instance.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// The value must be <code>1150-65535</code>.
  /// </li>
  /// </ul>
  ///
  /// Parameter [processorFeatures] :
  /// The number of CPU cores and the number of threads per core for the DB
  /// instance class of the DB instance.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [publiclyAccessible] :
  /// Specifies whether the DB instance is publicly accessible.
  ///
  /// When the DB cluster is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB cluster's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB cluster's VPC. Access to the DB cluster is ultimately
  /// controlled by the security group it uses. That public access isn't
  /// permitted if the security group assigned to the DB cluster doesn't permit
  /// it.
  ///
  /// When the DB instance isn't publicly accessible, it is an internal DB
  /// instance with a DNS name that resolves to a private IP address.
  ///
  /// For more information, see <a>CreateDBInstance</a>.
  ///
  /// Parameter [restoreTime] :
  /// The date and time to restore from.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be a time in Universal Coordinated Time (UTC) format.
  /// </li>
  /// <li>
  /// Must be before the latest restorable time for the DB instance.
  /// </li>
  /// <li>
  /// Can't be specified if the <code>UseLatestRestorableTime</code> parameter
  /// is enabled.
  /// </li>
  /// </ul>
  /// Example: <code>2009-09-07T23:45:00Z</code>
  ///
  /// Parameter [sourceDBInstanceAutomatedBackupsArn] :
  /// The Amazon Resource Name (ARN) of the replicated automated backups from
  /// which to restore, for example,
  /// <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [sourceDBInstanceIdentifier] :
  /// The identifier of the source DB instance from which to restore.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing DB instance.
  /// </li>
  /// </ul>
  ///
  /// Parameter [sourceDbiResourceId] :
  /// The resource ID of the source DB instance from which to restore.
  ///
  /// Parameter [storageThroughput] :
  /// The storage throughput value for the DB instance.
  ///
  /// This setting doesn't apply to RDS Custom or Amazon Aurora.
  ///
  /// Parameter [storageType] :
  /// The storage type to associate with the DB instance.
  ///
  /// Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code>
  ///
  /// Default: <code>io1</code>, if the <code>Iops</code> parameter is
  /// specified. Otherwise, <code>gp2</code>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>,
  /// you must also include a value for the <code>Iops</code> parameter.
  /// </li>
  /// </ul>
  ///
  /// Parameter [tdeCredentialArn] :
  /// The ARN from the key store with which to associate the instance for TDE
  /// encryption.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [tdeCredentialPassword] :
  /// The password for the given ARN from the key store in order to access the
  /// device.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [useDefaultProcessorFeatures] :
  /// Specifies whether the DB instance class of the DB instance uses its
  /// default processor features.
  ///
  /// This setting doesn't apply to RDS Custom.
  ///
  /// Parameter [useLatestRestorableTime] :
  /// Specifies whether the DB instance is restored from the latest backup time.
  /// By default, the DB instance isn't restored from the latest backup time.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Can't be specified if the <code>RestoreTime</code> parameter is provided.
  /// </li>
  /// </ul>
  ///
  /// Parameter [vpcSecurityGroupIds] :
  /// A list of EC2 VPC security groups to associate with this DB instance.
  ///
  /// Default: The default EC2 VPC security group for the DB subnet group's VPC.
  Future<RestoreDBInstanceToPointInTimeResult> restoreDBInstanceToPointInTime({
    required String targetDBInstanceIdentifier,
    int? allocatedStorage,
    bool? autoMinorVersionUpgrade,
    String? availabilityZone,
    String? backupTarget,
    String? cACertificateIdentifier,
    bool? copyTagsToSnapshot,
    String? customIamInstanceProfile,
    String? dBInstanceClass,
    String? dBName,
    String? dBParameterGroupName,
    String? dBSubnetGroupName,
    bool? dedicatedLogVolume,
    bool? deletionProtection,
    String? domain,
    String? domainAuthSecretArn,
    List<String>? domainDnsIps,
    String? domainFqdn,
    String? domainIAMRoleName,
    String? domainOu,
    List<String>? enableCloudwatchLogsExports,
    bool? enableCustomerOwnedIp,
    bool? enableIAMDatabaseAuthentication,
    String? engine,
    String? engineLifecycleSupport,
    int? iops,
    String? licenseModel,
    int? maxAllocatedStorage,
    bool? multiAZ,
    String? networkType,
    String? optionGroupName,
    int? port,
    List<ProcessorFeature>? processorFeatures,
    bool? publiclyAccessible,
    DateTime? restoreTime,
    String? sourceDBInstanceAutomatedBackupsArn,
    String? sourceDBInstanceIdentifier,
    String? sourceDbiResourceId,
    int? storageThroughput,
    String? storageType,
    List<Tag>? tags,
    String? tdeCredentialArn,
    String? tdeCredentialPassword,
    bool? useDefaultProcessorFeatures,
    bool? useLatestRestorableTime,
    List<String>? vpcSecurityGroupIds,
  }) async {
    final $request = <String, String>{
      'TargetDBInstanceIdentifier': targetDBInstanceIdentifier,
      if (allocatedStorage != null)
        'AllocatedStorage': allocatedStorage.toString(),
      if (autoMinorVersionUpgrade != null)
        'AutoMinorVersionUpgrade': autoMinorVersionUpgrade.toString(),
      if (availabilityZone != null) 'AvailabilityZone': availabilityZone,
      if (backupTarget != null) 'BackupTarget': backupTarget,
      if (cACertificateIdentifier != null)
        'CACertificateIdentifier': cACertificateIdentifier,
      if (copyTagsToSnapshot != null)
        'CopyTagsToSnapshot': copyTagsToSnapshot.toString(),
      if (customIamInstanceProfile != null)
        'CustomIamInstanceProfile': customIamInstanceProfile,
      if (dBInstanceClass != null) 'DBInstanceClass': dBInstanceClass,
      if (dBName != null) 'DBName': dBName,
      if (dBParameterGroupName != null)
        'DBParameterGroupName': dBParameterGroupName,
      if (dBSubnetGroupName != null) 'DBSubnetGroupName': dBSubnetGroupName,
      if (dedicatedLogVolume != null)
        'DedicatedLogVolume': dedicatedLogVolume.toString(),
      if (deletionProtection != null)
        'DeletionProtection': deletionProtection.toString(),
      if (domain != null) 'Domain': domain,
      if (domainAuthSecretArn != null)
        'DomainAuthSecretArn': domainAuthSecretArn,
      if (domainDnsIps != null)
        if (domainDnsIps.isEmpty)
          'DomainDnsIps': ''
        else
          for (var i1 = 0; i1 < domainDnsIps.length; i1++)
            'DomainDnsIps.member.${i1 + 1}': domainDnsIps[i1],
      if (domainFqdn != null) 'DomainFqdn': domainFqdn,
      if (domainIAMRoleName != null) 'DomainIAMRoleName': domainIAMRoleName,
      if (domainOu != null) 'DomainOu': domainOu,
      if (enableCloudwatchLogsExports != null)
        if (enableCloudwatchLogsExports.isEmpty)
          'EnableCloudwatchLogsExports': ''
        else
          for (var i1 = 0; i1 < enableCloudwatchLogsExports.length; i1++)
            'EnableCloudwatchLogsExports.member.${i1 + 1}':
                enableCloudwatchLogsExports[i1],
      if (enableCustomerOwnedIp != null)
        'EnableCustomerOwnedIp': enableCustomerOwnedIp.toString(),
      if (enableIAMDatabaseAuthentication != null)
        'EnableIAMDatabaseAuthentication':
            enableIAMDatabaseAuthentication.toString(),
      if (engine != null) 'Engine': engine,
      if (engineLifecycleSupport != null)
        'EngineLifecycleSupport': engineLifecycleSupport,
      if (iops != null) 'Iops': iops.toString(),
      if (licenseModel != null) 'LicenseModel': licenseModel,
      if (maxAllocatedStorage != null)
        'MaxAllocatedStorage': maxAllocatedStorage.toString(),
      if (multiAZ != null) 'MultiAZ': multiAZ.toString(),
      if (networkType != null) 'NetworkType': networkType,
      if (optionGroupName != null) 'OptionGroupName': optionGroupName,
      if (port != null) 'Port': port.toString(),
      if (processorFeatures != null)
        if (processorFeatures.isEmpty)
          'ProcessorFeatures': ''
        else
          for (var i1 = 0; i1 < processorFeatures.length; i1++)
            for (var e3 in processorFeatures[i1].toQueryMap().entries)
              'ProcessorFeatures.ProcessorFeature.${i1 + 1}.${e3.key}':
                  e3.value,
      if (publiclyAccessible != null)
        'PubliclyAccessible': publiclyAccessible.toString(),
      if (restoreTime != null) 'RestoreTime': _s.iso8601ToJson(restoreTime),
      if (sourceDBInstanceAutomatedBackupsArn != null)
        'SourceDBInstanceAutomatedBackupsArn':
            sourceDBInstanceAutomatedBackupsArn,
      if (sourceDBInstanceIdentifier != null)
        'SourceDBInstanceIdentifier': sourceDBInstanceIdentifier,
      if (sourceDbiResourceId != null)
        'SourceDbiResourceId': sourceDbiResourceId,
      if (storageThroughput != null)
        'StorageThroughput': storageThroughput.toString(),
      if (storageType != null) 'StorageType': storageType,
      if (tags != null)
        if (tags.isEmpty)
          'Tags': ''
        else
          for (var i1 = 0; i1 < tags.length; i1++)
            for (var e3 in tags[i1].toQueryMap().entries)
              'Tags.Tag.${i1 + 1}.${e3.key}': e3.value,
      if (tdeCredentialArn != null) 'TdeCredentialArn': tdeCredentialArn,
      if (tdeCredentialPassword != null)
        'TdeCredentialPassword': tdeCredentialPassword,
      if (useDefaultProcessorFeatures != null)
        'UseDefaultProcessorFeatures': useDefaultProcessorFeatures.toString(),
      if (useLatestRestorableTime != null)
        'UseLatestRestorableTime': useLatestRestorableTime.toString(),
      if (vpcSecurityGroupIds != null)
        if (vpcSecurityGroupIds.isEmpty)
          'VpcSecurityGroupIds': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupIds.length; i1++)
            'VpcSecurityGroupIds.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupIds[i1],
    };
    final $result = await _protocol.send(
      $request,
      action: 'RestoreDBInstanceToPointInTime',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RestoreDBInstanceToPointInTimeResult',
    );
    return RestoreDBInstanceToPointInTimeResult.fromXml($result);
  }

  /// Revokes ingress from a DBSecurityGroup for previously authorized IP ranges
  /// or EC2 or VPC security groups. Required parameters for this API are one of
  /// CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either
  /// EC2SecurityGroupName or EC2SecurityGroupId).
  /// <note>
  /// EC2-Classic was retired on August 15, 2022. If you haven't migrated from
  /// EC2-Classic to a VPC, we recommend that you migrate as soon as possible.
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate
  /// from EC2-Classic to a VPC</a> in the <i>Amazon EC2 User Guide</i>, the
  /// blog <a
  /// href="http://aws.amazon.com/blogs/aws/ec2-classic-is-retiring-heres-how-to-prepare/">EC2-Classic
  /// Networking is Retiring – Here’s How to Prepare</a>, and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.Non-VPC2VPC.html">Moving
  /// a DB instance not in a VPC into a VPC</a> in the <i>Amazon RDS User
  /// Guide</i>.
  /// </note>
  ///
  /// May throw [DBSecurityGroupNotFoundFault].
  /// May throw [AuthorizationNotFoundFault].
  /// May throw [InvalidDBSecurityGroupStateFault].
  ///
  /// Parameter [dBSecurityGroupName] :
  /// The name of the DB security group to revoke ingress from.
  ///
  /// Parameter [cidrip] :
  /// The IP range to revoke access from. Must be a valid CIDR range. If
  /// <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>,
  /// <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code>
  /// can't be provided.
  ///
  /// Parameter [eC2SecurityGroupId] :
  /// The id of the EC2 security group to revoke access from. For VPC DB
  /// security groups, <code>EC2SecurityGroupId</code> must be provided.
  /// Otherwise, EC2SecurityGroupOwnerId and either
  /// <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must
  /// be provided.
  ///
  /// Parameter [eC2SecurityGroupName] :
  /// The name of the EC2 security group to revoke access from. For VPC DB
  /// security groups, <code>EC2SecurityGroupId</code> must be provided.
  /// Otherwise, EC2SecurityGroupOwnerId and either
  /// <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must
  /// be provided.
  ///
  /// Parameter [eC2SecurityGroupOwnerId] :
  /// The Amazon Web Services account number of the owner of the EC2 security
  /// group specified in the <code>EC2SecurityGroupName</code> parameter. The
  /// Amazon Web Services access key ID isn't an acceptable value. For VPC DB
  /// security groups, <code>EC2SecurityGroupId</code> must be provided.
  /// Otherwise, EC2SecurityGroupOwnerId and either
  /// <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must
  /// be provided.
  Future<RevokeDBSecurityGroupIngressResult> revokeDBSecurityGroupIngress({
    required String dBSecurityGroupName,
    String? cidrip,
    String? eC2SecurityGroupId,
    String? eC2SecurityGroupName,
    String? eC2SecurityGroupOwnerId,
  }) async {
    final $request = <String, String>{
      'DBSecurityGroupName': dBSecurityGroupName,
      if (cidrip != null) 'CIDRIP': cidrip,
      if (eC2SecurityGroupId != null) 'EC2SecurityGroupId': eC2SecurityGroupId,
      if (eC2SecurityGroupName != null)
        'EC2SecurityGroupName': eC2SecurityGroupName,
      if (eC2SecurityGroupOwnerId != null)
        'EC2SecurityGroupOwnerId': eC2SecurityGroupOwnerId,
    };
    final $result = await _protocol.send(
      $request,
      action: 'RevokeDBSecurityGroupIngress',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'RevokeDBSecurityGroupIngressResult',
    );
    return RevokeDBSecurityGroupIngressResult.fromXml($result);
  }

  /// Starts a database activity stream to monitor activity on the database. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">
  /// Monitoring Amazon Aurora with Database Activity Streams</a> in the
  /// <i>Amazon Aurora User Guide</i> or <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/DBActivityStreams.html">
  /// Monitoring Amazon RDS with Database Activity Streams</a> in the <i>Amazon
  /// RDS User Guide</i>.
  ///
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [ResourceNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier for encrypting messages in the
  /// database activity stream. The Amazon Web Services KMS key identifier is
  /// the key ARN, key ID, alias ARN, or alias name for the KMS key.
  ///
  /// Parameter [mode] :
  /// Specifies the mode of the database activity stream. Database events such
  /// as a change or access generate an activity stream event. The database
  /// session can handle these events either synchronously or asynchronously.
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the DB cluster, for example,
  /// <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ///
  /// Parameter [applyImmediately] :
  /// Specifies whether or not the database activity stream is to start as soon
  /// as possible, regardless of the maintenance window for the database.
  ///
  /// Parameter [engineNativeAuditFieldsIncluded] :
  /// Specifies whether the database activity stream includes engine-native
  /// audit fields. This option applies to an Oracle or Microsoft SQL Server DB
  /// instance. By default, no engine-native audit fields are included.
  Future<StartActivityStreamResponse> startActivityStream({
    required String kmsKeyId,
    required ActivityStreamMode mode,
    required String resourceArn,
    bool? applyImmediately,
    bool? engineNativeAuditFieldsIncluded,
  }) async {
    final $request = <String, String>{
      'KmsKeyId': kmsKeyId,
      'Mode': mode.value,
      'ResourceArn': resourceArn,
      if (applyImmediately != null)
        'ApplyImmediately': applyImmediately.toString(),
      if (engineNativeAuditFieldsIncluded != null)
        'EngineNativeAuditFieldsIncluded':
            engineNativeAuditFieldsIncluded.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'StartActivityStream',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'StartActivityStreamResult',
    );
    return StartActivityStreamResponse.fromXml($result);
  }

  /// Starts an Amazon Aurora DB cluster that was stopped using the Amazon Web
  /// Services console, the stop-db-cluster CLI command, or the
  /// <code>StopDBCluster</code> operation.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html">
  /// Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  /// <note>
  /// This operation only applies to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier of the Amazon Aurora DB cluster to be started.
  /// This parameter is stored as a lowercase string.
  Future<StartDBClusterResult> startDBCluster({
    required String dBClusterIdentifier,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'StartDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'StartDBClusterResult',
    );
    return StartDBClusterResult.fromXml($result);
  }

  /// Starts an Amazon RDS DB instance that was stopped using the Amazon Web
  /// Services console, the stop-db-instance CLI command, or the
  /// <code>StopDBInstance</code> operation.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html">
  /// Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the
  /// <i>Amazon RDS User Guide.</i>
  /// <note>
  /// This command doesn't apply to RDS Custom, Aurora MySQL, and Aurora
  /// PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code>
  /// instead.
  /// </note>
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [InsufficientDBInstanceCapacityFault].
  /// May throw [DBSubnetGroupNotFoundFault].
  /// May throw [DBSubnetGroupDoesNotCoverEnoughAZs].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidSubnet].
  /// May throw [InvalidVPCNetworkStateFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [AuthorizationNotFoundFault].
  /// May throw [KMSKeyNotAccessibleFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The user-supplied instance identifier.
  Future<StartDBInstanceResult> startDBInstance({
    required String dBInstanceIdentifier,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'StartDBInstance',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'StartDBInstanceResult',
    );
    return StartDBInstanceResult.fromXml($result);
  }

  /// Enables replication of automated backups to a different Amazon Web
  /// Services Region.
  ///
  /// This command doesn't apply to RDS Custom.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html">
  /// Replicating Automated Backups to Another Amazon Web Services Region</a> in
  /// the <i>Amazon RDS User Guide.</i>
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [DBInstanceAutomatedBackupQuotaExceededFault].
  /// May throw [StorageTypeNotSupportedFault].
  ///
  /// Parameter [sourceDBInstanceArn] :
  /// The Amazon Resource Name (ARN) of the source DB instance for the
  /// replicated automated backups, for example,
  /// <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.
  ///
  /// Parameter [backupRetentionPeriod] :
  /// The retention period for the replicated automated backups.
  ///
  /// Parameter [kmsKeyId] :
  /// The Amazon Web Services KMS key identifier for encryption of the
  /// replicated automated backups. The KMS key ID is the Amazon Resource Name
  /// (ARN) for the KMS encryption key in the destination Amazon Web Services
  /// Region, for example,
  /// <code>arn:aws:kms:us-east-1:123456789012:key/AKIAIOSFODNN7EXAMPLE</code>.
  ///
  /// Parameter [preSignedUrl] :
  /// In an Amazon Web Services GovCloud (US) Region, an URL that contains a
  /// Signature Version 4 signed request for the
  /// <code>StartDBInstanceAutomatedBackupsReplication</code> operation to call
  /// in the Amazon Web Services Region of the source DB instance. The presigned
  /// URL must be a valid request for the
  /// <code>StartDBInstanceAutomatedBackupsReplication</code> API operation that
  /// can run in the Amazon Web Services Region that contains the source DB
  /// instance.
  ///
  /// This setting applies only to Amazon Web Services GovCloud (US) Regions.
  /// It's ignored in other Amazon Web Services Regions.
  ///
  /// To learn how to generate a Signature Version 4 signed request, see <a
  /// href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
  /// Authenticating Requests: Using Query Parameters (Amazon Web Services
  /// Signature Version 4)</a> and <a
  /// href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
  /// Signature Version 4 Signing Process</a>.
  /// <note>
  /// If you are using an Amazon Web Services SDK tool or the CLI, you can
  /// specify <code>SourceRegion</code> (or <code>--source-region</code> for the
  /// CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying
  /// <code>SourceRegion</code> autogenerates a presigned URL that is a valid
  /// request for the operation that can run in the source Amazon Web Services
  /// Region.
  /// </note>
  Future<StartDBInstanceAutomatedBackupsReplicationResult>
      startDBInstanceAutomatedBackupsReplication({
    required String sourceDBInstanceArn,
    int? backupRetentionPeriod,
    String? kmsKeyId,
    String? preSignedUrl,
  }) async {
    final $request = <String, String>{
      'SourceDBInstanceArn': sourceDBInstanceArn,
      if (backupRetentionPeriod != null)
        'BackupRetentionPeriod': backupRetentionPeriod.toString(),
      if (kmsKeyId != null) 'KmsKeyId': kmsKeyId,
      if (preSignedUrl != null) 'PreSignedUrl': preSignedUrl,
    };
    final $result = await _protocol.send(
      $request,
      action: 'StartDBInstanceAutomatedBackupsReplication',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'StartDBInstanceAutomatedBackupsReplicationResult',
    );
    return StartDBInstanceAutomatedBackupsReplicationResult.fromXml($result);
  }

  /// Starts an export of DB snapshot or DB cluster data to Amazon S3. The
  /// provided IAM role must have access to the S3 bucket.
  ///
  /// You can't export snapshot data from Db2 or RDS Custom DB instances.
  ///
  /// You can't export cluster data from Multi-AZ DB clusters.
  ///
  /// For more information on exporting DB snapshot data, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ExportSnapshot.html">Exporting
  /// DB snapshot data to Amazon S3</a> in the <i>Amazon RDS User Guide</i> or
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-export-snapshot.html">Exporting
  /// DB cluster snapshot data to Amazon S3</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  ///
  /// For more information on exporting DB cluster data, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/export-cluster-data.html">Exporting
  /// DB cluster data to Amazon S3</a> in the <i>Amazon Aurora User Guide</i>.
  ///
  /// May throw [DBSnapshotNotFoundFault].
  /// May throw [DBClusterSnapshotNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [ExportTaskAlreadyExistsFault].
  /// May throw [InvalidS3BucketFault].
  /// May throw [IamRoleNotFoundFault].
  /// May throw [IamRoleMissingPermissionsFault].
  /// May throw [InvalidExportOnlyFault].
  /// May throw [KMSKeyNotAccessibleFault].
  /// May throw [InvalidExportSourceStateFault].
  ///
  /// Parameter [exportTaskIdentifier] :
  /// A unique identifier for the export task. This ID isn't an identifier for
  /// the Amazon S3 bucket where the data is to be exported.
  ///
  /// Parameter [iamRoleArn] :
  /// The name of the IAM role to use for writing to the Amazon S3 bucket when
  /// exporting a snapshot or cluster.
  ///
  /// In the IAM policy attached to your IAM role, include the following
  /// required actions to allow the transfer of files from Amazon RDS or Amazon
  /// Aurora to an S3 bucket:
  ///
  /// <ul>
  /// <li>
  /// s3:PutObject*
  /// </li>
  /// <li>
  /// s3:GetObject*
  /// </li>
  /// <li>
  /// s3:ListBucket
  /// </li>
  /// <li>
  /// s3:DeleteObject*
  /// </li>
  /// <li>
  /// s3:GetBucketLocation
  /// </li>
  /// </ul>
  /// In the policy, include the resources to identify the S3 bucket and objects
  /// in the bucket. The following list of resources shows the Amazon Resource
  /// Name (ARN) format for accessing S3:
  ///
  /// <ul>
  /// <li>
  /// <code>arn:aws:s3:::<i>your-s3-bucket</i> </code>
  /// </li>
  /// <li>
  /// <code>arn:aws:s3:::<i>your-s3-bucket</i>/*</code>
  /// </li>
  /// </ul>
  ///
  /// Parameter [kmsKeyId] :
  /// The ID of the Amazon Web Services KMS key to use to encrypt the data
  /// exported to Amazon S3. The Amazon Web Services KMS key identifier is the
  /// key ARN, key ID, alias ARN, or alias name for the KMS key. The caller of
  /// this operation must be authorized to run the following operations. These
  /// can be set in the Amazon Web Services KMS key policy:
  ///
  /// <ul>
  /// <li>
  /// kms:Encrypt
  /// </li>
  /// <li>
  /// kms:Decrypt
  /// </li>
  /// <li>
  /// kms:GenerateDataKey
  /// </li>
  /// <li>
  /// kms:GenerateDataKeyWithoutPlaintext
  /// </li>
  /// <li>
  /// kms:ReEncryptFrom
  /// </li>
  /// <li>
  /// kms:ReEncryptTo
  /// </li>
  /// <li>
  /// kms:CreateGrant
  /// </li>
  /// <li>
  /// kms:DescribeKey
  /// </li>
  /// <li>
  /// kms:RetireGrant
  /// </li>
  /// </ul>
  ///
  /// Parameter [s3BucketName] :
  /// The name of the Amazon S3 bucket to export the snapshot or cluster data
  /// to.
  ///
  /// Parameter [sourceArn] :
  /// The Amazon Resource Name (ARN) of the snapshot or cluster to export to
  /// Amazon S3.
  ///
  /// Parameter [exportOnly] :
  /// The data to be exported from the snapshot or cluster. If this parameter
  /// isn't provided, all of the data is exported.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>database</code> - Export all the data from a specified database.
  /// </li>
  /// <li>
  /// <code>database.table</code> <i>table-name</i> - Export a table of the
  /// snapshot or cluster. This format is valid only for RDS for MySQL, RDS for
  /// MariaDB, and Aurora MySQL.
  /// </li>
  /// <li>
  /// <code>database.schema</code> <i>schema-name</i> - Export a database schema
  /// of the snapshot or cluster. This format is valid only for RDS for
  /// PostgreSQL and Aurora PostgreSQL.
  /// </li>
  /// <li>
  /// <code>database.schema.table</code> <i>table-name</i> - Export a table of
  /// the database schema. This format is valid only for RDS for PostgreSQL and
  /// Aurora PostgreSQL.
  /// </li>
  /// </ul>
  ///
  /// Parameter [s3Prefix] :
  /// The Amazon S3 bucket prefix to use as the file name and path of the
  /// exported data.
  Future<ExportTask> startExportTask({
    required String exportTaskIdentifier,
    required String iamRoleArn,
    required String kmsKeyId,
    required String s3BucketName,
    required String sourceArn,
    List<String>? exportOnly,
    String? s3Prefix,
  }) async {
    final $request = <String, String>{
      'ExportTaskIdentifier': exportTaskIdentifier,
      'IamRoleArn': iamRoleArn,
      'KmsKeyId': kmsKeyId,
      'S3BucketName': s3BucketName,
      'SourceArn': sourceArn,
      if (exportOnly != null)
        if (exportOnly.isEmpty)
          'ExportOnly': ''
        else
          for (var i1 = 0; i1 < exportOnly.length; i1++)
            'ExportOnly.member.${i1 + 1}': exportOnly[i1],
      if (s3Prefix != null) 'S3Prefix': s3Prefix,
    };
    final $result = await _protocol.send(
      $request,
      action: 'StartExportTask',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'StartExportTaskResult',
    );
    return ExportTask.fromXml($result);
  }

  /// Stops a database activity stream that was started using the Amazon Web
  /// Services console, the <code>start-activity-stream</code> CLI command, or
  /// the <code>StartActivityStream</code> operation.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">
  /// Monitoring Amazon Aurora with Database Activity Streams</a> in the
  /// <i>Amazon Aurora User Guide</i> or <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/DBActivityStreams.html">
  /// Monitoring Amazon RDS with Database Activity Streams</a> in the <i>Amazon
  /// RDS User Guide</i>.
  ///
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [ResourceNotFoundFault].
  /// May throw [DBClusterNotFoundFault].
  /// May throw [DBInstanceNotFoundFault].
  ///
  /// Parameter [resourceArn] :
  /// The Amazon Resource Name (ARN) of the DB cluster for the database activity
  /// stream. For example,
  /// <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ///
  /// Parameter [applyImmediately] :
  /// Specifies whether or not the database activity stream is to stop as soon
  /// as possible, regardless of the maintenance window for the database.
  Future<StopActivityStreamResponse> stopActivityStream({
    required String resourceArn,
    bool? applyImmediately,
  }) async {
    final $request = <String, String>{
      'ResourceArn': resourceArn,
      if (applyImmediately != null)
        'ApplyImmediately': applyImmediately.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'StopActivityStream',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'StopActivityStreamResult',
    );
    return StopActivityStreamResponse.fromXml($result);
  }

  /// Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora
  /// retains the DB cluster's metadata, including its endpoints and DB
  /// parameter groups. Aurora also retains the transaction logs so you can do a
  /// point-in-time restore if necessary.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html">
  /// Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  /// <note>
  /// This operation only applies to Aurora DB clusters.
  /// </note>
  ///
  /// May throw [DBClusterNotFoundFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBClusterIdentifier] :
  /// The DB cluster identifier of the Amazon Aurora DB cluster to be stopped.
  /// This parameter is stored as a lowercase string.
  Future<StopDBClusterResult> stopDBCluster({
    required String dBClusterIdentifier,
  }) async {
    final $request = <String, String>{
      'DBClusterIdentifier': dBClusterIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'StopDBCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'StopDBClusterResult',
    );
    return StopDBClusterResult.fromXml($result);
  }

  /// Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS
  /// retains the DB instance's metadata, including its endpoint, DB parameter
  /// group, and option group membership. Amazon RDS also retains the
  /// transaction logs so you can do a point-in-time restore if necessary.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html">
  /// Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS
  /// User Guide.</i>
  /// <note>
  /// This command doesn't apply to RDS Custom, Aurora MySQL, and Aurora
  /// PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead.
  /// </note>
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  /// May throw [DBSnapshotAlreadyExistsFault].
  /// May throw [SnapshotQuotaExceededFault].
  /// May throw [InvalidDBClusterStateFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The user-supplied instance identifier.
  ///
  /// Parameter [dBSnapshotIdentifier] :
  /// The user-supplied instance identifier of the DB Snapshot created
  /// immediately before the DB instance is stopped.
  Future<StopDBInstanceResult> stopDBInstance({
    required String dBInstanceIdentifier,
    String? dBSnapshotIdentifier,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
      if (dBSnapshotIdentifier != null)
        'DBSnapshotIdentifier': dBSnapshotIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'StopDBInstance',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'StopDBInstanceResult',
    );
    return StopDBInstanceResult.fromXml($result);
  }

  /// Stops automated backup replication for a DB instance.
  ///
  /// This command doesn't apply to RDS Custom, Aurora MySQL, and Aurora
  /// PostgreSQL.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html">
  /// Replicating Automated Backups to Another Amazon Web Services Region</a> in
  /// the <i>Amazon RDS User Guide.</i>
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [sourceDBInstanceArn] :
  /// The Amazon Resource Name (ARN) of the source DB instance for which to stop
  /// replicating automate backups, for example,
  /// <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.
  Future<StopDBInstanceAutomatedBackupsReplicationResult>
      stopDBInstanceAutomatedBackupsReplication({
    required String sourceDBInstanceArn,
  }) async {
    final $request = <String, String>{
      'SourceDBInstanceArn': sourceDBInstanceArn,
    };
    final $result = await _protocol.send(
      $request,
      action: 'StopDBInstanceAutomatedBackupsReplication',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'StopDBInstanceAutomatedBackupsReplicationResult',
    );
    return StopDBInstanceAutomatedBackupsReplicationResult.fromXml($result);
  }

  /// Switches over a blue/green deployment.
  ///
  /// Before you switch over, production traffic is routed to the databases in
  /// the blue environment. After you switch over, production traffic is routed
  /// to the databases in the green environment.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using
  /// Amazon RDS Blue/Green Deployments for database updates</a> in the
  /// <i>Amazon RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html">Using
  /// Amazon RDS Blue/Green Deployments for database updates</a> in the
  /// <i>Amazon Aurora User Guide</i>.
  ///
  /// May throw [BlueGreenDeploymentNotFoundFault].
  /// May throw [InvalidBlueGreenDeploymentStateFault].
  ///
  /// Parameter [blueGreenDeploymentIdentifier] :
  /// The unique identifier of the blue/green deployment.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match an existing blue/green deployment identifier.
  /// </li>
  /// </ul>
  ///
  /// Parameter [switchoverTimeout] :
  /// The amount of time, in seconds, for the switchover to complete.
  ///
  /// Default: 300
  ///
  /// If the switchover takes longer than the specified duration, then any
  /// changes are rolled back, and no changes are made to the environments.
  Future<SwitchoverBlueGreenDeploymentResponse> switchoverBlueGreenDeployment({
    required String blueGreenDeploymentIdentifier,
    int? switchoverTimeout,
  }) async {
    _s.validateNumRange(
      'switchoverTimeout',
      switchoverTimeout,
      30,
      1152921504606846976,
    );
    final $request = <String, String>{
      'BlueGreenDeploymentIdentifier': blueGreenDeploymentIdentifier,
      if (switchoverTimeout != null)
        'SwitchoverTimeout': switchoverTimeout.toString(),
    };
    final $result = await _protocol.send(
      $request,
      action: 'SwitchoverBlueGreenDeployment',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'SwitchoverBlueGreenDeploymentResult',
    );
    return SwitchoverBlueGreenDeploymentResponse.fromXml($result);
  }

  /// Switches over the specified secondary DB cluster to be the new primary DB
  /// cluster in the global database cluster. Switchover operations were
  /// previously called "managed planned failovers."
  ///
  /// Aurora promotes the specified secondary cluster to assume full read/write
  /// capabilities and demotes the current primary cluster to a secondary
  /// (read-only) cluster, maintaining the orginal replication topology. All
  /// secondary clusters are synchronized with the primary at the beginning of
  /// the process so the new primary continues operations for the Aurora global
  /// database without losing any data. Your database is unavailable for a short
  /// time while the primary and selected secondary clusters are assuming their
  /// new roles. For more information about switching over an Aurora global
  /// database, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-disaster-recovery.html#aurora-global-database-disaster-recovery.managed-failover">Performing
  /// switchovers for Amazon Aurora global databases</a> in the <i>Amazon Aurora
  /// User Guide</i>.
  /// <note>
  /// This operation is intended for controlled environments, for operations
  /// such as "regional rotation" or to fall back to the original primary after
  /// a global database failover.
  /// </note>
  ///
  /// May throw [GlobalClusterNotFoundFault].
  /// May throw [InvalidGlobalClusterStateFault].
  /// May throw [InvalidDBClusterStateFault].
  /// May throw [DBClusterNotFoundFault].
  ///
  /// Parameter [globalClusterIdentifier] :
  /// The identifier of the global database cluster to switch over. This
  /// parameter isn't case-sensitive.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identifier of an existing global database cluster (Aurora
  /// global database).
  /// </li>
  /// </ul>
  ///
  /// Parameter [targetDbClusterIdentifier] :
  /// The identifier of the secondary Aurora DB cluster to promote to the new
  /// primary for the global database cluster. Use the Amazon Resource Name
  /// (ARN) for the identifier so that Aurora can locate the cluster in its
  /// Amazon Web Services Region.
  Future<SwitchoverGlobalClusterResult> switchoverGlobalCluster({
    required String globalClusterIdentifier,
    required String targetDbClusterIdentifier,
  }) async {
    final $request = <String, String>{
      'GlobalClusterIdentifier': globalClusterIdentifier,
      'TargetDbClusterIdentifier': targetDbClusterIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'SwitchoverGlobalCluster',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'SwitchoverGlobalClusterResult',
    );
    return SwitchoverGlobalClusterResult.fromXml($result);
  }

  /// Switches over an Oracle standby database in an Oracle Data Guard
  /// environment, making it the new primary database. Issue this command in the
  /// Region that hosts the current standby database.
  ///
  /// May throw [DBInstanceNotFoundFault].
  /// May throw [InvalidDBInstanceStateFault].
  ///
  /// Parameter [dBInstanceIdentifier] :
  /// The DB instance identifier of the current standby database. This value is
  /// stored as a lowercase string.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must match the identiﬁer of an existing Oracle read replica DB instance.
  /// </li>
  /// </ul>
  Future<SwitchoverReadReplicaResult> switchoverReadReplica({
    required String dBInstanceIdentifier,
  }) async {
    final $request = <String, String>{
      'DBInstanceIdentifier': dBInstanceIdentifier,
    };
    final $result = await _protocol.send(
      $request,
      action: 'SwitchoverReadReplica',
      version: '2014-10-31',
      method: 'POST',
      requestUri: '/',
      exceptionFnMap: _exceptionFns,
      resultWrapper: 'SwitchoverReadReplicaResult',
    );
    return SwitchoverReadReplicaResult.fromXml($result);
  }
}

/// Data returned by the <b>DescribeAccountAttributes</b> action.
class AccountAttributesMessage {
  /// A list of <code>AccountQuota</code> objects. Within this list, each quota
  /// has a name, a count of usage toward the quota maximum, and a maximum value
  /// for the quota.
  final List<AccountQuota>? accountQuotas;

  AccountAttributesMessage({
    this.accountQuotas,
  });
  factory AccountAttributesMessage.fromXml(_s.XmlElement elem) {
    return AccountAttributesMessage(
      accountQuotas: _s.extractXmlChild(elem, 'AccountQuotas')?.let((elem) =>
          elem.findElements('AccountQuota').map(AccountQuota.fromXml).toList()),
    );
  }
}

/// Describes a quota for an Amazon Web Services account.
///
/// The following are account quotas:
///
/// <ul>
/// <li>
/// <code>AllocatedStorage</code> - The total allocated storage per account, in
/// GiB. The used value is the total allocated storage in the account, in GiB.
/// </li>
/// <li>
/// <code>AuthorizationsPerDBSecurityGroup</code> - The number of ingress rules
/// per DB security group. The used value is the highest number of ingress rules
/// in a DB security group in the account. Other DB security groups in the
/// account might have a lower number of ingress rules.
/// </li>
/// <li>
/// <code>CustomEndpointsPerDBCluster</code> - The number of custom endpoints
/// per DB cluster. The used value is the highest number of custom endpoints in
/// a DB clusters in the account. Other DB clusters in the account might have a
/// lower number of custom endpoints.
/// </li>
/// <li>
/// <code>DBClusterParameterGroups</code> - The number of DB cluster parameter
/// groups per account, excluding default parameter groups. The used value is
/// the count of nondefault DB cluster parameter groups in the account.
/// </li>
/// <li>
/// <code>DBClusterRoles</code> - The number of associated Amazon Web Services
/// Identity and Access Management (IAM) roles per DB cluster. The used value is
/// the highest number of associated IAM roles for a DB cluster in the account.
/// Other DB clusters in the account might have a lower number of associated IAM
/// roles.
/// </li>
/// <li>
/// <code>DBClusters</code> - The number of DB clusters per account. The used
/// value is the count of DB clusters in the account.
/// </li>
/// <li>
/// <code>DBInstanceRoles</code> - The number of associated IAM roles per DB
/// instance. The used value is the highest number of associated IAM roles for a
/// DB instance in the account. Other DB instances in the account might have a
/// lower number of associated IAM roles.
/// </li>
/// <li>
/// <code>DBInstances</code> - The number of DB instances per account. The used
/// value is the count of the DB instances in the account.
///
/// Amazon RDS DB instances, Amazon Aurora DB instances, Amazon Neptune
/// instances, and Amazon DocumentDB instances apply to this quota.
/// </li>
/// <li>
/// <code>DBParameterGroups</code> - The number of DB parameter groups per
/// account, excluding default parameter groups. The used value is the count of
/// nondefault DB parameter groups in the account.
/// </li>
/// <li>
/// <code>DBSecurityGroups</code> - The number of DB security groups (not VPC
/// security groups) per account, excluding the default security group. The used
/// value is the count of nondefault DB security groups in the account.
/// </li>
/// <li>
/// <code>DBSubnetGroups</code> - The number of DB subnet groups per account.
/// The used value is the count of the DB subnet groups in the account.
/// </li>
/// <li>
/// <code>EventSubscriptions</code> - The number of event subscriptions per
/// account. The used value is the count of the event subscriptions in the
/// account.
/// </li>
/// <li>
/// <code>ManualClusterSnapshots</code> - The number of manual DB cluster
/// snapshots per account. The used value is the count of the manual DB cluster
/// snapshots in the account.
/// </li>
/// <li>
/// <code>ManualSnapshots</code> - The number of manual DB instance snapshots
/// per account. The used value is the count of the manual DB instance snapshots
/// in the account.
/// </li>
/// <li>
/// <code>OptionGroups</code> - The number of DB option groups per account,
/// excluding default option groups. The used value is the count of nondefault
/// DB option groups in the account.
/// </li>
/// <li>
/// <code>ReadReplicasPerMaster</code> - The number of read replicas per DB
/// instance. The used value is the highest number of read replicas for a DB
/// instance in the account. Other DB instances in the account might have a
/// lower number of read replicas.
/// </li>
/// <li>
/// <code>ReservedDBInstances</code> - The number of reserved DB instances per
/// account. The used value is the count of the active reserved DB instances in
/// the account.
/// </li>
/// <li>
/// <code>SubnetsPerDBSubnetGroup</code> - The number of subnets per DB subnet
/// group. The used value is highest number of subnets for a DB subnet group in
/// the account. Other DB subnet groups in the account might have a lower number
/// of subnets.
/// </li>
/// </ul>
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html">Quotas
/// for Amazon RDS</a> in the <i>Amazon RDS User Guide</i> and <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_Limits.html">Quotas
/// for Amazon Aurora</a> in the <i>Amazon Aurora User Guide</i>.
class AccountQuota {
  /// The name of the Amazon RDS quota for this Amazon Web Services account.
  final String? accountQuotaName;

  /// The maximum allowed value for the quota.
  final int? max;

  /// The amount currently used toward the quota maximum.
  final int? used;

  AccountQuota({
    this.accountQuotaName,
    this.max,
    this.used,
  });
  factory AccountQuota.fromXml(_s.XmlElement elem) {
    return AccountQuota(
      accountQuotaName: _s.extractXmlStringValue(elem, 'AccountQuotaName'),
      max: _s.extractXmlIntValue(elem, 'Max'),
      used: _s.extractXmlIntValue(elem, 'Used'),
    );
  }
}

enum ActivityStreamMode {
  sync('sync'),
  async('async'),
  ;

  final String value;

  const ActivityStreamMode(this.value);

  static ActivityStreamMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ActivityStreamMode'));
}

enum ActivityStreamPolicyStatus {
  locked('locked'),
  unlocked('unlocked'),
  lockingPolicy('locking-policy'),
  unlockingPolicy('unlocking-policy'),
  ;

  final String value;

  const ActivityStreamPolicyStatus(this.value);

  static ActivityStreamPolicyStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ActivityStreamPolicyStatus'));
}

enum ActivityStreamStatus {
  stopped('stopped'),
  starting('starting'),
  started('started'),
  stopping('stopping'),
  ;

  final String value;

  const ActivityStreamStatus(this.value);

  static ActivityStreamStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum ActivityStreamStatus'));
}

class AddSourceIdentifierToSubscriptionResult {
  final EventSubscription? eventSubscription;

  AddSourceIdentifierToSubscriptionResult({
    this.eventSubscription,
  });
  factory AddSourceIdentifierToSubscriptionResult.fromXml(_s.XmlElement elem) {
    return AddSourceIdentifierToSubscriptionResult(
      eventSubscription: _s
          .extractXmlChild(elem, 'EventSubscription')
          ?.let(EventSubscription.fromXml),
    );
  }
}

enum ApplyMethod {
  immediate('immediate'),
  pendingReboot('pending-reboot'),
  ;

  final String value;

  const ApplyMethod(this.value);

  static ApplyMethod fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum ApplyMethod'));
}

class ApplyPendingMaintenanceActionResult {
  final ResourcePendingMaintenanceActions? resourcePendingMaintenanceActions;

  ApplyPendingMaintenanceActionResult({
    this.resourcePendingMaintenanceActions,
  });
  factory ApplyPendingMaintenanceActionResult.fromXml(_s.XmlElement elem) {
    return ApplyPendingMaintenanceActionResult(
      resourcePendingMaintenanceActions: _s
          .extractXmlChild(elem, 'ResourcePendingMaintenanceActions')
          ?.let(ResourcePendingMaintenanceActions.fromXml),
    );
  }
}

enum AuditPolicyState {
  locked('locked'),
  unlocked('unlocked'),
  ;

  final String value;

  const AuditPolicyState(this.value);

  static AuditPolicyState fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AuditPolicyState'));
}

enum AuthScheme {
  secrets('SECRETS'),
  ;

  final String value;

  const AuthScheme(this.value);

  static AuthScheme fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum AuthScheme'));
}

class AuthorizeDBSecurityGroupIngressResult {
  final DBSecurityGroup? dBSecurityGroup;

  AuthorizeDBSecurityGroupIngressResult({
    this.dBSecurityGroup,
  });
  factory AuthorizeDBSecurityGroupIngressResult.fromXml(_s.XmlElement elem) {
    return AuthorizeDBSecurityGroupIngressResult(
      dBSecurityGroup: _s
          .extractXmlChild(elem, 'DBSecurityGroup')
          ?.let(DBSecurityGroup.fromXml),
    );
  }
}

enum AutomationMode {
  full('full'),
  allPaused('all-paused'),
  ;

  final String value;

  const AutomationMode(this.value);

  static AutomationMode fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum AutomationMode'));
}

/// Contains Availability Zone information.
///
/// This data type is used as an element in the
/// <code>OrderableDBInstanceOption</code> data type.
class AvailabilityZone {
  /// The name of the Availability Zone.
  final String? name;

  AvailabilityZone({
    this.name,
  });
  factory AvailabilityZone.fromXml(_s.XmlElement elem) {
    return AvailabilityZone(
      name: _s.extractXmlStringValue(elem, 'Name'),
    );
  }
}

/// Contains the available processor feature information for the DB instance
/// class of a DB instance.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor">Configuring
/// the Processor of the DB Instance Class</a> in the <i>Amazon RDS User Guide.
/// </i>
class AvailableProcessorFeature {
  /// The allowed values for the processor feature of the DB instance class.
  final String? allowedValues;

  /// The default value for the processor feature of the DB instance class.
  final String? defaultValue;

  /// The name of the processor feature. Valid names are <code>coreCount</code>
  /// and <code>threadsPerCore</code>.
  final String? name;

  AvailableProcessorFeature({
    this.allowedValues,
    this.defaultValue,
    this.name,
  });
  factory AvailableProcessorFeature.fromXml(_s.XmlElement elem) {
    return AvailableProcessorFeature(
      allowedValues: _s.extractXmlStringValue(elem, 'AllowedValues'),
      defaultValue: _s.extractXmlStringValue(elem, 'DefaultValue'),
      name: _s.extractXmlStringValue(elem, 'Name'),
    );
  }
}

/// Details about a blue/green deployment.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using
/// Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon
/// RDS User Guide</i> and <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html">Using
/// Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon
/// Aurora User Guide</i>.
class BlueGreenDeployment {
  /// The unique identifier of the blue/green deployment.
  final String? blueGreenDeploymentIdentifier;

  /// The user-supplied name of the blue/green deployment.
  final String? blueGreenDeploymentName;

  /// The time when the blue/green deployment was created, in Universal
  /// Coordinated Time (UTC).
  final DateTime? createTime;

  /// The time when the blue/green deployment was deleted, in Universal
  /// Coordinated Time (UTC).
  final DateTime? deleteTime;

  /// The source database for the blue/green deployment.
  ///
  /// Before switchover, the source database is the production database in the
  /// blue environment.
  final String? source;

  /// The status of the blue/green deployment.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>PROVISIONING</code> - Resources are being created in the green
  /// environment.
  /// </li>
  /// <li>
  /// <code>AVAILABLE</code> - Resources are available in the green environment.
  /// </li>
  /// <li>
  /// <code>SWITCHOVER_IN_PROGRESS</code> - The deployment is being switched from
  /// the blue environment to the green environment.
  /// </li>
  /// <li>
  /// <code>SWITCHOVER_COMPLETED</code> - Switchover from the blue environment to
  /// the green environment is complete.
  /// </li>
  /// <li>
  /// <code>INVALID_CONFIGURATION</code> - Resources in the green environment are
  /// invalid, so switchover isn't possible.
  /// </li>
  /// <li>
  /// <code>SWITCHOVER_FAILED</code> - Switchover was attempted but failed.
  /// </li>
  /// <li>
  /// <code>DELETING</code> - The blue/green deployment is being deleted.
  /// </li>
  /// </ul>
  final String? status;

  /// Additional information about the status of the blue/green deployment.
  final String? statusDetails;

  /// The details about each source and target resource in the blue/green
  /// deployment.
  final List<SwitchoverDetail>? switchoverDetails;
  final List<Tag>? tagList;

  /// The target database for the blue/green deployment.
  ///
  /// Before switchover, the target database is the clone database in the green
  /// environment.
  final String? target;

  /// Either tasks to be performed or tasks that have been completed on the target
  /// database before switchover.
  final List<BlueGreenDeploymentTask>? tasks;

  BlueGreenDeployment({
    this.blueGreenDeploymentIdentifier,
    this.blueGreenDeploymentName,
    this.createTime,
    this.deleteTime,
    this.source,
    this.status,
    this.statusDetails,
    this.switchoverDetails,
    this.tagList,
    this.target,
    this.tasks,
  });
  factory BlueGreenDeployment.fromXml(_s.XmlElement elem) {
    return BlueGreenDeployment(
      blueGreenDeploymentIdentifier:
          _s.extractXmlStringValue(elem, 'BlueGreenDeploymentIdentifier'),
      blueGreenDeploymentName:
          _s.extractXmlStringValue(elem, 'BlueGreenDeploymentName'),
      createTime: _s.extractXmlDateTimeValue(elem, 'CreateTime'),
      deleteTime: _s.extractXmlDateTimeValue(elem, 'DeleteTime'),
      source: _s.extractXmlStringValue(elem, 'Source'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      statusDetails: _s.extractXmlStringValue(elem, 'StatusDetails'),
      switchoverDetails: _s.extractXmlChild(elem, 'SwitchoverDetails')?.let(
          (elem) => elem
              .findElements('member')
              .map(SwitchoverDetail.fromXml)
              .toList()),
      tagList: _s
          .extractXmlChild(elem, 'TagList')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
      target: _s.extractXmlStringValue(elem, 'Target'),
      tasks: _s.extractXmlChild(elem, 'Tasks')?.let((elem) => elem
          .findElements('member')
          .map(BlueGreenDeploymentTask.fromXml)
          .toList()),
    );
  }
}

/// Details about a task for a blue/green deployment.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using
/// Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon
/// RDS User Guide</i> and <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html">Using
/// Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon
/// Aurora User Guide</i>.
class BlueGreenDeploymentTask {
  /// The name of the blue/green deployment task.
  final String? name;

  /// The status of the blue/green deployment task.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>PENDING</code> - The resource is being prepared for deployment.
  /// </li>
  /// <li>
  /// <code>IN_PROGRESS</code> - The resource is being deployed.
  /// </li>
  /// <li>
  /// <code>COMPLETED</code> - The resource has been deployed.
  /// </li>
  /// <li>
  /// <code>FAILED</code> - Deployment of the resource failed.
  /// </li>
  /// </ul>
  final String? status;

  BlueGreenDeploymentTask({
    this.name,
    this.status,
  });
  factory BlueGreenDeploymentTask.fromXml(_s.XmlElement elem) {
    return BlueGreenDeploymentTask(
      name: _s.extractXmlStringValue(elem, 'Name'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// A CA certificate for an Amazon Web Services account.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
/// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
/// User Guide</i> and <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
/// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
/// Aurora User Guide</i>.
class Certificate {
  /// The Amazon Resource Name (ARN) for the certificate.
  final String? certificateArn;

  /// The unique key that identifies a certificate.
  final String? certificateIdentifier;

  /// The type of the certificate.
  final String? certificateType;

  /// Indicates whether there is an override for the default certificate
  /// identifier.
  final bool? customerOverride;

  /// If there is an override for the default certificate identifier, when the
  /// override expires.
  final DateTime? customerOverrideValidTill;

  /// The thumbprint of the certificate.
  final String? thumbprint;

  /// The starting date from which the certificate is valid.
  final DateTime? validFrom;

  /// The final date that the certificate continues to be valid.
  final DateTime? validTill;

  Certificate({
    this.certificateArn,
    this.certificateIdentifier,
    this.certificateType,
    this.customerOverride,
    this.customerOverrideValidTill,
    this.thumbprint,
    this.validFrom,
    this.validTill,
  });
  factory Certificate.fromXml(_s.XmlElement elem) {
    return Certificate(
      certificateArn: _s.extractXmlStringValue(elem, 'CertificateArn'),
      certificateIdentifier:
          _s.extractXmlStringValue(elem, 'CertificateIdentifier'),
      certificateType: _s.extractXmlStringValue(elem, 'CertificateType'),
      customerOverride: _s.extractXmlBoolValue(elem, 'CustomerOverride'),
      customerOverrideValidTill:
          _s.extractXmlDateTimeValue(elem, 'CustomerOverrideValidTill'),
      thumbprint: _s.extractXmlStringValue(elem, 'Thumbprint'),
      validFrom: _s.extractXmlDateTimeValue(elem, 'ValidFrom'),
      validTill: _s.extractXmlDateTimeValue(elem, 'ValidTill'),
    );
  }
}

/// Returns the details of the DB instance’s server certificate.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
/// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
/// User Guide</i> and <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
/// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
/// Aurora User Guide</i>.
class CertificateDetails {
  /// The CA identifier of the CA certificate used for the DB instance's server
  /// certificate.
  final String? cAIdentifier;

  /// The expiration date of the DB instance’s server certificate.
  final DateTime? validTill;

  CertificateDetails({
    this.cAIdentifier,
    this.validTill,
  });
  factory CertificateDetails.fromXml(_s.XmlElement elem) {
    return CertificateDetails(
      cAIdentifier: _s.extractXmlStringValue(elem, 'CAIdentifier'),
      validTill: _s.extractXmlDateTimeValue(elem, 'ValidTill'),
    );
  }
}

/// Data returned by the <b>DescribeCertificates</b> action.
class CertificateMessage {
  /// The list of <code>Certificate</code> objects for the Amazon Web Services
  /// account.
  final List<Certificate>? certificates;

  /// The default root CA for new databases created by your Amazon Web Services
  /// account. This is either the root CA override set on your Amazon Web Services
  /// account or the system default CA for the Region if no override exists. To
  /// override the default CA, use the <code>ModifyCertificates</code> operation.
  final String? defaultCertificateForNewLaunches;

  /// An optional pagination token provided by a previous
  /// <code>DescribeCertificates</code> request. If this parameter is specified,
  /// the response includes only records beyond the marker, up to the value
  /// specified by <code>MaxRecords</code> .
  final String? marker;

  CertificateMessage({
    this.certificates,
    this.defaultCertificateForNewLaunches,
    this.marker,
  });
  factory CertificateMessage.fromXml(_s.XmlElement elem) {
    return CertificateMessage(
      certificates: _s.extractXmlChild(elem, 'Certificates')?.let((elem) =>
          elem.findElements('Certificate').map(Certificate.fromXml).toList()),
      defaultCertificateForNewLaunches:
          _s.extractXmlStringValue(elem, 'DefaultCertificateForNewLaunches'),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// This data type is used as a response element in the action
/// <code>DescribeDBEngineVersions</code>.
class CharacterSet {
  /// The description of the character set.
  final String? characterSetDescription;

  /// The name of the character set.
  final String? characterSetName;

  CharacterSet({
    this.characterSetDescription,
    this.characterSetName,
  });
  factory CharacterSet.fromXml(_s.XmlElement elem) {
    return CharacterSet(
      characterSetDescription:
          _s.extractXmlStringValue(elem, 'CharacterSetDescription'),
      characterSetName: _s.extractXmlStringValue(elem, 'CharacterSetName'),
    );
  }
}

enum ClientPasswordAuthType {
  mysqlNativePassword('MYSQL_NATIVE_PASSWORD'),
  postgresScramSha_256('POSTGRES_SCRAM_SHA_256'),
  postgresMd5('POSTGRES_MD5'),
  sqlServerAuthentication('SQL_SERVER_AUTHENTICATION'),
  ;

  final String value;

  const ClientPasswordAuthType(this.value);

  static ClientPasswordAuthType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum ClientPasswordAuthType'));
}

/// The configuration setting for the log types to be enabled for export to
/// CloudWatch Logs for a specific DB instance or DB cluster.
///
/// The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays
/// determine which logs will be exported (or not exported) to CloudWatch Logs.
/// The values within these arrays depend on the DB engine being used.
///
/// For more information about exporting CloudWatch Logs for Amazon RDS DB
/// instances, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
/// Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User
/// Guide</i>.
///
/// For more information about exporting CloudWatch Logs for Amazon Aurora DB
/// clusters, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
/// Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User
/// Guide</i>.
class CloudwatchLogsExportConfiguration {
  /// The list of log types to disable.
  final List<String>? disableLogTypes;

  /// The list of log types to enable.
  final List<String>? enableLogTypes;

  CloudwatchLogsExportConfiguration({
    this.disableLogTypes,
    this.enableLogTypes,
  });

  Map<String, dynamic> toJson() {
    final disableLogTypes = this.disableLogTypes;
    final enableLogTypes = this.enableLogTypes;
    return {
      if (disableLogTypes != null) 'DisableLogTypes': disableLogTypes,
      if (enableLogTypes != null) 'EnableLogTypes': enableLogTypes,
    };
  }

  Map<String, String> toQueryMap() {
    final disableLogTypes = this.disableLogTypes;
    final enableLogTypes = this.enableLogTypes;
    return {
      if (disableLogTypes != null)
        if (disableLogTypes.isEmpty)
          'DisableLogTypes': ''
        else
          for (var i1 = 0; i1 < disableLogTypes.length; i1++)
            'DisableLogTypes.member.${i1 + 1}': disableLogTypes[i1],
      if (enableLogTypes != null)
        if (enableLogTypes.isEmpty)
          'EnableLogTypes': ''
        else
          for (var i1 = 0; i1 < enableLogTypes.length; i1++)
            'EnableLogTypes.member.${i1 + 1}': enableLogTypes[i1],
    };
  }
}

/// This data type is used as a response element in the
/// <code>ModifyDBCluster</code> operation and contains changes that will be
/// applied during the next maintenance window.
class ClusterPendingModifiedValues {
  /// The allocated storage size in gibibytes (GiB) for all database engines
  /// except Amazon Aurora. For Aurora, <code>AllocatedStorage</code> always
  /// returns 1, because Aurora DB cluster storage size isn't fixed, but instead
  /// automatically adjusts as needed.
  final int? allocatedStorage;

  /// The number of days for which automatic DB snapshots are retained.
  final int? backupRetentionPeriod;
  final CertificateDetails? certificateDetails;

  /// The DBClusterIdentifier value for the DB cluster.
  final String? dBClusterIdentifier;

  /// The database engine version.
  final String? engineVersion;

  /// Indicates whether mapping of Amazon Web Services Identity and Access
  /// Management (IAM) accounts to database accounts is enabled.
  final bool? iAMDatabaseAuthenticationEnabled;

  /// The Provisioned IOPS (I/O operations per second) value. This setting is only
  /// for non-Aurora Multi-AZ DB clusters.
  final int? iops;

  /// The master credentials for the DB cluster.
  final String? masterUserPassword;
  final PendingCloudwatchLogsExports? pendingCloudwatchLogsExports;

  /// Reserved for future use.
  final RdsCustomClusterConfiguration? rdsCustomClusterConfiguration;

  /// The storage type for the DB cluster.
  final String? storageType;

  ClusterPendingModifiedValues({
    this.allocatedStorage,
    this.backupRetentionPeriod,
    this.certificateDetails,
    this.dBClusterIdentifier,
    this.engineVersion,
    this.iAMDatabaseAuthenticationEnabled,
    this.iops,
    this.masterUserPassword,
    this.pendingCloudwatchLogsExports,
    this.rdsCustomClusterConfiguration,
    this.storageType,
  });
  factory ClusterPendingModifiedValues.fromXml(_s.XmlElement elem) {
    return ClusterPendingModifiedValues(
      allocatedStorage: _s.extractXmlIntValue(elem, 'AllocatedStorage'),
      backupRetentionPeriod:
          _s.extractXmlIntValue(elem, 'BackupRetentionPeriod'),
      certificateDetails: _s
          .extractXmlChild(elem, 'CertificateDetails')
          ?.let(CertificateDetails.fromXml),
      dBClusterIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterIdentifier'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      iAMDatabaseAuthenticationEnabled:
          _s.extractXmlBoolValue(elem, 'IAMDatabaseAuthenticationEnabled'),
      iops: _s.extractXmlIntValue(elem, 'Iops'),
      masterUserPassword: _s.extractXmlStringValue(elem, 'MasterUserPassword'),
      pendingCloudwatchLogsExports: _s
          .extractXmlChild(elem, 'PendingCloudwatchLogsExports')
          ?.let(PendingCloudwatchLogsExports.fromXml),
      rdsCustomClusterConfiguration: _s
          .extractXmlChild(elem, 'RdsCustomClusterConfiguration')
          ?.let(RdsCustomClusterConfiguration.fromXml),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
    );
  }
}

/// Specifies the settings that control the size and behavior of the connection
/// pool associated with a <code>DBProxyTargetGroup</code>.
class ConnectionPoolConfiguration {
  /// The number of seconds for a proxy to wait for a connection to become
  /// available in the connection pool. This setting only applies when the proxy
  /// has opened its maximum number of connections and all connections are busy
  /// with client sessions. For an unlimited wait time, specify <code>0</code>.
  ///
  /// Default: <code>120</code>
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be between 0 and 3600.
  /// </li>
  /// </ul>
  final int? connectionBorrowTimeout;

  /// One or more SQL statements for the proxy to run when opening each new
  /// database connection. Typically used with <code>SET</code> statements to make
  /// sure that each connection has identical settings such as time zone and
  /// character set. For multiple statements, use semicolons as the separator. You
  /// can also include multiple variables in a single <code>SET</code> statement,
  /// such as <code>SET x=1, y=2</code>.
  ///
  /// Default: no initialization query
  final String? initQuery;

  /// The maximum size of the connection pool for each target in a target group.
  /// The value is expressed as a percentage of the <code>max_connections</code>
  /// setting for the RDS DB instance or Aurora DB cluster used by the target
  /// group.
  ///
  /// If you specify <code>MaxIdleConnectionsPercent</code>, then you must also
  /// include a value for this parameter.
  ///
  /// Default: <code>10</code> for RDS for Microsoft SQL Server, and
  /// <code>100</code> for all other engines
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be between 1 and 100.
  /// </li>
  /// </ul>
  final int? maxConnectionsPercent;

  /// A value that controls how actively the proxy closes idle database
  /// connections in the connection pool. The value is expressed as a percentage
  /// of the <code>max_connections</code> setting for the RDS DB instance or
  /// Aurora DB cluster used by the target group. With a high value, the proxy
  /// leaves a high percentage of idle database connections open. A low value
  /// causes the proxy to close more idle connections and return them to the
  /// database.
  ///
  /// If you specify this parameter, then you must also include a value for
  /// <code>MaxConnectionsPercent</code>.
  ///
  /// Default: The default value is half of the value of
  /// <code>MaxConnectionsPercent</code>. For example, if
  /// <code>MaxConnectionsPercent</code> is 80, then the default value of
  /// <code>MaxIdleConnectionsPercent</code> is 40. If the value of
  /// <code>MaxConnectionsPercent</code> isn't specified, then for SQL Server,
  /// <code>MaxIdleConnectionsPercent</code> is <code>5</code>, and for all other
  /// engines, the default is <code>50</code>.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be between 0 and the value of <code>MaxConnectionsPercent</code>.
  /// </li>
  /// </ul>
  final int? maxIdleConnectionsPercent;

  /// Each item in the list represents a class of SQL operations that normally
  /// cause all later statements in a session using a proxy to be pinned to the
  /// same underlying database connection. Including an item in the list exempts
  /// that class of SQL operations from the pinning behavior.
  ///
  /// Default: no session pinning filters
  final List<String>? sessionPinningFilters;

  ConnectionPoolConfiguration({
    this.connectionBorrowTimeout,
    this.initQuery,
    this.maxConnectionsPercent,
    this.maxIdleConnectionsPercent,
    this.sessionPinningFilters,
  });

  Map<String, dynamic> toJson() {
    final connectionBorrowTimeout = this.connectionBorrowTimeout;
    final initQuery = this.initQuery;
    final maxConnectionsPercent = this.maxConnectionsPercent;
    final maxIdleConnectionsPercent = this.maxIdleConnectionsPercent;
    final sessionPinningFilters = this.sessionPinningFilters;
    return {
      if (connectionBorrowTimeout != null)
        'ConnectionBorrowTimeout': connectionBorrowTimeout,
      if (initQuery != null) 'InitQuery': initQuery,
      if (maxConnectionsPercent != null)
        'MaxConnectionsPercent': maxConnectionsPercent,
      if (maxIdleConnectionsPercent != null)
        'MaxIdleConnectionsPercent': maxIdleConnectionsPercent,
      if (sessionPinningFilters != null)
        'SessionPinningFilters': sessionPinningFilters,
    };
  }

  Map<String, String> toQueryMap() {
    final connectionBorrowTimeout = this.connectionBorrowTimeout;
    final initQuery = this.initQuery;
    final maxConnectionsPercent = this.maxConnectionsPercent;
    final maxIdleConnectionsPercent = this.maxIdleConnectionsPercent;
    final sessionPinningFilters = this.sessionPinningFilters;
    return {
      if (connectionBorrowTimeout != null)
        'ConnectionBorrowTimeout': connectionBorrowTimeout.toString(),
      if (initQuery != null) 'InitQuery': initQuery,
      if (maxConnectionsPercent != null)
        'MaxConnectionsPercent': maxConnectionsPercent.toString(),
      if (maxIdleConnectionsPercent != null)
        'MaxIdleConnectionsPercent': maxIdleConnectionsPercent.toString(),
      if (sessionPinningFilters != null)
        if (sessionPinningFilters.isEmpty)
          'SessionPinningFilters': ''
        else
          for (var i1 = 0; i1 < sessionPinningFilters.length; i1++)
            'SessionPinningFilters.member.${i1 + 1}': sessionPinningFilters[i1],
    };
  }
}

/// Displays the settings that control the size and behavior of the connection
/// pool associated with a <code>DBProxyTarget</code>.
class ConnectionPoolConfigurationInfo {
  /// The number of seconds for a proxy to wait for a connection to become
  /// available in the connection pool. Only applies when the proxy has opened its
  /// maximum number of connections and all connections are busy with client
  /// sessions.
  final int? connectionBorrowTimeout;

  /// One or more SQL statements for the proxy to run when opening each new
  /// database connection. Typically used with <code>SET</code> statements to make
  /// sure that each connection has identical settings such as time zone and
  /// character set. This setting is empty by default. For multiple statements,
  /// use semicolons as the separator. You can also include multiple variables in
  /// a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>.
  final String? initQuery;

  /// The maximum size of the connection pool for each target in a target group.
  /// The value is expressed as a percentage of the <code>max_connections</code>
  /// setting for the RDS DB instance or Aurora DB cluster used by the target
  /// group.
  final int? maxConnectionsPercent;

  /// Controls how actively the proxy closes idle database connections in the
  /// connection pool. The value is expressed as a percentage of the
  /// <code>max_connections</code> setting for the RDS DB instance or Aurora DB
  /// cluster used by the target group. With a high value, the proxy leaves a high
  /// percentage of idle database connections open. A low value causes the proxy
  /// to close more idle connections and return them to the database.
  final int? maxIdleConnectionsPercent;

  /// Each item in the list represents a class of SQL operations that normally
  /// cause all later statements in a session using a proxy to be pinned to the
  /// same underlying database connection. Including an item in the list exempts
  /// that class of SQL operations from the pinning behavior. This setting is only
  /// supported for MySQL engine family databases. Currently, the only allowed
  /// value is <code>EXCLUDE_VARIABLE_SETS</code>.
  final List<String>? sessionPinningFilters;

  ConnectionPoolConfigurationInfo({
    this.connectionBorrowTimeout,
    this.initQuery,
    this.maxConnectionsPercent,
    this.maxIdleConnectionsPercent,
    this.sessionPinningFilters,
  });
  factory ConnectionPoolConfigurationInfo.fromXml(_s.XmlElement elem) {
    return ConnectionPoolConfigurationInfo(
      connectionBorrowTimeout:
          _s.extractXmlIntValue(elem, 'ConnectionBorrowTimeout'),
      initQuery: _s.extractXmlStringValue(elem, 'InitQuery'),
      maxConnectionsPercent:
          _s.extractXmlIntValue(elem, 'MaxConnectionsPercent'),
      maxIdleConnectionsPercent:
          _s.extractXmlIntValue(elem, 'MaxIdleConnectionsPercent'),
      sessionPinningFilters: _s
          .extractXmlChild(elem, 'SessionPinningFilters')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
    );
  }
}

/// The additional attributes of <code>RecommendedAction</code> data type.
class ContextAttribute {
  /// The key of <code>ContextAttribute</code>.
  final String? key;

  /// The value of <code>ContextAttribute</code>.
  final String? value;

  ContextAttribute({
    this.key,
    this.value,
  });
  factory ContextAttribute.fromXml(_s.XmlElement elem) {
    return ContextAttribute(
      key: _s.extractXmlStringValue(elem, 'Key'),
      value: _s.extractXmlStringValue(elem, 'Value'),
    );
  }
}

class CopyDBClusterParameterGroupResult {
  final DBClusterParameterGroup? dBClusterParameterGroup;

  CopyDBClusterParameterGroupResult({
    this.dBClusterParameterGroup,
  });
  factory CopyDBClusterParameterGroupResult.fromXml(_s.XmlElement elem) {
    return CopyDBClusterParameterGroupResult(
      dBClusterParameterGroup: _s
          .extractXmlChild(elem, 'DBClusterParameterGroup')
          ?.let(DBClusterParameterGroup.fromXml),
    );
  }
}

class CopyDBClusterSnapshotResult {
  final DBClusterSnapshot? dBClusterSnapshot;

  CopyDBClusterSnapshotResult({
    this.dBClusterSnapshot,
  });
  factory CopyDBClusterSnapshotResult.fromXml(_s.XmlElement elem) {
    return CopyDBClusterSnapshotResult(
      dBClusterSnapshot: _s
          .extractXmlChild(elem, 'DBClusterSnapshot')
          ?.let(DBClusterSnapshot.fromXml),
    );
  }
}

class CopyDBParameterGroupResult {
  final DBParameterGroup? dBParameterGroup;

  CopyDBParameterGroupResult({
    this.dBParameterGroup,
  });
  factory CopyDBParameterGroupResult.fromXml(_s.XmlElement elem) {
    return CopyDBParameterGroupResult(
      dBParameterGroup: _s
          .extractXmlChild(elem, 'DBParameterGroup')
          ?.let(DBParameterGroup.fromXml),
    );
  }
}

class CopyDBSnapshotResult {
  final DBSnapshot? dBSnapshot;

  CopyDBSnapshotResult({
    this.dBSnapshot,
  });
  factory CopyDBSnapshotResult.fromXml(_s.XmlElement elem) {
    return CopyDBSnapshotResult(
      dBSnapshot:
          _s.extractXmlChild(elem, 'DBSnapshot')?.let(DBSnapshot.fromXml),
    );
  }
}

class CopyOptionGroupResult {
  final OptionGroup? optionGroup;

  CopyOptionGroupResult({
    this.optionGroup,
  });
  factory CopyOptionGroupResult.fromXml(_s.XmlElement elem) {
    return CopyOptionGroupResult(
      optionGroup:
          _s.extractXmlChild(elem, 'OptionGroup')?.let(OptionGroup.fromXml),
    );
  }
}

class CreateBlueGreenDeploymentResponse {
  final BlueGreenDeployment? blueGreenDeployment;

  CreateBlueGreenDeploymentResponse({
    this.blueGreenDeployment,
  });
  factory CreateBlueGreenDeploymentResponse.fromXml(_s.XmlElement elem) {
    return CreateBlueGreenDeploymentResponse(
      blueGreenDeployment: _s
          .extractXmlChild(elem, 'BlueGreenDeployment')
          ?.let(BlueGreenDeployment.fromXml),
    );
  }
}

class CreateDBClusterParameterGroupResult {
  final DBClusterParameterGroup? dBClusterParameterGroup;

  CreateDBClusterParameterGroupResult({
    this.dBClusterParameterGroup,
  });
  factory CreateDBClusterParameterGroupResult.fromXml(_s.XmlElement elem) {
    return CreateDBClusterParameterGroupResult(
      dBClusterParameterGroup: _s
          .extractXmlChild(elem, 'DBClusterParameterGroup')
          ?.let(DBClusterParameterGroup.fromXml),
    );
  }
}

class CreateDBClusterResult {
  final DBCluster? dBCluster;

  CreateDBClusterResult({
    this.dBCluster,
  });
  factory CreateDBClusterResult.fromXml(_s.XmlElement elem) {
    return CreateDBClusterResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class CreateDBClusterSnapshotResult {
  final DBClusterSnapshot? dBClusterSnapshot;

  CreateDBClusterSnapshotResult({
    this.dBClusterSnapshot,
  });
  factory CreateDBClusterSnapshotResult.fromXml(_s.XmlElement elem) {
    return CreateDBClusterSnapshotResult(
      dBClusterSnapshot: _s
          .extractXmlChild(elem, 'DBClusterSnapshot')
          ?.let(DBClusterSnapshot.fromXml),
    );
  }
}

class CreateDBInstanceReadReplicaResult {
  final DBInstance? dBInstance;

  CreateDBInstanceReadReplicaResult({
    this.dBInstance,
  });
  factory CreateDBInstanceReadReplicaResult.fromXml(_s.XmlElement elem) {
    return CreateDBInstanceReadReplicaResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

class CreateDBInstanceResult {
  final DBInstance? dBInstance;

  CreateDBInstanceResult({
    this.dBInstance,
  });
  factory CreateDBInstanceResult.fromXml(_s.XmlElement elem) {
    return CreateDBInstanceResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

class CreateDBParameterGroupResult {
  final DBParameterGroup? dBParameterGroup;

  CreateDBParameterGroupResult({
    this.dBParameterGroup,
  });
  factory CreateDBParameterGroupResult.fromXml(_s.XmlElement elem) {
    return CreateDBParameterGroupResult(
      dBParameterGroup: _s
          .extractXmlChild(elem, 'DBParameterGroup')
          ?.let(DBParameterGroup.fromXml),
    );
  }
}

class CreateDBProxyEndpointResponse {
  /// The <code>DBProxyEndpoint</code> object that is created by the API
  /// operation. The DB proxy endpoint that you create might provide capabilities
  /// such as read/write or read-only operations, or using a different VPC than
  /// the proxy's default VPC.
  final DBProxyEndpoint? dBProxyEndpoint;

  CreateDBProxyEndpointResponse({
    this.dBProxyEndpoint,
  });
  factory CreateDBProxyEndpointResponse.fromXml(_s.XmlElement elem) {
    return CreateDBProxyEndpointResponse(
      dBProxyEndpoint: _s
          .extractXmlChild(elem, 'DBProxyEndpoint')
          ?.let(DBProxyEndpoint.fromXml),
    );
  }
}

class CreateDBProxyResponse {
  /// The <code>DBProxy</code> structure corresponding to the new proxy.
  final DBProxy? dBProxy;

  CreateDBProxyResponse({
    this.dBProxy,
  });
  factory CreateDBProxyResponse.fromXml(_s.XmlElement elem) {
    return CreateDBProxyResponse(
      dBProxy: _s.extractXmlChild(elem, 'DBProxy')?.let(DBProxy.fromXml),
    );
  }
}

class CreateDBSecurityGroupResult {
  final DBSecurityGroup? dBSecurityGroup;

  CreateDBSecurityGroupResult({
    this.dBSecurityGroup,
  });
  factory CreateDBSecurityGroupResult.fromXml(_s.XmlElement elem) {
    return CreateDBSecurityGroupResult(
      dBSecurityGroup: _s
          .extractXmlChild(elem, 'DBSecurityGroup')
          ?.let(DBSecurityGroup.fromXml),
    );
  }
}

class CreateDBSnapshotResult {
  final DBSnapshot? dBSnapshot;

  CreateDBSnapshotResult({
    this.dBSnapshot,
  });
  factory CreateDBSnapshotResult.fromXml(_s.XmlElement elem) {
    return CreateDBSnapshotResult(
      dBSnapshot:
          _s.extractXmlChild(elem, 'DBSnapshot')?.let(DBSnapshot.fromXml),
    );
  }
}

class CreateDBSubnetGroupResult {
  final DBSubnetGroup? dBSubnetGroup;

  CreateDBSubnetGroupResult({
    this.dBSubnetGroup,
  });
  factory CreateDBSubnetGroupResult.fromXml(_s.XmlElement elem) {
    return CreateDBSubnetGroupResult(
      dBSubnetGroup:
          _s.extractXmlChild(elem, 'DBSubnetGroup')?.let(DBSubnetGroup.fromXml),
    );
  }
}

class CreateEventSubscriptionResult {
  final EventSubscription? eventSubscription;

  CreateEventSubscriptionResult({
    this.eventSubscription,
  });
  factory CreateEventSubscriptionResult.fromXml(_s.XmlElement elem) {
    return CreateEventSubscriptionResult(
      eventSubscription: _s
          .extractXmlChild(elem, 'EventSubscription')
          ?.let(EventSubscription.fromXml),
    );
  }
}

class CreateGlobalClusterResult {
  final GlobalCluster? globalCluster;

  CreateGlobalClusterResult({
    this.globalCluster,
  });
  factory CreateGlobalClusterResult.fromXml(_s.XmlElement elem) {
    return CreateGlobalClusterResult(
      globalCluster:
          _s.extractXmlChild(elem, 'GlobalCluster')?.let(GlobalCluster.fromXml),
    );
  }
}

class CreateOptionGroupResult {
  final OptionGroup? optionGroup;

  CreateOptionGroupResult({
    this.optionGroup,
  });
  factory CreateOptionGroupResult.fromXml(_s.XmlElement elem) {
    return CreateOptionGroupResult(
      optionGroup:
          _s.extractXmlChild(elem, 'OptionGroup')?.let(OptionGroup.fromXml),
    );
  }
}

class CreateTenantDatabaseResult {
  final TenantDatabase? tenantDatabase;

  CreateTenantDatabaseResult({
    this.tenantDatabase,
  });
  factory CreateTenantDatabaseResult.fromXml(_s.XmlElement elem) {
    return CreateTenantDatabaseResult(
      tenantDatabase: _s
          .extractXmlChild(elem, 'TenantDatabase')
          ?.let(TenantDatabase.fromXml),
    );
  }
}

/// A value that indicates the AMI information.
class CustomDBEngineVersionAMI {
  /// A value that indicates the ID of the AMI.
  final String? imageId;

  /// A value that indicates the status of a custom engine version (CEV).
  final String? status;

  CustomDBEngineVersionAMI({
    this.imageId,
    this.status,
  });
  factory CustomDBEngineVersionAMI.fromXml(_s.XmlElement elem) {
    return CustomDBEngineVersionAMI(
      imageId: _s.extractXmlStringValue(elem, 'ImageId'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

enum CustomEngineVersionStatus {
  available('available'),
  inactive('inactive'),
  inactiveExceptRestore('inactive-except-restore'),
  ;

  final String value;

  const CustomEngineVersionStatus(this.value);

  static CustomEngineVersionStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum CustomEngineVersionStatus'));
}

/// Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.
///
/// For an Amazon Aurora DB cluster, this data type is used as a response
/// element in the operations <code>CreateDBCluster</code>,
/// <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
/// <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>,
/// <code>PromoteReadReplicaDBCluster</code>,
/// <code>RestoreDBClusterFromS3</code>,
/// <code>RestoreDBClusterFromSnapshot</code>,
/// <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and
/// <code>StopDBCluster</code>.
///
/// For a Multi-AZ DB cluster, this data type is used as a response element in
/// the operations <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>,
/// <code>DescribeDBClusters</code>, <code>FailoverDBCluster</code>,
/// <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
/// <code>RestoreDBClusterFromSnapshot</code>, and
/// <code>RestoreDBClusterToPointInTime</code>.
///
/// For more information on Amazon Aurora DB clusters, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
/// What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
///
/// For more information on Multi-AZ DB clusters, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
/// Multi-AZ deployments with two readable standby DB instances</a> in the
/// <i>Amazon RDS User Guide.</i>
class DBCluster {
  /// The name of the Amazon Kinesis data stream used for the database activity
  /// stream.
  final String? activityStreamKinesisStreamName;

  /// The Amazon Web Services KMS key identifier used for encrypting messages in
  /// the database activity stream.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  final String? activityStreamKmsKeyId;

  /// The mode of the database activity stream. Database events such as a change
  /// or access generate an activity stream event. The database session can handle
  /// these events either synchronously or asynchronously.
  final ActivityStreamMode? activityStreamMode;

  /// The status of the database activity stream.
  final ActivityStreamStatus? activityStreamStatus;

  /// For all database engines except Amazon Aurora, <code>AllocatedStorage</code>
  /// specifies the allocated storage size in gibibytes (GiB). For Aurora,
  /// <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster
  /// storage size isn't fixed, but instead automatically adjusts as needed.
  final int? allocatedStorage;

  /// A list of the Amazon Web Services Identity and Access Management (IAM) roles
  /// that are associated with the DB cluster. IAM roles that are associated with
  /// a DB cluster grant permission for the DB cluster to access other Amazon Web
  /// Services on your behalf.
  final List<DBClusterRole>? associatedRoles;

  /// Indicates whether minor version patches are applied automatically.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final bool? autoMinorVersionUpgrade;

  /// The time when a stopped DB cluster is restarted automatically.
  final DateTime? automaticRestartTime;

  /// The list of Availability Zones (AZs) where instances in the DB cluster can
  /// be created.
  final List<String>? availabilityZones;

  /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services
  /// Backup.
  final String? awsBackupRecoveryPointArn;

  /// The number of change records stored for Backtrack.
  final int? backtrackConsumedChangeRecords;

  /// The target backtrack window, in seconds. If this value is set to
  /// <code>0</code>, backtracking is disabled for the DB cluster. Otherwise,
  /// backtracking is enabled.
  final int? backtrackWindow;

  /// The number of days for which automatic DB snapshots are retained.
  final int? backupRetentionPeriod;

  /// The current capacity of an Aurora Serverless v1 DB cluster. The capacity is
  /// <code>0</code> (zero) when the cluster is paused.
  ///
  /// For more information about Aurora Serverless v1, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using
  /// Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.
  final int? capacity;
  final CertificateDetails? certificateDetails;

  /// If present, specifies the name of the character set that this cluster is
  /// associated with.
  final String? characterSetName;

  /// The ID of the clone group with which the DB cluster is associated.
  final String? cloneGroupId;

  /// The time when the DB cluster was created, in Universal Coordinated Time
  /// (UTC).
  final DateTime? clusterCreateTime;

  /// Indicates whether tags are copied from the DB cluster to snapshots of the DB
  /// cluster.
  final bool? copyTagsToSnapshot;

  /// Indicates whether the DB cluster is a clone of a DB cluster owned by a
  /// different Amazon Web Services account.
  final bool? crossAccountClone;

  /// The custom endpoints associated with the DB cluster.
  final List<String>? customEndpoints;

  /// The Amazon Resource Name (ARN) for the DB cluster.
  final String? dBClusterArn;

  /// The user-supplied identifier for the DB cluster. This identifier is the
  /// unique key that identifies a DB cluster.
  final String? dBClusterIdentifier;

  /// The name of the compute and memory capacity class of the DB instance.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final String? dBClusterInstanceClass;

  /// The list of DB instances that make up the DB cluster.
  final List<DBClusterMember>? dBClusterMembers;

  /// The list of option group memberships for this DB cluster.
  final List<DBClusterOptionGroupStatus>? dBClusterOptionGroupMemberships;

  /// The name of the DB cluster parameter group for the DB cluster.
  final String? dBClusterParameterGroup;

  /// Information about the subnet group associated with the DB cluster, including
  /// the name, description, and subnets in the subnet group.
  final String? dBSubnetGroup;

  /// Reserved for future use.
  final String? dBSystemId;

  /// The name of the initial database that was specified for the DB cluster when
  /// it was created, if one was provided. This same name is returned for the life
  /// of the DB cluster.
  final String? databaseName;

  /// The Amazon Web Services Region-unique, immutable identifier for the DB
  /// cluster. This identifier is found in Amazon Web Services CloudTrail log
  /// entries whenever the KMS key for the DB cluster is accessed.
  final String? dbClusterResourceId;

  /// Indicates whether the DB cluster has deletion protection enabled. The
  /// database can't be deleted when deletion protection is enabled.
  final bool? deletionProtection;

  /// The Active Directory Domain membership records associated with the DB
  /// cluster.
  final List<DomainMembership>? domainMemberships;

  /// The earliest time to which a DB cluster can be backtracked.
  final DateTime? earliestBacktrackTime;

  /// The earliest time to which a database can be restored with point-in-time
  /// restore.
  final DateTime? earliestRestorableTime;

  /// A list of log types that this DB cluster is configured to export to
  /// CloudWatch Logs.
  ///
  /// Log types vary by DB engine. For information about the log types for each DB
  /// engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html">Amazon
  /// RDS Database Log Files</a> in the <i>Amazon Aurora User Guide.</i>
  final List<String>? enabledCloudwatchLogsExports;

  /// The connection endpoint for the primary instance of the DB cluster.
  final String? endpoint;

  /// The database engine used for this DB cluster.
  final String? engine;

  /// The life cycle type for the DB cluster.
  ///
  /// For more information, see CreateDBCluster.
  final String? engineLifecycleSupport;

  /// The DB engine mode of the DB cluster, either <code>provisioned</code> or
  /// <code>serverless</code>.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html">
  /// CreateDBCluster</a>.
  final String? engineMode;

  /// The version of the database engine.
  final String? engineVersion;

  /// Indicates whether write forwarding is enabled for a secondary cluster in an
  /// Aurora global database. Because write forwarding takes time to enable, check
  /// the value of <code>GlobalWriteForwardingStatus</code> to confirm that the
  /// request has completed before using the write forwarding feature for this
  /// cluster.
  final bool? globalWriteForwardingRequested;

  /// The status of write forwarding for a secondary cluster in an Aurora global
  /// database.
  final WriteForwardingStatus? globalWriteForwardingStatus;

  /// The ID that Amazon Route 53 assigns when you create a hosted zone.
  final String? hostedZoneId;

  /// Indicates whether the HTTP endpoint is enabled for an Aurora DB cluster.
  ///
  /// When enabled, the HTTP endpoint provides a connectionless web service API
  /// (RDS Data API) for running SQL queries on the DB cluster. You can also query
  /// your database from inside the RDS console with the RDS query editor.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using
  /// RDS Data API</a> in the <i>Amazon Aurora User Guide</i>.
  final bool? httpEndpointEnabled;

  /// Indicates whether the mapping of Amazon Web Services Identity and Access
  /// Management (IAM) accounts to database accounts is enabled.
  final bool? iAMDatabaseAuthenticationEnabled;

  /// The next time you can modify the DB cluster to use the
  /// <code>aurora-iopt1</code> storage type.
  ///
  /// This setting is only for Aurora DB clusters.
  final DateTime? iOOptimizedNextAllowedModificationTime;

  /// The Provisioned IOPS (I/O operations per second) value.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final int? iops;

  /// If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key
  /// identifier for the encrypted DB cluster.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  final String? kmsKeyId;

  /// The latest time to which a database can be restored with point-in-time
  /// restore.
  final DateTime? latestRestorableTime;

  /// The details for Aurora Limitless Database.
  final LimitlessDatabase? limitlessDatabase;

  /// Indicates whether an Aurora DB cluster has in-cluster write forwarding
  /// enabled, not enabled, requested, or is in the process of enabling it.
  final LocalWriteForwardingStatus? localWriteForwardingStatus;

  /// The secret managed by RDS in Amazon Web Services Secrets Manager for the
  /// master user password.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
  /// Aurora User Guide.</i>
  final MasterUserSecret? masterUserSecret;

  /// The master username for the DB cluster.
  final String? masterUsername;

  /// The interval, in seconds, between points when Enhanced Monitoring metrics
  /// are collected for the DB cluster.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final int? monitoringInterval;

  /// The ARN for the IAM role that permits RDS to send Enhanced Monitoring
  /// metrics to Amazon CloudWatch Logs.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final String? monitoringRoleArn;

  /// Indicates whether the DB cluster has instances in multiple Availability
  /// Zones.
  final bool? multiAZ;

  /// The network type of the DB instance.
  ///
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4
  /// protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User
  /// Guide.</i>
  ///
  /// This setting is only for Aurora DB clusters.
  ///
  /// Valid Values: <code>IPV4 | DUAL</code>
  final String? networkType;

  /// Information about pending changes to the DB cluster. This information is
  /// returned only when there are pending changes. Specific changes are
  /// identified by subelements.
  final ClusterPendingModifiedValues? pendingModifiedValues;

  /// The progress of the operation as a percentage.
  final String? percentProgress;

  /// Indicates whether Performance Insights is enabled for the DB cluster.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final bool? performanceInsightsEnabled;

  /// The Amazon Web Services KMS key identifier for encryption of Performance
  /// Insights data.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final String? performanceInsightsKMSKeyId;

  /// The number of days to retain Performance Insights data.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>7</code>
  /// </li>
  /// <li>
  /// <i>month</i> * 31, where <i>month</i> is a number of months from 1-23.
  /// Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months *
  /// 31), <code>589</code> (19 months * 31)
  /// </li>
  /// <li>
  /// <code>731</code>
  /// </li>
  /// </ul>
  /// Default: <code>7</code> days
  final int? performanceInsightsRetentionPeriod;

  /// The port that the database engine is listening on.
  final int? port;

  /// The daily time range during which automated backups are created if automated
  /// backups are enabled, as determined by the
  /// <code>BackupRetentionPeriod</code>.
  final String? preferredBackupWindow;

  /// The weekly time range during which system maintenance can occur, in
  /// Universal Coordinated Time (UTC).
  final String? preferredMaintenanceWindow;

  /// Indicates whether the DB cluster is publicly accessible.
  ///
  /// When the DB cluster is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB cluster's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB cluster's VPC. Access to the DB cluster is ultimately
  /// controlled by the security group it uses. That public access isn't permitted
  /// if the security group assigned to the DB cluster doesn't permit it.
  ///
  /// When the DB cluster isn't publicly accessible, it is an internal DB cluster
  /// with a DNS name that resolves to a private IP address.
  ///
  /// For more information, see <a>CreateDBCluster</a>.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final bool? publiclyAccessible;

  /// Reserved for future use.
  final RdsCustomClusterConfiguration? rdsCustomClusterConfiguration;

  /// Contains one or more identifiers of the read replicas associated with this
  /// DB cluster.
  final List<String>? readReplicaIdentifiers;

  /// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster
  /// load-balances connections across the Aurora Replicas that are available in a
  /// DB cluster. As clients request new connections to the reader endpoint,
  /// Aurora distributes the connection requests among the Aurora Replicas in the
  /// DB cluster. This functionality can help balance your read workload across
  /// multiple Aurora Replicas in your DB cluster.
  ///
  /// If a failover occurs, and the Aurora Replica that you are connected to is
  /// promoted to be the primary instance, your connection is dropped. To continue
  /// sending your read workload to other Aurora Replicas in the cluster, you can
  /// then reconnect to the reader endpoint.
  final String? readerEndpoint;

  /// The identifier of the source DB cluster if this DB cluster is a read
  /// replica.
  final String? replicationSourceIdentifier;
  final ScalingConfigurationInfo? scalingConfigurationInfo;
  final ServerlessV2ScalingConfigurationInfo? serverlessV2ScalingConfiguration;

  /// The current state of this DB cluster.
  final String? status;

  /// Reserved for future use.
  final List<DBClusterStatusInfo>? statusInfos;

  /// Indicates whether the DB cluster is encrypted.
  final bool? storageEncrypted;

  /// The storage throughput for the DB cluster. The throughput is automatically
  /// set based on the IOPS that you provision, and is not configurable.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final int? storageThroughput;

  /// The storage type associated with the DB cluster.
  final String? storageType;
  final List<Tag>? tagList;

  /// The list of VPC security groups that the DB cluster belongs to.
  final List<VpcSecurityGroupMembership>? vpcSecurityGroups;

  DBCluster({
    this.activityStreamKinesisStreamName,
    this.activityStreamKmsKeyId,
    this.activityStreamMode,
    this.activityStreamStatus,
    this.allocatedStorage,
    this.associatedRoles,
    this.autoMinorVersionUpgrade,
    this.automaticRestartTime,
    this.availabilityZones,
    this.awsBackupRecoveryPointArn,
    this.backtrackConsumedChangeRecords,
    this.backtrackWindow,
    this.backupRetentionPeriod,
    this.capacity,
    this.certificateDetails,
    this.characterSetName,
    this.cloneGroupId,
    this.clusterCreateTime,
    this.copyTagsToSnapshot,
    this.crossAccountClone,
    this.customEndpoints,
    this.dBClusterArn,
    this.dBClusterIdentifier,
    this.dBClusterInstanceClass,
    this.dBClusterMembers,
    this.dBClusterOptionGroupMemberships,
    this.dBClusterParameterGroup,
    this.dBSubnetGroup,
    this.dBSystemId,
    this.databaseName,
    this.dbClusterResourceId,
    this.deletionProtection,
    this.domainMemberships,
    this.earliestBacktrackTime,
    this.earliestRestorableTime,
    this.enabledCloudwatchLogsExports,
    this.endpoint,
    this.engine,
    this.engineLifecycleSupport,
    this.engineMode,
    this.engineVersion,
    this.globalWriteForwardingRequested,
    this.globalWriteForwardingStatus,
    this.hostedZoneId,
    this.httpEndpointEnabled,
    this.iAMDatabaseAuthenticationEnabled,
    this.iOOptimizedNextAllowedModificationTime,
    this.iops,
    this.kmsKeyId,
    this.latestRestorableTime,
    this.limitlessDatabase,
    this.localWriteForwardingStatus,
    this.masterUserSecret,
    this.masterUsername,
    this.monitoringInterval,
    this.monitoringRoleArn,
    this.multiAZ,
    this.networkType,
    this.pendingModifiedValues,
    this.percentProgress,
    this.performanceInsightsEnabled,
    this.performanceInsightsKMSKeyId,
    this.performanceInsightsRetentionPeriod,
    this.port,
    this.preferredBackupWindow,
    this.preferredMaintenanceWindow,
    this.publiclyAccessible,
    this.rdsCustomClusterConfiguration,
    this.readReplicaIdentifiers,
    this.readerEndpoint,
    this.replicationSourceIdentifier,
    this.scalingConfigurationInfo,
    this.serverlessV2ScalingConfiguration,
    this.status,
    this.statusInfos,
    this.storageEncrypted,
    this.storageThroughput,
    this.storageType,
    this.tagList,
    this.vpcSecurityGroups,
  });
  factory DBCluster.fromXml(_s.XmlElement elem) {
    return DBCluster(
      activityStreamKinesisStreamName:
          _s.extractXmlStringValue(elem, 'ActivityStreamKinesisStreamName'),
      activityStreamKmsKeyId:
          _s.extractXmlStringValue(elem, 'ActivityStreamKmsKeyId'),
      activityStreamMode: _s
          .extractXmlStringValue(elem, 'ActivityStreamMode')
          ?.let(ActivityStreamMode.fromString),
      activityStreamStatus: _s
          .extractXmlStringValue(elem, 'ActivityStreamStatus')
          ?.let(ActivityStreamStatus.fromString),
      allocatedStorage: _s.extractXmlIntValue(elem, 'AllocatedStorage'),
      associatedRoles: _s.extractXmlChild(elem, 'AssociatedRoles')?.let(
          (elem) => elem
              .findElements('DBClusterRole')
              .map(DBClusterRole.fromXml)
              .toList()),
      autoMinorVersionUpgrade:
          _s.extractXmlBoolValue(elem, 'AutoMinorVersionUpgrade'),
      automaticRestartTime:
          _s.extractXmlDateTimeValue(elem, 'AutomaticRestartTime'),
      availabilityZones: _s.extractXmlChild(elem, 'AvailabilityZones')?.let(
          (elem) => _s.extractXmlStringListValues(elem, 'AvailabilityZone')),
      awsBackupRecoveryPointArn:
          _s.extractXmlStringValue(elem, 'AwsBackupRecoveryPointArn'),
      backtrackConsumedChangeRecords:
          _s.extractXmlIntValue(elem, 'BacktrackConsumedChangeRecords'),
      backtrackWindow: _s.extractXmlIntValue(elem, 'BacktrackWindow'),
      backupRetentionPeriod:
          _s.extractXmlIntValue(elem, 'BackupRetentionPeriod'),
      capacity: _s.extractXmlIntValue(elem, 'Capacity'),
      certificateDetails: _s
          .extractXmlChild(elem, 'CertificateDetails')
          ?.let(CertificateDetails.fromXml),
      characterSetName: _s.extractXmlStringValue(elem, 'CharacterSetName'),
      cloneGroupId: _s.extractXmlStringValue(elem, 'CloneGroupId'),
      clusterCreateTime: _s.extractXmlDateTimeValue(elem, 'ClusterCreateTime'),
      copyTagsToSnapshot: _s.extractXmlBoolValue(elem, 'CopyTagsToSnapshot'),
      crossAccountClone: _s.extractXmlBoolValue(elem, 'CrossAccountClone'),
      customEndpoints: _s
          .extractXmlChild(elem, 'CustomEndpoints')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      dBClusterArn: _s.extractXmlStringValue(elem, 'DBClusterArn'),
      dBClusterIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterIdentifier'),
      dBClusterInstanceClass:
          _s.extractXmlStringValue(elem, 'DBClusterInstanceClass'),
      dBClusterMembers: _s.extractXmlChild(elem, 'DBClusterMembers')?.let(
          (elem) => elem
              .findElements('DBClusterMember')
              .map(DBClusterMember.fromXml)
              .toList()),
      dBClusterOptionGroupMemberships: _s
          .extractXmlChild(elem, 'DBClusterOptionGroupMemberships')
          ?.let((elem) => elem
              .findElements('DBClusterOptionGroup')
              .map(DBClusterOptionGroupStatus.fromXml)
              .toList()),
      dBClusterParameterGroup:
          _s.extractXmlStringValue(elem, 'DBClusterParameterGroup'),
      dBSubnetGroup: _s.extractXmlStringValue(elem, 'DBSubnetGroup'),
      dBSystemId: _s.extractXmlStringValue(elem, 'DBSystemId'),
      databaseName: _s.extractXmlStringValue(elem, 'DatabaseName'),
      dbClusterResourceId:
          _s.extractXmlStringValue(elem, 'DbClusterResourceId'),
      deletionProtection: _s.extractXmlBoolValue(elem, 'DeletionProtection'),
      domainMemberships: _s.extractXmlChild(elem, 'DomainMemberships')?.let(
          (elem) => elem
              .findElements('DomainMembership')
              .map(DomainMembership.fromXml)
              .toList()),
      earliestBacktrackTime:
          _s.extractXmlDateTimeValue(elem, 'EarliestBacktrackTime'),
      earliestRestorableTime:
          _s.extractXmlDateTimeValue(elem, 'EarliestRestorableTime'),
      enabledCloudwatchLogsExports: _s
          .extractXmlChild(elem, 'EnabledCloudwatchLogsExports')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      endpoint: _s.extractXmlStringValue(elem, 'Endpoint'),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineLifecycleSupport:
          _s.extractXmlStringValue(elem, 'EngineLifecycleSupport'),
      engineMode: _s.extractXmlStringValue(elem, 'EngineMode'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      globalWriteForwardingRequested:
          _s.extractXmlBoolValue(elem, 'GlobalWriteForwardingRequested'),
      globalWriteForwardingStatus: _s
          .extractXmlStringValue(elem, 'GlobalWriteForwardingStatus')
          ?.let(WriteForwardingStatus.fromString),
      hostedZoneId: _s.extractXmlStringValue(elem, 'HostedZoneId'),
      httpEndpointEnabled: _s.extractXmlBoolValue(elem, 'HttpEndpointEnabled'),
      iAMDatabaseAuthenticationEnabled:
          _s.extractXmlBoolValue(elem, 'IAMDatabaseAuthenticationEnabled'),
      iOOptimizedNextAllowedModificationTime: _s.extractXmlDateTimeValue(
          elem, 'IOOptimizedNextAllowedModificationTime'),
      iops: _s.extractXmlIntValue(elem, 'Iops'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      latestRestorableTime:
          _s.extractXmlDateTimeValue(elem, 'LatestRestorableTime'),
      limitlessDatabase: _s
          .extractXmlChild(elem, 'LimitlessDatabase')
          ?.let(LimitlessDatabase.fromXml),
      localWriteForwardingStatus: _s
          .extractXmlStringValue(elem, 'LocalWriteForwardingStatus')
          ?.let(LocalWriteForwardingStatus.fromString),
      masterUserSecret: _s
          .extractXmlChild(elem, 'MasterUserSecret')
          ?.let(MasterUserSecret.fromXml),
      masterUsername: _s.extractXmlStringValue(elem, 'MasterUsername'),
      monitoringInterval: _s.extractXmlIntValue(elem, 'MonitoringInterval'),
      monitoringRoleArn: _s.extractXmlStringValue(elem, 'MonitoringRoleArn'),
      multiAZ: _s.extractXmlBoolValue(elem, 'MultiAZ'),
      networkType: _s.extractXmlStringValue(elem, 'NetworkType'),
      pendingModifiedValues: _s
          .extractXmlChild(elem, 'PendingModifiedValues')
          ?.let(ClusterPendingModifiedValues.fromXml),
      percentProgress: _s.extractXmlStringValue(elem, 'PercentProgress'),
      performanceInsightsEnabled:
          _s.extractXmlBoolValue(elem, 'PerformanceInsightsEnabled'),
      performanceInsightsKMSKeyId:
          _s.extractXmlStringValue(elem, 'PerformanceInsightsKMSKeyId'),
      performanceInsightsRetentionPeriod:
          _s.extractXmlIntValue(elem, 'PerformanceInsightsRetentionPeriod'),
      port: _s.extractXmlIntValue(elem, 'Port'),
      preferredBackupWindow:
          _s.extractXmlStringValue(elem, 'PreferredBackupWindow'),
      preferredMaintenanceWindow:
          _s.extractXmlStringValue(elem, 'PreferredMaintenanceWindow'),
      publiclyAccessible: _s.extractXmlBoolValue(elem, 'PubliclyAccessible'),
      rdsCustomClusterConfiguration: _s
          .extractXmlChild(elem, 'RdsCustomClusterConfiguration')
          ?.let(RdsCustomClusterConfiguration.fromXml),
      readReplicaIdentifiers: _s
          .extractXmlChild(elem, 'ReadReplicaIdentifiers')
          ?.let((elem) =>
              _s.extractXmlStringListValues(elem, 'ReadReplicaIdentifier')),
      readerEndpoint: _s.extractXmlStringValue(elem, 'ReaderEndpoint'),
      replicationSourceIdentifier:
          _s.extractXmlStringValue(elem, 'ReplicationSourceIdentifier'),
      scalingConfigurationInfo: _s
          .extractXmlChild(elem, 'ScalingConfigurationInfo')
          ?.let(ScalingConfigurationInfo.fromXml),
      serverlessV2ScalingConfiguration: _s
          .extractXmlChild(elem, 'ServerlessV2ScalingConfiguration')
          ?.let(ServerlessV2ScalingConfigurationInfo.fromXml),
      status: _s.extractXmlStringValue(elem, 'Status'),
      statusInfos: _s.extractXmlChild(elem, 'StatusInfos')?.let((elem) => elem
          .findElements('DBClusterStatusInfo')
          .map(DBClusterStatusInfo.fromXml)
          .toList()),
      storageEncrypted: _s.extractXmlBoolValue(elem, 'StorageEncrypted'),
      storageThroughput: _s.extractXmlIntValue(elem, 'StorageThroughput'),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
      tagList: _s
          .extractXmlChild(elem, 'TagList')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
      vpcSecurityGroups: _s.extractXmlChild(elem, 'VpcSecurityGroups')?.let(
          (elem) => elem
              .findElements('VpcSecurityGroupMembership')
              .map(VpcSecurityGroupMembership.fromXml)
              .toList()),
    );
  }
}

/// An automated backup of a DB cluster. It consists of system backups,
/// transaction logs, and the database cluster properties that existed at the
/// time you deleted the source cluster.
class DBClusterAutomatedBackup {
  /// For all database engines except Amazon Aurora, <code>AllocatedStorage</code>
  /// specifies the allocated storage size in gibibytes (GiB). For Aurora,
  /// <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster
  /// storage size isn't fixed, but instead automatically adjusts as needed.
  final int? allocatedStorage;

  /// The Availability Zones where instances in the DB cluster can be created. For
  /// information on Amazon Web Services Regions and Availability Zones, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions
  /// and Availability Zones</a>.
  final List<String>? availabilityZones;

  /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services
  /// Backup.
  final String? awsBackupRecoveryPointArn;

  /// The retention period for the automated backups.
  final int? backupRetentionPeriod;

  /// The time when the DB cluster was created, in Universal Coordinated Time
  /// (UTC).
  final DateTime? clusterCreateTime;

  /// The Amazon Resource Name (ARN) for the source DB cluster.
  final String? dBClusterArn;

  /// The Amazon Resource Name (ARN) for the automated backups.
  final String? dBClusterAutomatedBackupsArn;

  /// The identifier for the source DB cluster, which can't be changed and which
  /// is unique to an Amazon Web Services Region.
  final String? dBClusterIdentifier;

  /// The resource ID for the source DB cluster, which can't be changed and which
  /// is unique to an Amazon Web Services Region.
  final String? dbClusterResourceId;

  /// The name of the database engine for this automated backup.
  final String? engine;

  /// The engine mode of the database engine for the automated backup.
  final String? engineMode;

  /// The version of the database engine for the automated backup.
  final String? engineVersion;

  /// Indicates whether mapping of Amazon Web Services Identity and Access
  /// Management (IAM) accounts to database accounts is enabled.
  final bool? iAMDatabaseAuthenticationEnabled;

  /// The IOPS (I/O operations per second) value for the automated backup.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final int? iops;

  /// The Amazon Web Services KMS key ID for an automated backup.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  final String? kmsKeyId;

  /// The license model information for this DB cluster automated backup.
  final String? licenseModel;

  /// The master user name of the automated backup.
  final String? masterUsername;

  /// The port number that the automated backup used for connections.
  ///
  /// Default: Inherits from the source DB cluster
  ///
  /// Valid Values: <code>1150-65535</code>
  final int? port;

  /// The Amazon Web Services Region associated with the automated backup.
  final String? region;
  final RestoreWindow? restoreWindow;

  /// A list of status information for an automated backup:
  ///
  /// <ul>
  /// <li>
  /// <code>retained</code> - Automated backups for deleted clusters.
  /// </li>
  /// </ul>
  final String? status;

  /// Indicates whether the source DB cluster is encrypted.
  final bool? storageEncrypted;

  /// The storage throughput for the automated backup. The throughput is
  /// automatically set based on the IOPS that you provision, and is not
  /// configurable.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final int? storageThroughput;

  /// The storage type associated with the DB cluster.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final String? storageType;

  /// The VPC ID associated with the DB cluster.
  final String? vpcId;

  DBClusterAutomatedBackup({
    this.allocatedStorage,
    this.availabilityZones,
    this.awsBackupRecoveryPointArn,
    this.backupRetentionPeriod,
    this.clusterCreateTime,
    this.dBClusterArn,
    this.dBClusterAutomatedBackupsArn,
    this.dBClusterIdentifier,
    this.dbClusterResourceId,
    this.engine,
    this.engineMode,
    this.engineVersion,
    this.iAMDatabaseAuthenticationEnabled,
    this.iops,
    this.kmsKeyId,
    this.licenseModel,
    this.masterUsername,
    this.port,
    this.region,
    this.restoreWindow,
    this.status,
    this.storageEncrypted,
    this.storageThroughput,
    this.storageType,
    this.vpcId,
  });
  factory DBClusterAutomatedBackup.fromXml(_s.XmlElement elem) {
    return DBClusterAutomatedBackup(
      allocatedStorage: _s.extractXmlIntValue(elem, 'AllocatedStorage'),
      availabilityZones: _s.extractXmlChild(elem, 'AvailabilityZones')?.let(
          (elem) => _s.extractXmlStringListValues(elem, 'AvailabilityZone')),
      awsBackupRecoveryPointArn:
          _s.extractXmlStringValue(elem, 'AwsBackupRecoveryPointArn'),
      backupRetentionPeriod:
          _s.extractXmlIntValue(elem, 'BackupRetentionPeriod'),
      clusterCreateTime: _s.extractXmlDateTimeValue(elem, 'ClusterCreateTime'),
      dBClusterArn: _s.extractXmlStringValue(elem, 'DBClusterArn'),
      dBClusterAutomatedBackupsArn:
          _s.extractXmlStringValue(elem, 'DBClusterAutomatedBackupsArn'),
      dBClusterIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterIdentifier'),
      dbClusterResourceId:
          _s.extractXmlStringValue(elem, 'DbClusterResourceId'),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineMode: _s.extractXmlStringValue(elem, 'EngineMode'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      iAMDatabaseAuthenticationEnabled:
          _s.extractXmlBoolValue(elem, 'IAMDatabaseAuthenticationEnabled'),
      iops: _s.extractXmlIntValue(elem, 'Iops'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      licenseModel: _s.extractXmlStringValue(elem, 'LicenseModel'),
      masterUsername: _s.extractXmlStringValue(elem, 'MasterUsername'),
      port: _s.extractXmlIntValue(elem, 'Port'),
      region: _s.extractXmlStringValue(elem, 'Region'),
      restoreWindow:
          _s.extractXmlChild(elem, 'RestoreWindow')?.let(RestoreWindow.fromXml),
      status: _s.extractXmlStringValue(elem, 'Status'),
      storageEncrypted: _s.extractXmlBoolValue(elem, 'StorageEncrypted'),
      storageThroughput: _s.extractXmlIntValue(elem, 'StorageThroughput'),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
      vpcId: _s.extractXmlStringValue(elem, 'VpcId'),
    );
  }
}

class DBClusterAutomatedBackupMessage {
  /// A list of <code>DBClusterAutomatedBackup</code> backups.
  final List<DBClusterAutomatedBackup>? dBClusterAutomatedBackups;

  /// The pagination token provided in the previous request. If this parameter is
  /// specified the response includes only records beyond the marker, up to
  /// <code>MaxRecords</code>.
  final String? marker;

  DBClusterAutomatedBackupMessage({
    this.dBClusterAutomatedBackups,
    this.marker,
  });
  factory DBClusterAutomatedBackupMessage.fromXml(_s.XmlElement elem) {
    return DBClusterAutomatedBackupMessage(
      dBClusterAutomatedBackups: _s
          .extractXmlChild(elem, 'DBClusterAutomatedBackups')
          ?.let((elem) => elem
              .findElements('DBClusterAutomatedBackup')
              .map(DBClusterAutomatedBackup.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// This data type is used as a response element in the
/// <code>DescribeDBClusterBacktracks</code> action.
class DBClusterBacktrack {
  /// Contains the backtrack identifier.
  final String? backtrackIdentifier;

  /// The timestamp of the time at which the backtrack was requested.
  final DateTime? backtrackRequestCreationTime;

  /// The timestamp of the time to which the DB cluster was backtracked.
  final DateTime? backtrackTo;

  /// The timestamp of the time from which the DB cluster was backtracked.
  final DateTime? backtrackedFrom;

  /// Contains a user-supplied DB cluster identifier. This identifier is the
  /// unique key that identifies a DB cluster.
  final String? dBClusterIdentifier;

  /// The status of the backtrack. This property returns one of the following
  /// values:
  ///
  /// <ul>
  /// <li>
  /// <code>applying</code> - The backtrack is currently being applied to or
  /// rolled back from the DB cluster.
  /// </li>
  /// <li>
  /// <code>completed</code> - The backtrack has successfully been applied to or
  /// rolled back from the DB cluster.
  /// </li>
  /// <li>
  /// <code>failed</code> - An error occurred while the backtrack was applied to
  /// or rolled back from the DB cluster.
  /// </li>
  /// <li>
  /// <code>pending</code> - The backtrack is currently pending application to or
  /// rollback from the DB cluster.
  /// </li>
  /// </ul>
  final String? status;

  DBClusterBacktrack({
    this.backtrackIdentifier,
    this.backtrackRequestCreationTime,
    this.backtrackTo,
    this.backtrackedFrom,
    this.dBClusterIdentifier,
    this.status,
  });
  factory DBClusterBacktrack.fromXml(_s.XmlElement elem) {
    return DBClusterBacktrack(
      backtrackIdentifier:
          _s.extractXmlStringValue(elem, 'BacktrackIdentifier'),
      backtrackRequestCreationTime:
          _s.extractXmlDateTimeValue(elem, 'BacktrackRequestCreationTime'),
      backtrackTo: _s.extractXmlDateTimeValue(elem, 'BacktrackTo'),
      backtrackedFrom: _s.extractXmlDateTimeValue(elem, 'BacktrackedFrom'),
      dBClusterIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterIdentifier'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBClusterBacktracks</code> action.
class DBClusterBacktrackMessage {
  /// Contains a list of backtracks for the user.
  final List<DBClusterBacktrack>? dBClusterBacktracks;

  /// A pagination token that can be used in a later
  /// <code>DescribeDBClusterBacktracks</code> request.
  final String? marker;

  DBClusterBacktrackMessage({
    this.dBClusterBacktracks,
    this.marker,
  });
  factory DBClusterBacktrackMessage.fromXml(_s.XmlElement elem) {
    return DBClusterBacktrackMessage(
      dBClusterBacktracks: _s.extractXmlChild(elem, 'DBClusterBacktracks')?.let(
          (elem) => elem
              .findElements('DBClusterBacktrack')
              .map(DBClusterBacktrack.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class DBClusterCapacityInfo {
  /// The current capacity of the DB cluster.
  final int? currentCapacity;

  /// A user-supplied DB cluster identifier. This identifier is the unique key
  /// that identifies a DB cluster.
  final String? dBClusterIdentifier;

  /// A value that specifies the capacity that the DB cluster scales to next.
  final int? pendingCapacity;

  /// The number of seconds before a call to
  /// <code>ModifyCurrentDBClusterCapacity</code> times out.
  final int? secondsBeforeTimeout;

  /// The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>,
  /// either <code>ForceApplyCapacityChange</code> or
  /// <code>RollbackCapacityChange</code>.
  final String? timeoutAction;

  DBClusterCapacityInfo({
    this.currentCapacity,
    this.dBClusterIdentifier,
    this.pendingCapacity,
    this.secondsBeforeTimeout,
    this.timeoutAction,
  });
  factory DBClusterCapacityInfo.fromXml(_s.XmlElement elem) {
    return DBClusterCapacityInfo(
      currentCapacity: _s.extractXmlIntValue(elem, 'CurrentCapacity'),
      dBClusterIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterIdentifier'),
      pendingCapacity: _s.extractXmlIntValue(elem, 'PendingCapacity'),
      secondsBeforeTimeout: _s.extractXmlIntValue(elem, 'SecondsBeforeTimeout'),
      timeoutAction: _s.extractXmlStringValue(elem, 'TimeoutAction'),
    );
  }
}

/// This data type represents the information you need to connect to an Amazon
/// Aurora DB cluster. This data type is used as a response element in the
/// following actions:
///
/// <ul>
/// <li>
/// <code>CreateDBClusterEndpoint</code>
/// </li>
/// <li>
/// <code>DescribeDBClusterEndpoints</code>
/// </li>
/// <li>
/// <code>ModifyDBClusterEndpoint</code>
/// </li>
/// <li>
/// <code>DeleteDBClusterEndpoint</code>
/// </li>
/// </ul>
/// For the data structure that represents Amazon RDS DB instance endpoints, see
/// <code>Endpoint</code>.
class DBClusterEndpoint {
  /// The type associated with a custom endpoint. One of: <code>READER</code>,
  /// <code>WRITER</code>, <code>ANY</code>.
  final String? customEndpointType;

  /// The Amazon Resource Name (ARN) for the endpoint.
  final String? dBClusterEndpointArn;

  /// The identifier associated with the endpoint. This parameter is stored as a
  /// lowercase string.
  final String? dBClusterEndpointIdentifier;

  /// A unique system-generated identifier for an endpoint. It remains the same
  /// for the whole life of the endpoint.
  final String? dBClusterEndpointResourceIdentifier;

  /// The DB cluster identifier of the DB cluster associated with the endpoint.
  /// This parameter is stored as a lowercase string.
  final String? dBClusterIdentifier;

  /// The DNS address of the endpoint.
  final String? endpoint;

  /// The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>,
  /// <code>CUSTOM</code>.
  final String? endpointType;

  /// List of DB instance identifiers that aren't part of the custom endpoint
  /// group. All other eligible instances are reachable through the custom
  /// endpoint. Only relevant if the list of static members is empty.
  final List<String>? excludedMembers;

  /// List of DB instance identifiers that are part of the custom endpoint group.
  final List<String>? staticMembers;

  /// The current status of the endpoint. One of: <code>creating</code>,
  /// <code>available</code>, <code>deleting</code>, <code>inactive</code>,
  /// <code>modifying</code>. The <code>inactive</code> state applies to an
  /// endpoint that can't be used for a certain kind of cluster, such as a
  /// <code>writer</code> endpoint for a read-only secondary cluster in a global
  /// database.
  final String? status;

  DBClusterEndpoint({
    this.customEndpointType,
    this.dBClusterEndpointArn,
    this.dBClusterEndpointIdentifier,
    this.dBClusterEndpointResourceIdentifier,
    this.dBClusterIdentifier,
    this.endpoint,
    this.endpointType,
    this.excludedMembers,
    this.staticMembers,
    this.status,
  });
  factory DBClusterEndpoint.fromXml(_s.XmlElement elem) {
    return DBClusterEndpoint(
      customEndpointType: _s.extractXmlStringValue(elem, 'CustomEndpointType'),
      dBClusterEndpointArn:
          _s.extractXmlStringValue(elem, 'DBClusterEndpointArn'),
      dBClusterEndpointIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterEndpointIdentifier'),
      dBClusterEndpointResourceIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterEndpointResourceIdentifier'),
      dBClusterIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterIdentifier'),
      endpoint: _s.extractXmlStringValue(elem, 'Endpoint'),
      endpointType: _s.extractXmlStringValue(elem, 'EndpointType'),
      excludedMembers: _s
          .extractXmlChild(elem, 'ExcludedMembers')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      staticMembers: _s
          .extractXmlChild(elem, 'StaticMembers')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

class DBClusterEndpointMessage {
  /// Contains the details of the endpoints associated with the cluster and
  /// matching any filter conditions.
  final List<DBClusterEndpoint>? dBClusterEndpoints;

  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusterEndpoints</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  final String? marker;

  DBClusterEndpointMessage({
    this.dBClusterEndpoints,
    this.marker,
  });
  factory DBClusterEndpointMessage.fromXml(_s.XmlElement elem) {
    return DBClusterEndpointMessage(
      dBClusterEndpoints: _s.extractXmlChild(elem, 'DBClusterEndpoints')?.let(
          (elem) => elem
              .findElements('DBClusterEndpointList')
              .map(DBClusterEndpoint.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Contains information about an instance that is part of a DB cluster.
class DBClusterMember {
  /// Specifies the status of the DB cluster parameter group for this member of
  /// the DB cluster.
  final String? dBClusterParameterGroupStatus;

  /// Specifies the instance identifier for this member of the DB cluster.
  final String? dBInstanceIdentifier;

  /// Indicates whether the cluster member is the primary DB instance for the DB
  /// cluster.
  final bool? isClusterWriter;

  /// A value that specifies the order in which an Aurora Replica is promoted to
  /// the primary instance after a failure of the existing primary instance. For
  /// more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance">
  /// Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  final int? promotionTier;

  DBClusterMember({
    this.dBClusterParameterGroupStatus,
    this.dBInstanceIdentifier,
    this.isClusterWriter,
    this.promotionTier,
  });
  factory DBClusterMember.fromXml(_s.XmlElement elem) {
    return DBClusterMember(
      dBClusterParameterGroupStatus:
          _s.extractXmlStringValue(elem, 'DBClusterParameterGroupStatus'),
      dBInstanceIdentifier:
          _s.extractXmlStringValue(elem, 'DBInstanceIdentifier'),
      isClusterWriter: _s.extractXmlBoolValue(elem, 'IsClusterWriter'),
      promotionTier: _s.extractXmlIntValue(elem, 'PromotionTier'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBClusters</code> action.
class DBClusterMessage {
  /// Contains a list of DB clusters for the user.
  final List<DBCluster>? dBClusters;

  /// A pagination token that can be used in a later
  /// <code>DescribeDBClusters</code> request.
  final String? marker;

  DBClusterMessage({
    this.dBClusters,
    this.marker,
  });
  factory DBClusterMessage.fromXml(_s.XmlElement elem) {
    return DBClusterMessage(
      dBClusters: _s.extractXmlChild(elem, 'DBClusters')?.let((elem) =>
          elem.findElements('DBCluster').map(DBCluster.fromXml).toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Contains status information for a DB cluster option group.
class DBClusterOptionGroupStatus {
  /// Specifies the name of the DB cluster option group.
  final String? dBClusterOptionGroupName;

  /// Specifies the status of the DB cluster option group.
  final String? status;

  DBClusterOptionGroupStatus({
    this.dBClusterOptionGroupName,
    this.status,
  });
  factory DBClusterOptionGroupStatus.fromXml(_s.XmlElement elem) {
    return DBClusterOptionGroupStatus(
      dBClusterOptionGroupName:
          _s.extractXmlStringValue(elem, 'DBClusterOptionGroupName'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// Contains the details of an Amazon RDS DB cluster parameter group.
///
/// This data type is used as a response element in the
/// <code>DescribeDBClusterParameterGroups</code> action.
class DBClusterParameterGroup {
  /// The Amazon Resource Name (ARN) for the DB cluster parameter group.
  final String? dBClusterParameterGroupArn;

  /// The name of the DB cluster parameter group.
  final String? dBClusterParameterGroupName;

  /// The name of the DB parameter group family that this DB cluster parameter
  /// group is compatible with.
  final String? dBParameterGroupFamily;

  /// Provides the customer-specified description for this DB cluster parameter
  /// group.
  final String? description;

  DBClusterParameterGroup({
    this.dBClusterParameterGroupArn,
    this.dBClusterParameterGroupName,
    this.dBParameterGroupFamily,
    this.description,
  });
  factory DBClusterParameterGroup.fromXml(_s.XmlElement elem) {
    return DBClusterParameterGroup(
      dBClusterParameterGroupArn:
          _s.extractXmlStringValue(elem, 'DBClusterParameterGroupArn'),
      dBClusterParameterGroupName:
          _s.extractXmlStringValue(elem, 'DBClusterParameterGroupName'),
      dBParameterGroupFamily:
          _s.extractXmlStringValue(elem, 'DBParameterGroupFamily'),
      description: _s.extractXmlStringValue(elem, 'Description'),
    );
  }
}

/// Provides details about a DB cluster parameter group including the parameters
/// in the DB cluster parameter group.
class DBClusterParameterGroupDetails {
  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusterParameters</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  final String? marker;

  /// Provides a list of parameters for the DB cluster parameter group.
  final List<Parameter>? parameters;

  DBClusterParameterGroupDetails({
    this.marker,
    this.parameters,
  });
  factory DBClusterParameterGroupDetails.fromXml(_s.XmlElement elem) {
    return DBClusterParameterGroupDetails(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      parameters: _s.extractXmlChild(elem, 'Parameters')?.let((elem) =>
          elem.findElements('Parameter').map(Parameter.fromXml).toList()),
    );
  }
}

/// <p/>
class DBClusterParameterGroupNameMessage {
  /// The name of the DB cluster parameter group.
  ///
  /// Constraints:
  ///
  /// <ul>
  /// <li>
  /// Must be 1 to 255 letters or numbers.
  /// </li>
  /// <li>
  /// First character must be a letter
  /// </li>
  /// <li>
  /// Can't end with a hyphen or contain two consecutive hyphens
  /// </li>
  /// </ul> <note>
  /// This value is stored as a lowercase string.
  /// </note>
  final String? dBClusterParameterGroupName;

  DBClusterParameterGroupNameMessage({
    this.dBClusterParameterGroupName,
  });
  factory DBClusterParameterGroupNameMessage.fromXml(_s.XmlElement elem) {
    return DBClusterParameterGroupNameMessage(
      dBClusterParameterGroupName:
          _s.extractXmlStringValue(elem, 'DBClusterParameterGroupName'),
    );
  }
}

/// <p/>
class DBClusterParameterGroupsMessage {
  /// A list of DB cluster parameter groups.
  final List<DBClusterParameterGroup>? dBClusterParameterGroups;

  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusterParameterGroups</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  final String? marker;

  DBClusterParameterGroupsMessage({
    this.dBClusterParameterGroups,
    this.marker,
  });
  factory DBClusterParameterGroupsMessage.fromXml(_s.XmlElement elem) {
    return DBClusterParameterGroupsMessage(
      dBClusterParameterGroups: _s
          .extractXmlChild(elem, 'DBClusterParameterGroups')
          ?.let((elem) => elem
              .findElements('DBClusterParameterGroup')
              .map(DBClusterParameterGroup.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Describes an Amazon Web Services Identity and Access Management (IAM) role
/// that is associated with a DB cluster.
class DBClusterRole {
  /// The name of the feature associated with the Amazon Web Services Identity and
  /// Access Management (IAM) role. For information about supported feature names,
  /// see <a>DBEngineVersion</a>.
  final String? featureName;

  /// The Amazon Resource Name (ARN) of the IAM role that is associated with the
  /// DB cluster.
  final String? roleArn;

  /// Describes the state of association between the IAM role and the DB cluster.
  /// The Status property returns one of the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>ACTIVE</code> - the IAM role ARN is associated with the DB cluster and
  /// can be used to access other Amazon Web Services on your behalf.
  /// </li>
  /// <li>
  /// <code>PENDING</code> - the IAM role ARN is being associated with the DB
  /// cluster.
  /// </li>
  /// <li>
  /// <code>INVALID</code> - the IAM role ARN is associated with the DB cluster,
  /// but the DB cluster is unable to assume the IAM role in order to access other
  /// Amazon Web Services on your behalf.
  /// </li>
  /// </ul>
  final String? status;

  DBClusterRole({
    this.featureName,
    this.roleArn,
    this.status,
  });
  factory DBClusterRole.fromXml(_s.XmlElement elem) {
    return DBClusterRole(
      featureName: _s.extractXmlStringValue(elem, 'FeatureName'),
      roleArn: _s.extractXmlStringValue(elem, 'RoleArn'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// Contains the details for an Amazon RDS DB cluster snapshot
///
/// This data type is used as a response element in the
/// <code>DescribeDBClusterSnapshots</code> action.
class DBClusterSnapshot {
  /// The allocated storage size of the DB cluster snapshot in gibibytes (GiB).
  final int? allocatedStorage;

  /// The list of Availability Zones (AZs) where instances in the DB cluster
  /// snapshot can be restored.
  final List<String>? availabilityZones;

  /// The time when the DB cluster was created, in Universal Coordinated Time
  /// (UTC).
  final DateTime? clusterCreateTime;

  /// The DB cluster identifier of the DB cluster that this DB cluster snapshot
  /// was created from.
  final String? dBClusterIdentifier;

  /// The Amazon Resource Name (ARN) for the DB cluster snapshot.
  final String? dBClusterSnapshotArn;

  /// The identifier for the DB cluster snapshot.
  final String? dBClusterSnapshotIdentifier;

  /// Reserved for future use.
  final String? dBSystemId;

  /// The resource ID of the DB cluster that this DB cluster snapshot was created
  /// from.
  final String? dbClusterResourceId;

  /// The name of the database engine for this DB cluster snapshot.
  final String? engine;

  /// The engine mode of the database engine for this DB cluster snapshot.
  final String? engineMode;

  /// The version of the database engine for this DB cluster snapshot.
  final String? engineVersion;

  /// Indicates whether mapping of Amazon Web Services Identity and Access
  /// Management (IAM) accounts to database accounts is enabled.
  final bool? iAMDatabaseAuthenticationEnabled;

  /// If <code>StorageEncrypted</code> is true, the Amazon Web Services KMS key
  /// identifier for the encrypted DB cluster snapshot.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  final String? kmsKeyId;

  /// The license model information for this DB cluster snapshot.
  final String? licenseModel;

  /// The master username for this DB cluster snapshot.
  final String? masterUsername;

  /// The percentage of the estimated data that has been transferred.
  final int? percentProgress;

  /// The port that the DB cluster was listening on at the time of the snapshot.
  final int? port;

  /// The time when the snapshot was taken, in Universal Coordinated Time (UTC).
  final DateTime? snapshotCreateTime;

  /// The type of the DB cluster snapshot.
  final String? snapshotType;

  /// If the DB cluster snapshot was copied from a source DB cluster snapshot, the
  /// Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a
  /// null value.
  final String? sourceDBClusterSnapshotArn;

  /// The status of this DB cluster snapshot. Valid statuses are the following:
  ///
  /// <ul>
  /// <li>
  /// <code>available</code>
  /// </li>
  /// <li>
  /// <code>copying</code>
  /// </li>
  /// <li>
  /// <code>creating</code>
  /// </li>
  /// </ul>
  final String? status;

  /// Indicates whether the DB cluster snapshot is encrypted.
  final bool? storageEncrypted;

  /// The storage throughput for the DB cluster snapshot. The throughput is
  /// automatically set based on the IOPS that you provision, and is not
  /// configurable.
  ///
  /// This setting is only for non-Aurora Multi-AZ DB clusters.
  final int? storageThroughput;

  /// The storage type associated with the DB cluster snapshot.
  ///
  /// This setting is only for Aurora DB clusters.
  final String? storageType;
  final List<Tag>? tagList;

  /// The VPC ID associated with the DB cluster snapshot.
  final String? vpcId;

  DBClusterSnapshot({
    this.allocatedStorage,
    this.availabilityZones,
    this.clusterCreateTime,
    this.dBClusterIdentifier,
    this.dBClusterSnapshotArn,
    this.dBClusterSnapshotIdentifier,
    this.dBSystemId,
    this.dbClusterResourceId,
    this.engine,
    this.engineMode,
    this.engineVersion,
    this.iAMDatabaseAuthenticationEnabled,
    this.kmsKeyId,
    this.licenseModel,
    this.masterUsername,
    this.percentProgress,
    this.port,
    this.snapshotCreateTime,
    this.snapshotType,
    this.sourceDBClusterSnapshotArn,
    this.status,
    this.storageEncrypted,
    this.storageThroughput,
    this.storageType,
    this.tagList,
    this.vpcId,
  });
  factory DBClusterSnapshot.fromXml(_s.XmlElement elem) {
    return DBClusterSnapshot(
      allocatedStorage: _s.extractXmlIntValue(elem, 'AllocatedStorage'),
      availabilityZones: _s.extractXmlChild(elem, 'AvailabilityZones')?.let(
          (elem) => _s.extractXmlStringListValues(elem, 'AvailabilityZone')),
      clusterCreateTime: _s.extractXmlDateTimeValue(elem, 'ClusterCreateTime'),
      dBClusterIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterIdentifier'),
      dBClusterSnapshotArn:
          _s.extractXmlStringValue(elem, 'DBClusterSnapshotArn'),
      dBClusterSnapshotIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterSnapshotIdentifier'),
      dBSystemId: _s.extractXmlStringValue(elem, 'DBSystemId'),
      dbClusterResourceId:
          _s.extractXmlStringValue(elem, 'DbClusterResourceId'),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineMode: _s.extractXmlStringValue(elem, 'EngineMode'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      iAMDatabaseAuthenticationEnabled:
          _s.extractXmlBoolValue(elem, 'IAMDatabaseAuthenticationEnabled'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      licenseModel: _s.extractXmlStringValue(elem, 'LicenseModel'),
      masterUsername: _s.extractXmlStringValue(elem, 'MasterUsername'),
      percentProgress: _s.extractXmlIntValue(elem, 'PercentProgress'),
      port: _s.extractXmlIntValue(elem, 'Port'),
      snapshotCreateTime:
          _s.extractXmlDateTimeValue(elem, 'SnapshotCreateTime'),
      snapshotType: _s.extractXmlStringValue(elem, 'SnapshotType'),
      sourceDBClusterSnapshotArn:
          _s.extractXmlStringValue(elem, 'SourceDBClusterSnapshotArn'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      storageEncrypted: _s.extractXmlBoolValue(elem, 'StorageEncrypted'),
      storageThroughput: _s.extractXmlIntValue(elem, 'StorageThroughput'),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
      tagList: _s
          .extractXmlChild(elem, 'TagList')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
      vpcId: _s.extractXmlStringValue(elem, 'VpcId'),
    );
  }
}

/// Contains the name and values of a manual DB cluster snapshot attribute.
///
/// Manual DB cluster snapshot attributes are used to authorize other Amazon Web
/// Services accounts to restore a manual DB cluster snapshot. For more
/// information, see the <code>ModifyDBClusterSnapshotAttribute</code> API
/// action.
class DBClusterSnapshotAttribute {
  /// The name of the manual DB cluster snapshot attribute.
  ///
  /// The attribute named <code>restore</code> refers to the list of Amazon Web
  /// Services accounts that have permission to copy or restore the manual DB
  /// cluster snapshot. For more information, see the
  /// <code>ModifyDBClusterSnapshotAttribute</code> API action.
  final String? attributeName;

  /// The value(s) for the manual DB cluster snapshot attribute.
  ///
  /// If the <code>AttributeName</code> field is set to <code>restore</code>, then
  /// this element returns a list of IDs of the Amazon Web Services accounts that
  /// are authorized to copy or restore the manual DB cluster snapshot. If a value
  /// of <code>all</code> is in the list, then the manual DB cluster snapshot is
  /// public and available for any Amazon Web Services account to copy or restore.
  final List<String>? attributeValues;

  DBClusterSnapshotAttribute({
    this.attributeName,
    this.attributeValues,
  });
  factory DBClusterSnapshotAttribute.fromXml(_s.XmlElement elem) {
    return DBClusterSnapshotAttribute(
      attributeName: _s.extractXmlStringValue(elem, 'AttributeName'),
      attributeValues: _s.extractXmlChild(elem, 'AttributeValues')?.let(
          (elem) => _s.extractXmlStringListValues(elem, 'AttributeValue')),
    );
  }
}

/// Contains the results of a successful call to the
/// <code>DescribeDBClusterSnapshotAttributes</code> API action.
///
/// Manual DB cluster snapshot attributes are used to authorize other Amazon Web
/// Services accounts to copy or restore a manual DB cluster snapshot. For more
/// information, see the <code>ModifyDBClusterSnapshotAttribute</code> API
/// action.
class DBClusterSnapshotAttributesResult {
  /// The list of attributes and values for the manual DB cluster snapshot.
  final List<DBClusterSnapshotAttribute>? dBClusterSnapshotAttributes;

  /// The identifier of the manual DB cluster snapshot that the attributes apply
  /// to.
  final String? dBClusterSnapshotIdentifier;

  DBClusterSnapshotAttributesResult({
    this.dBClusterSnapshotAttributes,
    this.dBClusterSnapshotIdentifier,
  });
  factory DBClusterSnapshotAttributesResult.fromXml(_s.XmlElement elem) {
    return DBClusterSnapshotAttributesResult(
      dBClusterSnapshotAttributes: _s
          .extractXmlChild(elem, 'DBClusterSnapshotAttributes')
          ?.let((elem) => elem
              .findElements('DBClusterSnapshotAttribute')
              .map(DBClusterSnapshotAttribute.fromXml)
              .toList()),
      dBClusterSnapshotIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterSnapshotIdentifier'),
    );
  }
}

/// Provides a list of DB cluster snapshots for the user as the result of a call
/// to the <code>DescribeDBClusterSnapshots</code> action.
class DBClusterSnapshotMessage {
  /// Provides a list of DB cluster snapshots for the user.
  final List<DBClusterSnapshot>? dBClusterSnapshots;

  /// An optional pagination token provided by a previous
  /// <code>DescribeDBClusterSnapshots</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  final String? marker;

  DBClusterSnapshotMessage({
    this.dBClusterSnapshots,
    this.marker,
  });
  factory DBClusterSnapshotMessage.fromXml(_s.XmlElement elem) {
    return DBClusterSnapshotMessage(
      dBClusterSnapshots: _s.extractXmlChild(elem, 'DBClusterSnapshots')?.let(
          (elem) => elem
              .findElements('DBClusterSnapshot')
              .map(DBClusterSnapshot.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Reserved for future use.
class DBClusterStatusInfo {
  /// Reserved for future use.
  final String? message;

  /// Reserved for future use.
  final bool? normal;

  /// Reserved for future use.
  final String? status;

  /// Reserved for future use.
  final String? statusType;

  DBClusterStatusInfo({
    this.message,
    this.normal,
    this.status,
    this.statusType,
  });
  factory DBClusterStatusInfo.fromXml(_s.XmlElement elem) {
    return DBClusterStatusInfo(
      message: _s.extractXmlStringValue(elem, 'Message'),
      normal: _s.extractXmlBoolValue(elem, 'Normal'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      statusType: _s.extractXmlStringValue(elem, 'StatusType'),
    );
  }
}

/// This data type is used as a response element in the action
/// <code>DescribeDBEngineVersions</code>.
class DBEngineVersion {
  /// The creation time of the DB engine version.
  final DateTime? createTime;

  /// JSON string that lists the installation files and parameters that RDS Custom
  /// uses to create a custom engine version (CEV). RDS Custom applies the patches
  /// in the order in which they're listed in the manifest. You can set the Oracle
  /// home, Oracle base, and UNIX/Linux user and group using the installation
  /// parameters. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.preparing.html#custom-cev.preparing.manifest.fields">JSON
  /// fields in the CEV manifest</a> in the <i>Amazon RDS User Guide</i>.
  final String? customDBEngineVersionManifest;

  /// The description of the database engine.
  final String? dBEngineDescription;

  /// A value that indicates the source media provider of the AMI based on the
  /// usage operation. Applicable for RDS Custom for SQL Server.
  final String? dBEngineMediaType;

  /// The ARN of the custom engine version.
  final String? dBEngineVersionArn;

  /// The description of the database engine version.
  final String? dBEngineVersionDescription;

  /// The name of the DB parameter group family for the database engine.
  final String? dBParameterGroupFamily;

  /// The name of the Amazon S3 bucket that contains your database installation
  /// files.
  final String? databaseInstallationFilesS3BucketName;

  /// The Amazon S3 directory that contains the database installation files. If
  /// not specified, then no prefix is assumed.
  final String? databaseInstallationFilesS3Prefix;

  /// The default character set for new instances of this engine version, if the
  /// <code>CharacterSetName</code> parameter of the CreateDBInstance API isn't
  /// specified.
  final CharacterSet? defaultCharacterSet;

  /// The name of the database engine.
  final String? engine;

  /// The version number of the database engine.
  final String? engineVersion;

  /// The types of logs that the database engine has available for export to
  /// CloudWatch Logs.
  final List<String>? exportableLogTypes;

  /// The EC2 image
  final CustomDBEngineVersionAMI? image;

  /// The Amazon Web Services KMS key identifier for an encrypted CEV. This
  /// parameter is required for RDS Custom, but optional for Amazon RDS.
  final String? kMSKeyId;

  /// The major engine version of the CEV.
  final String? majorEngineVersion;

  /// The status of the DB engine version, either <code>available</code> or
  /// <code>deprecated</code>.
  final String? status;

  /// A list of the supported CA certificate identifiers.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  final List<String>? supportedCACertificateIdentifiers;

  /// A list of the character sets supported by this engine for the
  /// <code>CharacterSetName</code> parameter of the <code>CreateDBInstance</code>
  /// operation.
  final List<CharacterSet>? supportedCharacterSets;

  /// A list of the supported DB engine modes.
  final List<String>? supportedEngineModes;

  /// A list of features supported by the DB engine.
  ///
  /// The supported features vary by DB engine and DB engine version.
  ///
  /// To determine the supported features for a specific DB engine and DB engine
  /// version using the CLI, use the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine &lt;engine_name&gt;
  /// --engine-version &lt;engine_version&gt;</code>
  ///
  /// For example, to determine the supported features for RDS for PostgreSQL
  /// version 13.3 using the CLI, use the following command:
  ///
  /// <code>aws rds describe-db-engine-versions --engine postgres --engine-version
  /// 13.3</code>
  ///
  /// The supported features are listed under <code>SupportedFeatureNames</code>
  /// in the output.
  final List<String>? supportedFeatureNames;

  /// A list of the character sets supported by the Oracle DB engine for the
  /// <code>NcharCharacterSetName</code> parameter of the
  /// <code>CreateDBInstance</code> operation.
  final List<CharacterSet>? supportedNcharCharacterSets;

  /// A list of the time zones supported by this engine for the
  /// <code>Timezone</code> parameter of the <code>CreateDBInstance</code> action.
  final List<Timezone>? supportedTimezones;

  /// Indicates whether the engine version supports Babelfish for Aurora
  /// PostgreSQL.
  final bool? supportsBabelfish;

  /// Indicates whether the engine version supports rotating the server
  /// certificate without rebooting the DB instance.
  final bool? supportsCertificateRotationWithoutRestart;

  /// Indicates whether you can use Aurora global databases with a specific DB
  /// engine version.
  final bool? supportsGlobalDatabases;

  /// Indicates whether the DB engine version supports zero-ETL integrations with
  /// Amazon Redshift.
  final bool? supportsIntegrations;

  /// Indicates whether the DB engine version supports Aurora Limitless Database.
  final bool? supportsLimitlessDatabase;

  /// Indicates whether the DB engine version supports forwarding write operations
  /// from reader DB instances to the writer DB instance in the DB cluster. By
  /// default, write operations aren't allowed on reader DB instances.
  ///
  /// Valid for: Aurora DB clusters only
  final bool? supportsLocalWriteForwarding;

  /// Indicates whether the engine version supports exporting the log types
  /// specified by ExportableLogTypes to CloudWatch Logs.
  final bool? supportsLogExportsToCloudwatchLogs;

  /// Indicates whether you can use Aurora parallel query with a specific DB
  /// engine version.
  final bool? supportsParallelQuery;

  /// Indicates whether the database engine version supports read replicas.
  final bool? supportsReadReplica;
  final List<Tag>? tagList;

  /// A list of engine versions that this database engine version can be upgraded
  /// to.
  final List<UpgradeTarget>? validUpgradeTarget;

  DBEngineVersion({
    this.createTime,
    this.customDBEngineVersionManifest,
    this.dBEngineDescription,
    this.dBEngineMediaType,
    this.dBEngineVersionArn,
    this.dBEngineVersionDescription,
    this.dBParameterGroupFamily,
    this.databaseInstallationFilesS3BucketName,
    this.databaseInstallationFilesS3Prefix,
    this.defaultCharacterSet,
    this.engine,
    this.engineVersion,
    this.exportableLogTypes,
    this.image,
    this.kMSKeyId,
    this.majorEngineVersion,
    this.status,
    this.supportedCACertificateIdentifiers,
    this.supportedCharacterSets,
    this.supportedEngineModes,
    this.supportedFeatureNames,
    this.supportedNcharCharacterSets,
    this.supportedTimezones,
    this.supportsBabelfish,
    this.supportsCertificateRotationWithoutRestart,
    this.supportsGlobalDatabases,
    this.supportsIntegrations,
    this.supportsLimitlessDatabase,
    this.supportsLocalWriteForwarding,
    this.supportsLogExportsToCloudwatchLogs,
    this.supportsParallelQuery,
    this.supportsReadReplica,
    this.tagList,
    this.validUpgradeTarget,
  });
  factory DBEngineVersion.fromXml(_s.XmlElement elem) {
    return DBEngineVersion(
      createTime: _s.extractXmlDateTimeValue(elem, 'CreateTime'),
      customDBEngineVersionManifest:
          _s.extractXmlStringValue(elem, 'CustomDBEngineVersionManifest'),
      dBEngineDescription:
          _s.extractXmlStringValue(elem, 'DBEngineDescription'),
      dBEngineMediaType: _s.extractXmlStringValue(elem, 'DBEngineMediaType'),
      dBEngineVersionArn: _s.extractXmlStringValue(elem, 'DBEngineVersionArn'),
      dBEngineVersionDescription:
          _s.extractXmlStringValue(elem, 'DBEngineVersionDescription'),
      dBParameterGroupFamily:
          _s.extractXmlStringValue(elem, 'DBParameterGroupFamily'),
      databaseInstallationFilesS3BucketName: _s.extractXmlStringValue(
          elem, 'DatabaseInstallationFilesS3BucketName'),
      databaseInstallationFilesS3Prefix:
          _s.extractXmlStringValue(elem, 'DatabaseInstallationFilesS3Prefix'),
      defaultCharacterSet: _s
          .extractXmlChild(elem, 'DefaultCharacterSet')
          ?.let(CharacterSet.fromXml),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      exportableLogTypes: _s
          .extractXmlChild(elem, 'ExportableLogTypes')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      image: _s
          .extractXmlChild(elem, 'Image')
          ?.let(CustomDBEngineVersionAMI.fromXml),
      kMSKeyId: _s.extractXmlStringValue(elem, 'KMSKeyId'),
      majorEngineVersion: _s.extractXmlStringValue(elem, 'MajorEngineVersion'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      supportedCACertificateIdentifiers: _s
          .extractXmlChild(elem, 'SupportedCACertificateIdentifiers')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      supportedCharacterSets: _s
          .extractXmlChild(elem, 'SupportedCharacterSets')
          ?.let((elem) => elem
              .findElements('CharacterSet')
              .map(CharacterSet.fromXml)
              .toList()),
      supportedEngineModes: _s
          .extractXmlChild(elem, 'SupportedEngineModes')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      supportedFeatureNames: _s
          .extractXmlChild(elem, 'SupportedFeatureNames')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      supportedNcharCharacterSets: _s
          .extractXmlChild(elem, 'SupportedNcharCharacterSets')
          ?.let((elem) => elem
              .findElements('CharacterSet')
              .map(CharacterSet.fromXml)
              .toList()),
      supportedTimezones: _s.extractXmlChild(elem, 'SupportedTimezones')?.let(
          (elem) =>
              elem.findElements('Timezone').map(Timezone.fromXml).toList()),
      supportsBabelfish: _s.extractXmlBoolValue(elem, 'SupportsBabelfish'),
      supportsCertificateRotationWithoutRestart: _s.extractXmlBoolValue(
          elem, 'SupportsCertificateRotationWithoutRestart'),
      supportsGlobalDatabases:
          _s.extractXmlBoolValue(elem, 'SupportsGlobalDatabases'),
      supportsIntegrations:
          _s.extractXmlBoolValue(elem, 'SupportsIntegrations'),
      supportsLimitlessDatabase:
          _s.extractXmlBoolValue(elem, 'SupportsLimitlessDatabase'),
      supportsLocalWriteForwarding:
          _s.extractXmlBoolValue(elem, 'SupportsLocalWriteForwarding'),
      supportsLogExportsToCloudwatchLogs:
          _s.extractXmlBoolValue(elem, 'SupportsLogExportsToCloudwatchLogs'),
      supportsParallelQuery:
          _s.extractXmlBoolValue(elem, 'SupportsParallelQuery'),
      supportsReadReplica: _s.extractXmlBoolValue(elem, 'SupportsReadReplica'),
      tagList: _s
          .extractXmlChild(elem, 'TagList')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
      validUpgradeTarget: _s.extractXmlChild(elem, 'ValidUpgradeTarget')?.let(
          (elem) => elem
              .findElements('UpgradeTarget')
              .map(UpgradeTarget.fromXml)
              .toList()),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBEngineVersions</code> action.
class DBEngineVersionMessage {
  /// A list of <code>DBEngineVersion</code> elements.
  final List<DBEngineVersion>? dBEngineVersions;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  DBEngineVersionMessage({
    this.dBEngineVersions,
    this.marker,
  });
  factory DBEngineVersionMessage.fromXml(_s.XmlElement elem) {
    return DBEngineVersionMessage(
      dBEngineVersions: _s.extractXmlChild(elem, 'DBEngineVersions')?.let(
          (elem) => elem
              .findElements('DBEngineVersion')
              .map(DBEngineVersion.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Contains the details of an Amazon RDS DB instance.
///
/// This data type is used as a response element in the operations
/// <code>CreateDBInstance</code>, <code>CreateDBInstanceReadReplica</code>,
/// <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
/// <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>,
/// <code>RebootDBInstance</code>, <code>RestoreDBInstanceFromDBSnapshot</code>,
/// <code>RestoreDBInstanceFromS3</code>,
/// <code>RestoreDBInstanceToPointInTime</code>, <code>StartDBInstance</code>,
/// and <code>StopDBInstance</code>.
class DBInstance {
  /// Indicates whether engine-native audit fields are included in the database
  /// activity stream.
  final bool? activityStreamEngineNativeAuditFieldsIncluded;

  /// The name of the Amazon Kinesis data stream used for the database activity
  /// stream.
  final String? activityStreamKinesisStreamName;

  /// The Amazon Web Services KMS key identifier used for encrypting messages in
  /// the database activity stream. The Amazon Web Services KMS key identifier is
  /// the key ARN, key ID, alias ARN, or alias name for the KMS key.
  final String? activityStreamKmsKeyId;

  /// The mode of the database activity stream. Database events such as a change
  /// or access generate an activity stream event. RDS for Oracle always handles
  /// these events asynchronously.
  final ActivityStreamMode? activityStreamMode;

  /// The status of the policy state of the activity stream.
  final ActivityStreamPolicyStatus? activityStreamPolicyStatus;

  /// The status of the database activity stream.
  final ActivityStreamStatus? activityStreamStatus;

  /// The amount of storage in gibibytes (GiB) allocated for the DB instance.
  final int? allocatedStorage;

  /// The Amazon Web Services Identity and Access Management (IAM) roles
  /// associated with the DB instance.
  final List<DBInstanceRole>? associatedRoles;

  /// Indicates whether minor version patches are applied automatically.
  final bool? autoMinorVersionUpgrade;

  /// The time when a stopped DB instance is restarted automatically.
  final DateTime? automaticRestartTime;

  /// The automation mode of the RDS Custom DB instance: <code>full</code> or
  /// <code>all paused</code>. If <code>full</code>, the DB instance automates
  /// monitoring and instance recovery. If <code>all paused</code>, the instance
  /// pauses automation for the duration set by
  /// <code>--resume-full-automation-mode-minutes</code>.
  final AutomationMode? automationMode;

  /// The name of the Availability Zone where the DB instance is located.
  final String? availabilityZone;

  /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services
  /// Backup.
  final String? awsBackupRecoveryPointArn;

  /// The number of days for which automatic DB snapshots are retained.
  final int? backupRetentionPeriod;

  /// The location where automated backups and manual snapshots are stored: Amazon
  /// Web Services Outposts or the Amazon Web Services Region.
  final String? backupTarget;

  /// The identifier of the CA certificate for this DB instance.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  final String? cACertificateIdentifier;

  /// The details of the DB instance's server certificate.
  final CertificateDetails? certificateDetails;

  /// If present, specifies the name of the character set that this instance is
  /// associated with.
  final String? characterSetName;

  /// Indicates whether tags are copied from the DB instance to snapshots of the
  /// DB instance.
  ///
  /// This setting doesn't apply to Amazon Aurora DB instances. Copying tags to
  /// snapshots is managed by the DB cluster. Setting this value for an Aurora DB
  /// instance has no effect on the DB cluster setting. For more information, see
  /// <code>DBCluster</code>.
  final bool? copyTagsToSnapshot;

  /// The instance profile associated with the underlying Amazon EC2 instance of
  /// an RDS Custom DB instance. The instance profile must meet the following
  /// requirements:
  ///
  /// <ul>
  /// <li>
  /// The profile must exist in your account.
  /// </li>
  /// <li>
  /// The profile must have an IAM role that Amazon EC2 has permissions to assume.
  /// </li>
  /// <li>
  /// The instance profile name and the associated IAM role name must start with
  /// the prefix <code>AWSRDSCustom</code>.
  /// </li>
  /// </ul>
  /// For the list of permissions required for the IAM role, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
  /// Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.
  final String? customIamInstanceProfile;

  /// Indicates whether a customer-owned IP address (CoIP) is enabled for an RDS
  /// on Outposts DB instance.
  ///
  /// A <i>CoIP </i>provides local or external connectivity to resources in your
  /// Outpost subnets through your on-premises network. For some use cases, a CoIP
  /// can provide lower latency for connections to the DB instance from outside of
  /// its virtual private cloud (VPC) on your local network.
  ///
  /// For more information about RDS on Outposts, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
  /// with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS
  /// User Guide</i>.
  ///
  /// For more information about CoIPs, see <a
  /// href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned
  /// IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.
  final bool? customerOwnedIpEnabled;

  /// If the DB instance is a member of a DB cluster, indicates the name of the DB
  /// cluster that the DB instance is a member of.
  final String? dBClusterIdentifier;

  /// The Amazon Resource Name (ARN) for the DB instance.
  final String? dBInstanceArn;

  /// The list of replicated automated backups associated with the DB instance.
  final List<DBInstanceAutomatedBackupsReplication>?
      dBInstanceAutomatedBackupsReplications;

  /// The name of the compute and memory capacity class of the DB instance.
  final String? dBInstanceClass;

  /// The user-supplied database identifier. This identifier is the unique key
  /// that identifies a DB instance.
  final String? dBInstanceIdentifier;

  /// The current state of this database.
  ///
  /// For information about DB instance statuses, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status">Viewing
  /// DB instance status</a> in the <i>Amazon RDS User Guide.</i>
  final String? dBInstanceStatus;

  /// The initial database name that you provided (if required) when you created
  /// the DB instance. This name is returned for the life of your DB instance. For
  /// an RDS for Oracle CDB instance, the name identifies the PDB rather than the
  /// CDB.
  final String? dBName;

  /// The list of DB parameter groups applied to this DB instance.
  final List<DBParameterGroupStatus>? dBParameterGroups;

  /// A list of DB security group elements containing
  /// <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code>
  /// subelements.
  final List<DBSecurityGroupMembership>? dBSecurityGroups;

  /// Information about the subnet group associated with the DB instance,
  /// including the name, description, and subnets in the subnet group.
  final DBSubnetGroup? dBSubnetGroup;

  /// The Oracle system ID (Oracle SID) for a container database (CDB). The Oracle
  /// SID is also the name of the CDB. This setting is only valid for RDS Custom
  /// DB instances.
  final String? dBSystemId;

  /// The port that the DB instance listens on. If the DB instance is part of a DB
  /// cluster, this can be a different port than the DB cluster port.
  final int? dbInstancePort;

  /// The Amazon Web Services Region-unique, immutable identifier for the DB
  /// instance. This identifier is found in Amazon Web Services CloudTrail log
  /// entries whenever the Amazon Web Services KMS key for the DB instance is
  /// accessed.
  final String? dbiResourceId;

  /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
  final bool? dedicatedLogVolume;

  /// Indicates whether the DB instance has deletion protection enabled. The
  /// database can't be deleted when deletion protection is enabled. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
  /// Deleting a DB Instance</a>.
  final bool? deletionProtection;

  /// The Active Directory Domain membership records associated with the DB
  /// instance.
  final List<DomainMembership>? domainMemberships;

  /// A list of log types that this DB instance is configured to export to
  /// CloudWatch Logs.
  ///
  /// Log types vary by DB engine. For information about the log types for each DB
  /// engine, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html">Monitoring
  /// Amazon RDS log files</a> in the <i>Amazon RDS User Guide.</i>
  final List<String>? enabledCloudwatchLogsExports;

  /// The connection endpoint for the DB instance.
  /// <note>
  /// The endpoint might not be shown for instances with the status of
  /// <code>creating</code>.
  /// </note>
  final Endpoint? endpoint;

  /// The database engine used for this DB instance.
  final String? engine;

  /// The life cycle type for the DB instance.
  ///
  /// For more information, see CreateDBInstance.
  final String? engineLifecycleSupport;

  /// The version of the database engine.
  final String? engineVersion;

  /// The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that
  /// receives the Enhanced Monitoring metrics data for the DB instance.
  final String? enhancedMonitoringResourceArn;

  /// Indicates whether mapping of Amazon Web Services Identity and Access
  /// Management (IAM) accounts to database accounts is enabled for the DB
  /// instance.
  ///
  /// For a list of engine versions that support IAM database authentication, see
  /// <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RDS_Fea_Regions_DB-eng.Feature.IamDatabaseAuthentication.html">IAM
  /// database authentication</a> in the <i>Amazon RDS User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.IAMdbauth.html">IAM
  /// database authentication in Aurora</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  final bool? iAMDatabaseAuthenticationEnabled;

  /// The date and time when the DB instance was created.
  final DateTime? instanceCreateTime;

  /// The Provisioned IOPS (I/O operations per second) value for the DB instance.
  final int? iops;

  /// Indicates whether an upgrade is recommended for the storage file system
  /// configuration on the DB instance. To migrate to the preferred configuration,
  /// you can either create a blue/green deployment, or create a read replica from
  /// the DB instance. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.UpgradeFileSystem">Upgrading
  /// the storage file system for a DB instance</a>.
  final bool? isStorageConfigUpgradeAvailable;

  /// If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key
  /// identifier for the encrypted DB instance.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  final String? kmsKeyId;

  /// The latest time to which a database in this DB instance can be restored with
  /// point-in-time restore.
  final DateTime? latestRestorableTime;

  /// The license model information for this DB instance. This setting doesn't
  /// apply to Amazon Aurora or RDS Custom DB instances.
  final String? licenseModel;

  /// The listener connection endpoint for SQL Server Always On.
  final Endpoint? listenerEndpoint;

  /// The secret managed by RDS in Amazon Web Services Secrets Manager for the
  /// master user password.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
  /// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS
  /// User Guide.</i>
  final MasterUserSecret? masterUserSecret;

  /// The master username for the DB instance.
  final String? masterUsername;

  /// The upper limit in gibibytes (GiB) to which Amazon RDS can automatically
  /// scale the storage of the DB instance.
  final int? maxAllocatedStorage;

  /// The interval, in seconds, between points when Enhanced Monitoring metrics
  /// are collected for the DB instance.
  final int? monitoringInterval;

  /// The ARN for the IAM role that permits RDS to send Enhanced Monitoring
  /// metrics to Amazon CloudWatch Logs.
  final String? monitoringRoleArn;

  /// Indicates whether the DB instance is a Multi-AZ deployment. This setting
  /// doesn't apply to RDS Custom DB instances.
  final bool? multiAZ;

  /// Specifies whether the DB instance is in the multi-tenant configuration
  /// (TRUE) or the single-tenant configuration (FALSE).
  final bool? multiTenant;

  /// The name of the NCHAR character set for the Oracle DB instance. This
  /// character set specifies the Unicode encoding for data stored in table
  /// columns of type NCHAR, NCLOB, or NVARCHAR2.
  final String? ncharCharacterSetName;

  /// The network type of the DB instance.
  ///
  /// The network type is determined by the <code>DBSubnetGroup</code> specified
  /// for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4
  /// protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide</i>
  /// and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User
  /// Guide.</i>
  ///
  /// Valid Values: <code>IPV4 | DUAL</code>
  final String? networkType;

  /// The list of option group memberships for this DB instance.
  final List<OptionGroupMembership>? optionGroupMemberships;

  /// Information about pending changes to the DB instance. This information is
  /// returned only when there are pending changes. Specific changes are
  /// identified by subelements.
  final PendingModifiedValues? pendingModifiedValues;

  /// The progress of the storage optimization operation as a percentage.
  final String? percentProgress;

  /// Indicates whether Performance Insights is enabled for the DB instance.
  final bool? performanceInsightsEnabled;

  /// The Amazon Web Services KMS key identifier for encryption of Performance
  /// Insights data.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  final String? performanceInsightsKMSKeyId;

  /// The number of days to retain Performance Insights data.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>7</code>
  /// </li>
  /// <li>
  /// <i>month</i> * 31, where <i>month</i> is a number of months from 1-23.
  /// Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months *
  /// 31), <code>589</code> (19 months * 31)
  /// </li>
  /// <li>
  /// <code>731</code>
  /// </li>
  /// </ul>
  /// Default: <code>7</code> days
  final int? performanceInsightsRetentionPeriod;

  /// The daily time range during which automated backups are created if automated
  /// backups are enabled, as determined by the
  /// <code>BackupRetentionPeriod</code>.
  final String? preferredBackupWindow;

  /// The weekly time range during which system maintenance can occur, in
  /// Universal Coordinated Time (UTC).
  final String? preferredMaintenanceWindow;

  /// The number of CPU cores and the number of threads per core for the DB
  /// instance class of the DB instance.
  final List<ProcessorFeature>? processorFeatures;

  /// The order of priority in which an Aurora Replica is promoted to the primary
  /// instance after a failure of the existing primary instance. For more
  /// information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance">
  /// Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  final int? promotionTier;

  /// Indicates whether the DB instance is publicly accessible.
  ///
  /// When the DB cluster is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB cluster's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB cluster's VPC. Access to the DB cluster is ultimately
  /// controlled by the security group it uses. That public access isn't permitted
  /// if the security group assigned to the DB cluster doesn't permit it.
  ///
  /// When the DB instance isn't publicly accessible, it is an internal DB
  /// instance with a DNS name that resolves to a private IP address.
  ///
  /// For more information, see <a>CreateDBInstance</a>.
  final bool? publiclyAccessible;

  /// The identifiers of Aurora DB clusters to which the RDS DB instance is
  /// replicated as a read replica. For example, when you create an Aurora read
  /// replica of an RDS for MySQL DB instance, the Aurora MySQL DB cluster for the
  /// Aurora read replica is shown. This output doesn't contain information about
  /// cross-Region Aurora read replicas.
  /// <note>
  /// Currently, each RDS DB instance can have only one Aurora read replica.
  /// </note>
  final List<String>? readReplicaDBClusterIdentifiers;

  /// The identifiers of the read replicas associated with this DB instance.
  final List<String>? readReplicaDBInstanceIdentifiers;

  /// The identifier of the source DB cluster if this DB instance is a read
  /// replica.
  final String? readReplicaSourceDBClusterIdentifier;

  /// The identifier of the source DB instance if this DB instance is a read
  /// replica.
  final String? readReplicaSourceDBInstanceIdentifier;

  /// The open mode of an Oracle read replica. The default is
  /// <code>open-read-only</code>. For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working
  /// with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User
  /// Guide</i>.
  /// <note>
  /// This attribute is only supported in RDS for Oracle.
  /// </note>
  final ReplicaMode? replicaMode;

  /// The number of minutes to pause the automation. When the time period ends,
  /// RDS Custom resumes full automation. The minimum value is 60 (default). The
  /// maximum value is 1,440.
  final DateTime? resumeFullAutomationModeTime;

  /// If present, specifies the name of the secondary Availability Zone for a DB
  /// instance with multi-AZ support.
  final String? secondaryAvailabilityZone;

  /// The status of a read replica. If the DB instance isn't a read replica, the
  /// value is blank.
  final List<DBInstanceStatusInfo>? statusInfos;

  /// Indicates whether the DB instance is encrypted.
  final bool? storageEncrypted;

  /// The storage throughput for the DB instance.
  ///
  /// This setting applies only to the <code>gp3</code> storage type.
  final int? storageThroughput;

  /// The storage type associated with the DB instance.
  final String? storageType;
  final List<Tag>? tagList;

  /// The ARN from the key store with which the instance is associated for TDE
  /// encryption.
  final String? tdeCredentialArn;

  /// The time zone of the DB instance. In most cases, the <code>Timezone</code>
  /// element is empty. <code>Timezone</code> content appears only for RDS for Db2
  /// and RDS for SQL Server DB instances that were created with a time zone
  /// specified.
  final String? timezone;

  /// The list of Amazon EC2 VPC security groups that the DB instance belongs to.
  final List<VpcSecurityGroupMembership>? vpcSecurityGroups;

  DBInstance({
    this.activityStreamEngineNativeAuditFieldsIncluded,
    this.activityStreamKinesisStreamName,
    this.activityStreamKmsKeyId,
    this.activityStreamMode,
    this.activityStreamPolicyStatus,
    this.activityStreamStatus,
    this.allocatedStorage,
    this.associatedRoles,
    this.autoMinorVersionUpgrade,
    this.automaticRestartTime,
    this.automationMode,
    this.availabilityZone,
    this.awsBackupRecoveryPointArn,
    this.backupRetentionPeriod,
    this.backupTarget,
    this.cACertificateIdentifier,
    this.certificateDetails,
    this.characterSetName,
    this.copyTagsToSnapshot,
    this.customIamInstanceProfile,
    this.customerOwnedIpEnabled,
    this.dBClusterIdentifier,
    this.dBInstanceArn,
    this.dBInstanceAutomatedBackupsReplications,
    this.dBInstanceClass,
    this.dBInstanceIdentifier,
    this.dBInstanceStatus,
    this.dBName,
    this.dBParameterGroups,
    this.dBSecurityGroups,
    this.dBSubnetGroup,
    this.dBSystemId,
    this.dbInstancePort,
    this.dbiResourceId,
    this.dedicatedLogVolume,
    this.deletionProtection,
    this.domainMemberships,
    this.enabledCloudwatchLogsExports,
    this.endpoint,
    this.engine,
    this.engineLifecycleSupport,
    this.engineVersion,
    this.enhancedMonitoringResourceArn,
    this.iAMDatabaseAuthenticationEnabled,
    this.instanceCreateTime,
    this.iops,
    this.isStorageConfigUpgradeAvailable,
    this.kmsKeyId,
    this.latestRestorableTime,
    this.licenseModel,
    this.listenerEndpoint,
    this.masterUserSecret,
    this.masterUsername,
    this.maxAllocatedStorage,
    this.monitoringInterval,
    this.monitoringRoleArn,
    this.multiAZ,
    this.multiTenant,
    this.ncharCharacterSetName,
    this.networkType,
    this.optionGroupMemberships,
    this.pendingModifiedValues,
    this.percentProgress,
    this.performanceInsightsEnabled,
    this.performanceInsightsKMSKeyId,
    this.performanceInsightsRetentionPeriod,
    this.preferredBackupWindow,
    this.preferredMaintenanceWindow,
    this.processorFeatures,
    this.promotionTier,
    this.publiclyAccessible,
    this.readReplicaDBClusterIdentifiers,
    this.readReplicaDBInstanceIdentifiers,
    this.readReplicaSourceDBClusterIdentifier,
    this.readReplicaSourceDBInstanceIdentifier,
    this.replicaMode,
    this.resumeFullAutomationModeTime,
    this.secondaryAvailabilityZone,
    this.statusInfos,
    this.storageEncrypted,
    this.storageThroughput,
    this.storageType,
    this.tagList,
    this.tdeCredentialArn,
    this.timezone,
    this.vpcSecurityGroups,
  });
  factory DBInstance.fromXml(_s.XmlElement elem) {
    return DBInstance(
      activityStreamEngineNativeAuditFieldsIncluded: _s.extractXmlBoolValue(
          elem, 'ActivityStreamEngineNativeAuditFieldsIncluded'),
      activityStreamKinesisStreamName:
          _s.extractXmlStringValue(elem, 'ActivityStreamKinesisStreamName'),
      activityStreamKmsKeyId:
          _s.extractXmlStringValue(elem, 'ActivityStreamKmsKeyId'),
      activityStreamMode: _s
          .extractXmlStringValue(elem, 'ActivityStreamMode')
          ?.let(ActivityStreamMode.fromString),
      activityStreamPolicyStatus: _s
          .extractXmlStringValue(elem, 'ActivityStreamPolicyStatus')
          ?.let(ActivityStreamPolicyStatus.fromString),
      activityStreamStatus: _s
          .extractXmlStringValue(elem, 'ActivityStreamStatus')
          ?.let(ActivityStreamStatus.fromString),
      allocatedStorage: _s.extractXmlIntValue(elem, 'AllocatedStorage'),
      associatedRoles: _s.extractXmlChild(elem, 'AssociatedRoles')?.let(
          (elem) => elem
              .findElements('DBInstanceRole')
              .map(DBInstanceRole.fromXml)
              .toList()),
      autoMinorVersionUpgrade:
          _s.extractXmlBoolValue(elem, 'AutoMinorVersionUpgrade'),
      automaticRestartTime:
          _s.extractXmlDateTimeValue(elem, 'AutomaticRestartTime'),
      automationMode: _s
          .extractXmlStringValue(elem, 'AutomationMode')
          ?.let(AutomationMode.fromString),
      availabilityZone: _s.extractXmlStringValue(elem, 'AvailabilityZone'),
      awsBackupRecoveryPointArn:
          _s.extractXmlStringValue(elem, 'AwsBackupRecoveryPointArn'),
      backupRetentionPeriod:
          _s.extractXmlIntValue(elem, 'BackupRetentionPeriod'),
      backupTarget: _s.extractXmlStringValue(elem, 'BackupTarget'),
      cACertificateIdentifier:
          _s.extractXmlStringValue(elem, 'CACertificateIdentifier'),
      certificateDetails: _s
          .extractXmlChild(elem, 'CertificateDetails')
          ?.let(CertificateDetails.fromXml),
      characterSetName: _s.extractXmlStringValue(elem, 'CharacterSetName'),
      copyTagsToSnapshot: _s.extractXmlBoolValue(elem, 'CopyTagsToSnapshot'),
      customIamInstanceProfile:
          _s.extractXmlStringValue(elem, 'CustomIamInstanceProfile'),
      customerOwnedIpEnabled:
          _s.extractXmlBoolValue(elem, 'CustomerOwnedIpEnabled'),
      dBClusterIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterIdentifier'),
      dBInstanceArn: _s.extractXmlStringValue(elem, 'DBInstanceArn'),
      dBInstanceAutomatedBackupsReplications: _s
          .extractXmlChild(elem, 'DBInstanceAutomatedBackupsReplications')
          ?.let((elem) => elem
              .findElements('DBInstanceAutomatedBackupsReplication')
              .map(DBInstanceAutomatedBackupsReplication.fromXml)
              .toList()),
      dBInstanceClass: _s.extractXmlStringValue(elem, 'DBInstanceClass'),
      dBInstanceIdentifier:
          _s.extractXmlStringValue(elem, 'DBInstanceIdentifier'),
      dBInstanceStatus: _s.extractXmlStringValue(elem, 'DBInstanceStatus'),
      dBName: _s.extractXmlStringValue(elem, 'DBName'),
      dBParameterGroups: _s.extractXmlChild(elem, 'DBParameterGroups')?.let(
          (elem) => elem
              .findElements('DBParameterGroup')
              .map(DBParameterGroupStatus.fromXml)
              .toList()),
      dBSecurityGroups: _s.extractXmlChild(elem, 'DBSecurityGroups')?.let(
          (elem) => elem
              .findElements('DBSecurityGroup')
              .map(DBSecurityGroupMembership.fromXml)
              .toList()),
      dBSubnetGroup:
          _s.extractXmlChild(elem, 'DBSubnetGroup')?.let(DBSubnetGroup.fromXml),
      dBSystemId: _s.extractXmlStringValue(elem, 'DBSystemId'),
      dbInstancePort: _s.extractXmlIntValue(elem, 'DbInstancePort'),
      dbiResourceId: _s.extractXmlStringValue(elem, 'DbiResourceId'),
      dedicatedLogVolume: _s.extractXmlBoolValue(elem, 'DedicatedLogVolume'),
      deletionProtection: _s.extractXmlBoolValue(elem, 'DeletionProtection'),
      domainMemberships: _s.extractXmlChild(elem, 'DomainMemberships')?.let(
          (elem) => elem
              .findElements('DomainMembership')
              .map(DomainMembership.fromXml)
              .toList()),
      enabledCloudwatchLogsExports: _s
          .extractXmlChild(elem, 'EnabledCloudwatchLogsExports')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      endpoint: _s.extractXmlChild(elem, 'Endpoint')?.let(Endpoint.fromXml),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineLifecycleSupport:
          _s.extractXmlStringValue(elem, 'EngineLifecycleSupport'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      enhancedMonitoringResourceArn:
          _s.extractXmlStringValue(elem, 'EnhancedMonitoringResourceArn'),
      iAMDatabaseAuthenticationEnabled:
          _s.extractXmlBoolValue(elem, 'IAMDatabaseAuthenticationEnabled'),
      instanceCreateTime:
          _s.extractXmlDateTimeValue(elem, 'InstanceCreateTime'),
      iops: _s.extractXmlIntValue(elem, 'Iops'),
      isStorageConfigUpgradeAvailable:
          _s.extractXmlBoolValue(elem, 'IsStorageConfigUpgradeAvailable'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      latestRestorableTime:
          _s.extractXmlDateTimeValue(elem, 'LatestRestorableTime'),
      licenseModel: _s.extractXmlStringValue(elem, 'LicenseModel'),
      listenerEndpoint:
          _s.extractXmlChild(elem, 'ListenerEndpoint')?.let(Endpoint.fromXml),
      masterUserSecret: _s
          .extractXmlChild(elem, 'MasterUserSecret')
          ?.let(MasterUserSecret.fromXml),
      masterUsername: _s.extractXmlStringValue(elem, 'MasterUsername'),
      maxAllocatedStorage: _s.extractXmlIntValue(elem, 'MaxAllocatedStorage'),
      monitoringInterval: _s.extractXmlIntValue(elem, 'MonitoringInterval'),
      monitoringRoleArn: _s.extractXmlStringValue(elem, 'MonitoringRoleArn'),
      multiAZ: _s.extractXmlBoolValue(elem, 'MultiAZ'),
      multiTenant: _s.extractXmlBoolValue(elem, 'MultiTenant'),
      ncharCharacterSetName:
          _s.extractXmlStringValue(elem, 'NcharCharacterSetName'),
      networkType: _s.extractXmlStringValue(elem, 'NetworkType'),
      optionGroupMemberships: _s
          .extractXmlChild(elem, 'OptionGroupMemberships')
          ?.let((elem) => elem
              .findElements('OptionGroupMembership')
              .map(OptionGroupMembership.fromXml)
              .toList()),
      pendingModifiedValues: _s
          .extractXmlChild(elem, 'PendingModifiedValues')
          ?.let(PendingModifiedValues.fromXml),
      percentProgress: _s.extractXmlStringValue(elem, 'PercentProgress'),
      performanceInsightsEnabled:
          _s.extractXmlBoolValue(elem, 'PerformanceInsightsEnabled'),
      performanceInsightsKMSKeyId:
          _s.extractXmlStringValue(elem, 'PerformanceInsightsKMSKeyId'),
      performanceInsightsRetentionPeriod:
          _s.extractXmlIntValue(elem, 'PerformanceInsightsRetentionPeriod'),
      preferredBackupWindow:
          _s.extractXmlStringValue(elem, 'PreferredBackupWindow'),
      preferredMaintenanceWindow:
          _s.extractXmlStringValue(elem, 'PreferredMaintenanceWindow'),
      processorFeatures: _s.extractXmlChild(elem, 'ProcessorFeatures')?.let(
          (elem) => elem
              .findElements('ProcessorFeature')
              .map(ProcessorFeature.fromXml)
              .toList()),
      promotionTier: _s.extractXmlIntValue(elem, 'PromotionTier'),
      publiclyAccessible: _s.extractXmlBoolValue(elem, 'PubliclyAccessible'),
      readReplicaDBClusterIdentifiers: _s
          .extractXmlChild(elem, 'ReadReplicaDBClusterIdentifiers')
          ?.let((elem) => _s.extractXmlStringListValues(
              elem, 'ReadReplicaDBClusterIdentifier')),
      readReplicaDBInstanceIdentifiers: _s
          .extractXmlChild(elem, 'ReadReplicaDBInstanceIdentifiers')
          ?.let((elem) => _s.extractXmlStringListValues(
              elem, 'ReadReplicaDBInstanceIdentifier')),
      readReplicaSourceDBClusterIdentifier: _s.extractXmlStringValue(
          elem, 'ReadReplicaSourceDBClusterIdentifier'),
      readReplicaSourceDBInstanceIdentifier: _s.extractXmlStringValue(
          elem, 'ReadReplicaSourceDBInstanceIdentifier'),
      replicaMode: _s
          .extractXmlStringValue(elem, 'ReplicaMode')
          ?.let(ReplicaMode.fromString),
      resumeFullAutomationModeTime:
          _s.extractXmlDateTimeValue(elem, 'ResumeFullAutomationModeTime'),
      secondaryAvailabilityZone:
          _s.extractXmlStringValue(elem, 'SecondaryAvailabilityZone'),
      statusInfos: _s.extractXmlChild(elem, 'StatusInfos')?.let((elem) => elem
          .findElements('DBInstanceStatusInfo')
          .map(DBInstanceStatusInfo.fromXml)
          .toList()),
      storageEncrypted: _s.extractXmlBoolValue(elem, 'StorageEncrypted'),
      storageThroughput: _s.extractXmlIntValue(elem, 'StorageThroughput'),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
      tagList: _s
          .extractXmlChild(elem, 'TagList')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
      tdeCredentialArn: _s.extractXmlStringValue(elem, 'TdeCredentialArn'),
      timezone: _s.extractXmlStringValue(elem, 'Timezone'),
      vpcSecurityGroups: _s.extractXmlChild(elem, 'VpcSecurityGroups')?.let(
          (elem) => elem
              .findElements('VpcSecurityGroupMembership')
              .map(VpcSecurityGroupMembership.fromXml)
              .toList()),
    );
  }
}

/// An automated backup of a DB instance. It consists of system backups,
/// transaction logs, and the database instance properties that existed at the
/// time you deleted the source instance.
class DBInstanceAutomatedBackup {
  /// The allocated storage size for the the automated backup in gibibytes (GiB).
  final int? allocatedStorage;

  /// The Availability Zone that the automated backup was created in. For
  /// information on Amazon Web Services Regions and Availability Zones, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions
  /// and Availability Zones</a>.
  final String? availabilityZone;

  /// The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services
  /// Backup.
  final String? awsBackupRecoveryPointArn;

  /// The retention period for the automated backups.
  final int? backupRetentionPeriod;

  /// The location where automated backups are stored: Amazon Web Services
  /// Outposts or the Amazon Web Services Region.
  final String? backupTarget;

  /// The Amazon Resource Name (ARN) for the automated backups.
  final String? dBInstanceArn;

  /// The Amazon Resource Name (ARN) for the replicated automated backups.
  final String? dBInstanceAutomatedBackupsArn;

  /// The list of replications to different Amazon Web Services Regions associated
  /// with the automated backup.
  final List<DBInstanceAutomatedBackupsReplication>?
      dBInstanceAutomatedBackupsReplications;

  /// The identifier for the source DB instance, which can't be changed and which
  /// is unique to an Amazon Web Services Region.
  final String? dBInstanceIdentifier;

  /// The resource ID for the source DB instance, which can't be changed and which
  /// is unique to an Amazon Web Services Region.
  final String? dbiResourceId;

  /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
  final bool? dedicatedLogVolume;

  /// Indicates whether the automated backup is encrypted.
  final bool? encrypted;

  /// The name of the database engine for this automated backup.
  final String? engine;

  /// The version of the database engine for the automated backup.
  final String? engineVersion;

  /// True if mapping of Amazon Web Services Identity and Access Management (IAM)
  /// accounts to database accounts is enabled, and otherwise false.
  final bool? iAMDatabaseAuthenticationEnabled;

  /// The date and time when the DB instance was created.
  final DateTime? instanceCreateTime;

  /// The IOPS (I/O operations per second) value for the automated backup.
  final int? iops;

  /// The Amazon Web Services KMS key ID for an automated backup.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  final String? kmsKeyId;

  /// The license model information for the automated backup.
  final String? licenseModel;

  /// The master user name of an automated backup.
  final String? masterUsername;

  /// Specifies whether the automatic backup is for a DB instance in the
  /// multi-tenant configuration (TRUE) or the single-tenant configuration
  /// (FALSE).
  final bool? multiTenant;

  /// The option group the automated backup is associated with. If omitted, the
  /// default option group for the engine specified is used.
  final String? optionGroupName;

  /// The port number that the automated backup used for connections.
  ///
  /// Default: Inherits from the source DB instance
  ///
  /// Valid Values: <code>1150-65535</code>
  final int? port;

  /// The Amazon Web Services Region associated with the automated backup.
  final String? region;

  /// The earliest and latest time a DB instance can be restored to.
  final RestoreWindow? restoreWindow;

  /// A list of status information for an automated backup:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - Automated backups for current instances.
  /// </li>
  /// <li>
  /// <code>retained</code> - Automated backups for deleted instances.
  /// </li>
  /// <li>
  /// <code>creating</code> - Automated backups that are waiting for the first
  /// automated snapshot to be available.
  /// </li>
  /// </ul>
  final String? status;

  /// The storage throughput for the automated backup.
  final int? storageThroughput;

  /// The storage type associated with the automated backup.
  final String? storageType;

  /// The ARN from the key store with which the automated backup is associated for
  /// TDE encryption.
  final String? tdeCredentialArn;

  /// The time zone of the automated backup. In most cases, the
  /// <code>Timezone</code> element is empty. <code>Timezone</code> content
  /// appears only for Microsoft SQL Server DB instances that were created with a
  /// time zone specified.
  final String? timezone;

  /// The VPC ID associated with the DB instance.
  final String? vpcId;

  DBInstanceAutomatedBackup({
    this.allocatedStorage,
    this.availabilityZone,
    this.awsBackupRecoveryPointArn,
    this.backupRetentionPeriod,
    this.backupTarget,
    this.dBInstanceArn,
    this.dBInstanceAutomatedBackupsArn,
    this.dBInstanceAutomatedBackupsReplications,
    this.dBInstanceIdentifier,
    this.dbiResourceId,
    this.dedicatedLogVolume,
    this.encrypted,
    this.engine,
    this.engineVersion,
    this.iAMDatabaseAuthenticationEnabled,
    this.instanceCreateTime,
    this.iops,
    this.kmsKeyId,
    this.licenseModel,
    this.masterUsername,
    this.multiTenant,
    this.optionGroupName,
    this.port,
    this.region,
    this.restoreWindow,
    this.status,
    this.storageThroughput,
    this.storageType,
    this.tdeCredentialArn,
    this.timezone,
    this.vpcId,
  });
  factory DBInstanceAutomatedBackup.fromXml(_s.XmlElement elem) {
    return DBInstanceAutomatedBackup(
      allocatedStorage: _s.extractXmlIntValue(elem, 'AllocatedStorage'),
      availabilityZone: _s.extractXmlStringValue(elem, 'AvailabilityZone'),
      awsBackupRecoveryPointArn:
          _s.extractXmlStringValue(elem, 'AwsBackupRecoveryPointArn'),
      backupRetentionPeriod:
          _s.extractXmlIntValue(elem, 'BackupRetentionPeriod'),
      backupTarget: _s.extractXmlStringValue(elem, 'BackupTarget'),
      dBInstanceArn: _s.extractXmlStringValue(elem, 'DBInstanceArn'),
      dBInstanceAutomatedBackupsArn:
          _s.extractXmlStringValue(elem, 'DBInstanceAutomatedBackupsArn'),
      dBInstanceAutomatedBackupsReplications: _s
          .extractXmlChild(elem, 'DBInstanceAutomatedBackupsReplications')
          ?.let((elem) => elem
              .findElements('DBInstanceAutomatedBackupsReplication')
              .map(DBInstanceAutomatedBackupsReplication.fromXml)
              .toList()),
      dBInstanceIdentifier:
          _s.extractXmlStringValue(elem, 'DBInstanceIdentifier'),
      dbiResourceId: _s.extractXmlStringValue(elem, 'DbiResourceId'),
      dedicatedLogVolume: _s.extractXmlBoolValue(elem, 'DedicatedLogVolume'),
      encrypted: _s.extractXmlBoolValue(elem, 'Encrypted'),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      iAMDatabaseAuthenticationEnabled:
          _s.extractXmlBoolValue(elem, 'IAMDatabaseAuthenticationEnabled'),
      instanceCreateTime:
          _s.extractXmlDateTimeValue(elem, 'InstanceCreateTime'),
      iops: _s.extractXmlIntValue(elem, 'Iops'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      licenseModel: _s.extractXmlStringValue(elem, 'LicenseModel'),
      masterUsername: _s.extractXmlStringValue(elem, 'MasterUsername'),
      multiTenant: _s.extractXmlBoolValue(elem, 'MultiTenant'),
      optionGroupName: _s.extractXmlStringValue(elem, 'OptionGroupName'),
      port: _s.extractXmlIntValue(elem, 'Port'),
      region: _s.extractXmlStringValue(elem, 'Region'),
      restoreWindow:
          _s.extractXmlChild(elem, 'RestoreWindow')?.let(RestoreWindow.fromXml),
      status: _s.extractXmlStringValue(elem, 'Status'),
      storageThroughput: _s.extractXmlIntValue(elem, 'StorageThroughput'),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
      tdeCredentialArn: _s.extractXmlStringValue(elem, 'TdeCredentialArn'),
      timezone: _s.extractXmlStringValue(elem, 'Timezone'),
      vpcId: _s.extractXmlStringValue(elem, 'VpcId'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBInstanceAutomatedBackups</code> action.
class DBInstanceAutomatedBackupMessage {
  /// A list of <code>DBInstanceAutomatedBackup</code> instances.
  final List<DBInstanceAutomatedBackup>? dBInstanceAutomatedBackups;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  DBInstanceAutomatedBackupMessage({
    this.dBInstanceAutomatedBackups,
    this.marker,
  });
  factory DBInstanceAutomatedBackupMessage.fromXml(_s.XmlElement elem) {
    return DBInstanceAutomatedBackupMessage(
      dBInstanceAutomatedBackups: _s
          .extractXmlChild(elem, 'DBInstanceAutomatedBackups')
          ?.let((elem) => elem
              .findElements('DBInstanceAutomatedBackup')
              .map(DBInstanceAutomatedBackup.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Automated backups of a DB instance replicated to another Amazon Web Services
/// Region. They consist of system backups, transaction logs, and database
/// instance properties.
class DBInstanceAutomatedBackupsReplication {
  /// The Amazon Resource Name (ARN) of the replicated automated backups.
  final String? dBInstanceAutomatedBackupsArn;

  DBInstanceAutomatedBackupsReplication({
    this.dBInstanceAutomatedBackupsArn,
  });
  factory DBInstanceAutomatedBackupsReplication.fromXml(_s.XmlElement elem) {
    return DBInstanceAutomatedBackupsReplication(
      dBInstanceAutomatedBackupsArn:
          _s.extractXmlStringValue(elem, 'DBInstanceAutomatedBackupsArn'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBInstances</code> action.
class DBInstanceMessage {
  /// A list of <code>DBInstance</code> instances.
  final List<DBInstance>? dBInstances;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code> .
  final String? marker;

  DBInstanceMessage({
    this.dBInstances,
    this.marker,
  });
  factory DBInstanceMessage.fromXml(_s.XmlElement elem) {
    return DBInstanceMessage(
      dBInstances: _s.extractXmlChild(elem, 'DBInstances')?.let((elem) =>
          elem.findElements('DBInstance').map(DBInstance.fromXml).toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Information about an Amazon Web Services Identity and Access Management
/// (IAM) role that is associated with a DB instance.
class DBInstanceRole {
  /// The name of the feature associated with the Amazon Web Services Identity and
  /// Access Management (IAM) role. For information about supported feature names,
  /// see <code>DBEngineVersion</code>.
  final String? featureName;

  /// The Amazon Resource Name (ARN) of the IAM role that is associated with the
  /// DB instance.
  final String? roleArn;

  /// Information about the state of association between the IAM role and the DB
  /// instance. The Status property returns one of the following values:
  ///
  /// <ul>
  /// <li>
  /// <code>ACTIVE</code> - the IAM role ARN is associated with the DB instance
  /// and can be used to access other Amazon Web Services services on your behalf.
  /// </li>
  /// <li>
  /// <code>PENDING</code> - the IAM role ARN is being associated with the DB
  /// instance.
  /// </li>
  /// <li>
  /// <code>INVALID</code> - the IAM role ARN is associated with the DB instance,
  /// but the DB instance is unable to assume the IAM role in order to access
  /// other Amazon Web Services services on your behalf.
  /// </li>
  /// </ul>
  final String? status;

  DBInstanceRole({
    this.featureName,
    this.roleArn,
    this.status,
  });
  factory DBInstanceRole.fromXml(_s.XmlElement elem) {
    return DBInstanceRole(
      featureName: _s.extractXmlStringValue(elem, 'FeatureName'),
      roleArn: _s.extractXmlStringValue(elem, 'RoleArn'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// Provides a list of status information for a DB instance.
class DBInstanceStatusInfo {
  /// Details of the error if there is an error for the instance. If the instance
  /// isn't in an error state, this value is blank.
  final String? message;

  /// Indicates whether the instance is operating normally (TRUE) or is in an
  /// error state (FALSE).
  final bool? normal;

  /// The status of the DB instance. For a StatusType of read replica, the values
  /// can be replicating, replication stop point set, replication stop point
  /// reached, error, stopped, or terminated.
  final String? status;

  /// This value is currently "read replication."
  final String? statusType;

  DBInstanceStatusInfo({
    this.message,
    this.normal,
    this.status,
    this.statusType,
  });
  factory DBInstanceStatusInfo.fromXml(_s.XmlElement elem) {
    return DBInstanceStatusInfo(
      message: _s.extractXmlStringValue(elem, 'Message'),
      normal: _s.extractXmlBoolValue(elem, 'Normal'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      statusType: _s.extractXmlStringValue(elem, 'StatusType'),
    );
  }
}

/// Contains the details of an Amazon RDS DB parameter group.
///
/// This data type is used as a response element in the
/// <code>DescribeDBParameterGroups</code> action.
class DBParameterGroup {
  /// The Amazon Resource Name (ARN) for the DB parameter group.
  final String? dBParameterGroupArn;

  /// The name of the DB parameter group family that this DB parameter group is
  /// compatible with.
  final String? dBParameterGroupFamily;

  /// The name of the DB parameter group.
  final String? dBParameterGroupName;

  /// Provides the customer-specified description for this DB parameter group.
  final String? description;

  DBParameterGroup({
    this.dBParameterGroupArn,
    this.dBParameterGroupFamily,
    this.dBParameterGroupName,
    this.description,
  });
  factory DBParameterGroup.fromXml(_s.XmlElement elem) {
    return DBParameterGroup(
      dBParameterGroupArn:
          _s.extractXmlStringValue(elem, 'DBParameterGroupArn'),
      dBParameterGroupFamily:
          _s.extractXmlStringValue(elem, 'DBParameterGroupFamily'),
      dBParameterGroupName:
          _s.extractXmlStringValue(elem, 'DBParameterGroupName'),
      description: _s.extractXmlStringValue(elem, 'Description'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBParameters</code> action.
class DBParameterGroupDetails {
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  /// A list of <code>Parameter</code> values.
  final List<Parameter>? parameters;

  DBParameterGroupDetails({
    this.marker,
    this.parameters,
  });
  factory DBParameterGroupDetails.fromXml(_s.XmlElement elem) {
    return DBParameterGroupDetails(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      parameters: _s.extractXmlChild(elem, 'Parameters')?.let((elem) =>
          elem.findElements('Parameter').map(Parameter.fromXml).toList()),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>ModifyDBParameterGroup</code> or <code>ResetDBParameterGroup</code>
/// operation.
class DBParameterGroupNameMessage {
  /// The name of the DB parameter group.
  final String? dBParameterGroupName;

  DBParameterGroupNameMessage({
    this.dBParameterGroupName,
  });
  factory DBParameterGroupNameMessage.fromXml(_s.XmlElement elem) {
    return DBParameterGroupNameMessage(
      dBParameterGroupName:
          _s.extractXmlStringValue(elem, 'DBParameterGroupName'),
    );
  }
}

/// The status of the DB parameter group.
///
/// This data type is used as a response element in the following actions:
///
/// <ul>
/// <li>
/// <code>CreateDBInstance</code>
/// </li>
/// <li>
/// <code>CreateDBInstanceReadReplica</code>
/// </li>
/// <li>
/// <code>DeleteDBInstance</code>
/// </li>
/// <li>
/// <code>ModifyDBInstance</code>
/// </li>
/// <li>
/// <code>RebootDBInstance</code>
/// </li>
/// <li>
/// <code>RestoreDBInstanceFromDBSnapshot</code>
/// </li>
/// </ul>
class DBParameterGroupStatus {
  /// The name of the DB parameter group.
  final String? dBParameterGroupName;

  /// The status of parameter updates.
  final String? parameterApplyStatus;

  DBParameterGroupStatus({
    this.dBParameterGroupName,
    this.parameterApplyStatus,
  });
  factory DBParameterGroupStatus.fromXml(_s.XmlElement elem) {
    return DBParameterGroupStatus(
      dBParameterGroupName:
          _s.extractXmlStringValue(elem, 'DBParameterGroupName'),
      parameterApplyStatus:
          _s.extractXmlStringValue(elem, 'ParameterApplyStatus'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBParameterGroups</code> action.
class DBParameterGroupsMessage {
  /// A list of <code>DBParameterGroup</code> instances.
  final List<DBParameterGroup>? dBParameterGroups;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  DBParameterGroupsMessage({
    this.dBParameterGroups,
    this.marker,
  });
  factory DBParameterGroupsMessage.fromXml(_s.XmlElement elem) {
    return DBParameterGroupsMessage(
      dBParameterGroups: _s.extractXmlChild(elem, 'DBParameterGroups')?.let(
          (elem) => elem
              .findElements('DBParameterGroup')
              .map(DBParameterGroup.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// The data structure representing a proxy managed by the RDS Proxy.
///
/// This data type is used as a response element in the
/// <code>DescribeDBProxies</code> action.
class DBProxy {
  /// One or more data structures specifying the authorization mechanism to
  /// connect to the associated RDS DB instance or Aurora DB cluster.
  final List<UserAuthConfigInfo>? auth;

  /// The date and time when the proxy was first created.
  final DateTime? createdDate;

  /// The Amazon Resource Name (ARN) for the proxy.
  final String? dBProxyArn;

  /// The identifier for the proxy. This name must be unique for all proxies owned
  /// by your Amazon Web Services account in the specified Amazon Web Services
  /// Region.
  final String? dBProxyName;

  /// Indicates whether the proxy includes detailed information about SQL
  /// statements in its logs. This information helps you to debug issues involving
  /// SQL behavior or the performance and scalability of the proxy connections.
  /// The debug information includes the text of SQL statements that you submit
  /// through the proxy. Thus, only enable this setting when needed for debugging,
  /// and only when you have security measures in place to safeguard any sensitive
  /// information that appears in the logs.
  final bool? debugLogging;

  /// The endpoint that you can use to connect to the DB proxy. You include the
  /// endpoint value in the connection string for a database client application.
  final String? endpoint;

  /// The kinds of databases that the proxy can connect to. This value determines
  /// which database network protocol the proxy recognizes when it interprets
  /// network traffic to and from the database. <code>MYSQL</code> supports Aurora
  /// MySQL, RDS for MariaDB, and RDS for MySQL databases. <code>POSTGRESQL</code>
  /// supports Aurora PostgreSQL and RDS for PostgreSQL databases.
  /// <code>SQLSERVER</code> supports RDS for Microsoft SQL Server databases.
  final String? engineFamily;

  /// The number of seconds a connection to the proxy can have no activity before
  /// the proxy drops the client connection. The proxy keeps the underlying
  /// database connection open and puts it back into the connection pool for reuse
  /// by later connection requests.
  ///
  /// Default: 1800 (30 minutes)
  ///
  /// Constraints: 1 to 28,800
  final int? idleClientTimeout;

  /// Indicates whether Transport Layer Security (TLS) encryption is required for
  /// connections to the proxy.
  final bool? requireTLS;

  /// The Amazon Resource Name (ARN) for the IAM role that the proxy uses to
  /// access Amazon Secrets Manager.
  final String? roleArn;

  /// The current status of this proxy. A status of <code>available</code> means
  /// the proxy is ready to handle requests. Other values indicate that you must
  /// wait for the proxy to be ready, or take some action to resolve an issue.
  final DBProxyStatus? status;

  /// The date and time when the proxy was last updated.
  final DateTime? updatedDate;

  /// Provides the VPC ID of the DB proxy.
  final String? vpcId;

  /// Provides a list of VPC security groups that the proxy belongs to.
  final List<String>? vpcSecurityGroupIds;

  /// The EC2 subnet IDs for the proxy.
  final List<String>? vpcSubnetIds;

  DBProxy({
    this.auth,
    this.createdDate,
    this.dBProxyArn,
    this.dBProxyName,
    this.debugLogging,
    this.endpoint,
    this.engineFamily,
    this.idleClientTimeout,
    this.requireTLS,
    this.roleArn,
    this.status,
    this.updatedDate,
    this.vpcId,
    this.vpcSecurityGroupIds,
    this.vpcSubnetIds,
  });
  factory DBProxy.fromXml(_s.XmlElement elem) {
    return DBProxy(
      auth: _s.extractXmlChild(elem, 'Auth')?.let((elem) =>
          elem.findElements('member').map(UserAuthConfigInfo.fromXml).toList()),
      createdDate: _s.extractXmlDateTimeValue(elem, 'CreatedDate'),
      dBProxyArn: _s.extractXmlStringValue(elem, 'DBProxyArn'),
      dBProxyName: _s.extractXmlStringValue(elem, 'DBProxyName'),
      debugLogging: _s.extractXmlBoolValue(elem, 'DebugLogging'),
      endpoint: _s.extractXmlStringValue(elem, 'Endpoint'),
      engineFamily: _s.extractXmlStringValue(elem, 'EngineFamily'),
      idleClientTimeout: _s.extractXmlIntValue(elem, 'IdleClientTimeout'),
      requireTLS: _s.extractXmlBoolValue(elem, 'RequireTLS'),
      roleArn: _s.extractXmlStringValue(elem, 'RoleArn'),
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(DBProxyStatus.fromString),
      updatedDate: _s.extractXmlDateTimeValue(elem, 'UpdatedDate'),
      vpcId: _s.extractXmlStringValue(elem, 'VpcId'),
      vpcSecurityGroupIds: _s
          .extractXmlChild(elem, 'VpcSecurityGroupIds')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      vpcSubnetIds: _s
          .extractXmlChild(elem, 'VpcSubnetIds')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
    );
  }
}

/// The data structure representing an endpoint associated with a DB proxy. RDS
/// automatically creates one endpoint for each DB proxy. For Aurora DB
/// clusters, you can associate additional endpoints with the same DB proxy.
/// These endpoints can be read/write or read-only. They can also reside in
/// different VPCs than the associated DB proxy.
///
/// This data type is used as a response element in the
/// <code>DescribeDBProxyEndpoints</code> operation.
class DBProxyEndpoint {
  /// The date and time when the DB proxy endpoint was first created.
  final DateTime? createdDate;

  /// The Amazon Resource Name (ARN) for the DB proxy endpoint.
  final String? dBProxyEndpointArn;

  /// The name for the DB proxy endpoint. An identifier must begin with a letter
  /// and must contain only ASCII letters, digits, and hyphens; it can't end with
  /// a hyphen or contain two consecutive hyphens.
  final String? dBProxyEndpointName;

  /// The identifier for the DB proxy that is associated with this DB proxy
  /// endpoint.
  final String? dBProxyName;

  /// The endpoint that you can use to connect to the DB proxy. You include the
  /// endpoint value in the connection string for a database client application.
  final String? endpoint;

  /// Indicates whether this endpoint is the default endpoint for the associated
  /// DB proxy. Default DB proxy endpoints always have read/write capability.
  /// Other endpoints that you associate with the DB proxy can be either
  /// read/write or read-only.
  final bool? isDefault;

  /// The current status of this DB proxy endpoint. A status of
  /// <code>available</code> means the endpoint is ready to handle requests. Other
  /// values indicate that you must wait for the endpoint to be ready, or take
  /// some action to resolve an issue.
  final DBProxyEndpointStatus? status;

  /// A value that indicates whether the DB proxy endpoint can be used for
  /// read/write or read-only operations.
  final DBProxyEndpointTargetRole? targetRole;

  /// Provides the VPC ID of the DB proxy endpoint.
  final String? vpcId;

  /// Provides a list of VPC security groups that the DB proxy endpoint belongs
  /// to.
  final List<String>? vpcSecurityGroupIds;

  /// The EC2 subnet IDs for the DB proxy endpoint.
  final List<String>? vpcSubnetIds;

  DBProxyEndpoint({
    this.createdDate,
    this.dBProxyEndpointArn,
    this.dBProxyEndpointName,
    this.dBProxyName,
    this.endpoint,
    this.isDefault,
    this.status,
    this.targetRole,
    this.vpcId,
    this.vpcSecurityGroupIds,
    this.vpcSubnetIds,
  });
  factory DBProxyEndpoint.fromXml(_s.XmlElement elem) {
    return DBProxyEndpoint(
      createdDate: _s.extractXmlDateTimeValue(elem, 'CreatedDate'),
      dBProxyEndpointArn: _s.extractXmlStringValue(elem, 'DBProxyEndpointArn'),
      dBProxyEndpointName:
          _s.extractXmlStringValue(elem, 'DBProxyEndpointName'),
      dBProxyName: _s.extractXmlStringValue(elem, 'DBProxyName'),
      endpoint: _s.extractXmlStringValue(elem, 'Endpoint'),
      isDefault: _s.extractXmlBoolValue(elem, 'IsDefault'),
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(DBProxyEndpointStatus.fromString),
      targetRole: _s
          .extractXmlStringValue(elem, 'TargetRole')
          ?.let(DBProxyEndpointTargetRole.fromString),
      vpcId: _s.extractXmlStringValue(elem, 'VpcId'),
      vpcSecurityGroupIds: _s
          .extractXmlChild(elem, 'VpcSecurityGroupIds')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      vpcSubnetIds: _s
          .extractXmlChild(elem, 'VpcSubnetIds')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
    );
  }
}

enum DBProxyEndpointStatus {
  available('available'),
  modifying('modifying'),
  incompatibleNetwork('incompatible-network'),
  insufficientResourceLimits('insufficient-resource-limits'),
  creating('creating'),
  deleting('deleting'),
  ;

  final String value;

  const DBProxyEndpointStatus(this.value);

  static DBProxyEndpointStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum DBProxyEndpointStatus'));
}

enum DBProxyEndpointTargetRole {
  readWrite('READ_WRITE'),
  readOnly('READ_ONLY'),
  ;

  final String value;

  const DBProxyEndpointTargetRole(this.value);

  static DBProxyEndpointTargetRole fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum DBProxyEndpointTargetRole'));
}

enum DBProxyStatus {
  available('available'),
  modifying('modifying'),
  incompatibleNetwork('incompatible-network'),
  insufficientResourceLimits('insufficient-resource-limits'),
  creating('creating'),
  deleting('deleting'),
  suspended('suspended'),
  suspending('suspending'),
  reactivating('reactivating'),
  ;

  final String value;

  const DBProxyStatus(this.value);

  static DBProxyStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum DBProxyStatus'));
}

/// Contains the details for an RDS Proxy target. It represents an RDS DB
/// instance or Aurora DB cluster that the proxy can connect to. One or more
/// targets are associated with an RDS Proxy target group.
///
/// This data type is used as a response element in the
/// <code>DescribeDBProxyTargets</code> action.
class DBProxyTarget {
  /// The writer endpoint for the RDS DB instance or Aurora DB cluster.
  final String? endpoint;

  /// The port that the RDS Proxy uses to connect to the target RDS DB instance or
  /// Aurora DB cluster.
  final int? port;

  /// The identifier representing the target. It can be the instance identifier
  /// for an RDS DB instance, or the cluster identifier for an Aurora DB cluster.
  final String? rdsResourceId;

  /// A value that indicates whether the target of the proxy can be used for
  /// read/write or read-only operations.
  final TargetRole? role;

  /// The Amazon Resource Name (ARN) for the RDS DB instance or Aurora DB cluster.
  final String? targetArn;

  /// Information about the connection health of the RDS Proxy target.
  final TargetHealth? targetHealth;

  /// The DB cluster identifier when the target represents an Aurora DB cluster.
  /// This field is blank when the target represents an RDS DB instance.
  final String? trackedClusterId;

  /// Specifies the kind of database, such as an RDS DB instance or an Aurora DB
  /// cluster, that the target represents.
  final TargetType? type;

  DBProxyTarget({
    this.endpoint,
    this.port,
    this.rdsResourceId,
    this.role,
    this.targetArn,
    this.targetHealth,
    this.trackedClusterId,
    this.type,
  });
  factory DBProxyTarget.fromXml(_s.XmlElement elem) {
    return DBProxyTarget(
      endpoint: _s.extractXmlStringValue(elem, 'Endpoint'),
      port: _s.extractXmlIntValue(elem, 'Port'),
      rdsResourceId: _s.extractXmlStringValue(elem, 'RdsResourceId'),
      role: _s.extractXmlStringValue(elem, 'Role')?.let(TargetRole.fromString),
      targetArn: _s.extractXmlStringValue(elem, 'TargetArn'),
      targetHealth:
          _s.extractXmlChild(elem, 'TargetHealth')?.let(TargetHealth.fromXml),
      trackedClusterId: _s.extractXmlStringValue(elem, 'TrackedClusterId'),
      type: _s.extractXmlStringValue(elem, 'Type')?.let(TargetType.fromString),
    );
  }
}

/// Represents a set of RDS DB instances, Aurora DB clusters, or both that a
/// proxy can connect to. Currently, each target group is associated with
/// exactly one RDS DB instance or Aurora DB cluster.
///
/// This data type is used as a response element in the
/// <code>DescribeDBProxyTargetGroups</code> action.
class DBProxyTargetGroup {
  /// The settings that determine the size and behavior of the connection pool for
  /// the target group.
  final ConnectionPoolConfigurationInfo? connectionPoolConfig;

  /// The date and time when the target group was first created.
  final DateTime? createdDate;

  /// The identifier for the RDS proxy associated with this target group.
  final String? dBProxyName;

  /// Indicates whether this target group is the first one used for connection
  /// requests by the associated proxy. Because each proxy is currently associated
  /// with a single target group, currently this setting is always
  /// <code>true</code>.
  final bool? isDefault;

  /// The current status of this target group. A status of <code>available</code>
  /// means the target group is correctly associated with a database. Other values
  /// indicate that you must wait for the target group to be ready, or take some
  /// action to resolve an issue.
  final String? status;

  /// The Amazon Resource Name (ARN) representing the target group.
  final String? targetGroupArn;

  /// The identifier for the target group. This name must be unique for all target
  /// groups owned by your Amazon Web Services account in the specified Amazon Web
  /// Services Region.
  final String? targetGroupName;

  /// The date and time when the target group was last updated.
  final DateTime? updatedDate;

  DBProxyTargetGroup({
    this.connectionPoolConfig,
    this.createdDate,
    this.dBProxyName,
    this.isDefault,
    this.status,
    this.targetGroupArn,
    this.targetGroupName,
    this.updatedDate,
  });
  factory DBProxyTargetGroup.fromXml(_s.XmlElement elem) {
    return DBProxyTargetGroup(
      connectionPoolConfig: _s
          .extractXmlChild(elem, 'ConnectionPoolConfig')
          ?.let(ConnectionPoolConfigurationInfo.fromXml),
      createdDate: _s.extractXmlDateTimeValue(elem, 'CreatedDate'),
      dBProxyName: _s.extractXmlStringValue(elem, 'DBProxyName'),
      isDefault: _s.extractXmlBoolValue(elem, 'IsDefault'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      targetGroupArn: _s.extractXmlStringValue(elem, 'TargetGroupArn'),
      targetGroupName: _s.extractXmlStringValue(elem, 'TargetGroupName'),
      updatedDate: _s.extractXmlDateTimeValue(elem, 'UpdatedDate'),
    );
  }
}

/// The recommendation for your DB instances, DB clusters, and DB parameter
/// groups.
class DBRecommendation {
  /// Additional information about the recommendation. The information might
  /// contain markdown.
  final String? additionalInfo;

  /// The category of the recommendation.
  ///
  /// Valid values:
  ///
  /// <ul>
  /// <li>
  /// <code>performance efficiency</code>
  /// </li>
  /// <li>
  /// <code>security</code>
  /// </li>
  /// <li>
  /// <code>reliability</code>
  /// </li>
  /// <li>
  /// <code>cost optimization</code>
  /// </li>
  /// <li>
  /// <code>operational excellence</code>
  /// </li>
  /// <li>
  /// <code>sustainability</code>
  /// </li>
  /// </ul>
  final String? category;

  /// The time when the recommendation was created. For example,
  /// <code>2023-09-28T01:13:53.931000+00:00</code>.
  final DateTime? createdTime;

  /// A detailed description of the recommendation. The description might contain
  /// markdown.
  final String? description;

  /// A short description of the issue identified for this recommendation. The
  /// description might contain markdown.
  final String? detection;

  /// A short description that explains the possible impact of an issue.
  final String? impact;

  /// Details of the issue that caused the recommendation.
  final IssueDetails? issueDetails;

  /// A link to documentation that provides additional information about the
  /// recommendation.
  final List<DocLink>? links;

  /// The reason why this recommendation was created. The information might
  /// contain markdown.
  final String? reason;

  /// A short description of the recommendation to resolve an issue. The
  /// description might contain markdown.
  final String? recommendation;

  /// The unique identifier of the recommendation.
  final String? recommendationId;

  /// A list of recommended actions.
  final List<RecommendedAction>? recommendedActions;

  /// The Amazon Resource Name (ARN) of the RDS resource associated with the
  /// recommendation.
  final String? resourceArn;

  /// The severity level of the recommendation. The severity level can help you
  /// decide the urgency with which to address the recommendation.
  ///
  /// Valid values:
  ///
  /// <ul>
  /// <li>
  /// <code>high</code>
  /// </li>
  /// <li>
  /// <code>medium</code>
  /// </li>
  /// <li>
  /// <code>low</code>
  /// </li>
  /// <li>
  /// <code>informational</code>
  /// </li>
  /// </ul>
  final String? severity;

  /// The Amazon Web Services service that generated the recommendations.
  final String? source;

  /// The current status of the recommendation.
  ///
  /// Valid values:
  ///
  /// <ul>
  /// <li>
  /// <code>active</code> - The recommendations which are ready for you to apply.
  /// </li>
  /// <li>
  /// <code>pending</code> - The applied or scheduled recommendations which are in
  /// progress.
  /// </li>
  /// <li>
  /// <code>resolved</code> - The recommendations which are completed.
  /// </li>
  /// <li>
  /// <code>dismissed</code> - The recommendations that you dismissed.
  /// </li>
  /// </ul>
  final String? status;

  /// A short description of the recommendation type. The description might
  /// contain markdown.
  final String? typeDetection;

  /// A value that indicates the type of recommendation. This value determines how
  /// the description is rendered.
  final String? typeId;

  /// A short description that summarizes the recommendation to fix all the issues
  /// of the recommendation type. The description might contain markdown.
  final String? typeRecommendation;

  /// The time when the recommendation was last updated.
  final DateTime? updatedTime;

  DBRecommendation({
    this.additionalInfo,
    this.category,
    this.createdTime,
    this.description,
    this.detection,
    this.impact,
    this.issueDetails,
    this.links,
    this.reason,
    this.recommendation,
    this.recommendationId,
    this.recommendedActions,
    this.resourceArn,
    this.severity,
    this.source,
    this.status,
    this.typeDetection,
    this.typeId,
    this.typeRecommendation,
    this.updatedTime,
  });
  factory DBRecommendation.fromXml(_s.XmlElement elem) {
    return DBRecommendation(
      additionalInfo: _s.extractXmlStringValue(elem, 'AdditionalInfo'),
      category: _s.extractXmlStringValue(elem, 'Category'),
      createdTime: _s.extractXmlDateTimeValue(elem, 'CreatedTime'),
      description: _s.extractXmlStringValue(elem, 'Description'),
      detection: _s.extractXmlStringValue(elem, 'Detection'),
      impact: _s.extractXmlStringValue(elem, 'Impact'),
      issueDetails:
          _s.extractXmlChild(elem, 'IssueDetails')?.let(IssueDetails.fromXml),
      links: _s.extractXmlChild(elem, 'Links')?.let(
          (elem) => elem.findElements('member').map(DocLink.fromXml).toList()),
      reason: _s.extractXmlStringValue(elem, 'Reason'),
      recommendation: _s.extractXmlStringValue(elem, 'Recommendation'),
      recommendationId: _s.extractXmlStringValue(elem, 'RecommendationId'),
      recommendedActions: _s.extractXmlChild(elem, 'RecommendedActions')?.let(
          (elem) => elem
              .findElements('member')
              .map(RecommendedAction.fromXml)
              .toList()),
      resourceArn: _s.extractXmlStringValue(elem, 'ResourceArn'),
      severity: _s.extractXmlStringValue(elem, 'Severity'),
      source: _s.extractXmlStringValue(elem, 'Source'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      typeDetection: _s.extractXmlStringValue(elem, 'TypeDetection'),
      typeId: _s.extractXmlStringValue(elem, 'TypeId'),
      typeRecommendation: _s.extractXmlStringValue(elem, 'TypeRecommendation'),
      updatedTime: _s.extractXmlDateTimeValue(elem, 'UpdatedTime'),
    );
  }
}

class DBRecommendationMessage {
  final DBRecommendation? dBRecommendation;

  DBRecommendationMessage({
    this.dBRecommendation,
  });
  factory DBRecommendationMessage.fromXml(_s.XmlElement elem) {
    return DBRecommendationMessage(
      dBRecommendation: _s
          .extractXmlChild(elem, 'DBRecommendation')
          ?.let(DBRecommendation.fromXml),
    );
  }
}

class DBRecommendationsMessage {
  /// A list of recommendations which is returned from
  /// <code>DescribeDBRecommendations</code> API request.
  final List<DBRecommendation>? dBRecommendations;

  /// An optional pagination token provided by a previous
  /// <code>DBRecommendationsMessage</code> request. This token can be used later
  /// in a <code>DescribeDBRecomendations</code> request.
  final String? marker;

  DBRecommendationsMessage({
    this.dBRecommendations,
    this.marker,
  });
  factory DBRecommendationsMessage.fromXml(_s.XmlElement elem) {
    return DBRecommendationsMessage(
      dBRecommendations: _s.extractXmlChild(elem, 'DBRecommendations')?.let(
          (elem) => elem
              .findElements('member')
              .map(DBRecommendation.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Contains the details for an Amazon RDS DB security group.
///
/// This data type is used as a response element in the
/// <code>DescribeDBSecurityGroups</code> action.
class DBSecurityGroup {
  /// The Amazon Resource Name (ARN) for the DB security group.
  final String? dBSecurityGroupArn;

  /// Provides the description of the DB security group.
  final String? dBSecurityGroupDescription;

  /// Specifies the name of the DB security group.
  final String? dBSecurityGroupName;

  /// Contains a list of <code>EC2SecurityGroup</code> elements.
  final List<EC2SecurityGroup>? eC2SecurityGroups;

  /// Contains a list of <code>IPRange</code> elements.
  final List<IPRange>? iPRanges;

  /// Provides the Amazon Web Services ID of the owner of a specific DB security
  /// group.
  final String? ownerId;

  /// Provides the VpcId of the DB security group.
  final String? vpcId;

  DBSecurityGroup({
    this.dBSecurityGroupArn,
    this.dBSecurityGroupDescription,
    this.dBSecurityGroupName,
    this.eC2SecurityGroups,
    this.iPRanges,
    this.ownerId,
    this.vpcId,
  });
  factory DBSecurityGroup.fromXml(_s.XmlElement elem) {
    return DBSecurityGroup(
      dBSecurityGroupArn: _s.extractXmlStringValue(elem, 'DBSecurityGroupArn'),
      dBSecurityGroupDescription:
          _s.extractXmlStringValue(elem, 'DBSecurityGroupDescription'),
      dBSecurityGroupName:
          _s.extractXmlStringValue(elem, 'DBSecurityGroupName'),
      eC2SecurityGroups: _s.extractXmlChild(elem, 'EC2SecurityGroups')?.let(
          (elem) => elem
              .findElements('EC2SecurityGroup')
              .map(EC2SecurityGroup.fromXml)
              .toList()),
      iPRanges: _s.extractXmlChild(elem, 'IPRanges')?.let(
          (elem) => elem.findElements('IPRange').map(IPRange.fromXml).toList()),
      ownerId: _s.extractXmlStringValue(elem, 'OwnerId'),
      vpcId: _s.extractXmlStringValue(elem, 'VpcId'),
    );
  }
}

/// This data type is used as a response element in the following actions:
///
/// <ul>
/// <li>
/// <code>ModifyDBInstance</code>
/// </li>
/// <li>
/// <code>RebootDBInstance</code>
/// </li>
/// <li>
/// <code>RestoreDBInstanceFromDBSnapshot</code>
/// </li>
/// <li>
/// <code>RestoreDBInstanceToPointInTime</code>
/// </li>
/// </ul>
class DBSecurityGroupMembership {
  /// The name of the DB security group.
  final String? dBSecurityGroupName;

  /// The status of the DB security group.
  final String? status;

  DBSecurityGroupMembership({
    this.dBSecurityGroupName,
    this.status,
  });
  factory DBSecurityGroupMembership.fromXml(_s.XmlElement elem) {
    return DBSecurityGroupMembership(
      dBSecurityGroupName:
          _s.extractXmlStringValue(elem, 'DBSecurityGroupName'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBSecurityGroups</code> action.
class DBSecurityGroupMessage {
  /// A list of <code>DBSecurityGroup</code> instances.
  final List<DBSecurityGroup>? dBSecurityGroups;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  DBSecurityGroupMessage({
    this.dBSecurityGroups,
    this.marker,
  });
  factory DBSecurityGroupMessage.fromXml(_s.XmlElement elem) {
    return DBSecurityGroupMessage(
      dBSecurityGroups: _s.extractXmlChild(elem, 'DBSecurityGroups')?.let(
          (elem) => elem
              .findElements('DBSecurityGroup')
              .map(DBSecurityGroup.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class DBShardGroup {
  /// Specifies whether to create standby instances for the DB shard group. Valid
  /// values are the following:
  ///
  /// <ul>
  /// <li>
  /// 0 - Creates a single, primary DB instance for each physical shard. This is
  /// the default value, and the only one supported for the preview.
  /// </li>
  /// <li>
  /// 1 - Creates a primary DB instance and a standby instance in a different
  /// Availability Zone (AZ) for each physical shard.
  /// </li>
  /// <li>
  /// 2 - Creates a primary DB instance and two standby instances in different AZs
  /// for each physical shard.
  /// </li>
  /// </ul>
  final int? computeRedundancy;

  /// The name of the primary DB cluster for the DB shard group.
  final String? dBClusterIdentifier;

  /// The name of the DB shard group.
  final String? dBShardGroupIdentifier;

  /// The Amazon Web Services Region-unique, immutable identifier for the DB shard
  /// group.
  final String? dBShardGroupResourceId;

  /// The connection endpoint for the DB shard group.
  final String? endpoint;

  /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
  final double? maxACU;

  /// Indicates whether the DB shard group is publicly accessible.
  ///
  /// When the DB shard group is publicly accessible, its Domain Name System (DNS)
  /// endpoint resolves to the private IP address from within the DB shard group's
  /// virtual private cloud (VPC). It resolves to the public IP address from
  /// outside of the DB shard group's VPC. Access to the DB shard group is
  /// ultimately controlled by the security group it uses. That public access
  /// isn't permitted if the security group assigned to the DB shard group doesn't
  /// permit it.
  ///
  /// When the DB shard group isn't publicly accessible, it is an internal DB
  /// shard group with a DNS name that resolves to a private IP address.
  ///
  /// For more information, see <a>CreateDBShardGroup</a>.
  ///
  /// This setting is only for Aurora Limitless Database.
  final bool? publiclyAccessible;

  /// The status of the DB shard group.
  final String? status;

  DBShardGroup({
    this.computeRedundancy,
    this.dBClusterIdentifier,
    this.dBShardGroupIdentifier,
    this.dBShardGroupResourceId,
    this.endpoint,
    this.maxACU,
    this.publiclyAccessible,
    this.status,
  });
  factory DBShardGroup.fromXml(_s.XmlElement elem) {
    return DBShardGroup(
      computeRedundancy: _s.extractXmlIntValue(elem, 'ComputeRedundancy'),
      dBClusterIdentifier:
          _s.extractXmlStringValue(elem, 'DBClusterIdentifier'),
      dBShardGroupIdentifier:
          _s.extractXmlStringValue(elem, 'DBShardGroupIdentifier'),
      dBShardGroupResourceId:
          _s.extractXmlStringValue(elem, 'DBShardGroupResourceId'),
      endpoint: _s.extractXmlStringValue(elem, 'Endpoint'),
      maxACU: _s.extractXmlDoubleValue(elem, 'MaxACU'),
      publiclyAccessible: _s.extractXmlBoolValue(elem, 'PubliclyAccessible'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// Contains the details of an Amazon RDS DB snapshot.
///
/// This data type is used as a response element in the
/// <code>DescribeDBSnapshots</code> action.
class DBSnapshot {
  /// Specifies the allocated storage size in gibibytes (GiB).
  final int? allocatedStorage;

  /// Specifies the name of the Availability Zone the DB instance was located in
  /// at the time of the DB snapshot.
  final String? availabilityZone;

  /// Specifies the DB instance identifier of the DB instance this DB snapshot was
  /// created from.
  final String? dBInstanceIdentifier;

  /// The Amazon Resource Name (ARN) for the DB snapshot.
  final String? dBSnapshotArn;

  /// Specifies the identifier for the DB snapshot.
  final String? dBSnapshotIdentifier;

  /// The Oracle system identifier (SID), which is the name of the Oracle database
  /// instance that manages your database files. The Oracle SID is also the name
  /// of your CDB.
  final String? dBSystemId;

  /// The identifier for the source DB instance, which can't be changed and which
  /// is unique to an Amazon Web Services Region.
  final String? dbiResourceId;

  /// Indicates whether the DB instance has a dedicated log volume (DLV) enabled.
  final bool? dedicatedLogVolume;

  /// Indicates whether the DB snapshot is encrypted.
  final bool? encrypted;

  /// Specifies the name of the database engine.
  final String? engine;

  /// Specifies the version of the database engine.
  final String? engineVersion;

  /// Indicates whether mapping of Amazon Web Services Identity and Access
  /// Management (IAM) accounts to database accounts is enabled.
  final bool? iAMDatabaseAuthenticationEnabled;

  /// Specifies the time in Coordinated Universal Time (UTC) when the DB instance,
  /// from which the snapshot was taken, was created.
  final DateTime? instanceCreateTime;

  /// Specifies the Provisioned IOPS (I/O operations per second) value of the DB
  /// instance at the time of the snapshot.
  final int? iops;

  /// If <code>Encrypted</code> is true, the Amazon Web Services KMS key
  /// identifier for the encrypted DB snapshot.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  final String? kmsKeyId;

  /// License model information for the restored DB instance.
  final String? licenseModel;

  /// Provides the master username for the DB snapshot.
  final String? masterUsername;

  /// Indicates whether the snapshot is of a DB instance using the multi-tenant
  /// configuration (TRUE) or the single-tenant configuration (FALSE).
  final bool? multiTenant;

  /// Provides the option group name for the DB snapshot.
  final String? optionGroupName;

  /// Specifies the time of the CreateDBSnapshot operation in Coordinated
  /// Universal Time (UTC). Doesn't change when the snapshot is copied.
  final DateTime? originalSnapshotCreateTime;

  /// The percentage of the estimated data that has been transferred.
  final int? percentProgress;

  /// Specifies the port that the database engine was listening on at the time of
  /// the snapshot.
  final int? port;

  /// The number of CPU cores and the number of threads per core for the DB
  /// instance class of the DB instance when the DB snapshot was created.
  final List<ProcessorFeature>? processorFeatures;

  /// Specifies when the snapshot was taken in Coordinated Universal Time (UTC).
  /// Changes for the copy when the snapshot is copied.
  final DateTime? snapshotCreateTime;

  /// The timestamp of the most recent transaction applied to the database that
  /// you're backing up. Thus, if you restore a snapshot, SnapshotDatabaseTime is
  /// the most recent transaction in the restored DB instance. In contrast,
  /// originalSnapshotCreateTime specifies the system time that the snapshot
  /// completed.
  ///
  /// If you back up a read replica, you can determine the replica lag by
  /// comparing SnapshotDatabaseTime with originalSnapshotCreateTime. For example,
  /// if originalSnapshotCreateTime is two hours later than SnapshotDatabaseTime,
  /// then the replica lag is two hours.
  final DateTime? snapshotDatabaseTime;

  /// Specifies where manual snapshots are stored: Amazon Web Services Outposts or
  /// the Amazon Web Services Region.
  final String? snapshotTarget;

  /// Provides the type of the DB snapshot.
  final String? snapshotType;

  /// The DB snapshot Amazon Resource Name (ARN) that the DB snapshot was copied
  /// from. It only has a value in the case of a cross-account or cross-Region
  /// copy.
  final String? sourceDBSnapshotIdentifier;

  /// The Amazon Web Services Region that the DB snapshot was created in or copied
  /// from.
  final String? sourceRegion;

  /// Specifies the status of this DB snapshot.
  final String? status;

  /// Specifies the storage throughput for the DB snapshot.
  final int? storageThroughput;

  /// Specifies the storage type associated with DB snapshot.
  final String? storageType;
  final List<Tag>? tagList;

  /// The ARN from the key store with which to associate the instance for TDE
  /// encryption.
  final String? tdeCredentialArn;

  /// The time zone of the DB snapshot. In most cases, the <code>Timezone</code>
  /// element is empty. <code>Timezone</code> content appears only for snapshots
  /// taken from Microsoft SQL Server DB instances that were created with a time
  /// zone specified.
  final String? timezone;

  /// Provides the VPC ID associated with the DB snapshot.
  final String? vpcId;

  DBSnapshot({
    this.allocatedStorage,
    this.availabilityZone,
    this.dBInstanceIdentifier,
    this.dBSnapshotArn,
    this.dBSnapshotIdentifier,
    this.dBSystemId,
    this.dbiResourceId,
    this.dedicatedLogVolume,
    this.encrypted,
    this.engine,
    this.engineVersion,
    this.iAMDatabaseAuthenticationEnabled,
    this.instanceCreateTime,
    this.iops,
    this.kmsKeyId,
    this.licenseModel,
    this.masterUsername,
    this.multiTenant,
    this.optionGroupName,
    this.originalSnapshotCreateTime,
    this.percentProgress,
    this.port,
    this.processorFeatures,
    this.snapshotCreateTime,
    this.snapshotDatabaseTime,
    this.snapshotTarget,
    this.snapshotType,
    this.sourceDBSnapshotIdentifier,
    this.sourceRegion,
    this.status,
    this.storageThroughput,
    this.storageType,
    this.tagList,
    this.tdeCredentialArn,
    this.timezone,
    this.vpcId,
  });
  factory DBSnapshot.fromXml(_s.XmlElement elem) {
    return DBSnapshot(
      allocatedStorage: _s.extractXmlIntValue(elem, 'AllocatedStorage'),
      availabilityZone: _s.extractXmlStringValue(elem, 'AvailabilityZone'),
      dBInstanceIdentifier:
          _s.extractXmlStringValue(elem, 'DBInstanceIdentifier'),
      dBSnapshotArn: _s.extractXmlStringValue(elem, 'DBSnapshotArn'),
      dBSnapshotIdentifier:
          _s.extractXmlStringValue(elem, 'DBSnapshotIdentifier'),
      dBSystemId: _s.extractXmlStringValue(elem, 'DBSystemId'),
      dbiResourceId: _s.extractXmlStringValue(elem, 'DbiResourceId'),
      dedicatedLogVolume: _s.extractXmlBoolValue(elem, 'DedicatedLogVolume'),
      encrypted: _s.extractXmlBoolValue(elem, 'Encrypted'),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      iAMDatabaseAuthenticationEnabled:
          _s.extractXmlBoolValue(elem, 'IAMDatabaseAuthenticationEnabled'),
      instanceCreateTime:
          _s.extractXmlDateTimeValue(elem, 'InstanceCreateTime'),
      iops: _s.extractXmlIntValue(elem, 'Iops'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      licenseModel: _s.extractXmlStringValue(elem, 'LicenseModel'),
      masterUsername: _s.extractXmlStringValue(elem, 'MasterUsername'),
      multiTenant: _s.extractXmlBoolValue(elem, 'MultiTenant'),
      optionGroupName: _s.extractXmlStringValue(elem, 'OptionGroupName'),
      originalSnapshotCreateTime:
          _s.extractXmlDateTimeValue(elem, 'OriginalSnapshotCreateTime'),
      percentProgress: _s.extractXmlIntValue(elem, 'PercentProgress'),
      port: _s.extractXmlIntValue(elem, 'Port'),
      processorFeatures: _s.extractXmlChild(elem, 'ProcessorFeatures')?.let(
          (elem) => elem
              .findElements('ProcessorFeature')
              .map(ProcessorFeature.fromXml)
              .toList()),
      snapshotCreateTime:
          _s.extractXmlDateTimeValue(elem, 'SnapshotCreateTime'),
      snapshotDatabaseTime:
          _s.extractXmlDateTimeValue(elem, 'SnapshotDatabaseTime'),
      snapshotTarget: _s.extractXmlStringValue(elem, 'SnapshotTarget'),
      snapshotType: _s.extractXmlStringValue(elem, 'SnapshotType'),
      sourceDBSnapshotIdentifier:
          _s.extractXmlStringValue(elem, 'SourceDBSnapshotIdentifier'),
      sourceRegion: _s.extractXmlStringValue(elem, 'SourceRegion'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      storageThroughput: _s.extractXmlIntValue(elem, 'StorageThroughput'),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
      tagList: _s
          .extractXmlChild(elem, 'TagList')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
      tdeCredentialArn: _s.extractXmlStringValue(elem, 'TdeCredentialArn'),
      timezone: _s.extractXmlStringValue(elem, 'Timezone'),
      vpcId: _s.extractXmlStringValue(elem, 'VpcId'),
    );
  }
}

/// Contains the name and values of a manual DB snapshot attribute
///
/// Manual DB snapshot attributes are used to authorize other Amazon Web
/// Services accounts to restore a manual DB snapshot. For more information, see
/// the <code>ModifyDBSnapshotAttribute</code> API.
class DBSnapshotAttribute {
  /// The name of the manual DB snapshot attribute.
  ///
  /// The attribute named <code>restore</code> refers to the list of Amazon Web
  /// Services accounts that have permission to copy or restore the manual DB
  /// cluster snapshot. For more information, see the
  /// <code>ModifyDBSnapshotAttribute</code> API action.
  final String? attributeName;

  /// The value or values for the manual DB snapshot attribute.
  ///
  /// If the <code>AttributeName</code> field is set to <code>restore</code>, then
  /// this element returns a list of IDs of the Amazon Web Services accounts that
  /// are authorized to copy or restore the manual DB snapshot. If a value of
  /// <code>all</code> is in the list, then the manual DB snapshot is public and
  /// available for any Amazon Web Services account to copy or restore.
  final List<String>? attributeValues;

  DBSnapshotAttribute({
    this.attributeName,
    this.attributeValues,
  });
  factory DBSnapshotAttribute.fromXml(_s.XmlElement elem) {
    return DBSnapshotAttribute(
      attributeName: _s.extractXmlStringValue(elem, 'AttributeName'),
      attributeValues: _s.extractXmlChild(elem, 'AttributeValues')?.let(
          (elem) => _s.extractXmlStringListValues(elem, 'AttributeValue')),
    );
  }
}

/// Contains the results of a successful call to the
/// <code>DescribeDBSnapshotAttributes</code> API action.
///
/// Manual DB snapshot attributes are used to authorize other Amazon Web
/// Services accounts to copy or restore a manual DB snapshot. For more
/// information, see the <code>ModifyDBSnapshotAttribute</code> API action.
class DBSnapshotAttributesResult {
  /// The list of attributes and values for the manual DB snapshot.
  final List<DBSnapshotAttribute>? dBSnapshotAttributes;

  /// The identifier of the manual DB snapshot that the attributes apply to.
  final String? dBSnapshotIdentifier;

  DBSnapshotAttributesResult({
    this.dBSnapshotAttributes,
    this.dBSnapshotIdentifier,
  });
  factory DBSnapshotAttributesResult.fromXml(_s.XmlElement elem) {
    return DBSnapshotAttributesResult(
      dBSnapshotAttributes: _s
          .extractXmlChild(elem, 'DBSnapshotAttributes')
          ?.let((elem) => elem
              .findElements('DBSnapshotAttribute')
              .map(DBSnapshotAttribute.fromXml)
              .toList()),
      dBSnapshotIdentifier:
          _s.extractXmlStringValue(elem, 'DBSnapshotIdentifier'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBSnapshots</code> action.
class DBSnapshotMessage {
  /// A list of <code>DBSnapshot</code> instances.
  final List<DBSnapshot>? dBSnapshots;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  DBSnapshotMessage({
    this.dBSnapshots,
    this.marker,
  });
  factory DBSnapshotMessage.fromXml(_s.XmlElement elem) {
    return DBSnapshotMessage(
      dBSnapshots: _s.extractXmlChild(elem, 'DBSnapshots')?.let((elem) =>
          elem.findElements('DBSnapshot').map(DBSnapshot.fromXml).toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Contains the details of a tenant database in a snapshot of a DB instance.
class DBSnapshotTenantDatabase {
  /// The name of the character set of a tenant database.
  final String? characterSetName;

  /// The ID for the DB instance that contains the tenant databases.
  final String? dBInstanceIdentifier;

  /// The identifier for the snapshot of the DB instance.
  final String? dBSnapshotIdentifier;

  /// The Amazon Resource Name (ARN) for the snapshot tenant database.
  final String? dBSnapshotTenantDatabaseARN;

  /// The resource identifier of the source CDB instance. This identifier can't be
  /// changed and is unique to an Amazon Web Services Region.
  final String? dbiResourceId;

  /// The name of the database engine.
  final String? engineName;

  /// The master username of the tenant database.
  final String? masterUsername;

  /// The <code>NCHAR</code> character set name of the tenant database.
  final String? ncharCharacterSetName;

  /// The type of DB snapshot.
  final String? snapshotType;
  final List<Tag>? tagList;

  /// The name of the tenant database.
  final String? tenantDBName;

  /// The time the DB snapshot was taken, specified in Coordinated Universal Time
  /// (UTC). If you copy the snapshot, the creation time changes.
  final DateTime? tenantDatabaseCreateTime;

  /// The resource ID of the tenant database.
  final String? tenantDatabaseResourceId;

  DBSnapshotTenantDatabase({
    this.characterSetName,
    this.dBInstanceIdentifier,
    this.dBSnapshotIdentifier,
    this.dBSnapshotTenantDatabaseARN,
    this.dbiResourceId,
    this.engineName,
    this.masterUsername,
    this.ncharCharacterSetName,
    this.snapshotType,
    this.tagList,
    this.tenantDBName,
    this.tenantDatabaseCreateTime,
    this.tenantDatabaseResourceId,
  });
  factory DBSnapshotTenantDatabase.fromXml(_s.XmlElement elem) {
    return DBSnapshotTenantDatabase(
      characterSetName: _s.extractXmlStringValue(elem, 'CharacterSetName'),
      dBInstanceIdentifier:
          _s.extractXmlStringValue(elem, 'DBInstanceIdentifier'),
      dBSnapshotIdentifier:
          _s.extractXmlStringValue(elem, 'DBSnapshotIdentifier'),
      dBSnapshotTenantDatabaseARN:
          _s.extractXmlStringValue(elem, 'DBSnapshotTenantDatabaseARN'),
      dbiResourceId: _s.extractXmlStringValue(elem, 'DbiResourceId'),
      engineName: _s.extractXmlStringValue(elem, 'EngineName'),
      masterUsername: _s.extractXmlStringValue(elem, 'MasterUsername'),
      ncharCharacterSetName:
          _s.extractXmlStringValue(elem, 'NcharCharacterSetName'),
      snapshotType: _s.extractXmlStringValue(elem, 'SnapshotType'),
      tagList: _s
          .extractXmlChild(elem, 'TagList')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
      tenantDBName: _s.extractXmlStringValue(elem, 'TenantDBName'),
      tenantDatabaseCreateTime:
          _s.extractXmlDateTimeValue(elem, 'TenantDatabaseCreateTime'),
      tenantDatabaseResourceId:
          _s.extractXmlStringValue(elem, 'TenantDatabaseResourceId'),
    );
  }
}

class DBSnapshotTenantDatabasesMessage {
  /// A list of DB snapshot tenant databases.
  final List<DBSnapshotTenantDatabase>? dBSnapshotTenantDatabases;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  DBSnapshotTenantDatabasesMessage({
    this.dBSnapshotTenantDatabases,
    this.marker,
  });
  factory DBSnapshotTenantDatabasesMessage.fromXml(_s.XmlElement elem) {
    return DBSnapshotTenantDatabasesMessage(
      dBSnapshotTenantDatabases: _s
          .extractXmlChild(elem, 'DBSnapshotTenantDatabases')
          ?.let((elem) => elem
              .findElements('DBSnapshotTenantDatabase')
              .map(DBSnapshotTenantDatabase.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Contains the details of an Amazon RDS DB subnet group.
///
/// This data type is used as a response element in the
/// <code>DescribeDBSubnetGroups</code> action.
class DBSubnetGroup {
  /// The Amazon Resource Name (ARN) for the DB subnet group.
  final String? dBSubnetGroupArn;

  /// Provides the description of the DB subnet group.
  final String? dBSubnetGroupDescription;

  /// The name of the DB subnet group.
  final String? dBSubnetGroupName;

  /// Provides the status of the DB subnet group.
  final String? subnetGroupStatus;

  /// Contains a list of <code>Subnet</code> elements.
  final List<Subnet>? subnets;

  /// The network type of the DB subnet group.
  ///
  /// Valid values:
  ///
  /// <ul>
  /// <li>
  /// <code>IPV4</code>
  /// </li>
  /// <li>
  /// <code>DUAL</code>
  /// </li>
  /// </ul>
  /// A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4
  /// and the IPv6 protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i>
  final List<String>? supportedNetworkTypes;

  /// Provides the VpcId of the DB subnet group.
  final String? vpcId;

  DBSubnetGroup({
    this.dBSubnetGroupArn,
    this.dBSubnetGroupDescription,
    this.dBSubnetGroupName,
    this.subnetGroupStatus,
    this.subnets,
    this.supportedNetworkTypes,
    this.vpcId,
  });
  factory DBSubnetGroup.fromXml(_s.XmlElement elem) {
    return DBSubnetGroup(
      dBSubnetGroupArn: _s.extractXmlStringValue(elem, 'DBSubnetGroupArn'),
      dBSubnetGroupDescription:
          _s.extractXmlStringValue(elem, 'DBSubnetGroupDescription'),
      dBSubnetGroupName: _s.extractXmlStringValue(elem, 'DBSubnetGroupName'),
      subnetGroupStatus: _s.extractXmlStringValue(elem, 'SubnetGroupStatus'),
      subnets: _s.extractXmlChild(elem, 'Subnets')?.let(
          (elem) => elem.findElements('Subnet').map(Subnet.fromXml).toList()),
      supportedNetworkTypes: _s
          .extractXmlChild(elem, 'SupportedNetworkTypes')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      vpcId: _s.extractXmlStringValue(elem, 'VpcId'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeDBSubnetGroups</code> action.
class DBSubnetGroupMessage {
  /// A list of <code>DBSubnetGroup</code> instances.
  final List<DBSubnetGroup>? dBSubnetGroups;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  DBSubnetGroupMessage({
    this.dBSubnetGroups,
    this.marker,
  });
  factory DBSubnetGroupMessage.fromXml(_s.XmlElement elem) {
    return DBSubnetGroupMessage(
      dBSubnetGroups: _s.extractXmlChild(elem, 'DBSubnetGroups')?.let((elem) =>
          elem
              .findElements('DBSubnetGroup')
              .map(DBSubnetGroup.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class DeleteBlueGreenDeploymentResponse {
  final BlueGreenDeployment? blueGreenDeployment;

  DeleteBlueGreenDeploymentResponse({
    this.blueGreenDeployment,
  });
  factory DeleteBlueGreenDeploymentResponse.fromXml(_s.XmlElement elem) {
    return DeleteBlueGreenDeploymentResponse(
      blueGreenDeployment: _s
          .extractXmlChild(elem, 'BlueGreenDeployment')
          ?.let(BlueGreenDeployment.fromXml),
    );
  }
}

class DeleteDBClusterAutomatedBackupResult {
  final DBClusterAutomatedBackup? dBClusterAutomatedBackup;

  DeleteDBClusterAutomatedBackupResult({
    this.dBClusterAutomatedBackup,
  });
  factory DeleteDBClusterAutomatedBackupResult.fromXml(_s.XmlElement elem) {
    return DeleteDBClusterAutomatedBackupResult(
      dBClusterAutomatedBackup: _s
          .extractXmlChild(elem, 'DBClusterAutomatedBackup')
          ?.let(DBClusterAutomatedBackup.fromXml),
    );
  }
}

class DeleteDBClusterResult {
  final DBCluster? dBCluster;

  DeleteDBClusterResult({
    this.dBCluster,
  });
  factory DeleteDBClusterResult.fromXml(_s.XmlElement elem) {
    return DeleteDBClusterResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class DeleteDBClusterSnapshotResult {
  final DBClusterSnapshot? dBClusterSnapshot;

  DeleteDBClusterSnapshotResult({
    this.dBClusterSnapshot,
  });
  factory DeleteDBClusterSnapshotResult.fromXml(_s.XmlElement elem) {
    return DeleteDBClusterSnapshotResult(
      dBClusterSnapshot: _s
          .extractXmlChild(elem, 'DBClusterSnapshot')
          ?.let(DBClusterSnapshot.fromXml),
    );
  }
}

class DeleteDBInstanceAutomatedBackupResult {
  final DBInstanceAutomatedBackup? dBInstanceAutomatedBackup;

  DeleteDBInstanceAutomatedBackupResult({
    this.dBInstanceAutomatedBackup,
  });
  factory DeleteDBInstanceAutomatedBackupResult.fromXml(_s.XmlElement elem) {
    return DeleteDBInstanceAutomatedBackupResult(
      dBInstanceAutomatedBackup: _s
          .extractXmlChild(elem, 'DBInstanceAutomatedBackup')
          ?.let(DBInstanceAutomatedBackup.fromXml),
    );
  }
}

class DeleteDBInstanceResult {
  final DBInstance? dBInstance;

  DeleteDBInstanceResult({
    this.dBInstance,
  });
  factory DeleteDBInstanceResult.fromXml(_s.XmlElement elem) {
    return DeleteDBInstanceResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

class DeleteDBProxyEndpointResponse {
  /// The data structure representing the details of the DB proxy endpoint that
  /// you delete.
  final DBProxyEndpoint? dBProxyEndpoint;

  DeleteDBProxyEndpointResponse({
    this.dBProxyEndpoint,
  });
  factory DeleteDBProxyEndpointResponse.fromXml(_s.XmlElement elem) {
    return DeleteDBProxyEndpointResponse(
      dBProxyEndpoint: _s
          .extractXmlChild(elem, 'DBProxyEndpoint')
          ?.let(DBProxyEndpoint.fromXml),
    );
  }
}

class DeleteDBProxyResponse {
  /// The data structure representing the details of the DB proxy that you delete.
  final DBProxy? dBProxy;

  DeleteDBProxyResponse({
    this.dBProxy,
  });
  factory DeleteDBProxyResponse.fromXml(_s.XmlElement elem) {
    return DeleteDBProxyResponse(
      dBProxy: _s.extractXmlChild(elem, 'DBProxy')?.let(DBProxy.fromXml),
    );
  }
}

class DeleteDBSnapshotResult {
  final DBSnapshot? dBSnapshot;

  DeleteDBSnapshotResult({
    this.dBSnapshot,
  });
  factory DeleteDBSnapshotResult.fromXml(_s.XmlElement elem) {
    return DeleteDBSnapshotResult(
      dBSnapshot:
          _s.extractXmlChild(elem, 'DBSnapshot')?.let(DBSnapshot.fromXml),
    );
  }
}

class DeleteEventSubscriptionResult {
  final EventSubscription? eventSubscription;

  DeleteEventSubscriptionResult({
    this.eventSubscription,
  });
  factory DeleteEventSubscriptionResult.fromXml(_s.XmlElement elem) {
    return DeleteEventSubscriptionResult(
      eventSubscription: _s
          .extractXmlChild(elem, 'EventSubscription')
          ?.let(EventSubscription.fromXml),
    );
  }
}

class DeleteGlobalClusterResult {
  final GlobalCluster? globalCluster;

  DeleteGlobalClusterResult({
    this.globalCluster,
  });
  factory DeleteGlobalClusterResult.fromXml(_s.XmlElement elem) {
    return DeleteGlobalClusterResult(
      globalCluster:
          _s.extractXmlChild(elem, 'GlobalCluster')?.let(GlobalCluster.fromXml),
    );
  }
}

class DeleteTenantDatabaseResult {
  final TenantDatabase? tenantDatabase;

  DeleteTenantDatabaseResult({
    this.tenantDatabase,
  });
  factory DeleteTenantDatabaseResult.fromXml(_s.XmlElement elem) {
    return DeleteTenantDatabaseResult(
      tenantDatabase: _s
          .extractXmlChild(elem, 'TenantDatabase')
          ?.let(TenantDatabase.fromXml),
    );
  }
}

class DeregisterDBProxyTargetsResponse {
  DeregisterDBProxyTargetsResponse();
  factory DeregisterDBProxyTargetsResponse.fromXml(
      // ignore: avoid_unused_constructor_parameters
      _s.XmlElement elem) {
    return DeregisterDBProxyTargetsResponse();
  }
}

class DescribeBlueGreenDeploymentsResponse {
  /// A list of blue/green deployments in the current account and Amazon Web
  /// Services Region.
  final List<BlueGreenDeployment>? blueGreenDeployments;

  /// A pagination token that can be used in a later
  /// <code>DescribeBlueGreenDeployments</code> request.
  final String? marker;

  DescribeBlueGreenDeploymentsResponse({
    this.blueGreenDeployments,
    this.marker,
  });
  factory DescribeBlueGreenDeploymentsResponse.fromXml(_s.XmlElement elem) {
    return DescribeBlueGreenDeploymentsResponse(
      blueGreenDeployments: _s
          .extractXmlChild(elem, 'BlueGreenDeployments')
          ?.let((elem) => elem
              .findElements('member')
              .map(BlueGreenDeployment.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class DescribeDBClusterSnapshotAttributesResult {
  final DBClusterSnapshotAttributesResult? dBClusterSnapshotAttributesResult;

  DescribeDBClusterSnapshotAttributesResult({
    this.dBClusterSnapshotAttributesResult,
  });
  factory DescribeDBClusterSnapshotAttributesResult.fromXml(
      _s.XmlElement elem) {
    return DescribeDBClusterSnapshotAttributesResult(
      dBClusterSnapshotAttributesResult: _s
          .extractXmlChild(elem, 'DBClusterSnapshotAttributesResult')
          ?.let(DBClusterSnapshotAttributesResult.fromXml),
    );
  }
}

/// This data type is used as a response element to
/// <code>DescribeDBLogFiles</code>.
class DescribeDBLogFilesDetails {
  /// A POSIX timestamp when the last log entry was written.
  final int? lastWritten;

  /// The name of the log file for the specified DB instance.
  final String? logFileName;

  /// The size, in bytes, of the log file for the specified DB instance.
  final int? size;

  DescribeDBLogFilesDetails({
    this.lastWritten,
    this.logFileName,
    this.size,
  });
  factory DescribeDBLogFilesDetails.fromXml(_s.XmlElement elem) {
    return DescribeDBLogFilesDetails(
      lastWritten: _s.extractXmlIntValue(elem, 'LastWritten'),
      logFileName: _s.extractXmlStringValue(elem, 'LogFileName'),
      size: _s.extractXmlIntValue(elem, 'Size'),
    );
  }
}

/// The response from a call to <code>DescribeDBLogFiles</code>.
class DescribeDBLogFilesResponse {
  /// The DB log files returned.
  final List<DescribeDBLogFilesDetails>? describeDBLogFiles;

  /// A pagination token that can be used in a later
  /// <code>DescribeDBLogFiles</code> request.
  final String? marker;

  DescribeDBLogFilesResponse({
    this.describeDBLogFiles,
    this.marker,
  });
  factory DescribeDBLogFilesResponse.fromXml(_s.XmlElement elem) {
    return DescribeDBLogFilesResponse(
      describeDBLogFiles: _s.extractXmlChild(elem, 'DescribeDBLogFiles')?.let(
          (elem) => elem
              .findElements('DescribeDBLogFilesDetails')
              .map(DescribeDBLogFilesDetails.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class DescribeDBProxiesResponse {
  /// A return value representing an arbitrary number of <code>DBProxy</code> data
  /// structures.
  final List<DBProxy>? dBProxies;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  DescribeDBProxiesResponse({
    this.dBProxies,
    this.marker,
  });
  factory DescribeDBProxiesResponse.fromXml(_s.XmlElement elem) {
    return DescribeDBProxiesResponse(
      dBProxies: _s.extractXmlChild(elem, 'DBProxies')?.let(
          (elem) => elem.findElements('member').map(DBProxy.fromXml).toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class DescribeDBProxyEndpointsResponse {
  /// The list of <code>ProxyEndpoint</code> objects returned by the API
  /// operation.
  final List<DBProxyEndpoint>? dBProxyEndpoints;

  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  DescribeDBProxyEndpointsResponse({
    this.dBProxyEndpoints,
    this.marker,
  });
  factory DescribeDBProxyEndpointsResponse.fromXml(_s.XmlElement elem) {
    return DescribeDBProxyEndpointsResponse(
      dBProxyEndpoints: _s.extractXmlChild(elem, 'DBProxyEndpoints')?.let(
          (elem) => elem
              .findElements('member')
              .map(DBProxyEndpoint.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class DescribeDBProxyTargetGroupsResponse {
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  /// An arbitrary number of <code>DBProxyTargetGroup</code> objects, containing
  /// details of the corresponding target groups.
  final List<DBProxyTargetGroup>? targetGroups;

  DescribeDBProxyTargetGroupsResponse({
    this.marker,
    this.targetGroups,
  });
  factory DescribeDBProxyTargetGroupsResponse.fromXml(_s.XmlElement elem) {
    return DescribeDBProxyTargetGroupsResponse(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      targetGroups: _s.extractXmlChild(elem, 'TargetGroups')?.let((elem) =>
          elem.findElements('member').map(DBProxyTargetGroup.fromXml).toList()),
    );
  }
}

class DescribeDBProxyTargetsResponse {
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  /// An arbitrary number of <code>DBProxyTarget</code> objects, containing
  /// details of the corresponding targets.
  final List<DBProxyTarget>? targets;

  DescribeDBProxyTargetsResponse({
    this.marker,
    this.targets,
  });
  factory DescribeDBProxyTargetsResponse.fromXml(_s.XmlElement elem) {
    return DescribeDBProxyTargetsResponse(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      targets: _s.extractXmlChild(elem, 'Targets')?.let((elem) =>
          elem.findElements('member').map(DBProxyTarget.fromXml).toList()),
    );
  }
}

class DescribeDBShardGroupsResponse {
  /// Contains a list of DB shard groups for the user.
  final List<DBShardGroup>? dBShardGroups;

  /// A pagination token that can be used in a later
  /// <code>DescribeDBClusters</code> request.
  final String? marker;

  DescribeDBShardGroupsResponse({
    this.dBShardGroups,
    this.marker,
  });
  factory DescribeDBShardGroupsResponse.fromXml(_s.XmlElement elem) {
    return DescribeDBShardGroupsResponse(
      dBShardGroups: _s.extractXmlChild(elem, 'DBShardGroups')?.let((elem) =>
          elem.findElements('DBShardGroup').map(DBShardGroup.fromXml).toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class DescribeDBSnapshotAttributesResult {
  final DBSnapshotAttributesResult? dBSnapshotAttributesResult;

  DescribeDBSnapshotAttributesResult({
    this.dBSnapshotAttributesResult,
  });
  factory DescribeDBSnapshotAttributesResult.fromXml(_s.XmlElement elem) {
    return DescribeDBSnapshotAttributesResult(
      dBSnapshotAttributesResult: _s
          .extractXmlChild(elem, 'DBSnapshotAttributesResult')
          ?.let(DBSnapshotAttributesResult.fromXml),
    );
  }
}

class DescribeEngineDefaultClusterParametersResult {
  final EngineDefaults? engineDefaults;

  DescribeEngineDefaultClusterParametersResult({
    this.engineDefaults,
  });
  factory DescribeEngineDefaultClusterParametersResult.fromXml(
      _s.XmlElement elem) {
    return DescribeEngineDefaultClusterParametersResult(
      engineDefaults: _s
          .extractXmlChild(elem, 'EngineDefaults')
          ?.let(EngineDefaults.fromXml),
    );
  }
}

class DescribeEngineDefaultParametersResult {
  final EngineDefaults? engineDefaults;

  DescribeEngineDefaultParametersResult({
    this.engineDefaults,
  });
  factory DescribeEngineDefaultParametersResult.fromXml(_s.XmlElement elem) {
    return DescribeEngineDefaultParametersResult(
      engineDefaults: _s
          .extractXmlChild(elem, 'EngineDefaults')
          ?.let(EngineDefaults.fromXml),
    );
  }
}

class DescribeIntegrationsResponse {
  /// A list of integrations.
  final List<Integration>? integrations;

  /// A pagination token that can be used in a later
  /// <code>DescribeIntegrations</code> request.
  final String? marker;

  DescribeIntegrationsResponse({
    this.integrations,
    this.marker,
  });
  factory DescribeIntegrationsResponse.fromXml(_s.XmlElement elem) {
    return DescribeIntegrationsResponse(
      integrations: _s.extractXmlChild(elem, 'Integrations')?.let((elem) =>
          elem.findElements('Integration').map(Integration.fromXml).toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class DescribeValidDBInstanceModificationsResult {
  final ValidDBInstanceModificationsMessage?
      validDBInstanceModificationsMessage;

  DescribeValidDBInstanceModificationsResult({
    this.validDBInstanceModificationsMessage,
  });
  factory DescribeValidDBInstanceModificationsResult.fromXml(
      _s.XmlElement elem) {
    return DescribeValidDBInstanceModificationsResult(
      validDBInstanceModificationsMessage: _s
          .extractXmlChild(elem, 'ValidDBInstanceModificationsMessage')
          ?.let(ValidDBInstanceModificationsMessage.fromXml),
    );
  }
}

class DisableHttpEndpointResponse {
  /// Indicates whether the HTTP endpoint is enabled or disabled for the DB
  /// cluster.
  final bool? httpEndpointEnabled;

  /// The ARN of the DB cluster.
  final String? resourceArn;

  DisableHttpEndpointResponse({
    this.httpEndpointEnabled,
    this.resourceArn,
  });
  factory DisableHttpEndpointResponse.fromXml(_s.XmlElement elem) {
    return DisableHttpEndpointResponse(
      httpEndpointEnabled: _s.extractXmlBoolValue(elem, 'HttpEndpointEnabled'),
      resourceArn: _s.extractXmlStringValue(elem, 'ResourceArn'),
    );
  }
}

/// A link to documentation that provides additional information for a
/// recommendation.
class DocLink {
  /// The text with the link to documentation for the recommendation.
  final String? text;

  /// The URL for the documentation for the recommendation.
  final String? url;

  DocLink({
    this.text,
    this.url,
  });
  factory DocLink.fromXml(_s.XmlElement elem) {
    return DocLink(
      text: _s.extractXmlStringValue(elem, 'Text'),
      url: _s.extractXmlStringValue(elem, 'Url'),
    );
  }
}

/// An Active Directory Domain membership record associated with the DB instance
/// or cluster.
class DomainMembership {
  /// The ARN for the Secrets Manager secret with the credentials for the user
  /// that's a member of the domain.
  final String? authSecretArn;

  /// The IPv4 DNS IP addresses of the primary and secondary Active Directory
  /// domain controllers.
  final List<String>? dnsIps;

  /// The identifier of the Active Directory Domain.
  final String? domain;

  /// The fully qualified domain name (FQDN) of the Active Directory Domain.
  final String? fqdn;

  /// The name of the IAM role used when making API calls to the Directory
  /// Service.
  final String? iAMRoleName;

  /// The Active Directory organizational unit for the DB instance or cluster.
  final String? ou;

  /// The status of the Active Directory Domain membership for the DB instance or
  /// cluster. Values include <code>joined</code>, <code>pending-join</code>,
  /// <code>failed</code>, and so on.
  final String? status;

  DomainMembership({
    this.authSecretArn,
    this.dnsIps,
    this.domain,
    this.fqdn,
    this.iAMRoleName,
    this.ou,
    this.status,
  });
  factory DomainMembership.fromXml(_s.XmlElement elem) {
    return DomainMembership(
      authSecretArn: _s.extractXmlStringValue(elem, 'AuthSecretArn'),
      dnsIps: _s
          .extractXmlChild(elem, 'DnsIps')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      domain: _s.extractXmlStringValue(elem, 'Domain'),
      fqdn: _s.extractXmlStringValue(elem, 'FQDN'),
      iAMRoleName: _s.extractXmlStringValue(elem, 'IAMRoleName'),
      ou: _s.extractXmlStringValue(elem, 'OU'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// A range of double values.
class DoubleRange {
  /// The minimum value in the range.
  final double? from;

  /// The maximum value in the range.
  final double? to;

  DoubleRange({
    this.from,
    this.to,
  });
  factory DoubleRange.fromXml(_s.XmlElement elem) {
    return DoubleRange(
      from: _s.extractXmlDoubleValue(elem, 'From'),
      to: _s.extractXmlDoubleValue(elem, 'To'),
    );
  }
}

/// This data type is used as a response element to
/// <code>DownloadDBLogFilePortion</code>.
class DownloadDBLogFilePortionDetails {
  /// A Boolean value that, if true, indicates there is more data to be
  /// downloaded.
  final bool? additionalDataPending;

  /// Entries from the specified log file.
  final String? logFileData;

  /// A pagination token that can be used in a later
  /// <code>DownloadDBLogFilePortion</code> request.
  final String? marker;

  DownloadDBLogFilePortionDetails({
    this.additionalDataPending,
    this.logFileData,
    this.marker,
  });
  factory DownloadDBLogFilePortionDetails.fromXml(_s.XmlElement elem) {
    return DownloadDBLogFilePortionDetails(
      additionalDataPending:
          _s.extractXmlBoolValue(elem, 'AdditionalDataPending'),
      logFileData: _s.extractXmlStringValue(elem, 'LogFileData'),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// This data type is used as a response element in the following actions:
///
/// <ul>
/// <li>
/// <code>AuthorizeDBSecurityGroupIngress</code>
/// </li>
/// <li>
/// <code>DescribeDBSecurityGroups</code>
/// </li>
/// <li>
/// <code>RevokeDBSecurityGroupIngress</code>
/// </li>
/// </ul>
class EC2SecurityGroup {
  /// Specifies the id of the EC2 security group.
  final String? eC2SecurityGroupId;

  /// Specifies the name of the EC2 security group.
  final String? eC2SecurityGroupName;

  /// Specifies the Amazon Web Services ID of the owner of the EC2 security group
  /// specified in the <code>EC2SecurityGroupName</code> field.
  final String? eC2SecurityGroupOwnerId;

  /// Provides the status of the EC2 security group. Status can be "authorizing",
  /// "authorized", "revoking", and "revoked".
  final String? status;

  EC2SecurityGroup({
    this.eC2SecurityGroupId,
    this.eC2SecurityGroupName,
    this.eC2SecurityGroupOwnerId,
    this.status,
  });
  factory EC2SecurityGroup.fromXml(_s.XmlElement elem) {
    return EC2SecurityGroup(
      eC2SecurityGroupId: _s.extractXmlStringValue(elem, 'EC2SecurityGroupId'),
      eC2SecurityGroupName:
          _s.extractXmlStringValue(elem, 'EC2SecurityGroupName'),
      eC2SecurityGroupOwnerId:
          _s.extractXmlStringValue(elem, 'EC2SecurityGroupOwnerId'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

class EnableHttpEndpointResponse {
  /// Indicates whether the HTTP endpoint is enabled or disabled for the DB
  /// cluster.
  final bool? httpEndpointEnabled;

  /// The ARN of the DB cluster.
  final String? resourceArn;

  EnableHttpEndpointResponse({
    this.httpEndpointEnabled,
    this.resourceArn,
  });
  factory EnableHttpEndpointResponse.fromXml(_s.XmlElement elem) {
    return EnableHttpEndpointResponse(
      httpEndpointEnabled: _s.extractXmlBoolValue(elem, 'HttpEndpointEnabled'),
      resourceArn: _s.extractXmlStringValue(elem, 'ResourceArn'),
    );
  }
}

/// This data type represents the information you need to connect to an Amazon
/// RDS DB instance. This data type is used as a response element in the
/// following actions:
///
/// <ul>
/// <li>
/// <code>CreateDBInstance</code>
/// </li>
/// <li>
/// <code>DescribeDBInstances</code>
/// </li>
/// <li>
/// <code>DeleteDBInstance</code>
/// </li>
/// </ul>
/// For the data structure that represents Amazon Aurora DB cluster endpoints,
/// see <code>DBClusterEndpoint</code>.
class Endpoint {
  /// Specifies the DNS address of the DB instance.
  final String? address;

  /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
  final String? hostedZoneId;

  /// Specifies the port that the database engine is listening on.
  final int? port;

  Endpoint({
    this.address,
    this.hostedZoneId,
    this.port,
  });
  factory Endpoint.fromXml(_s.XmlElement elem) {
    return Endpoint(
      address: _s.extractXmlStringValue(elem, 'Address'),
      hostedZoneId: _s.extractXmlStringValue(elem, 'HostedZoneId'),
      port: _s.extractXmlIntValue(elem, 'Port'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeEngineDefaultParameters</code> action.
class EngineDefaults {
  /// Specifies the name of the DB parameter group family that the engine default
  /// parameters apply to.
  final String? dBParameterGroupFamily;

  /// An optional pagination token provided by a previous EngineDefaults request.
  /// If this parameter is specified, the response includes only records beyond
  /// the marker, up to the value specified by <code>MaxRecords</code> .
  final String? marker;

  /// Contains a list of engine default parameters.
  final List<Parameter>? parameters;

  EngineDefaults({
    this.dBParameterGroupFamily,
    this.marker,
    this.parameters,
  });
  factory EngineDefaults.fromXml(_s.XmlElement elem) {
    return EngineDefaults(
      dBParameterGroupFamily:
          _s.extractXmlStringValue(elem, 'DBParameterGroupFamily'),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      parameters: _s.extractXmlChild(elem, 'Parameters')?.let((elem) =>
          elem.findElements('Parameter').map(Parameter.fromXml).toList()),
    );
  }
}

enum EngineFamily {
  mysql('MYSQL'),
  postgresql('POSTGRESQL'),
  sqlserver('SQLSERVER'),
  ;

  final String value;

  const EngineFamily(this.value);

  static EngineFamily fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum EngineFamily'));
}

/// This data type is used as a response element in the <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a>
/// action.
class Event {
  /// Specifies the date and time of the event.
  final DateTime? date;

  /// Specifies the category for the event.
  final List<String>? eventCategories;

  /// Provides the text of this event.
  final String? message;

  /// The Amazon Resource Name (ARN) for the event.
  final String? sourceArn;

  /// Provides the identifier for the source of the event.
  final String? sourceIdentifier;

  /// Specifies the source type for this event.
  final SourceType? sourceType;

  Event({
    this.date,
    this.eventCategories,
    this.message,
    this.sourceArn,
    this.sourceIdentifier,
    this.sourceType,
  });
  factory Event.fromXml(_s.XmlElement elem) {
    return Event(
      date: _s.extractXmlDateTimeValue(elem, 'Date'),
      eventCategories: _s
          .extractXmlChild(elem, 'EventCategories')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'EventCategory')),
      message: _s.extractXmlStringValue(elem, 'Message'),
      sourceArn: _s.extractXmlStringValue(elem, 'SourceArn'),
      sourceIdentifier: _s.extractXmlStringValue(elem, 'SourceIdentifier'),
      sourceType: _s
          .extractXmlStringValue(elem, 'SourceType')
          ?.let(SourceType.fromString),
    );
  }
}

/// Contains the results of a successful invocation of the <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DescribeEventCategories.html">DescribeEventCategories</a>
/// operation.
class EventCategoriesMap {
  /// The event categories for the specified source type
  final List<String>? eventCategories;

  /// The source type that the returned categories belong to
  final String? sourceType;

  EventCategoriesMap({
    this.eventCategories,
    this.sourceType,
  });
  factory EventCategoriesMap.fromXml(_s.XmlElement elem) {
    return EventCategoriesMap(
      eventCategories: _s
          .extractXmlChild(elem, 'EventCategories')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'EventCategory')),
      sourceType: _s.extractXmlStringValue(elem, 'SourceType'),
    );
  }
}

/// Data returned from the <code>DescribeEventCategories</code> operation.
class EventCategoriesMessage {
  /// A list of <code>EventCategoriesMap</code> data types.
  final List<EventCategoriesMap>? eventCategoriesMapList;

  EventCategoriesMessage({
    this.eventCategoriesMapList,
  });
  factory EventCategoriesMessage.fromXml(_s.XmlElement elem) {
    return EventCategoriesMessage(
      eventCategoriesMapList: _s
          .extractXmlChild(elem, 'EventCategoriesMapList')
          ?.let((elem) => elem
              .findElements('EventCategoriesMap')
              .map(EventCategoriesMap.fromXml)
              .toList()),
    );
  }
}

/// Contains the results of a successful invocation of the
/// <code>DescribeEventSubscriptions</code> action.
class EventSubscription {
  /// The RDS event notification subscription Id.
  final String? custSubscriptionId;

  /// The Amazon Web Services customer account associated with the RDS event
  /// notification subscription.
  final String? customerAwsId;

  /// Specifies whether the subscription is enabled. True indicates the
  /// subscription is enabled.
  final bool? enabled;

  /// A list of event categories for the RDS event notification subscription.
  final List<String>? eventCategoriesList;

  /// The Amazon Resource Name (ARN) for the event subscription.
  final String? eventSubscriptionArn;

  /// The topic ARN of the RDS event notification subscription.
  final String? snsTopicArn;

  /// A list of source IDs for the RDS event notification subscription.
  final List<String>? sourceIdsList;

  /// The source type for the RDS event notification subscription.
  final String? sourceType;

  /// The status of the RDS event notification subscription.
  ///
  /// Constraints:
  ///
  /// Can be one of the following: creating | modifying | deleting | active |
  /// no-permission | topic-not-exist
  ///
  /// The status "no-permission" indicates that RDS no longer has permission to
  /// post to the SNS topic. The status "topic-not-exist" indicates that the topic
  /// was deleted after the subscription was created.
  final String? status;

  /// The time the RDS event notification subscription was created.
  final String? subscriptionCreationTime;

  EventSubscription({
    this.custSubscriptionId,
    this.customerAwsId,
    this.enabled,
    this.eventCategoriesList,
    this.eventSubscriptionArn,
    this.snsTopicArn,
    this.sourceIdsList,
    this.sourceType,
    this.status,
    this.subscriptionCreationTime,
  });
  factory EventSubscription.fromXml(_s.XmlElement elem) {
    return EventSubscription(
      custSubscriptionId: _s.extractXmlStringValue(elem, 'CustSubscriptionId'),
      customerAwsId: _s.extractXmlStringValue(elem, 'CustomerAwsId'),
      enabled: _s.extractXmlBoolValue(elem, 'Enabled'),
      eventCategoriesList: _s
          .extractXmlChild(elem, 'EventCategoriesList')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'EventCategory')),
      eventSubscriptionArn:
          _s.extractXmlStringValue(elem, 'EventSubscriptionArn'),
      snsTopicArn: _s.extractXmlStringValue(elem, 'SnsTopicArn'),
      sourceIdsList: _s
          .extractXmlChild(elem, 'SourceIdsList')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'SourceId')),
      sourceType: _s.extractXmlStringValue(elem, 'SourceType'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      subscriptionCreationTime:
          _s.extractXmlStringValue(elem, 'SubscriptionCreationTime'),
    );
  }
}

/// Data returned by the <b>DescribeEventSubscriptions</b> action.
class EventSubscriptionsMessage {
  /// A list of EventSubscriptions data types.
  final List<EventSubscription>? eventSubscriptionsList;

  /// An optional pagination token provided by a previous
  /// DescribeOrderableDBInstanceOptions request. If this parameter is specified,
  /// the response includes only records beyond the marker, up to the value
  /// specified by <code>MaxRecords</code>.
  final String? marker;

  EventSubscriptionsMessage({
    this.eventSubscriptionsList,
    this.marker,
  });
  factory EventSubscriptionsMessage.fromXml(_s.XmlElement elem) {
    return EventSubscriptionsMessage(
      eventSubscriptionsList: _s
          .extractXmlChild(elem, 'EventSubscriptionsList')
          ?.let((elem) => elem
              .findElements('EventSubscription')
              .map(EventSubscription.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeEvents</code> action.
class EventsMessage {
  /// A list of <code>Event</code> instances.
  final List<Event>? events;

  /// An optional pagination token provided by a previous Events request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  EventsMessage({
    this.events,
    this.marker,
  });
  factory EventsMessage.fromXml(_s.XmlElement elem) {
    return EventsMessage(
      events: _s.extractXmlChild(elem, 'Events')?.let(
          (elem) => elem.findElements('Event').map(Event.fromXml).toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

enum ExportSourceType {
  snapshot('SNAPSHOT'),
  cluster('CLUSTER'),
  ;

  final String value;

  const ExportSourceType(this.value);

  static ExportSourceType fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum ExportSourceType'));
}

/// Contains the details of a snapshot or cluster export to Amazon S3.
///
/// This data type is used as a response element in the
/// <code>DescribeExportTasks</code> operation.
class ExportTask {
  /// The data exported from the snapshot or cluster.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>database</code> - Export all the data from a specified database.
  /// </li>
  /// <li>
  /// <code>database.table</code> <i>table-name</i> - Export a table of the
  /// snapshot or cluster. This format is valid only for RDS for MySQL, RDS for
  /// MariaDB, and Aurora MySQL.
  /// </li>
  /// <li>
  /// <code>database.schema</code> <i>schema-name</i> - Export a database schema
  /// of the snapshot or cluster. This format is valid only for RDS for PostgreSQL
  /// and Aurora PostgreSQL.
  /// </li>
  /// <li>
  /// <code>database.schema.table</code> <i>table-name</i> - Export a table of the
  /// database schema. This format is valid only for RDS for PostgreSQL and Aurora
  /// PostgreSQL.
  /// </li>
  /// </ul>
  final List<String>? exportOnly;

  /// A unique identifier for the snapshot or cluster export task. This ID isn't
  /// an identifier for the Amazon S3 bucket where the data is exported.
  final String? exportTaskIdentifier;

  /// The reason the export failed, if it failed.
  final String? failureCause;

  /// The name of the IAM role that is used to write to Amazon S3 when exporting a
  /// snapshot or cluster.
  final String? iamRoleArn;

  /// The key identifier of the Amazon Web Services KMS key that is used to
  /// encrypt the data when it's exported to Amazon S3. The KMS key identifier is
  /// its key ARN, key ID, alias ARN, or alias name. The IAM role used for the
  /// export must have encryption and decryption permissions to use this KMS key.
  final String? kmsKeyId;

  /// The progress of the snapshot or cluster export task as a percentage.
  final int? percentProgress;

  /// The Amazon S3 bucket where the snapshot or cluster is exported to.
  final String? s3Bucket;

  /// The Amazon S3 bucket prefix that is the file name and path of the exported
  /// data.
  final String? s3Prefix;

  /// The time when the snapshot was created.
  final DateTime? snapshotTime;

  /// The Amazon Resource Name (ARN) of the snapshot or cluster exported to Amazon
  /// S3.
  final String? sourceArn;

  /// The type of source for the export.
  final ExportSourceType? sourceType;

  /// The progress status of the export task. The status can be one of the
  /// following:
  ///
  /// <ul>
  /// <li>
  /// <code>CANCELED</code>
  /// </li>
  /// <li>
  /// <code>CANCELING</code>
  /// </li>
  /// <li>
  /// <code>COMPLETE</code>
  /// </li>
  /// <li>
  /// <code>FAILED</code>
  /// </li>
  /// <li>
  /// <code>IN_PROGRESS</code>
  /// </li>
  /// <li>
  /// <code>STARTING</code>
  /// </li>
  /// </ul>
  final String? status;

  /// The time when the snapshot or cluster export task ended.
  final DateTime? taskEndTime;

  /// The time when the snapshot or cluster export task started.
  final DateTime? taskStartTime;

  /// The total amount of data exported, in gigabytes.
  final int? totalExtractedDataInGB;

  /// A warning about the snapshot or cluster export task.
  final String? warningMessage;

  ExportTask({
    this.exportOnly,
    this.exportTaskIdentifier,
    this.failureCause,
    this.iamRoleArn,
    this.kmsKeyId,
    this.percentProgress,
    this.s3Bucket,
    this.s3Prefix,
    this.snapshotTime,
    this.sourceArn,
    this.sourceType,
    this.status,
    this.taskEndTime,
    this.taskStartTime,
    this.totalExtractedDataInGB,
    this.warningMessage,
  });
  factory ExportTask.fromXml(_s.XmlElement elem) {
    return ExportTask(
      exportOnly: _s
          .extractXmlChild(elem, 'ExportOnly')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      exportTaskIdentifier:
          _s.extractXmlStringValue(elem, 'ExportTaskIdentifier'),
      failureCause: _s.extractXmlStringValue(elem, 'FailureCause'),
      iamRoleArn: _s.extractXmlStringValue(elem, 'IamRoleArn'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      percentProgress: _s.extractXmlIntValue(elem, 'PercentProgress'),
      s3Bucket: _s.extractXmlStringValue(elem, 'S3Bucket'),
      s3Prefix: _s.extractXmlStringValue(elem, 'S3Prefix'),
      snapshotTime: _s.extractXmlDateTimeValue(elem, 'SnapshotTime'),
      sourceArn: _s.extractXmlStringValue(elem, 'SourceArn'),
      sourceType: _s
          .extractXmlStringValue(elem, 'SourceType')
          ?.let(ExportSourceType.fromString),
      status: _s.extractXmlStringValue(elem, 'Status'),
      taskEndTime: _s.extractXmlDateTimeValue(elem, 'TaskEndTime'),
      taskStartTime: _s.extractXmlDateTimeValue(elem, 'TaskStartTime'),
      totalExtractedDataInGB:
          _s.extractXmlIntValue(elem, 'TotalExtractedDataInGB'),
      warningMessage: _s.extractXmlStringValue(elem, 'WarningMessage'),
    );
  }
}

class ExportTasksMessage {
  /// Information about an export of a snapshot or cluster to Amazon S3.
  final List<ExportTask>? exportTasks;

  /// A pagination token that can be used in a later
  /// <code>DescribeExportTasks</code> request. A marker is used for pagination to
  /// identify the location to begin output for the next response of
  /// <code>DescribeExportTasks</code>.
  final String? marker;

  ExportTasksMessage({
    this.exportTasks,
    this.marker,
  });
  factory ExportTasksMessage.fromXml(_s.XmlElement elem) {
    return ExportTasksMessage(
      exportTasks: _s.extractXmlChild(elem, 'ExportTasks')?.let((elem) =>
          elem.findElements('ExportTask').map(ExportTask.fromXml).toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

class FailoverDBClusterResult {
  final DBCluster? dBCluster;

  FailoverDBClusterResult({
    this.dBCluster,
  });
  factory FailoverDBClusterResult.fromXml(_s.XmlElement elem) {
    return FailoverDBClusterResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class FailoverGlobalClusterResult {
  final GlobalCluster? globalCluster;

  FailoverGlobalClusterResult({
    this.globalCluster,
  });
  factory FailoverGlobalClusterResult.fromXml(_s.XmlElement elem) {
    return FailoverGlobalClusterResult(
      globalCluster:
          _s.extractXmlChild(elem, 'GlobalCluster')?.let(GlobalCluster.fromXml),
    );
  }
}

/// Contains the state of scheduled or in-process operations on a global cluster
/// (Aurora global database). This data type is empty unless a switchover or
/// failover operation is scheduled or is in progress on the Aurora global
/// database.
class FailoverState {
  /// The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently
  /// being demoted, and which is associated with this state.
  final String? fromDbClusterArn;

  /// Indicates whether the operation is a global switchover or a global failover.
  /// If data loss is allowed, then the operation is a global failover. Otherwise,
  /// it's a switchover.
  final bool? isDataLossAllowed;

  /// The current status of the global cluster. Possible values are as follows:
  ///
  /// <ul>
  /// <li>
  /// pending &#x96; The service received a request to switch over or fail over
  /// the global cluster. The global cluster's primary DB cluster and the
  /// specified secondary DB cluster are being verified before the operation
  /// starts.
  /// </li>
  /// <li>
  /// failing-over &#x96; Aurora is promoting the chosen secondary Aurora DB
  /// cluster to become the new primary DB cluster to fail over the global
  /// cluster.
  /// </li>
  /// <li>
  /// cancelling &#x96; The request to switch over or fail over the global cluster
  /// was cancelled and the primary Aurora DB cluster and the selected secondary
  /// Aurora DB cluster are returning to their previous states.
  /// </li>
  /// <li>
  /// switching-over &#x96; This status covers the range of Aurora internal
  /// operations that take place during the switchover process, such as demoting
  /// the primary Aurora DB cluster, promoting the secondary Aurora DB cluster,
  /// and synchronizing replicas.
  /// </li>
  /// </ul>
  final FailoverStatus? status;

  /// The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently
  /// being promoted, and which is associated with this state.
  final String? toDbClusterArn;

  FailoverState({
    this.fromDbClusterArn,
    this.isDataLossAllowed,
    this.status,
    this.toDbClusterArn,
  });
  factory FailoverState.fromXml(_s.XmlElement elem) {
    return FailoverState(
      fromDbClusterArn: _s.extractXmlStringValue(elem, 'FromDbClusterArn'),
      isDataLossAllowed: _s.extractXmlBoolValue(elem, 'IsDataLossAllowed'),
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(FailoverStatus.fromString),
      toDbClusterArn: _s.extractXmlStringValue(elem, 'ToDbClusterArn'),
    );
  }
}

enum FailoverStatus {
  pending('pending'),
  failingOver('failing-over'),
  cancelling('cancelling'),
  ;

  final String value;

  const FailoverStatus(this.value);

  static FailoverStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum FailoverStatus'));
}

/// A filter name and value pair that is used to return a more specific list of
/// results from a describe operation. Filters can be used to match a set of
/// resources by specific criteria, such as IDs. The filters supported by a
/// describe operation are documented with the describe operation.
/// <note>
/// Currently, wildcards are not supported in filters.
/// </note>
/// The following actions can be filtered:
///
/// <ul>
/// <li>
/// <code>DescribeDBClusterBacktracks</code>
/// </li>
/// <li>
/// <code>DescribeDBClusterEndpoints</code>
/// </li>
/// <li>
/// <code>DescribeDBClusters</code>
/// </li>
/// <li>
/// <code>DescribeDBInstances</code>
/// </li>
/// <li>
/// <code>DescribeDBRecommendations</code>
/// </li>
/// <li>
/// <code>DescribeDBShardGroups</code>
/// </li>
/// <li>
/// <code>DescribePendingMaintenanceActions</code>
/// </li>
/// </ul>
class Filter {
  /// The name of the filter. Filter names are case-sensitive.
  final String name;

  /// One or more filter values. Filter values are case-sensitive.
  final List<String> values;

  Filter({
    required this.name,
    required this.values,
  });

  Map<String, dynamic> toJson() {
    final name = this.name;
    final values = this.values;
    return {
      'Name': name,
      'Values': values,
    };
  }

  Map<String, String> toQueryMap() {
    final name = this.name;
    final values = this.values;
    return {
      'Name': name,
      if (values.isEmpty)
        'Value': ''
      else
        for (var i1 = 0; i1 < values.length; i1++)
          'Value.Value.${i1 + 1}': values[i1],
    };
  }
}

/// A data type representing an Aurora global database.
class GlobalCluster {
  /// The default database name within the new global database cluster.
  final String? databaseName;

  /// The deletion protection setting for the new global database cluster.
  final bool? deletionProtection;

  /// The Aurora database engine used by the global database cluster.
  final String? engine;

  /// The life cycle type for the global cluster.
  ///
  /// For more information, see CreateGlobalCluster.
  final String? engineLifecycleSupport;

  /// Indicates the database engine version.
  final String? engineVersion;

  /// A data object containing all properties for the current state of an
  /// in-process or pending switchover or failover process for this global cluster
  /// (Aurora global database). This object is empty unless the
  /// <code>SwitchoverGlobalCluster</code> or <code>FailoverGlobalCluster</code>
  /// operation was called on this global cluster.
  final FailoverState? failoverState;

  /// The Amazon Resource Name (ARN) for the global database cluster.
  final String? globalClusterArn;

  /// Contains a user-supplied global database cluster identifier. This identifier
  /// is the unique key that identifies a global database cluster.
  final String? globalClusterIdentifier;

  /// The list of primary and secondary clusters within the global database
  /// cluster.
  final List<GlobalClusterMember>? globalClusterMembers;

  /// The Amazon Web Services Region-unique, immutable identifier for the global
  /// database cluster. This identifier is found in Amazon Web Services CloudTrail
  /// log entries whenever the Amazon Web Services KMS key for the DB cluster is
  /// accessed.
  final String? globalClusterResourceId;

  /// Specifies the current state of this global database cluster.
  final String? status;

  /// The storage encryption setting for the global database cluster.
  final bool? storageEncrypted;

  GlobalCluster({
    this.databaseName,
    this.deletionProtection,
    this.engine,
    this.engineLifecycleSupport,
    this.engineVersion,
    this.failoverState,
    this.globalClusterArn,
    this.globalClusterIdentifier,
    this.globalClusterMembers,
    this.globalClusterResourceId,
    this.status,
    this.storageEncrypted,
  });
  factory GlobalCluster.fromXml(_s.XmlElement elem) {
    return GlobalCluster(
      databaseName: _s.extractXmlStringValue(elem, 'DatabaseName'),
      deletionProtection: _s.extractXmlBoolValue(elem, 'DeletionProtection'),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineLifecycleSupport:
          _s.extractXmlStringValue(elem, 'EngineLifecycleSupport'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      failoverState:
          _s.extractXmlChild(elem, 'FailoverState')?.let(FailoverState.fromXml),
      globalClusterArn: _s.extractXmlStringValue(elem, 'GlobalClusterArn'),
      globalClusterIdentifier:
          _s.extractXmlStringValue(elem, 'GlobalClusterIdentifier'),
      globalClusterMembers: _s
          .extractXmlChild(elem, 'GlobalClusterMembers')
          ?.let((elem) => elem
              .findElements('GlobalClusterMember')
              .map(GlobalClusterMember.fromXml)
              .toList()),
      globalClusterResourceId:
          _s.extractXmlStringValue(elem, 'GlobalClusterResourceId'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      storageEncrypted: _s.extractXmlBoolValue(elem, 'StorageEncrypted'),
    );
  }
}

/// A data structure with information about any primary and secondary clusters
/// associated with a global cluster (Aurora global database).
class GlobalClusterMember {
  /// The Amazon Resource Name (ARN) for each Aurora DB cluster in the global
  /// cluster.
  final String? dBClusterArn;

  /// The status of write forwarding for a secondary cluster in the global
  /// cluster.
  final WriteForwardingStatus? globalWriteForwardingStatus;

  /// Indicates whether the Aurora DB cluster is the primary cluster (that is, has
  /// read-write capability) for the global cluster with which it is associated.
  final bool? isWriter;

  /// The Amazon Resource Name (ARN) for each read-only secondary cluster
  /// associated with the global cluster.
  final List<String>? readers;

  /// The status of synchronization of each Aurora DB cluster in the global
  /// cluster.
  final GlobalClusterMemberSynchronizationStatus? synchronizationStatus;

  GlobalClusterMember({
    this.dBClusterArn,
    this.globalWriteForwardingStatus,
    this.isWriter,
    this.readers,
    this.synchronizationStatus,
  });
  factory GlobalClusterMember.fromXml(_s.XmlElement elem) {
    return GlobalClusterMember(
      dBClusterArn: _s.extractXmlStringValue(elem, 'DBClusterArn'),
      globalWriteForwardingStatus: _s
          .extractXmlStringValue(elem, 'GlobalWriteForwardingStatus')
          ?.let(WriteForwardingStatus.fromString),
      isWriter: _s.extractXmlBoolValue(elem, 'IsWriter'),
      readers: _s
          .extractXmlChild(elem, 'Readers')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      synchronizationStatus: _s
          .extractXmlStringValue(elem, 'SynchronizationStatus')
          ?.let(GlobalClusterMemberSynchronizationStatus.fromString),
    );
  }
}

enum GlobalClusterMemberSynchronizationStatus {
  connected('connected'),
  pendingResync('pending-resync'),
  ;

  final String value;

  const GlobalClusterMemberSynchronizationStatus(this.value);

  static GlobalClusterMemberSynchronizationStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum GlobalClusterMemberSynchronizationStatus'));
}

class GlobalClustersMessage {
  /// The list of global clusters returned by this request.
  final List<GlobalCluster>? globalClusters;

  /// An optional pagination token provided by a previous
  /// <code>DescribeGlobalClusters</code> request. If this parameter is specified,
  /// the response includes only records beyond the marker, up to the value
  /// specified by <code>MaxRecords</code>.
  final String? marker;

  GlobalClustersMessage({
    this.globalClusters,
    this.marker,
  });
  factory GlobalClustersMessage.fromXml(_s.XmlElement elem) {
    return GlobalClustersMessage(
      globalClusters: _s.extractXmlChild(elem, 'GlobalClusters')?.let((elem) =>
          elem
              .findElements('GlobalClusterMember')
              .map(GlobalCluster.fromXml)
              .toList()),
      marker: _s.extractXmlStringValue(elem, 'Marker'),
    );
  }
}

enum IAMAuthMode {
  disabled('DISABLED'),
  required('REQUIRED'),
  enabled('ENABLED'),
  ;

  final String value;

  const IAMAuthMode(this.value);

  static IAMAuthMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum IAMAuthMode'));
}

/// This data type is used as a response element in the
/// <code>DescribeDBSecurityGroups</code> action.
class IPRange {
  /// The IP range.
  final String? cidrip;

  /// The status of the IP range. Status can be "authorizing", "authorized",
  /// "revoking", and "revoked".
  final String? status;

  IPRange({
    this.cidrip,
    this.status,
  });
  factory IPRange.fromXml(_s.XmlElement elem) {
    return IPRange(
      cidrip: _s.extractXmlStringValue(elem, 'CIDRIP'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// A zero-ETL integration with Amazon Redshift.
class Integration {
  /// The encryption context for the integration. For more information, see <a
  /// href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
  /// context</a> in the <i>Amazon Web Services Key Management Service Developer
  /// Guide</i>.
  final Map<String, String>? additionalEncryptionContext;

  /// The time when the integration was created, in Universal Coordinated Time
  /// (UTC).
  final DateTime? createTime;

  /// Data filters for the integration. These filters determine which tables from
  /// the source database are sent to the target Amazon Redshift data warehouse.
  final String? dataFilter;

  /// A description of the integration.
  final String? description;

  /// Any errors associated with the integration.
  final List<IntegrationError>? errors;

  /// The ARN of the integration.
  final String? integrationArn;

  /// The name of the integration.
  final String? integrationName;

  /// The Amazon Web Services Key Management System (Amazon Web Services KMS) key
  /// identifier for the key used to to encrypt the integration.
  final String? kMSKeyId;

  /// The Amazon Resource Name (ARN) of the database used as the source for
  /// replication.
  final String? sourceArn;

  /// The current status of the integration.
  final IntegrationStatus? status;
  final List<Tag>? tags;

  /// The ARN of the Redshift data warehouse used as the target for replication.
  final String? targetArn;

  Integration({
    this.additionalEncryptionContext,
    this.createTime,
    this.dataFilter,
    this.description,
    this.errors,
    this.integrationArn,
    this.integrationName,
    this.kMSKeyId,
    this.sourceArn,
    this.status,
    this.tags,
    this.targetArn,
  });
  factory Integration.fromXml(_s.XmlElement elem) {
    return Integration(
      additionalEncryptionContext: Map.fromEntries(
        elem
                .getElement('AdditionalEncryptionContext')
                ?.findElements('entry')
                .map(
                  (c) => MapEntry(
                    _s.extractXmlStringValue(c, 'key')!,
                    _s.extractXmlStringValue(c, 'value')!,
                  ),
                ) ??
            {},
      ),
      createTime: _s.extractXmlDateTimeValue(elem, 'CreateTime'),
      dataFilter: _s.extractXmlStringValue(elem, 'DataFilter'),
      description: _s.extractXmlStringValue(elem, 'Description'),
      errors: _s.extractXmlChild(elem, 'Errors')?.let((elem) => elem
          .findElements('IntegrationError')
          .map(IntegrationError.fromXml)
          .toList()),
      integrationArn: _s.extractXmlStringValue(elem, 'IntegrationArn'),
      integrationName: _s.extractXmlStringValue(elem, 'IntegrationName'),
      kMSKeyId: _s.extractXmlStringValue(elem, 'KMSKeyId'),
      sourceArn: _s.extractXmlStringValue(elem, 'SourceArn'),
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(IntegrationStatus.fromString),
      tags: _s
          .extractXmlChild(elem, 'Tags')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
      targetArn: _s.extractXmlStringValue(elem, 'TargetArn'),
    );
  }
}

/// An error associated with a zero-ETL integration with Amazon Redshift.
class IntegrationError {
  /// The error code associated with the integration.
  final String errorCode;

  /// A message explaining the error.
  final String? errorMessage;

  IntegrationError({
    required this.errorCode,
    this.errorMessage,
  });
  factory IntegrationError.fromXml(_s.XmlElement elem) {
    return IntegrationError(
      errorCode: _s.extractXmlStringValue(elem, 'ErrorCode')!,
      errorMessage: _s.extractXmlStringValue(elem, 'ErrorMessage'),
    );
  }
}

enum IntegrationStatus {
  creating('creating'),
  active('active'),
  modifying('modifying'),
  failed('failed'),
  deleting('deleting'),
  syncing('syncing'),
  needsAttention('needs_attention'),
  ;

  final String value;

  const IntegrationStatus(this.value);

  static IntegrationStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () =>
              throw Exception('$value is not known in enum IntegrationStatus'));
}

/// The details of an issue with your DB instances, DB clusters, and DB
/// parameter groups.
class IssueDetails {
  /// A detailed description of the issue when the recommendation category is
  /// <code>performance</code>.
  final PerformanceIssueDetails? performanceIssueDetails;

  IssueDetails({
    this.performanceIssueDetails,
  });
  factory IssueDetails.fromXml(_s.XmlElement elem) {
    return IssueDetails(
      performanceIssueDetails: _s
          .extractXmlChild(elem, 'PerformanceIssueDetails')
          ?.let(PerformanceIssueDetails.fromXml),
    );
  }
}

/// Contains details for Aurora Limitless Database.
class LimitlessDatabase {
  /// The minimum required capacity for Aurora Limitless Database in Aurora
  /// capacity units (ACUs).
  final double? minRequiredACU;

  /// The status of Aurora Limitless Database.
  final LimitlessDatabaseStatus? status;

  LimitlessDatabase({
    this.minRequiredACU,
    this.status,
  });
  factory LimitlessDatabase.fromXml(_s.XmlElement elem) {
    return LimitlessDatabase(
      minRequiredACU: _s.extractXmlDoubleValue(elem, 'MinRequiredACU'),
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(LimitlessDatabaseStatus.fromString),
    );
  }
}

enum LimitlessDatabaseStatus {
  active('active'),
  notInUse('not-in-use'),
  enabled('enabled'),
  disabled('disabled'),
  enabling('enabling'),
  disabling('disabling'),
  modifyingMaxCapacity('modifying-max-capacity'),
  error('error'),
  ;

  final String value;

  const LimitlessDatabaseStatus(this.value);

  static LimitlessDatabaseStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LimitlessDatabaseStatus'));
}

enum LocalWriteForwardingStatus {
  enabled('enabled'),
  disabled('disabled'),
  enabling('enabling'),
  disabling('disabling'),
  requested('requested'),
  ;

  final String value;

  const LocalWriteForwardingStatus(this.value);

  static LocalWriteForwardingStatus fromString(String value) =>
      values.firstWhere((e) => e.value == value,
          orElse: () => throw Exception(
              '$value is not known in enum LocalWriteForwardingStatus'));
}

/// Contains the secret managed by RDS in Amazon Web Services Secrets Manager
/// for the master user password.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password
/// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS
/// User Guide</i> and <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password
/// management with Amazon Web Services Secrets Manager</a> in the <i>Amazon
/// Aurora User Guide.</i>
class MasterUserSecret {
  /// The Amazon Web Services KMS key identifier that is used to encrypt the
  /// secret.
  final String? kmsKeyId;

  /// The Amazon Resource Name (ARN) of the secret.
  final String? secretArn;

  /// The status of the secret.
  ///
  /// The possible status values include the following:
  ///
  /// <ul>
  /// <li>
  /// <code>creating</code> - The secret is being created.
  /// </li>
  /// <li>
  /// <code>active</code> - The secret is available for normal use and rotation.
  /// </li>
  /// <li>
  /// <code>rotating</code> - The secret is being rotated.
  /// </li>
  /// <li>
  /// <code>impaired</code> - The secret can be used to access database
  /// credentials, but it can't be rotated. A secret might have this status if,
  /// for example, permissions are changed so that RDS can no longer access either
  /// the secret or the KMS key for the secret.
  ///
  /// When a secret has this status, you can correct the condition that caused the
  /// status. Alternatively, modify the DB instance to turn off automatic
  /// management of database credentials, and then modify the DB instance again to
  /// turn on automatic management of database credentials.
  /// </li>
  /// </ul>
  final String? secretStatus;

  MasterUserSecret({
    this.kmsKeyId,
    this.secretArn,
    this.secretStatus,
  });
  factory MasterUserSecret.fromXml(_s.XmlElement elem) {
    return MasterUserSecret(
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      secretArn: _s.extractXmlStringValue(elem, 'SecretArn'),
      secretStatus: _s.extractXmlStringValue(elem, 'SecretStatus'),
    );
  }
}

/// The representation of a metric.
class Metric {
  /// The query to retrieve metric data points.
  final MetricQuery? metricQuery;

  /// The name of a metric.
  final String? name;

  /// A list of metric references (thresholds).
  final List<MetricReference>? references;

  /// The details of different statistics for a metric. The description might
  /// contain markdown.
  final String? statisticsDetails;

  Metric({
    this.metricQuery,
    this.name,
    this.references,
    this.statisticsDetails,
  });
  factory Metric.fromXml(_s.XmlElement elem) {
    return Metric(
      metricQuery:
          _s.extractXmlChild(elem, 'MetricQuery')?.let(MetricQuery.fromXml),
      name: _s.extractXmlStringValue(elem, 'Name'),
      references: _s.extractXmlChild(elem, 'References')?.let((elem) =>
          elem.findElements('member').map(MetricReference.fromXml).toList()),
      statisticsDetails: _s.extractXmlStringValue(elem, 'StatisticsDetails'),
    );
  }
}

/// The query to retrieve metric data points.
class MetricQuery {
  /// The Performance Insights query that you can use to retrieve Performance
  /// Insights metric data points.
  final PerformanceInsightsMetricQuery? performanceInsightsMetricQuery;

  MetricQuery({
    this.performanceInsightsMetricQuery,
  });
  factory MetricQuery.fromXml(_s.XmlElement elem) {
    return MetricQuery(
      performanceInsightsMetricQuery: _s
          .extractXmlChild(elem, 'PerformanceInsightsMetricQuery')
          ?.let(PerformanceInsightsMetricQuery.fromXml),
    );
  }
}

/// The reference (threshold) for a metric.
class MetricReference {
  /// The name of the metric reference.
  final String? name;

  /// The details of a performance issue.
  final ReferenceDetails? referenceDetails;

  MetricReference({
    this.name,
    this.referenceDetails,
  });
  factory MetricReference.fromXml(_s.XmlElement elem) {
    return MetricReference(
      name: _s.extractXmlStringValue(elem, 'Name'),
      referenceDetails: _s
          .extractXmlChild(elem, 'ReferenceDetails')
          ?.let(ReferenceDetails.fromXml),
    );
  }
}

/// The minimum DB engine version required for each corresponding allowed value
/// for an option setting.
class MinimumEngineVersionPerAllowedValue {
  /// The allowed value for an option setting.
  final String? allowedValue;

  /// The minimum DB engine version required for the allowed value.
  final String? minimumEngineVersion;

  MinimumEngineVersionPerAllowedValue({
    this.allowedValue,
    this.minimumEngineVersion,
  });
  factory MinimumEngineVersionPerAllowedValue.fromXml(_s.XmlElement elem) {
    return MinimumEngineVersionPerAllowedValue(
      allowedValue: _s.extractXmlStringValue(elem, 'AllowedValue'),
      minimumEngineVersion:
          _s.extractXmlStringValue(elem, 'MinimumEngineVersion'),
    );
  }
}

class ModifyActivityStreamResponse {
  /// Indicates whether engine-native audit fields are included in the database
  /// activity stream.
  final bool? engineNativeAuditFieldsIncluded;

  /// The name of the Amazon Kinesis data stream to be used for the database
  /// activity stream.
  final String? kinesisStreamName;

  /// The Amazon Web Services KMS key identifier for encryption of messages in the
  /// database activity stream.
  final String? kmsKeyId;

  /// The mode of the database activity stream.
  final ActivityStreamMode? mode;

  /// The status of the modification to the policy state of the database activity
  /// stream.
  final ActivityStreamPolicyStatus? policyStatus;

  /// The status of the modification to the database activity stream.
  final ActivityStreamStatus? status;

  ModifyActivityStreamResponse({
    this.engineNativeAuditFieldsIncluded,
    this.kinesisStreamName,
    this.kmsKeyId,
    this.mode,
    this.policyStatus,
    this.status,
  });
  factory ModifyActivityStreamResponse.fromXml(_s.XmlElement elem) {
    return ModifyActivityStreamResponse(
      engineNativeAuditFieldsIncluded:
          _s.extractXmlBoolValue(elem, 'EngineNativeAuditFieldsIncluded'),
      kinesisStreamName: _s.extractXmlStringValue(elem, 'KinesisStreamName'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      mode: _s
          .extractXmlStringValue(elem, 'Mode')
          ?.let(ActivityStreamMode.fromString),
      policyStatus: _s
          .extractXmlStringValue(elem, 'PolicyStatus')
          ?.let(ActivityStreamPolicyStatus.fromString),
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(ActivityStreamStatus.fromString),
    );
  }
}

class ModifyCertificatesResult {
  final Certificate? certificate;

  ModifyCertificatesResult({
    this.certificate,
  });
  factory ModifyCertificatesResult.fromXml(_s.XmlElement elem) {
    return ModifyCertificatesResult(
      certificate:
          _s.extractXmlChild(elem, 'Certificate')?.let(Certificate.fromXml),
    );
  }
}

class ModifyDBClusterResult {
  final DBCluster? dBCluster;

  ModifyDBClusterResult({
    this.dBCluster,
  });
  factory ModifyDBClusterResult.fromXml(_s.XmlElement elem) {
    return ModifyDBClusterResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class ModifyDBClusterSnapshotAttributeResult {
  final DBClusterSnapshotAttributesResult? dBClusterSnapshotAttributesResult;

  ModifyDBClusterSnapshotAttributeResult({
    this.dBClusterSnapshotAttributesResult,
  });
  factory ModifyDBClusterSnapshotAttributeResult.fromXml(_s.XmlElement elem) {
    return ModifyDBClusterSnapshotAttributeResult(
      dBClusterSnapshotAttributesResult: _s
          .extractXmlChild(elem, 'DBClusterSnapshotAttributesResult')
          ?.let(DBClusterSnapshotAttributesResult.fromXml),
    );
  }
}

class ModifyDBInstanceResult {
  final DBInstance? dBInstance;

  ModifyDBInstanceResult({
    this.dBInstance,
  });
  factory ModifyDBInstanceResult.fromXml(_s.XmlElement elem) {
    return ModifyDBInstanceResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

class ModifyDBProxyEndpointResponse {
  /// The <code>DBProxyEndpoint</code> object representing the new settings for
  /// the DB proxy endpoint.
  final DBProxyEndpoint? dBProxyEndpoint;

  ModifyDBProxyEndpointResponse({
    this.dBProxyEndpoint,
  });
  factory ModifyDBProxyEndpointResponse.fromXml(_s.XmlElement elem) {
    return ModifyDBProxyEndpointResponse(
      dBProxyEndpoint: _s
          .extractXmlChild(elem, 'DBProxyEndpoint')
          ?.let(DBProxyEndpoint.fromXml),
    );
  }
}

class ModifyDBProxyResponse {
  /// The <code>DBProxy</code> object representing the new settings for the proxy.
  final DBProxy? dBProxy;

  ModifyDBProxyResponse({
    this.dBProxy,
  });
  factory ModifyDBProxyResponse.fromXml(_s.XmlElement elem) {
    return ModifyDBProxyResponse(
      dBProxy: _s.extractXmlChild(elem, 'DBProxy')?.let(DBProxy.fromXml),
    );
  }
}

class ModifyDBProxyTargetGroupResponse {
  /// The settings of the modified <code>DBProxyTarget</code>.
  final DBProxyTargetGroup? dBProxyTargetGroup;

  ModifyDBProxyTargetGroupResponse({
    this.dBProxyTargetGroup,
  });
  factory ModifyDBProxyTargetGroupResponse.fromXml(_s.XmlElement elem) {
    return ModifyDBProxyTargetGroupResponse(
      dBProxyTargetGroup: _s
          .extractXmlChild(elem, 'DBProxyTargetGroup')
          ?.let(DBProxyTargetGroup.fromXml),
    );
  }
}

class ModifyDBSnapshotAttributeResult {
  final DBSnapshotAttributesResult? dBSnapshotAttributesResult;

  ModifyDBSnapshotAttributeResult({
    this.dBSnapshotAttributesResult,
  });
  factory ModifyDBSnapshotAttributeResult.fromXml(_s.XmlElement elem) {
    return ModifyDBSnapshotAttributeResult(
      dBSnapshotAttributesResult: _s
          .extractXmlChild(elem, 'DBSnapshotAttributesResult')
          ?.let(DBSnapshotAttributesResult.fromXml),
    );
  }
}

class ModifyDBSnapshotResult {
  final DBSnapshot? dBSnapshot;

  ModifyDBSnapshotResult({
    this.dBSnapshot,
  });
  factory ModifyDBSnapshotResult.fromXml(_s.XmlElement elem) {
    return ModifyDBSnapshotResult(
      dBSnapshot:
          _s.extractXmlChild(elem, 'DBSnapshot')?.let(DBSnapshot.fromXml),
    );
  }
}

class ModifyDBSubnetGroupResult {
  final DBSubnetGroup? dBSubnetGroup;

  ModifyDBSubnetGroupResult({
    this.dBSubnetGroup,
  });
  factory ModifyDBSubnetGroupResult.fromXml(_s.XmlElement elem) {
    return ModifyDBSubnetGroupResult(
      dBSubnetGroup:
          _s.extractXmlChild(elem, 'DBSubnetGroup')?.let(DBSubnetGroup.fromXml),
    );
  }
}

class ModifyEventSubscriptionResult {
  final EventSubscription? eventSubscription;

  ModifyEventSubscriptionResult({
    this.eventSubscription,
  });
  factory ModifyEventSubscriptionResult.fromXml(_s.XmlElement elem) {
    return ModifyEventSubscriptionResult(
      eventSubscription: _s
          .extractXmlChild(elem, 'EventSubscription')
          ?.let(EventSubscription.fromXml),
    );
  }
}

class ModifyGlobalClusterResult {
  final GlobalCluster? globalCluster;

  ModifyGlobalClusterResult({
    this.globalCluster,
  });
  factory ModifyGlobalClusterResult.fromXml(_s.XmlElement elem) {
    return ModifyGlobalClusterResult(
      globalCluster:
          _s.extractXmlChild(elem, 'GlobalCluster')?.let(GlobalCluster.fromXml),
    );
  }
}

class ModifyOptionGroupResult {
  final OptionGroup? optionGroup;

  ModifyOptionGroupResult({
    this.optionGroup,
  });
  factory ModifyOptionGroupResult.fromXml(_s.XmlElement elem) {
    return ModifyOptionGroupResult(
      optionGroup:
          _s.extractXmlChild(elem, 'OptionGroup')?.let(OptionGroup.fromXml),
    );
  }
}

class ModifyTenantDatabaseResult {
  final TenantDatabase? tenantDatabase;

  ModifyTenantDatabaseResult({
    this.tenantDatabase,
  });
  factory ModifyTenantDatabaseResult.fromXml(_s.XmlElement elem) {
    return ModifyTenantDatabaseResult(
      tenantDatabase: _s
          .extractXmlChild(elem, 'TenantDatabase')
          ?.let(TenantDatabase.fromXml),
    );
  }
}

/// The details of an option.
class Option {
  /// If the option requires access to a port, then this DB security group allows
  /// access to the port.
  final List<DBSecurityGroupMembership>? dBSecurityGroupMemberships;

  /// The description of the option.
  final String? optionDescription;

  /// The name of the option.
  final String? optionName;

  /// The option settings for this option.
  final List<OptionSetting>? optionSettings;

  /// The version of the option.
  final String? optionVersion;

  /// Indicates whether this option is permanent.
  final bool? permanent;

  /// Indicates whether this option is persistent.
  final bool? persistent;

  /// If required, the port configured for this option to use.
  final int? port;

  /// If the option requires access to a port, then this VPC security group allows
  /// access to the port.
  final List<VpcSecurityGroupMembership>? vpcSecurityGroupMemberships;

  Option({
    this.dBSecurityGroupMemberships,
    this.optionDescription,
    this.optionName,
    this.optionSettings,
    this.optionVersion,
    this.permanent,
    this.persistent,
    this.port,
    this.vpcSecurityGroupMemberships,
  });
  factory Option.fromXml(_s.XmlElement elem) {
    return Option(
      dBSecurityGroupMemberships: _s
          .extractXmlChild(elem, 'DBSecurityGroupMemberships')
          ?.let((elem) => elem
              .findElements('DBSecurityGroup')
              .map(DBSecurityGroupMembership.fromXml)
              .toList()),
      optionDescription: _s.extractXmlStringValue(elem, 'OptionDescription'),
      optionName: _s.extractXmlStringValue(elem, 'OptionName'),
      optionSettings: _s.extractXmlChild(elem, 'OptionSettings')?.let((elem) =>
          elem
              .findElements('OptionSetting')
              .map(OptionSetting.fromXml)
              .toList()),
      optionVersion: _s.extractXmlStringValue(elem, 'OptionVersion'),
      permanent: _s.extractXmlBoolValue(elem, 'Permanent'),
      persistent: _s.extractXmlBoolValue(elem, 'Persistent'),
      port: _s.extractXmlIntValue(elem, 'Port'),
      vpcSecurityGroupMemberships: _s
          .extractXmlChild(elem, 'VpcSecurityGroupMemberships')
          ?.let((elem) => elem
              .findElements('VpcSecurityGroupMembership')
              .map(VpcSecurityGroupMembership.fromXml)
              .toList()),
    );
  }
}

/// A list of all available options
class OptionConfiguration {
  /// The configuration of options to include in a group.
  final String optionName;

  /// A list of DBSecurityGroupMembership name strings used for this option.
  final List<String>? dBSecurityGroupMemberships;

  /// The option settings to include in an option group.
  final List<OptionSetting>? optionSettings;

  /// The version for the option.
  final String? optionVersion;

  /// The optional port for the option.
  final int? port;

  /// A list of VpcSecurityGroupMembership name strings used for this option.
  final List<String>? vpcSecurityGroupMemberships;

  OptionConfiguration({
    required this.optionName,
    this.dBSecurityGroupMemberships,
    this.optionSettings,
    this.optionVersion,
    this.port,
    this.vpcSecurityGroupMemberships,
  });

  Map<String, dynamic> toJson() {
    final optionName = this.optionName;
    final dBSecurityGroupMemberships = this.dBSecurityGroupMemberships;
    final optionSettings = this.optionSettings;
    final optionVersion = this.optionVersion;
    final port = this.port;
    final vpcSecurityGroupMemberships = this.vpcSecurityGroupMemberships;
    return {
      'OptionName': optionName,
      if (dBSecurityGroupMemberships != null)
        'DBSecurityGroupMemberships': dBSecurityGroupMemberships,
      if (optionSettings != null) 'OptionSettings': optionSettings,
      if (optionVersion != null) 'OptionVersion': optionVersion,
      if (port != null) 'Port': port,
      if (vpcSecurityGroupMemberships != null)
        'VpcSecurityGroupMemberships': vpcSecurityGroupMemberships,
    };
  }

  Map<String, String> toQueryMap() {
    final optionName = this.optionName;
    final dBSecurityGroupMemberships = this.dBSecurityGroupMemberships;
    final optionSettings = this.optionSettings;
    final optionVersion = this.optionVersion;
    final port = this.port;
    final vpcSecurityGroupMemberships = this.vpcSecurityGroupMemberships;
    return {
      'OptionName': optionName,
      if (dBSecurityGroupMemberships != null)
        if (dBSecurityGroupMemberships.isEmpty)
          'DBSecurityGroupName': ''
        else
          for (var i1 = 0; i1 < dBSecurityGroupMemberships.length; i1++)
            'DBSecurityGroupName.DBSecurityGroupName.${i1 + 1}':
                dBSecurityGroupMemberships[i1],
      if (optionSettings != null)
        if (optionSettings.isEmpty)
          'OptionSetting': ''
        else
          for (var i1 = 0; i1 < optionSettings.length; i1++)
            for (var e3 in optionSettings[i1].toQueryMap().entries)
              'OptionSetting.OptionSetting.${i1 + 1}.${e3.key}': e3.value,
      if (optionVersion != null) 'OptionVersion': optionVersion,
      if (port != null) 'Port': port.toString(),
      if (vpcSecurityGroupMemberships != null)
        if (vpcSecurityGroupMemberships.isEmpty)
          'VpcSecurityGroupId': ''
        else
          for (var i1 = 0; i1 < vpcSecurityGroupMemberships.length; i1++)
            'VpcSecurityGroupId.VpcSecurityGroupId.${i1 + 1}':
                vpcSecurityGroupMemberships[i1],
    };
  }
}

/// <p/>
class OptionGroup {
  /// Indicates whether this option group can be applied to both VPC and non-VPC
  /// instances. The value <code>true</code> indicates the option group can be
  /// applied to both VPC and non-VPC instances.
  final bool? allowsVpcAndNonVpcInstanceMemberships;

  /// Indicates when the option group was copied.
  final DateTime? copyTimestamp;

  /// Indicates the name of the engine that this option group can be applied to.
  final String? engineName;

  /// Indicates the major engine version associated with this option group.
  final String? majorEngineVersion;

  /// Specifies the Amazon Resource Name (ARN) for the option group.
  final String? optionGroupArn;

  /// Provides a description of the option group.
  final String? optionGroupDescription;

  /// Specifies the name of the option group.
  final String? optionGroupName;

  /// Indicates what options are available in the option group.
  final List<Option>? options;

  /// Specifies the Amazon Web Services account ID for the option group from which
  /// this option group is copied.
  final String? sourceAccountId;

  /// Specifies the name of the option group from which this option group is
  /// copied.
  final String? sourceOptionGroup;

  /// If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>false</code>, this
  /// field is blank. If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is
  /// <code>true</code> and this field is blank, then this option group can be
  /// applied to both VPC and non-VPC instances. If this field contains a value,
  /// then this option group can only be applied to instances that are in the VPC
  /// indicated by this field.
  final String? vpcId;

  OptionGroup({
    this.allowsVpcAndNonVpcInstanceMemberships,
    this.copyTimestamp,
    this.engineName,
    this.majorEngineVersion,
    this.optionGroupArn,
    this.optionGroupDescription,
    this.optionGroupName,
    this.options,
    this.sourceAccountId,
    this.sourceOptionGroup,
    this.vpcId,
  });
  factory OptionGroup.fromXml(_s.XmlElement elem) {
    return OptionGroup(
      allowsVpcAndNonVpcInstanceMemberships:
          _s.extractXmlBoolValue(elem, 'AllowsVpcAndNonVpcInstanceMemberships'),
      copyTimestamp: _s.extractXmlDateTimeValue(elem, 'CopyTimestamp'),
      engineName: _s.extractXmlStringValue(elem, 'EngineName'),
      majorEngineVersion: _s.extractXmlStringValue(elem, 'MajorEngineVersion'),
      optionGroupArn: _s.extractXmlStringValue(elem, 'OptionGroupArn'),
      optionGroupDescription:
          _s.extractXmlStringValue(elem, 'OptionGroupDescription'),
      optionGroupName: _s.extractXmlStringValue(elem, 'OptionGroupName'),
      options: _s.extractXmlChild(elem, 'Options')?.let(
          (elem) => elem.findElements('Option').map(Option.fromXml).toList()),
      sourceAccountId: _s.extractXmlStringValue(elem, 'SourceAccountId'),
      sourceOptionGroup: _s.extractXmlStringValue(elem, 'SourceOptionGroup'),
      vpcId: _s.extractXmlStringValue(elem, 'VpcId'),
    );
  }
}

/// Provides information on the option groups the DB instance is a member of.
class OptionGroupMembership {
  /// The name of the option group that the instance belongs to.
  final String? optionGroupName;

  /// The status of the DB instance's option group membership. Valid values are:
  /// <code>in-sync</code>, <code>pending-apply</code>,
  /// <code>pending-removal</code>, <code>pending-maintenance-apply</code>,
  /// <code>pending-maintenance-removal</code>, <code>applying</code>,
  /// <code>removing</code>, and <code>failed</code>.
  final String? status;

  OptionGroupMembership({
    this.optionGroupName,
    this.status,
  });
  factory OptionGroupMembership.fromXml(_s.XmlElement elem) {
    return OptionGroupMembership(
      optionGroupName: _s.extractXmlStringValue(elem, 'OptionGroupName'),
      status: _s.extractXmlStringValue(elem, 'Status'),
    );
  }
}

/// Available option.
class OptionGroupOption {
  /// Indicates whether the option can be copied across Amazon Web Services
  /// accounts.
  final bool? copyableCrossAccount;

  /// If the option requires a port, specifies the default port for the option.
  final int? defaultPort;

  /// The description of the option.
  final String? description;

  /// The name of the engine that this option can be applied to.
  final String? engineName;

  /// Indicates the major engine version that the option is available for.
  final String? majorEngineVersion;

  /// The minimum required engine version for the option to be applied.
  final String? minimumRequiredMinorEngineVersion;

  /// The name of the option.
  final String? name;

  /// The option settings that are available (and the default value) for each
  /// option in an option group.
  final List<OptionGroupOptionSetting>? optionGroupOptionSettings;

  /// The versions that are available for the option.
  final List<OptionVersion>? optionGroupOptionVersions;

  /// The options that conflict with this option.
  final List<String>? optionsConflictsWith;

  /// The options that are prerequisites for this option.
  final List<String>? optionsDependedOn;

  /// Permanent options can never be removed from an option group. An option group
  /// containing a permanent option can't be removed from a DB instance.
  final bool? permanent;

  /// Persistent options can't be removed from an option group while DB instances
  /// are associated with the option group. If you disassociate all DB instances
  /// from the option group, your can remove the persistent option from the option
  /// group.
  final bool? persistent;

  /// Indicates whether the option requires a port.
  final bool? portRequired;

  /// If true, you must enable the Auto Minor Version Upgrade setting for your DB
  /// instance before you can use this option. You can enable Auto Minor Version
  /// Upgrade when you first create your DB instance, or by modifying your DB
  /// instance later.
  final bool? requiresAutoMinorEngineVersionUpgrade;

  /// If true, you can change the option to an earlier version of the option. This
  /// only applies to options that have different versions available.
  final bool? supportsOptionVersionDowngrade;

  /// If true, you can only use this option with a DB instance that is in a VPC.
  final bool? vpcOnly;

  OptionGroupOption({
    this.copyableCrossAccount,
    this.defaultPort,
    this.description,
    this.engineName,
    this.majorEngineVersion,
    this.minimumRequiredMinorEngineVersion,
    this.name,
    this.optionGroupOptionSettings,
    this.optionGroupOptionVersions,
    this.optionsConflictsWith,
    this.optionsDependedOn,
    this.permanent,
    this.persistent,
    this.portRequired,
    this.requiresAutoMinorEngineVersionUpgrade,
    this.supportsOptionVersionDowngrade,
    this.vpcOnly,
  });
  factory OptionGroupOption.fromXml(_s.XmlElement elem) {
    return OptionGroupOption(
      copyableCrossAccount:
          _s.extractXmlBoolValue(elem, 'CopyableCrossAccount'),
      defaultPort: _s.extractXmlIntValue(elem, 'DefaultPort'),
      description: _s.extractXmlStringValue(elem, 'Description'),
      engineName: _s.extractXmlStringValue(elem, 'EngineName'),
      majorEngineVersion: _s.extractXmlStringValue(elem, 'MajorEngineVersion'),
      minimumRequiredMinorEngineVersion:
          _s.extractXmlStringValue(elem, 'MinimumRequiredMinorEngineVersion'),
      name: _s.extractXmlStringValue(elem, 'Name'),
      optionGroupOptionSettings: _s
          .extractXmlChild(elem, 'OptionGroupOptionSettings')
          ?.let((elem) => elem
              .findElements('OptionGroupOptionSetting')
              .map(OptionGroupOptionSetting.fromXml)
              .toList()),
      optionGroupOptionVersions: _s
          .extractXmlChild(elem, 'OptionGroupOptionVersions')
          ?.let((elem) => elem
              .findElements('OptionVersion')
              .map(OptionVersion.fromXml)
              .toList()),
      optionsConflictsWith: _s
          .extractXmlChild(elem, 'OptionsConflictsWith')
          ?.let((elem) =>
              _s.extractXmlStringListValues(elem, 'OptionConflictName')),
      optionsDependedOn: _s
          .extractXmlChild(elem, 'OptionsDependedOn')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'OptionName')),
      permanent: _s.extractXmlBoolValue(elem, 'Permanent'),
      persistent: _s.extractXmlBoolValue(elem, 'Persistent'),
      portRequired: _s.extractXmlBoolValue(elem, 'PortRequired'),
      requiresAutoMinorEngineVersionUpgrade:
          _s.extractXmlBoolValue(elem, 'RequiresAutoMinorEngineVersionUpgrade'),
      supportsOptionVersionDowngrade:
          _s.extractXmlBoolValue(elem, 'SupportsOptionVersionDowngrade'),
      vpcOnly: _s.extractXmlBoolValue(elem, 'VpcOnly'),
    );
  }
}

/// Option group option settings are used to display settings available for each
/// option with their default values and other information. These values are
/// used with the DescribeOptionGroupOptions action.
class OptionGroupOptionSetting {
  /// Indicates the acceptable values for the option group option.
  final String? allowedValues;

  /// The DB engine specific parameter type for the option group option.
  final String? applyType;

  /// The default value for the option group option.
  final String? defaultValue;

  /// Indicates whether this option group option can be changed from the default
  /// value.
  final bool? isModifiable;

  /// Indicates whether a value must be specified for this option setting of the
  /// option group option.
  final bool? isRequired;

  /// The minimum DB engine version required for the corresponding allowed value
  /// for this option setting.
  final List<MinimumEngineVersionPerAllowedValue>?
      minimumEngineVersionPerAllowedValue;

  /// The description of the option group option.
  final String? settingDescription;

  /// The name of the option group option.
  final String? settingName;

  OptionGroupOptionSetting({
    this.allowedValues,
    this.applyType,
    this.defaultValue,
    this.isModifiable,
    this.isRequired,
    this.minimumEngineVersionPerAllowedValue,
    this.settingDescription,
    this.settingName,
  });
  factory OptionGroupOptionSetting.fromXml(_s.XmlElement elem) {
    return OptionGroupOptionSetting(
      allowedValues: _s.extractXmlStringValue(elem, 'AllowedValues'),
      applyType: _s.extractXmlStringValue(elem, 'ApplyType'),
      defaultValue: _s.extractXmlStringValue(elem, 'DefaultValue'),
      isModifiable: _s.extractXmlBoolValue(elem, 'IsModifiable'),
      isRequired: _s.extractXmlBoolValue(elem, 'IsRequired'),
      minimumEngineVersionPerAllowedValue: _s
          .extractXmlChild(elem, 'MinimumEngineVersionPerAllowedValue')
          ?.let((elem) => elem
              .findElements('MinimumEngineVersionPerAllowedValue')
              .map(MinimumEngineVersionPerAllowedValue.fromXml)
              .toList()),
      settingDescription: _s.extractXmlStringValue(elem, 'SettingDescription'),
      settingName: _s.extractXmlStringValue(elem, 'SettingName'),
    );
  }
}

/// <p/>
class OptionGroupOptionsMessage {
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;
  final List<OptionGroupOption>? optionGroupOptions;

  OptionGroupOptionsMessage({
    this.marker,
    this.optionGroupOptions,
  });
  factory OptionGroupOptionsMessage.fromXml(_s.XmlElement elem) {
    return OptionGroupOptionsMessage(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      optionGroupOptions: _s.extractXmlChild(elem, 'OptionGroupOptions')?.let(
          (elem) => elem
              .findElements('OptionGroupOption')
              .map(OptionGroupOption.fromXml)
              .toList()),
    );
  }
}

/// List of option groups.
class OptionGroups {
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  /// List of option groups.
  final List<OptionGroup>? optionGroupsList;

  OptionGroups({
    this.marker,
    this.optionGroupsList,
  });
  factory OptionGroups.fromXml(_s.XmlElement elem) {
    return OptionGroups(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      optionGroupsList: _s.extractXmlChild(elem, 'OptionGroupsList')?.let(
          (elem) => elem
              .findElements('OptionGroup')
              .map(OptionGroup.fromXml)
              .toList()),
    );
  }
}

/// Option settings are the actual settings being applied or configured for that
/// option. It is used when you modify an option group or describe option
/// groups. For example, the NATIVE_NETWORK_ENCRYPTION option has a setting
/// called SQLNET.ENCRYPTION_SERVER that can have several different values.
class OptionSetting {
  /// The allowed values of the option setting.
  final String? allowedValues;

  /// The DB engine specific parameter type.
  final String? applyType;

  /// The data type of the option setting.
  final String? dataType;

  /// The default value of the option setting.
  final String? defaultValue;

  /// The description of the option setting.
  final String? description;

  /// Indicates whether the option setting is part of a collection.
  final bool? isCollection;

  /// Indicates whether the option setting can be modified from the default.
  final bool? isModifiable;

  /// The name of the option that has settings that you can set.
  final String? name;

  /// The current value of the option setting.
  final String? value;

  OptionSetting({
    this.allowedValues,
    this.applyType,
    this.dataType,
    this.defaultValue,
    this.description,
    this.isCollection,
    this.isModifiable,
    this.name,
    this.value,
  });
  factory OptionSetting.fromXml(_s.XmlElement elem) {
    return OptionSetting(
      allowedValues: _s.extractXmlStringValue(elem, 'AllowedValues'),
      applyType: _s.extractXmlStringValue(elem, 'ApplyType'),
      dataType: _s.extractXmlStringValue(elem, 'DataType'),
      defaultValue: _s.extractXmlStringValue(elem, 'DefaultValue'),
      description: _s.extractXmlStringValue(elem, 'Description'),
      isCollection: _s.extractXmlBoolValue(elem, 'IsCollection'),
      isModifiable: _s.extractXmlBoolValue(elem, 'IsModifiable'),
      name: _s.extractXmlStringValue(elem, 'Name'),
      value: _s.extractXmlStringValue(elem, 'Value'),
    );
  }

  Map<String, dynamic> toJson() {
    final allowedValues = this.allowedValues;
    final applyType = this.applyType;
    final dataType = this.dataType;
    final defaultValue = this.defaultValue;
    final description = this.description;
    final isCollection = this.isCollection;
    final isModifiable = this.isModifiable;
    final name = this.name;
    final value = this.value;
    return {
      if (allowedValues != null) 'AllowedValues': allowedValues,
      if (applyType != null) 'ApplyType': applyType,
      if (dataType != null) 'DataType': dataType,
      if (defaultValue != null) 'DefaultValue': defaultValue,
      if (description != null) 'Description': description,
      if (isCollection != null) 'IsCollection': isCollection,
      if (isModifiable != null) 'IsModifiable': isModifiable,
      if (name != null) 'Name': name,
      if (value != null) 'Value': value,
    };
  }

  Map<String, String> toQueryMap() {
    final allowedValues = this.allowedValues;
    final applyType = this.applyType;
    final dataType = this.dataType;
    final defaultValue = this.defaultValue;
    final description = this.description;
    final isCollection = this.isCollection;
    final isModifiable = this.isModifiable;
    final name = this.name;
    final value = this.value;
    return {
      if (allowedValues != null) 'AllowedValues': allowedValues,
      if (applyType != null) 'ApplyType': applyType,
      if (dataType != null) 'DataType': dataType,
      if (defaultValue != null) 'DefaultValue': defaultValue,
      if (description != null) 'Description': description,
      if (isCollection != null) 'IsCollection': isCollection.toString(),
      if (isModifiable != null) 'IsModifiable': isModifiable.toString(),
      if (name != null) 'Name': name,
      if (value != null) 'Value': value,
    };
  }
}

/// The version for an option. Option group option versions are returned by the
/// <code>DescribeOptionGroupOptions</code> action.
class OptionVersion {
  /// Indicates whether the version is the default version of the option.
  final bool? isDefault;

  /// The version of the option.
  final String? version;

  OptionVersion({
    this.isDefault,
    this.version,
  });
  factory OptionVersion.fromXml(_s.XmlElement elem) {
    return OptionVersion(
      isDefault: _s.extractXmlBoolValue(elem, 'IsDefault'),
      version: _s.extractXmlStringValue(elem, 'Version'),
    );
  }
}

/// Contains a list of available options for a DB instance.
///
/// This data type is used as a response element in the
/// <code>DescribeOrderableDBInstanceOptions</code> action.
class OrderableDBInstanceOption {
  /// The Availability Zone group for a DB instance.
  final String? availabilityZoneGroup;

  /// A list of Availability Zones for a DB instance.
  final List<AvailabilityZone>? availabilityZones;

  /// A list of the available processor features for the DB instance class of a DB
  /// instance.
  final List<AvailableProcessorFeature>? availableProcessorFeatures;

  /// The DB instance class for a DB instance.
  final String? dBInstanceClass;

  /// The engine type of a DB instance.
  final String? engine;

  /// The engine version of a DB instance.
  final String? engineVersion;

  /// The license model for a DB instance.
  final String? licenseModel;

  /// Maximum total provisioned IOPS for a DB instance.
  final int? maxIopsPerDbInstance;

  /// Maximum provisioned IOPS per GiB for a DB instance.
  final double? maxIopsPerGib;

  /// Maximum storage size for a DB instance.
  final int? maxStorageSize;

  /// Maximum storage throughput for a DB instance.
  final int? maxStorageThroughputPerDbInstance;

  /// Maximum storage throughput to provisioned IOPS ratio for a DB instance.
  final double? maxStorageThroughputPerIops;

  /// Minimum total provisioned IOPS for a DB instance.
  final int? minIopsPerDbInstance;

  /// Minimum provisioned IOPS per GiB for a DB instance.
  final double? minIopsPerGib;

  /// Minimum storage size for a DB instance.
  final int? minStorageSize;

  /// Minimum storage throughput for a DB instance.
  final int? minStorageThroughputPerDbInstance;

  /// Minimum storage throughput to provisioned IOPS ratio for a DB instance.
  final double? minStorageThroughputPerIops;

  /// Indicates whether a DB instance is Multi-AZ capable.
  final bool? multiAZCapable;

  /// Indicates whether a DB instance supports RDS on Outposts.
  ///
  /// For more information about RDS on Outposts, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Amazon
  /// RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide.</i>
  final bool? outpostCapable;

  /// Indicates whether a DB instance can have a read replica.
  final bool? readReplicaCapable;

  /// The storage type for a DB instance.
  final String? storageType;

  /// The list of supported modes for Database Activity Streams. Aurora PostgreSQL
  /// returns the value <code>[sync, async]</code>. Aurora MySQL and RDS for
  /// Oracle return <code>[async]</code> only. If Database Activity Streams isn't
  /// supported, the return value is an empty list.
  final List<String>? supportedActivityStreamModes;

  /// A list of the supported DB engine modes.
  final List<String>? supportedEngineModes;

  /// The network types supported by the DB instance (<code>IPV4</code> or
  /// <code>DUAL</code>).
  ///
  /// A DB instance can support only the IPv4 protocol or the IPv4 and the IPv6
  /// protocols (<code>DUAL</code>).
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
  /// Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i>
  final List<String>? supportedNetworkTypes;

  /// Indicates whether DB instances can be configured as a Multi-AZ DB cluster.
  ///
  /// For more information on Multi-AZ DB clusters, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
  /// Multi-AZ deployments with two readable standby DB instances</a> in the
  /// <i>Amazon RDS User Guide.</i>
  final bool? supportsClusters;

  /// Indicates whether a DB instance supports using a dedicated log volume (DLV).
  final bool? supportsDedicatedLogVolume;

  /// Indicates whether a DB instance supports Enhanced Monitoring at intervals
  /// from 1 to 60 seconds.
  final bool? supportsEnhancedMonitoring;

  /// Indicates whether you can use Aurora global databases with a specific
  /// combination of other DB engine attributes.
  final bool? supportsGlobalDatabases;

  /// Indicates whether a DB instance supports IAM database authentication.
  final bool? supportsIAMDatabaseAuthentication;

  /// Indicates whether a DB instance supports provisioned IOPS.
  final bool? supportsIops;

  /// Indicates whether a DB instance supports Kerberos Authentication.
  final bool? supportsKerberosAuthentication;

  /// Indicates whether a DB instance supports Performance Insights.
  final bool? supportsPerformanceInsights;

  /// Indicates whether Amazon RDS can automatically scale storage for DB
  /// instances that use the specified DB instance class.
  final bool? supportsStorageAutoscaling;

  /// Indicates whether a DB instance supports encrypted storage.
  final bool? supportsStorageEncryption;

  /// Indicates whether a DB instance supports storage throughput.
  final bool? supportsStorageThroughput;

  /// Indicates whether a DB instance is in a VPC.
  final bool? vpc;

  OrderableDBInstanceOption({
    this.availabilityZoneGroup,
    this.availabilityZones,
    this.availableProcessorFeatures,
    this.dBInstanceClass,
    this.engine,
    this.engineVersion,
    this.licenseModel,
    this.maxIopsPerDbInstance,
    this.maxIopsPerGib,
    this.maxStorageSize,
    this.maxStorageThroughputPerDbInstance,
    this.maxStorageThroughputPerIops,
    this.minIopsPerDbInstance,
    this.minIopsPerGib,
    this.minStorageSize,
    this.minStorageThroughputPerDbInstance,
    this.minStorageThroughputPerIops,
    this.multiAZCapable,
    this.outpostCapable,
    this.readReplicaCapable,
    this.storageType,
    this.supportedActivityStreamModes,
    this.supportedEngineModes,
    this.supportedNetworkTypes,
    this.supportsClusters,
    this.supportsDedicatedLogVolume,
    this.supportsEnhancedMonitoring,
    this.supportsGlobalDatabases,
    this.supportsIAMDatabaseAuthentication,
    this.supportsIops,
    this.supportsKerberosAuthentication,
    this.supportsPerformanceInsights,
    this.supportsStorageAutoscaling,
    this.supportsStorageEncryption,
    this.supportsStorageThroughput,
    this.vpc,
  });
  factory OrderableDBInstanceOption.fromXml(_s.XmlElement elem) {
    return OrderableDBInstanceOption(
      availabilityZoneGroup:
          _s.extractXmlStringValue(elem, 'AvailabilityZoneGroup'),
      availabilityZones: _s.extractXmlChild(elem, 'AvailabilityZones')?.let(
          (elem) => elem
              .findElements('AvailabilityZone')
              .map(AvailabilityZone.fromXml)
              .toList()),
      availableProcessorFeatures: _s
          .extractXmlChild(elem, 'AvailableProcessorFeatures')
          ?.let((elem) => elem
              .findElements('AvailableProcessorFeature')
              .map(AvailableProcessorFeature.fromXml)
              .toList()),
      dBInstanceClass: _s.extractXmlStringValue(elem, 'DBInstanceClass'),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      licenseModel: _s.extractXmlStringValue(elem, 'LicenseModel'),
      maxIopsPerDbInstance: _s.extractXmlIntValue(elem, 'MaxIopsPerDbInstance'),
      maxIopsPerGib: _s.extractXmlDoubleValue(elem, 'MaxIopsPerGib'),
      maxStorageSize: _s.extractXmlIntValue(elem, 'MaxStorageSize'),
      maxStorageThroughputPerDbInstance:
          _s.extractXmlIntValue(elem, 'MaxStorageThroughputPerDbInstance'),
      maxStorageThroughputPerIops:
          _s.extractXmlDoubleValue(elem, 'MaxStorageThroughputPerIops'),
      minIopsPerDbInstance: _s.extractXmlIntValue(elem, 'MinIopsPerDbInstance'),
      minIopsPerGib: _s.extractXmlDoubleValue(elem, 'MinIopsPerGib'),
      minStorageSize: _s.extractXmlIntValue(elem, 'MinStorageSize'),
      minStorageThroughputPerDbInstance:
          _s.extractXmlIntValue(elem, 'MinStorageThroughputPerDbInstance'),
      minStorageThroughputPerIops:
          _s.extractXmlDoubleValue(elem, 'MinStorageThroughputPerIops'),
      multiAZCapable: _s.extractXmlBoolValue(elem, 'MultiAZCapable'),
      outpostCapable: _s.extractXmlBoolValue(elem, 'OutpostCapable'),
      readReplicaCapable: _s.extractXmlBoolValue(elem, 'ReadReplicaCapable'),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
      supportedActivityStreamModes: _s
          .extractXmlChild(elem, 'SupportedActivityStreamModes')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      supportedEngineModes: _s
          .extractXmlChild(elem, 'SupportedEngineModes')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      supportedNetworkTypes: _s
          .extractXmlChild(elem, 'SupportedNetworkTypes')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      supportsClusters: _s.extractXmlBoolValue(elem, 'SupportsClusters'),
      supportsDedicatedLogVolume:
          _s.extractXmlBoolValue(elem, 'SupportsDedicatedLogVolume'),
      supportsEnhancedMonitoring:
          _s.extractXmlBoolValue(elem, 'SupportsEnhancedMonitoring'),
      supportsGlobalDatabases:
          _s.extractXmlBoolValue(elem, 'SupportsGlobalDatabases'),
      supportsIAMDatabaseAuthentication:
          _s.extractXmlBoolValue(elem, 'SupportsIAMDatabaseAuthentication'),
      supportsIops: _s.extractXmlBoolValue(elem, 'SupportsIops'),
      supportsKerberosAuthentication:
          _s.extractXmlBoolValue(elem, 'SupportsKerberosAuthentication'),
      supportsPerformanceInsights:
          _s.extractXmlBoolValue(elem, 'SupportsPerformanceInsights'),
      supportsStorageAutoscaling:
          _s.extractXmlBoolValue(elem, 'SupportsStorageAutoscaling'),
      supportsStorageEncryption:
          _s.extractXmlBoolValue(elem, 'SupportsStorageEncryption'),
      supportsStorageThroughput:
          _s.extractXmlBoolValue(elem, 'SupportsStorageThroughput'),
      vpc: _s.extractXmlBoolValue(elem, 'Vpc'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeOrderableDBInstanceOptions</code> action.
class OrderableDBInstanceOptionsMessage {
  /// An optional pagination token provided by a previous
  /// OrderableDBInstanceOptions request. If this parameter is specified, the
  /// response includes only records beyond the marker, up to the value specified
  /// by <code>MaxRecords</code>.
  final String? marker;

  /// An <code>OrderableDBInstanceOption</code> structure containing information
  /// about orderable options for the DB instance.
  final List<OrderableDBInstanceOption>? orderableDBInstanceOptions;

  OrderableDBInstanceOptionsMessage({
    this.marker,
    this.orderableDBInstanceOptions,
  });
  factory OrderableDBInstanceOptionsMessage.fromXml(_s.XmlElement elem) {
    return OrderableDBInstanceOptionsMessage(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      orderableDBInstanceOptions: _s
          .extractXmlChild(elem, 'OrderableDBInstanceOptions')
          ?.let((elem) => elem
              .findElements('OrderableDBInstanceOption')
              .map(OrderableDBInstanceOption.fromXml)
              .toList()),
    );
  }
}

/// A data type that represents an Outpost.
///
/// For more information about RDS on Outposts, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Amazon
/// RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide.</i>
class Outpost {
  /// The Amazon Resource Name (ARN) of the Outpost.
  final String? arn;

  Outpost({
    this.arn,
  });
  factory Outpost.fromXml(_s.XmlElement elem) {
    return Outpost(
      arn: _s.extractXmlStringValue(elem, 'Arn'),
    );
  }
}

/// This data type is used as a request parameter in the
/// <code>ModifyDBParameterGroup</code> and <code>ResetDBParameterGroup</code>
/// actions.
///
/// This data type is used as a response element in the
/// <code>DescribeEngineDefaultParameters</code> and
/// <code>DescribeDBParameters</code> actions.
class Parameter {
  /// Specifies the valid range of values for the parameter.
  final String? allowedValues;

  /// Indicates when to apply parameter updates.
  final ApplyMethod? applyMethod;

  /// Specifies the engine specific parameters type.
  final String? applyType;

  /// Specifies the valid data type for the parameter.
  final String? dataType;

  /// Provides a description of the parameter.
  final String? description;

  /// Indicates whether (<code>true</code>) or not (<code>false</code>) the
  /// parameter can be modified. Some parameters have security or operational
  /// implications that prevent them from being changed.
  final bool? isModifiable;

  /// The earliest engine version to which the parameter can apply.
  final String? minimumEngineVersion;

  /// The name of the parameter.
  final String? parameterName;

  /// The value of the parameter.
  final String? parameterValue;

  /// The source of the parameter value.
  final String? source;

  /// The valid DB engine modes.
  final List<String>? supportedEngineModes;

  Parameter({
    this.allowedValues,
    this.applyMethod,
    this.applyType,
    this.dataType,
    this.description,
    this.isModifiable,
    this.minimumEngineVersion,
    this.parameterName,
    this.parameterValue,
    this.source,
    this.supportedEngineModes,
  });
  factory Parameter.fromXml(_s.XmlElement elem) {
    return Parameter(
      allowedValues: _s.extractXmlStringValue(elem, 'AllowedValues'),
      applyMethod: _s
          .extractXmlStringValue(elem, 'ApplyMethod')
          ?.let(ApplyMethod.fromString),
      applyType: _s.extractXmlStringValue(elem, 'ApplyType'),
      dataType: _s.extractXmlStringValue(elem, 'DataType'),
      description: _s.extractXmlStringValue(elem, 'Description'),
      isModifiable: _s.extractXmlBoolValue(elem, 'IsModifiable'),
      minimumEngineVersion:
          _s.extractXmlStringValue(elem, 'MinimumEngineVersion'),
      parameterName: _s.extractXmlStringValue(elem, 'ParameterName'),
      parameterValue: _s.extractXmlStringValue(elem, 'ParameterValue'),
      source: _s.extractXmlStringValue(elem, 'Source'),
      supportedEngineModes: _s
          .extractXmlChild(elem, 'SupportedEngineModes')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
    );
  }

  Map<String, dynamic> toJson() {
    final allowedValues = this.allowedValues;
    final applyMethod = this.applyMethod;
    final applyType = this.applyType;
    final dataType = this.dataType;
    final description = this.description;
    final isModifiable = this.isModifiable;
    final minimumEngineVersion = this.minimumEngineVersion;
    final parameterName = this.parameterName;
    final parameterValue = this.parameterValue;
    final source = this.source;
    final supportedEngineModes = this.supportedEngineModes;
    return {
      if (allowedValues != null) 'AllowedValues': allowedValues,
      if (applyMethod != null) 'ApplyMethod': applyMethod.value,
      if (applyType != null) 'ApplyType': applyType,
      if (dataType != null) 'DataType': dataType,
      if (description != null) 'Description': description,
      if (isModifiable != null) 'IsModifiable': isModifiable,
      if (minimumEngineVersion != null)
        'MinimumEngineVersion': minimumEngineVersion,
      if (parameterName != null) 'ParameterName': parameterName,
      if (parameterValue != null) 'ParameterValue': parameterValue,
      if (source != null) 'Source': source,
      if (supportedEngineModes != null)
        'SupportedEngineModes': supportedEngineModes,
    };
  }

  Map<String, String> toQueryMap() {
    final allowedValues = this.allowedValues;
    final applyMethod = this.applyMethod;
    final applyType = this.applyType;
    final dataType = this.dataType;
    final description = this.description;
    final isModifiable = this.isModifiable;
    final minimumEngineVersion = this.minimumEngineVersion;
    final parameterName = this.parameterName;
    final parameterValue = this.parameterValue;
    final source = this.source;
    final supportedEngineModes = this.supportedEngineModes;
    return {
      if (allowedValues != null) 'AllowedValues': allowedValues,
      if (applyMethod != null) 'ApplyMethod': applyMethod.value,
      if (applyType != null) 'ApplyType': applyType,
      if (dataType != null) 'DataType': dataType,
      if (description != null) 'Description': description,
      if (isModifiable != null) 'IsModifiable': isModifiable.toString(),
      if (minimumEngineVersion != null)
        'MinimumEngineVersion': minimumEngineVersion,
      if (parameterName != null) 'ParameterName': parameterName,
      if (parameterValue != null) 'ParameterValue': parameterValue,
      if (source != null) 'Source': source,
      if (supportedEngineModes != null)
        if (supportedEngineModes.isEmpty)
          'SupportedEngineModes': ''
        else
          for (var i1 = 0; i1 < supportedEngineModes.length; i1++)
            'SupportedEngineModes.member.${i1 + 1}': supportedEngineModes[i1],
    };
  }
}

/// A list of the log types whose configuration is still pending. In other
/// words, these log types are in the process of being activated or deactivated.
class PendingCloudwatchLogsExports {
  /// Log types that are in the process of being enabled. After they are enabled,
  /// these log types are exported to CloudWatch Logs.
  final List<String>? logTypesToDisable;

  /// Log types that are in the process of being deactivated. After they are
  /// deactivated, these log types aren't exported to CloudWatch Logs.
  final List<String>? logTypesToEnable;

  PendingCloudwatchLogsExports({
    this.logTypesToDisable,
    this.logTypesToEnable,
  });
  factory PendingCloudwatchLogsExports.fromXml(_s.XmlElement elem) {
    return PendingCloudwatchLogsExports(
      logTypesToDisable: _s
          .extractXmlChild(elem, 'LogTypesToDisable')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      logTypesToEnable: _s
          .extractXmlChild(elem, 'LogTypesToEnable')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
    );
  }
}

/// Provides information about a pending maintenance action for a resource.
class PendingMaintenanceAction {
  /// The type of pending maintenance action that is available for the resource.
  ///
  /// For more information about maintenance actions, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html">Maintaining
  /// a DB instance</a>.
  ///
  /// Valid Values:<code> system-update | db-upgrade | hardware-maintenance |
  /// ca-certificate-rotation</code>
  final String? action;

  /// The date of the maintenance window when the action is applied. The
  /// maintenance action is applied to the resource during its first maintenance
  /// window after this date.
  final DateTime? autoAppliedAfterDate;

  /// The effective date when the pending maintenance action is applied to the
  /// resource. This date takes into account opt-in requests received from the
  /// <code>ApplyPendingMaintenanceAction</code> API, the
  /// <code>AutoAppliedAfterDate</code>, and the <code>ForcedApplyDate</code>.
  /// This value is blank if an opt-in request has not been received and nothing
  /// has been specified as <code>AutoAppliedAfterDate</code> or
  /// <code>ForcedApplyDate</code>.
  final DateTime? currentApplyDate;

  /// A description providing more detail about the maintenance action.
  final String? description;

  /// The date when the maintenance action is automatically applied.
  ///
  /// On this date, the maintenance action is applied to the resource as soon as
  /// possible, regardless of the maintenance window for the resource. There might
  /// be a delay of one or more days from this date before the maintenance action
  /// is applied.
  final DateTime? forcedApplyDate;

  /// Indicates the type of opt-in request that has been received for the
  /// resource.
  final String? optInStatus;

  PendingMaintenanceAction({
    this.action,
    this.autoAppliedAfterDate,
    this.currentApplyDate,
    this.description,
    this.forcedApplyDate,
    this.optInStatus,
  });
  factory PendingMaintenanceAction.fromXml(_s.XmlElement elem) {
    return PendingMaintenanceAction(
      action: _s.extractXmlStringValue(elem, 'Action'),
      autoAppliedAfterDate:
          _s.extractXmlDateTimeValue(elem, 'AutoAppliedAfterDate'),
      currentApplyDate: _s.extractXmlDateTimeValue(elem, 'CurrentApplyDate'),
      description: _s.extractXmlStringValue(elem, 'Description'),
      forcedApplyDate: _s.extractXmlDateTimeValue(elem, 'ForcedApplyDate'),
      optInStatus: _s.extractXmlStringValue(elem, 'OptInStatus'),
    );
  }
}

/// Data returned from the <b>DescribePendingMaintenanceActions</b> action.
class PendingMaintenanceActionsMessage {
  /// An optional pagination token provided by a previous
  /// <code>DescribePendingMaintenanceActions</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to a
  /// number of records specified by <code>MaxRecords</code>.
  final String? marker;

  /// A list of the pending maintenance actions for the resource.
  final List<ResourcePendingMaintenanceActions>? pendingMaintenanceActions;

  PendingMaintenanceActionsMessage({
    this.marker,
    this.pendingMaintenanceActions,
  });
  factory PendingMaintenanceActionsMessage.fromXml(_s.XmlElement elem) {
    return PendingMaintenanceActionsMessage(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      pendingMaintenanceActions: _s
          .extractXmlChild(elem, 'PendingMaintenanceActions')
          ?.let((elem) => elem
              .findElements('ResourcePendingMaintenanceActions')
              .map(ResourcePendingMaintenanceActions.fromXml)
              .toList()),
    );
  }
}

/// This data type is used as a response element in the
/// <code>ModifyDBInstance</code> operation and contains changes that will be
/// applied during the next maintenance window.
class PendingModifiedValues {
  /// The allocated storage size for the DB instance specified in gibibytes (GiB).
  final int? allocatedStorage;

  /// The automation mode of the RDS Custom DB instance: <code>full</code> or
  /// <code>all-paused</code>. If <code>full</code>, the DB instance automates
  /// monitoring and instance recovery. If <code>all-paused</code>, the instance
  /// pauses automation for the duration set by
  /// <code>--resume-full-automation-mode-minutes</code>.
  final AutomationMode? automationMode;

  /// The number of days for which automated backups are retained.
  final int? backupRetentionPeriod;

  /// The identifier of the CA certificate for the DB instance.
  ///
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using
  /// SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS
  /// User Guide</i> and <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html">
  /// Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon
  /// Aurora User Guide</i>.
  final String? cACertificateIdentifier;

  /// The name of the compute and memory capacity class for the DB instance.
  final String? dBInstanceClass;

  /// The database identifier for the DB instance.
  final String? dBInstanceIdentifier;

  /// The DB subnet group for the DB instance.
  final String? dBSubnetGroupName;

  /// Indicates whether the DB instance has a dedicated log volume (DLV)
  /// enabled.&gt;
  final bool? dedicatedLogVolume;

  /// The database engine of the DB instance.
  final String? engine;

  /// The database engine version.
  final String? engineVersion;

  /// Indicates whether mapping of Amazon Web Services Identity and Access
  /// Management (IAM) accounts to database accounts is enabled.
  final bool? iAMDatabaseAuthenticationEnabled;

  /// The Provisioned IOPS value for the DB instance.
  final int? iops;

  /// The license model for the DB instance.
  ///
  /// Valid values: <code>license-included</code> |
  /// <code>bring-your-own-license</code> | <code>general-public-license</code>
  final String? licenseModel;

  /// The master credentials for the DB instance.
  final String? masterUserPassword;

  /// Indicates whether the Single-AZ DB instance will change to a Multi-AZ
  /// deployment.
  final bool? multiAZ;

  /// Indicates whether the DB instance will change to the multi-tenant
  /// configuration (TRUE) or the single-tenant configuration (FALSE).
  final bool? multiTenant;
  final PendingCloudwatchLogsExports? pendingCloudwatchLogsExports;

  /// The port for the DB instance.
  final int? port;

  /// The number of CPU cores and the number of threads per core for the DB
  /// instance class of the DB instance.
  final List<ProcessorFeature>? processorFeatures;

  /// The number of minutes to pause the automation. When the time period ends,
  /// RDS Custom resumes full automation. The minimum value is 60 (default). The
  /// maximum value is 1,440.
  final DateTime? resumeFullAutomationModeTime;

  /// The storage throughput of the DB instance.
  final int? storageThroughput;

  /// The storage type of the DB instance.
  final String? storageType;

  PendingModifiedValues({
    this.allocatedStorage,
    this.automationMode,
    this.backupRetentionPeriod,
    this.cACertificateIdentifier,
    this.dBInstanceClass,
    this.dBInstanceIdentifier,
    this.dBSubnetGroupName,
    this.dedicatedLogVolume,
    this.engine,
    this.engineVersion,
    this.iAMDatabaseAuthenticationEnabled,
    this.iops,
    this.licenseModel,
    this.masterUserPassword,
    this.multiAZ,
    this.multiTenant,
    this.pendingCloudwatchLogsExports,
    this.port,
    this.processorFeatures,
    this.resumeFullAutomationModeTime,
    this.storageThroughput,
    this.storageType,
  });
  factory PendingModifiedValues.fromXml(_s.XmlElement elem) {
    return PendingModifiedValues(
      allocatedStorage: _s.extractXmlIntValue(elem, 'AllocatedStorage'),
      automationMode: _s
          .extractXmlStringValue(elem, 'AutomationMode')
          ?.let(AutomationMode.fromString),
      backupRetentionPeriod:
          _s.extractXmlIntValue(elem, 'BackupRetentionPeriod'),
      cACertificateIdentifier:
          _s.extractXmlStringValue(elem, 'CACertificateIdentifier'),
      dBInstanceClass: _s.extractXmlStringValue(elem, 'DBInstanceClass'),
      dBInstanceIdentifier:
          _s.extractXmlStringValue(elem, 'DBInstanceIdentifier'),
      dBSubnetGroupName: _s.extractXmlStringValue(elem, 'DBSubnetGroupName'),
      dedicatedLogVolume: _s.extractXmlBoolValue(elem, 'DedicatedLogVolume'),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      iAMDatabaseAuthenticationEnabled:
          _s.extractXmlBoolValue(elem, 'IAMDatabaseAuthenticationEnabled'),
      iops: _s.extractXmlIntValue(elem, 'Iops'),
      licenseModel: _s.extractXmlStringValue(elem, 'LicenseModel'),
      masterUserPassword: _s.extractXmlStringValue(elem, 'MasterUserPassword'),
      multiAZ: _s.extractXmlBoolValue(elem, 'MultiAZ'),
      multiTenant: _s.extractXmlBoolValue(elem, 'MultiTenant'),
      pendingCloudwatchLogsExports: _s
          .extractXmlChild(elem, 'PendingCloudwatchLogsExports')
          ?.let(PendingCloudwatchLogsExports.fromXml),
      port: _s.extractXmlIntValue(elem, 'Port'),
      processorFeatures: _s.extractXmlChild(elem, 'ProcessorFeatures')?.let(
          (elem) => elem
              .findElements('ProcessorFeature')
              .map(ProcessorFeature.fromXml)
              .toList()),
      resumeFullAutomationModeTime:
          _s.extractXmlDateTimeValue(elem, 'ResumeFullAutomationModeTime'),
      storageThroughput: _s.extractXmlIntValue(elem, 'StorageThroughput'),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
    );
  }
}

/// A logical grouping of Performance Insights metrics for a related subject
/// area. For example, the <code>db.sql</code> dimension group consists of the
/// following dimensions:
///
/// <ul>
/// <li>
/// <code>db.sql.id</code> - The hash of a running SQL statement, generated by
/// Performance Insights.
/// </li>
/// <li>
/// <code>db.sql.db_id</code> - Either the SQL ID generated by the database
/// engine, or a value generated by Performance Insights that begins with
/// <code>pi-</code>.
/// </li>
/// <li>
/// <code>db.sql.statement</code> - The full text of the SQL statement that is
/// running, for example, <code>SELECT * FROM employees</code>.
/// </li>
/// <li>
/// <code>db.sql_tokenized.id</code> - The hash of the SQL digest generated by
/// Performance Insights.
/// </li>
/// </ul> <note>
/// Each response element returns a maximum of 500 bytes. For larger elements,
/// such as SQL statements, only the first 500 bytes are returned.
/// </note>
class PerformanceInsightsMetricDimensionGroup {
  /// A list of specific dimensions from a dimension group. If this list isn't
  /// included, then all of the dimensions in the group were requested, or are
  /// present in the response.
  final List<String>? dimensions;

  /// The available dimension groups for Performance Insights metric type.
  final String? group;

  /// The maximum number of items to fetch for this dimension group.
  final int? limit;

  PerformanceInsightsMetricDimensionGroup({
    this.dimensions,
    this.group,
    this.limit,
  });
  factory PerformanceInsightsMetricDimensionGroup.fromXml(_s.XmlElement elem) {
    return PerformanceInsightsMetricDimensionGroup(
      dimensions: _s
          .extractXmlChild(elem, 'Dimensions')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      group: _s.extractXmlStringValue(elem, 'Group'),
      limit: _s.extractXmlIntValue(elem, 'Limit'),
    );
  }
}

/// A single Performance Insights metric query to process. You must provide the
/// metric to the query. If other parameters aren't specified, Performance
/// Insights returns all data points for the specified metric. Optionally, you
/// can request the data points to be aggregated by dimension group
/// (<code>GroupBy</code>) and return only those data points that match your
/// criteria (<code>Filter</code>).
///
/// Constraints:
///
/// <ul>
/// <li>
/// Must be a valid Performance Insights query.
/// </li>
/// </ul>
class PerformanceInsightsMetricQuery {
  /// A specification for how to aggregate the data points from a query result.
  /// You must specify a valid dimension group. Performance Insights will return
  /// all of the dimensions within that group, unless you provide the names of
  /// specific dimensions within that group. You can also request that Performance
  /// Insights return a limited number of values for a dimension.
  final PerformanceInsightsMetricDimensionGroup? groupBy;

  /// The name of a Performance Insights metric to be measured.
  ///
  /// Valid Values:
  ///
  /// <ul>
  /// <li>
  /// <code>db.load.avg</code> - A scaled representation of the number of active
  /// sessions for the database engine.
  /// </li>
  /// <li>
  /// <code>db.sampledload.avg</code> - The raw number of active sessions for the
  /// database engine.
  /// </li>
  /// <li>
  /// The counter metrics listed in <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights_Counters.html#USER_PerfInsights_Counters.OS">Performance
  /// Insights operating system counters</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  /// </li>
  /// </ul>
  /// If the number of active sessions is less than an internal Performance
  /// Insights threshold, <code>db.load.avg</code> and
  /// <code>db.sampledload.avg</code> are the same value. If the number of active
  /// sessions is greater than the internal threshold, Performance Insights
  /// samples the active sessions, with <code>db.load.avg</code> showing the
  /// scaled values, <code>db.sampledload.avg</code> showing the raw values, and
  /// <code>db.sampledload.avg</code> less than <code>db.load.avg</code>. For most
  /// use cases, you can query <code>db.load.avg</code> only.
  final String? metric;

  PerformanceInsightsMetricQuery({
    this.groupBy,
    this.metric,
  });
  factory PerformanceInsightsMetricQuery.fromXml(_s.XmlElement elem) {
    return PerformanceInsightsMetricQuery(
      groupBy: _s
          .extractXmlChild(elem, 'GroupBy')
          ?.let(PerformanceInsightsMetricDimensionGroup.fromXml),
      metric: _s.extractXmlStringValue(elem, 'Metric'),
    );
  }
}

/// Details of the performance issue.
class PerformanceIssueDetails {
  /// The analysis of the performance issue. The information might contain
  /// markdown.
  final String? analysis;

  /// The time when the performance issue stopped.
  final DateTime? endTime;

  /// The metrics that are relevant to the performance issue.
  final List<Metric>? metrics;

  /// The time when the performance issue started.
  final DateTime? startTime;

  PerformanceIssueDetails({
    this.analysis,
    this.endTime,
    this.metrics,
    this.startTime,
  });
  factory PerformanceIssueDetails.fromXml(_s.XmlElement elem) {
    return PerformanceIssueDetails(
      analysis: _s.extractXmlStringValue(elem, 'Analysis'),
      endTime: _s.extractXmlDateTimeValue(elem, 'EndTime'),
      metrics: _s.extractXmlChild(elem, 'Metrics')?.let(
          (elem) => elem.findElements('member').map(Metric.fromXml).toList()),
      startTime: _s.extractXmlDateTimeValue(elem, 'StartTime'),
    );
  }
}

/// Contains the processor features of a DB instance class.
///
/// To specify the number of CPU cores, use the <code>coreCount</code> feature
/// name for the <code>Name</code> parameter. To specify the number of threads
/// per core, use the <code>threadsPerCore</code> feature name for the
/// <code>Name</code> parameter.
///
/// You can set the processor features of the DB instance class for a DB
/// instance when you call one of the following actions:
///
/// <ul>
/// <li>
/// <code>CreateDBInstance</code>
/// </li>
/// <li>
/// <code>ModifyDBInstance</code>
/// </li>
/// <li>
/// <code>RestoreDBInstanceFromDBSnapshot</code>
/// </li>
/// <li>
/// <code>RestoreDBInstanceFromS3</code>
/// </li>
/// <li>
/// <code>RestoreDBInstanceToPointInTime</code>
/// </li>
/// </ul>
/// You can view the valid processor values for a particular instance class by
/// calling the <code>DescribeOrderableDBInstanceOptions</code> action and
/// specifying the instance class for the <code>DBInstanceClass</code>
/// parameter.
///
/// In addition, you can use the following actions for DB instance class
/// processor information:
///
/// <ul>
/// <li>
/// <code>DescribeDBInstances</code>
/// </li>
/// <li>
/// <code>DescribeDBSnapshots</code>
/// </li>
/// <li>
/// <code>DescribeValidDBInstanceModifications</code>
/// </li>
/// </ul>
/// If you call <code>DescribeDBInstances</code>, <code>ProcessorFeature</code>
/// returns non-null values only if the following conditions are met:
///
/// <ul>
/// <li>
/// You are accessing an Oracle DB instance.
/// </li>
/// <li>
/// Your Oracle DB instance class supports configuring the number of CPU cores
/// and threads per core.
/// </li>
/// <li>
/// The current number CPU cores and threads is set to a non-default value.
/// </li>
/// </ul>
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor">Configuring
/// the Processor of the DB Instance Class</a> in the <i>Amazon RDS User Guide.
/// </i>
class ProcessorFeature {
  /// The name of the processor feature. Valid names are <code>coreCount</code>
  /// and <code>threadsPerCore</code>.
  final String? name;

  /// The value of a processor feature name.
  final String? value;

  ProcessorFeature({
    this.name,
    this.value,
  });
  factory ProcessorFeature.fromXml(_s.XmlElement elem) {
    return ProcessorFeature(
      name: _s.extractXmlStringValue(elem, 'Name'),
      value: _s.extractXmlStringValue(elem, 'Value'),
    );
  }

  Map<String, dynamic> toJson() {
    final name = this.name;
    final value = this.value;
    return {
      if (name != null) 'Name': name,
      if (value != null) 'Value': value,
    };
  }

  Map<String, String> toQueryMap() {
    final name = this.name;
    final value = this.value;
    return {
      if (name != null) 'Name': name,
      if (value != null) 'Value': value,
    };
  }
}

class PromoteReadReplicaDBClusterResult {
  final DBCluster? dBCluster;

  PromoteReadReplicaDBClusterResult({
    this.dBCluster,
  });
  factory PromoteReadReplicaDBClusterResult.fromXml(_s.XmlElement elem) {
    return PromoteReadReplicaDBClusterResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class PromoteReadReplicaResult {
  final DBInstance? dBInstance;

  PromoteReadReplicaResult({
    this.dBInstance,
  });
  factory PromoteReadReplicaResult.fromXml(_s.XmlElement elem) {
    return PromoteReadReplicaResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

class PurchaseReservedDBInstancesOfferingResult {
  final ReservedDBInstance? reservedDBInstance;

  PurchaseReservedDBInstancesOfferingResult({
    this.reservedDBInstance,
  });
  factory PurchaseReservedDBInstancesOfferingResult.fromXml(
      _s.XmlElement elem) {
    return PurchaseReservedDBInstancesOfferingResult(
      reservedDBInstance: _s
          .extractXmlChild(elem, 'ReservedDBInstance')
          ?.let(ReservedDBInstance.fromXml),
    );
  }
}

/// A range of integer values.
class Range {
  /// The minimum value in the range.
  final int? from;

  /// The step value for the range. For example, if you have a range of 5,000 to
  /// 10,000, with a step value of 1,000, the valid values start at 5,000 and step
  /// up by 1,000. Even though 7,500 is within the range, it isn't a valid value
  /// for the range. The valid values are 5,000, 6,000, 7,000, 8,000...
  final int? step;

  /// The maximum value in the range.
  final int? to;

  Range({
    this.from,
    this.step,
    this.to,
  });
  factory Range.fromXml(_s.XmlElement elem) {
    return Range(
      from: _s.extractXmlIntValue(elem, 'From'),
      step: _s.extractXmlIntValue(elem, 'Step'),
      to: _s.extractXmlIntValue(elem, 'To'),
    );
  }
}

/// Reserved for future use.
class RdsCustomClusterConfiguration {
  /// Reserved for future use.
  final String? interconnectSubnetId;

  /// Reserved for future use.
  final ReplicaMode? replicaMode;

  /// Reserved for future use.
  final String? transitGatewayMulticastDomainId;

  RdsCustomClusterConfiguration({
    this.interconnectSubnetId,
    this.replicaMode,
    this.transitGatewayMulticastDomainId,
  });
  factory RdsCustomClusterConfiguration.fromXml(_s.XmlElement elem) {
    return RdsCustomClusterConfiguration(
      interconnectSubnetId:
          _s.extractXmlStringValue(elem, 'InterconnectSubnetId'),
      replicaMode: _s
          .extractXmlStringValue(elem, 'ReplicaMode')
          ?.let(ReplicaMode.fromString),
      transitGatewayMulticastDomainId:
          _s.extractXmlStringValue(elem, 'TransitGatewayMulticastDomainId'),
    );
  }

  Map<String, dynamic> toJson() {
    final interconnectSubnetId = this.interconnectSubnetId;
    final replicaMode = this.replicaMode;
    final transitGatewayMulticastDomainId =
        this.transitGatewayMulticastDomainId;
    return {
      if (interconnectSubnetId != null)
        'InterconnectSubnetId': interconnectSubnetId,
      if (replicaMode != null) 'ReplicaMode': replicaMode.value,
      if (transitGatewayMulticastDomainId != null)
        'TransitGatewayMulticastDomainId': transitGatewayMulticastDomainId,
    };
  }

  Map<String, String> toQueryMap() {
    final interconnectSubnetId = this.interconnectSubnetId;
    final replicaMode = this.replicaMode;
    final transitGatewayMulticastDomainId =
        this.transitGatewayMulticastDomainId;
    return {
      if (interconnectSubnetId != null)
        'InterconnectSubnetId': interconnectSubnetId,
      if (replicaMode != null) 'ReplicaMode': replicaMode.value,
      if (transitGatewayMulticastDomainId != null)
        'TransitGatewayMulticastDomainId': transitGatewayMulticastDomainId,
    };
  }
}

class RebootDBClusterResult {
  final DBCluster? dBCluster;

  RebootDBClusterResult({
    this.dBCluster,
  });
  factory RebootDBClusterResult.fromXml(_s.XmlElement elem) {
    return RebootDBClusterResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class RebootDBInstanceResult {
  final DBInstance? dBInstance;

  RebootDBInstanceResult({
    this.dBInstance,
  });
  factory RebootDBInstanceResult.fromXml(_s.XmlElement elem) {
    return RebootDBInstanceResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

/// The recommended actions to apply to resolve the issues associated with your
/// DB instances, DB clusters, and DB parameter groups.
class RecommendedAction {
  /// The unique identifier of the recommended action.
  final String? actionId;

  /// The methods to apply the recommended action.
  ///
  /// Valid values:
  ///
  /// <ul>
  /// <li>
  /// <code>manual</code> - The action requires you to resolve the recommendation
  /// manually.
  /// </li>
  /// <li>
  /// <code>immediately</code> - The action is applied immediately.
  /// </li>
  /// <li>
  /// <code>next-maintainance-window</code> - The action is applied during the
  /// next scheduled maintainance.
  /// </li>
  /// </ul>
  final List<String>? applyModes;

  /// The supporting attributes to explain the recommended action.
  final List<ContextAttribute>? contextAttributes;

  /// A detailed description of the action. The description might contain
  /// markdown.
  final String? description;

  /// The details of the issue.
  final IssueDetails? issueDetails;

  /// An API operation for the action.
  final String? operation;

  /// The parameters for the API operation.
  final List<RecommendedActionParameter>? parameters;

  /// The status of the action.
  ///
  /// <ul>
  /// <li>
  /// <code>ready</code>
  /// </li>
  /// <li>
  /// <code>applied</code>
  /// </li>
  /// <li>
  /// <code>scheduled</code>
  /// </li>
  /// <li>
  /// <code>resolved</code>
  /// </li>
  /// </ul>
  final String? status;

  /// A short description to summarize the action. The description might contain
  /// markdown.
  final String? title;

  RecommendedAction({
    this.actionId,
    this.applyModes,
    this.contextAttributes,
    this.description,
    this.issueDetails,
    this.operation,
    this.parameters,
    this.status,
    this.title,
  });
  factory RecommendedAction.fromXml(_s.XmlElement elem) {
    return RecommendedAction(
      actionId: _s.extractXmlStringValue(elem, 'ActionId'),
      applyModes: _s
          .extractXmlChild(elem, 'ApplyModes')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      contextAttributes: _s.extractXmlChild(elem, 'ContextAttributes')?.let(
          (elem) => elem
              .findElements('member')
              .map(ContextAttribute.fromXml)
              .toList()),
      description: _s.extractXmlStringValue(elem, 'Description'),
      issueDetails:
          _s.extractXmlChild(elem, 'IssueDetails')?.let(IssueDetails.fromXml),
      operation: _s.extractXmlStringValue(elem, 'Operation'),
      parameters: _s.extractXmlChild(elem, 'Parameters')?.let((elem) => elem
          .findElements('member')
          .map(RecommendedActionParameter.fromXml)
          .toList()),
      status: _s.extractXmlStringValue(elem, 'Status'),
      title: _s.extractXmlStringValue(elem, 'Title'),
    );
  }
}

/// A single parameter to use with the <code>RecommendedAction</code> API
/// operation to apply the action.
class RecommendedActionParameter {
  /// The key of the parameter to use with the <code>RecommendedAction</code> API
  /// operation.
  final String? key;

  /// The value of the parameter to use with the <code>RecommendedAction</code>
  /// API operation.
  final String? value;

  RecommendedActionParameter({
    this.key,
    this.value,
  });
  factory RecommendedActionParameter.fromXml(_s.XmlElement elem) {
    return RecommendedActionParameter(
      key: _s.extractXmlStringValue(elem, 'Key'),
      value: _s.extractXmlStringValue(elem, 'Value'),
    );
  }
}

/// The recommended status to update for the specified recommendation action ID.
class RecommendedActionUpdate {
  /// A unique identifier of the updated recommendation action.
  final String actionId;

  /// The status of the updated recommendation action.
  ///
  /// <ul>
  /// <li>
  /// <code>applied</code>
  /// </li>
  /// <li>
  /// <code>scheduled</code>
  /// </li>
  /// </ul>
  final String status;

  RecommendedActionUpdate({
    required this.actionId,
    required this.status,
  });

  Map<String, dynamic> toJson() {
    final actionId = this.actionId;
    final status = this.status;
    return {
      'ActionId': actionId,
      'Status': status,
    };
  }

  Map<String, String> toQueryMap() {
    final actionId = this.actionId;
    final status = this.status;
    return {
      'ActionId': actionId,
      'Status': status,
    };
  }
}

/// This data type is used as a response element in the
/// <code>DescribeReservedDBInstances</code> and
/// <code>DescribeReservedDBInstancesOfferings</code> actions.
class RecurringCharge {
  /// The amount of the recurring charge.
  final double? recurringChargeAmount;

  /// The frequency of the recurring charge.
  final String? recurringChargeFrequency;

  RecurringCharge({
    this.recurringChargeAmount,
    this.recurringChargeFrequency,
  });
  factory RecurringCharge.fromXml(_s.XmlElement elem) {
    return RecurringCharge(
      recurringChargeAmount:
          _s.extractXmlDoubleValue(elem, 'RecurringChargeAmount'),
      recurringChargeFrequency:
          _s.extractXmlStringValue(elem, 'RecurringChargeFrequency'),
    );
  }
}

/// The reference details of a metric.
class ReferenceDetails {
  /// The metric reference details when the reference is a scalar.
  final ScalarReferenceDetails? scalarReferenceDetails;

  ReferenceDetails({
    this.scalarReferenceDetails,
  });
  factory ReferenceDetails.fromXml(_s.XmlElement elem) {
    return ReferenceDetails(
      scalarReferenceDetails: _s
          .extractXmlChild(elem, 'ScalarReferenceDetails')
          ?.let(ScalarReferenceDetails.fromXml),
    );
  }
}

class RegisterDBProxyTargetsResponse {
  /// One or more <code>DBProxyTarget</code> objects that are created when you
  /// register targets with a target group.
  final List<DBProxyTarget>? dBProxyTargets;

  RegisterDBProxyTargetsResponse({
    this.dBProxyTargets,
  });
  factory RegisterDBProxyTargetsResponse.fromXml(_s.XmlElement elem) {
    return RegisterDBProxyTargetsResponse(
      dBProxyTargets: _s.extractXmlChild(elem, 'DBProxyTargets')?.let((elem) =>
          elem.findElements('member').map(DBProxyTarget.fromXml).toList()),
    );
  }
}

class RemoveFromGlobalClusterResult {
  final GlobalCluster? globalCluster;

  RemoveFromGlobalClusterResult({
    this.globalCluster,
  });
  factory RemoveFromGlobalClusterResult.fromXml(_s.XmlElement elem) {
    return RemoveFromGlobalClusterResult(
      globalCluster:
          _s.extractXmlChild(elem, 'GlobalCluster')?.let(GlobalCluster.fromXml),
    );
  }
}

class RemoveSourceIdentifierFromSubscriptionResult {
  final EventSubscription? eventSubscription;

  RemoveSourceIdentifierFromSubscriptionResult({
    this.eventSubscription,
  });
  factory RemoveSourceIdentifierFromSubscriptionResult.fromXml(
      _s.XmlElement elem) {
    return RemoveSourceIdentifierFromSubscriptionResult(
      eventSubscription: _s
          .extractXmlChild(elem, 'EventSubscription')
          ?.let(EventSubscription.fromXml),
    );
  }
}

enum ReplicaMode {
  openReadOnly('open-read-only'),
  mounted('mounted'),
  ;

  final String value;

  const ReplicaMode(this.value);

  static ReplicaMode fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum ReplicaMode'));
}

/// This data type is used as a response element in the
/// <code>DescribeReservedDBInstances</code> and
/// <code>PurchaseReservedDBInstancesOffering</code> actions.
class ReservedDBInstance {
  /// The currency code for the reserved DB instance.
  final String? currencyCode;

  /// The DB instance class for the reserved DB instance.
  final String? dBInstanceClass;

  /// The number of reserved DB instances.
  final int? dBInstanceCount;

  /// The duration of the reservation in seconds.
  final int? duration;

  /// The fixed price charged for this reserved DB instance.
  final double? fixedPrice;

  /// The unique identifier for the lease associated with the reserved DB
  /// instance.
  /// <note>
  /// Amazon Web Services Support might request the lease ID for an issue related
  /// to a reserved DB instance.
  /// </note>
  final String? leaseId;

  /// Indicates whether the reservation applies to Multi-AZ deployments.
  final bool? multiAZ;

  /// The offering type of this reserved DB instance.
  final String? offeringType;

  /// The description of the reserved DB instance.
  final String? productDescription;

  /// The recurring price charged to run this reserved DB instance.
  final List<RecurringCharge>? recurringCharges;

  /// The Amazon Resource Name (ARN) for the reserved DB instance.
  final String? reservedDBInstanceArn;

  /// The unique identifier for the reservation.
  final String? reservedDBInstanceId;

  /// The offering identifier.
  final String? reservedDBInstancesOfferingId;

  /// The time the reservation started.
  final DateTime? startTime;

  /// The state of the reserved DB instance.
  final String? state;

  /// The hourly price charged for this reserved DB instance.
  final double? usagePrice;

  ReservedDBInstance({
    this.currencyCode,
    this.dBInstanceClass,
    this.dBInstanceCount,
    this.duration,
    this.fixedPrice,
    this.leaseId,
    this.multiAZ,
    this.offeringType,
    this.productDescription,
    this.recurringCharges,
    this.reservedDBInstanceArn,
    this.reservedDBInstanceId,
    this.reservedDBInstancesOfferingId,
    this.startTime,
    this.state,
    this.usagePrice,
  });
  factory ReservedDBInstance.fromXml(_s.XmlElement elem) {
    return ReservedDBInstance(
      currencyCode: _s.extractXmlStringValue(elem, 'CurrencyCode'),
      dBInstanceClass: _s.extractXmlStringValue(elem, 'DBInstanceClass'),
      dBInstanceCount: _s.extractXmlIntValue(elem, 'DBInstanceCount'),
      duration: _s.extractXmlIntValue(elem, 'Duration'),
      fixedPrice: _s.extractXmlDoubleValue(elem, 'FixedPrice'),
      leaseId: _s.extractXmlStringValue(elem, 'LeaseId'),
      multiAZ: _s.extractXmlBoolValue(elem, 'MultiAZ'),
      offeringType: _s.extractXmlStringValue(elem, 'OfferingType'),
      productDescription: _s.extractXmlStringValue(elem, 'ProductDescription'),
      recurringCharges: _s.extractXmlChild(elem, 'RecurringCharges')?.let(
          (elem) => elem
              .findElements('RecurringCharge')
              .map(RecurringCharge.fromXml)
              .toList()),
      reservedDBInstanceArn:
          _s.extractXmlStringValue(elem, 'ReservedDBInstanceArn'),
      reservedDBInstanceId:
          _s.extractXmlStringValue(elem, 'ReservedDBInstanceId'),
      reservedDBInstancesOfferingId:
          _s.extractXmlStringValue(elem, 'ReservedDBInstancesOfferingId'),
      startTime: _s.extractXmlDateTimeValue(elem, 'StartTime'),
      state: _s.extractXmlStringValue(elem, 'State'),
      usagePrice: _s.extractXmlDoubleValue(elem, 'UsagePrice'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeReservedDBInstances</code> action.
class ReservedDBInstanceMessage {
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  /// A list of reserved DB instances.
  final List<ReservedDBInstance>? reservedDBInstances;

  ReservedDBInstanceMessage({
    this.marker,
    this.reservedDBInstances,
  });
  factory ReservedDBInstanceMessage.fromXml(_s.XmlElement elem) {
    return ReservedDBInstanceMessage(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      reservedDBInstances: _s.extractXmlChild(elem, 'ReservedDBInstances')?.let(
          (elem) => elem
              .findElements('ReservedDBInstance')
              .map(ReservedDBInstance.fromXml)
              .toList()),
    );
  }
}

/// This data type is used as a response element in the
/// <code>DescribeReservedDBInstancesOfferings</code> action.
class ReservedDBInstancesOffering {
  /// The currency code for the reserved DB instance offering.
  final String? currencyCode;

  /// The DB instance class for the reserved DB instance.
  final String? dBInstanceClass;

  /// The duration of the offering in seconds.
  final int? duration;

  /// The fixed price charged for this offering.
  final double? fixedPrice;

  /// Indicates whether the offering applies to Multi-AZ deployments.
  final bool? multiAZ;

  /// The offering type.
  final String? offeringType;

  /// The database engine used by the offering.
  final String? productDescription;

  /// The recurring price charged to run this reserved DB instance.
  final List<RecurringCharge>? recurringCharges;

  /// The offering identifier.
  final String? reservedDBInstancesOfferingId;

  /// The hourly price charged for this offering.
  final double? usagePrice;

  ReservedDBInstancesOffering({
    this.currencyCode,
    this.dBInstanceClass,
    this.duration,
    this.fixedPrice,
    this.multiAZ,
    this.offeringType,
    this.productDescription,
    this.recurringCharges,
    this.reservedDBInstancesOfferingId,
    this.usagePrice,
  });
  factory ReservedDBInstancesOffering.fromXml(_s.XmlElement elem) {
    return ReservedDBInstancesOffering(
      currencyCode: _s.extractXmlStringValue(elem, 'CurrencyCode'),
      dBInstanceClass: _s.extractXmlStringValue(elem, 'DBInstanceClass'),
      duration: _s.extractXmlIntValue(elem, 'Duration'),
      fixedPrice: _s.extractXmlDoubleValue(elem, 'FixedPrice'),
      multiAZ: _s.extractXmlBoolValue(elem, 'MultiAZ'),
      offeringType: _s.extractXmlStringValue(elem, 'OfferingType'),
      productDescription: _s.extractXmlStringValue(elem, 'ProductDescription'),
      recurringCharges: _s.extractXmlChild(elem, 'RecurringCharges')?.let(
          (elem) => elem
              .findElements('RecurringCharge')
              .map(RecurringCharge.fromXml)
              .toList()),
      reservedDBInstancesOfferingId:
          _s.extractXmlStringValue(elem, 'ReservedDBInstancesOfferingId'),
      usagePrice: _s.extractXmlDoubleValue(elem, 'UsagePrice'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeReservedDBInstancesOfferings</code> action.
class ReservedDBInstancesOfferingMessage {
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  /// A list of reserved DB instance offerings.
  final List<ReservedDBInstancesOffering>? reservedDBInstancesOfferings;

  ReservedDBInstancesOfferingMessage({
    this.marker,
    this.reservedDBInstancesOfferings,
  });
  factory ReservedDBInstancesOfferingMessage.fromXml(_s.XmlElement elem) {
    return ReservedDBInstancesOfferingMessage(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      reservedDBInstancesOfferings: _s
          .extractXmlChild(elem, 'ReservedDBInstancesOfferings')
          ?.let((elem) => elem
              .findElements('ReservedDBInstancesOffering')
              .map(ReservedDBInstancesOffering.fromXml)
              .toList()),
    );
  }
}

/// Describes the pending maintenance actions for a resource.
class ResourcePendingMaintenanceActions {
  /// A list that provides details about the pending maintenance actions for the
  /// resource.
  final List<PendingMaintenanceAction>? pendingMaintenanceActionDetails;

  /// The ARN of the resource that has pending maintenance actions.
  final String? resourceIdentifier;

  ResourcePendingMaintenanceActions({
    this.pendingMaintenanceActionDetails,
    this.resourceIdentifier,
  });
  factory ResourcePendingMaintenanceActions.fromXml(_s.XmlElement elem) {
    return ResourcePendingMaintenanceActions(
      pendingMaintenanceActionDetails: _s
          .extractXmlChild(elem, 'PendingMaintenanceActionDetails')
          ?.let((elem) => elem
              .findElements('PendingMaintenanceAction')
              .map(PendingMaintenanceAction.fromXml)
              .toList()),
      resourceIdentifier: _s.extractXmlStringValue(elem, 'ResourceIdentifier'),
    );
  }
}

class RestoreDBClusterFromS3Result {
  final DBCluster? dBCluster;

  RestoreDBClusterFromS3Result({
    this.dBCluster,
  });
  factory RestoreDBClusterFromS3Result.fromXml(_s.XmlElement elem) {
    return RestoreDBClusterFromS3Result(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class RestoreDBClusterFromSnapshotResult {
  final DBCluster? dBCluster;

  RestoreDBClusterFromSnapshotResult({
    this.dBCluster,
  });
  factory RestoreDBClusterFromSnapshotResult.fromXml(_s.XmlElement elem) {
    return RestoreDBClusterFromSnapshotResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class RestoreDBClusterToPointInTimeResult {
  final DBCluster? dBCluster;

  RestoreDBClusterToPointInTimeResult({
    this.dBCluster,
  });
  factory RestoreDBClusterToPointInTimeResult.fromXml(_s.XmlElement elem) {
    return RestoreDBClusterToPointInTimeResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class RestoreDBInstanceFromDBSnapshotResult {
  final DBInstance? dBInstance;

  RestoreDBInstanceFromDBSnapshotResult({
    this.dBInstance,
  });
  factory RestoreDBInstanceFromDBSnapshotResult.fromXml(_s.XmlElement elem) {
    return RestoreDBInstanceFromDBSnapshotResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

class RestoreDBInstanceFromS3Result {
  final DBInstance? dBInstance;

  RestoreDBInstanceFromS3Result({
    this.dBInstance,
  });
  factory RestoreDBInstanceFromS3Result.fromXml(_s.XmlElement elem) {
    return RestoreDBInstanceFromS3Result(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

class RestoreDBInstanceToPointInTimeResult {
  final DBInstance? dBInstance;

  RestoreDBInstanceToPointInTimeResult({
    this.dBInstance,
  });
  factory RestoreDBInstanceToPointInTimeResult.fromXml(_s.XmlElement elem) {
    return RestoreDBInstanceToPointInTimeResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

/// Earliest and latest time an instance can be restored to:
class RestoreWindow {
  /// The earliest time you can restore an instance to.
  final DateTime? earliestTime;

  /// The latest time you can restore an instance to.
  final DateTime? latestTime;

  RestoreWindow({
    this.earliestTime,
    this.latestTime,
  });
  factory RestoreWindow.fromXml(_s.XmlElement elem) {
    return RestoreWindow(
      earliestTime: _s.extractXmlDateTimeValue(elem, 'EarliestTime'),
      latestTime: _s.extractXmlDateTimeValue(elem, 'LatestTime'),
    );
  }
}

class RevokeDBSecurityGroupIngressResult {
  final DBSecurityGroup? dBSecurityGroup;

  RevokeDBSecurityGroupIngressResult({
    this.dBSecurityGroup,
  });
  factory RevokeDBSecurityGroupIngressResult.fromXml(_s.XmlElement elem) {
    return RevokeDBSecurityGroupIngressResult(
      dBSecurityGroup: _s
          .extractXmlChild(elem, 'DBSecurityGroup')
          ?.let(DBSecurityGroup.fromXml),
    );
  }
}

/// The metric reference details when the reference is a scalar.
class ScalarReferenceDetails {
  /// The value of a scalar reference.
  final double? value;

  ScalarReferenceDetails({
    this.value,
  });
  factory ScalarReferenceDetails.fromXml(_s.XmlElement elem) {
    return ScalarReferenceDetails(
      value: _s.extractXmlDoubleValue(elem, 'Value'),
    );
  }
}

/// Contains the scaling configuration of an Aurora Serverless v1 DB cluster.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using
/// Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.
class ScalingConfiguration {
  /// Indicates whether to allow or disallow automatic pause for an Aurora DB
  /// cluster in <code>serverless</code> DB engine mode. A DB cluster can be
  /// paused only when it's idle (it has no connections).
  /// <note>
  /// If a DB cluster is paused for more than seven days, the DB cluster might be
  /// backed up with a snapshot. In this case, the DB cluster is restored when
  /// there is a request to connect to it.
  /// </note>
  final bool? autoPause;

  /// The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB
  /// engine mode.
  ///
  /// For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>,
  /// <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>,
  /// <code>64</code>, <code>128</code>, and <code>256</code>.
  ///
  /// For Aurora PostgreSQL, valid capacity values are <code>2</code>,
  /// <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>,
  /// <code>64</code>, <code>192</code>, and <code>384</code>.
  ///
  /// The maximum capacity must be greater than or equal to the minimum capacity.
  final int? maxCapacity;

  /// The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB
  /// engine mode.
  ///
  /// For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>,
  /// <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>,
  /// <code>64</code>, <code>128</code>, and <code>256</code>.
  ///
  /// For Aurora PostgreSQL, valid capacity values are <code>2</code>,
  /// <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>,
  /// <code>64</code>, <code>192</code>, and <code>384</code>.
  ///
  /// The minimum capacity must be less than or equal to the maximum capacity.
  final int? minCapacity;

  /// The amount of time, in seconds, that Aurora Serverless v1 tries to find a
  /// scaling point to perform seamless scaling before enforcing the timeout
  /// action. The default is 300.
  ///
  /// Specify a value between 60 and 600 seconds.
  final int? secondsBeforeTimeout;

  /// The time, in seconds, before an Aurora DB cluster in <code>serverless</code>
  /// mode is paused.
  ///
  /// Specify a value between 300 and 86,400 seconds.
  final int? secondsUntilAutoPause;

  /// The action to take when the timeout is reached, either
  /// <code>ForceApplyCapacityChange</code> or
  /// <code>RollbackCapacityChange</code>.
  ///
  /// <code>ForceApplyCapacityChange</code> sets the capacity to the specified
  /// value as soon as possible.
  ///
  /// <code>RollbackCapacityChange</code>, the default, ignores the capacity
  /// change if a scaling point isn't found in the timeout period.
  /// <important>
  /// If you specify <code>ForceApplyCapacityChange</code>, connections that
  /// prevent Aurora Serverless v1 from finding a scaling point might be dropped.
  /// </important>
  /// For more information, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling">
  /// Autoscaling for Aurora Serverless v1</a> in the <i>Amazon Aurora User
  /// Guide</i>.
  final String? timeoutAction;

  ScalingConfiguration({
    this.autoPause,
    this.maxCapacity,
    this.minCapacity,
    this.secondsBeforeTimeout,
    this.secondsUntilAutoPause,
    this.timeoutAction,
  });

  Map<String, dynamic> toJson() {
    final autoPause = this.autoPause;
    final maxCapacity = this.maxCapacity;
    final minCapacity = this.minCapacity;
    final secondsBeforeTimeout = this.secondsBeforeTimeout;
    final secondsUntilAutoPause = this.secondsUntilAutoPause;
    final timeoutAction = this.timeoutAction;
    return {
      if (autoPause != null) 'AutoPause': autoPause,
      if (maxCapacity != null) 'MaxCapacity': maxCapacity,
      if (minCapacity != null) 'MinCapacity': minCapacity,
      if (secondsBeforeTimeout != null)
        'SecondsBeforeTimeout': secondsBeforeTimeout,
      if (secondsUntilAutoPause != null)
        'SecondsUntilAutoPause': secondsUntilAutoPause,
      if (timeoutAction != null) 'TimeoutAction': timeoutAction,
    };
  }

  Map<String, String> toQueryMap() {
    final autoPause = this.autoPause;
    final maxCapacity = this.maxCapacity;
    final minCapacity = this.minCapacity;
    final secondsBeforeTimeout = this.secondsBeforeTimeout;
    final secondsUntilAutoPause = this.secondsUntilAutoPause;
    final timeoutAction = this.timeoutAction;
    return {
      if (autoPause != null) 'AutoPause': autoPause.toString(),
      if (maxCapacity != null) 'MaxCapacity': maxCapacity.toString(),
      if (minCapacity != null) 'MinCapacity': minCapacity.toString(),
      if (secondsBeforeTimeout != null)
        'SecondsBeforeTimeout': secondsBeforeTimeout.toString(),
      if (secondsUntilAutoPause != null)
        'SecondsUntilAutoPause': secondsUntilAutoPause.toString(),
      if (timeoutAction != null) 'TimeoutAction': timeoutAction,
    };
  }
}

/// The scaling configuration for an Aurora DB cluster in
/// <code>serverless</code> DB engine mode.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using
/// Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.
class ScalingConfigurationInfo {
  /// Indicates whether automatic pause is allowed for the Aurora DB cluster in
  /// <code>serverless</code> DB engine mode.
  ///
  /// When the value is set to false for an Aurora Serverless v1 DB cluster, the
  /// DB cluster automatically resumes.
  final bool? autoPause;

  /// The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB
  /// engine mode.
  final int? maxCapacity;

  /// The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB
  /// engine mode.
  final int? minCapacity;

  /// The number of seconds before scaling times out. What happens when an
  /// attempted scaling action times out is determined by the
  /// <code>TimeoutAction</code> setting.
  final int? secondsBeforeTimeout;

  /// The remaining amount of time, in seconds, before the Aurora DB cluster in
  /// <code>serverless</code> mode is paused. A DB cluster can be paused only when
  /// it's idle (it has no connections).
  final int? secondsUntilAutoPause;

  /// The action that occurs when Aurora times out while attempting to change the
  /// capacity of an Aurora Serverless v1 cluster. The value is either
  /// <code>ForceApplyCapacityChange</code> or
  /// <code>RollbackCapacityChange</code>.
  ///
  /// <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the
  /// specified value as soon as possible.
  ///
  /// <code>RollbackCapacityChange</code> ignores the capacity change if a scaling
  /// point isn't found in the timeout period.
  final String? timeoutAction;

  ScalingConfigurationInfo({
    this.autoPause,
    this.maxCapacity,
    this.minCapacity,
    this.secondsBeforeTimeout,
    this.secondsUntilAutoPause,
    this.timeoutAction,
  });
  factory ScalingConfigurationInfo.fromXml(_s.XmlElement elem) {
    return ScalingConfigurationInfo(
      autoPause: _s.extractXmlBoolValue(elem, 'AutoPause'),
      maxCapacity: _s.extractXmlIntValue(elem, 'MaxCapacity'),
      minCapacity: _s.extractXmlIntValue(elem, 'MinCapacity'),
      secondsBeforeTimeout: _s.extractXmlIntValue(elem, 'SecondsBeforeTimeout'),
      secondsUntilAutoPause:
          _s.extractXmlIntValue(elem, 'SecondsUntilAutoPause'),
      timeoutAction: _s.extractXmlStringValue(elem, 'TimeoutAction'),
    );
  }
}

/// Contains the scaling configuration of an Aurora Serverless v2 DB cluster.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using
/// Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.
class ServerlessV2ScalingConfiguration {
  /// The maximum number of Aurora capacity units (ACUs) for a DB instance in an
  /// Aurora Serverless v2 cluster. You can specify ACU values in half-step
  /// increments, such as 40, 40.5, 41, and so on. The largest value that you can
  /// use is 128.
  final double? maxCapacity;

  /// The minimum number of Aurora capacity units (ACUs) for a DB instance in an
  /// Aurora Serverless v2 cluster. You can specify ACU values in half-step
  /// increments, such as 8, 8.5, 9, and so on. The smallest value that you can
  /// use is 0.5.
  final double? minCapacity;

  ServerlessV2ScalingConfiguration({
    this.maxCapacity,
    this.minCapacity,
  });

  Map<String, dynamic> toJson() {
    final maxCapacity = this.maxCapacity;
    final minCapacity = this.minCapacity;
    return {
      if (maxCapacity != null) 'MaxCapacity': maxCapacity,
      if (minCapacity != null) 'MinCapacity': minCapacity,
    };
  }

  Map<String, String> toQueryMap() {
    final maxCapacity = this.maxCapacity;
    final minCapacity = this.minCapacity;
    return {
      if (maxCapacity != null) 'MaxCapacity': maxCapacity.toString(),
      if (minCapacity != null) 'MinCapacity': minCapacity.toString(),
    };
  }
}

/// The scaling configuration for an Aurora Serverless v2 DB cluster.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using
/// Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.
class ServerlessV2ScalingConfigurationInfo {
  /// The maximum number of Aurora capacity units (ACUs) for a DB instance in an
  /// Aurora Serverless v2 cluster. You can specify ACU values in half-step
  /// increments, such as 40, 40.5, 41, and so on. The largest value that you can
  /// use is 128.
  final double? maxCapacity;

  /// The minimum number of Aurora capacity units (ACUs) for a DB instance in an
  /// Aurora Serverless v2 cluster. You can specify ACU values in half-step
  /// increments, such as 8, 8.5, 9, and so on. The smallest value that you can
  /// use is 0.5.
  final double? minCapacity;

  ServerlessV2ScalingConfigurationInfo({
    this.maxCapacity,
    this.minCapacity,
  });
  factory ServerlessV2ScalingConfigurationInfo.fromXml(_s.XmlElement elem) {
    return ServerlessV2ScalingConfigurationInfo(
      maxCapacity: _s.extractXmlDoubleValue(elem, 'MaxCapacity'),
      minCapacity: _s.extractXmlDoubleValue(elem, 'MinCapacity'),
    );
  }
}

/// Contains an Amazon Web Services Region name as the result of a successful
/// call to the <code>DescribeSourceRegions</code> action.
class SourceRegion {
  /// The endpoint for the source Amazon Web Services Region endpoint.
  final String? endpoint;

  /// The name of the source Amazon Web Services Region.
  final String? regionName;

  /// The status of the source Amazon Web Services Region.
  final String? status;

  /// Indicates whether the source Amazon Web Services Region supports replicating
  /// automated backups to the current Amazon Web Services Region.
  final bool? supportsDBInstanceAutomatedBackupsReplication;

  SourceRegion({
    this.endpoint,
    this.regionName,
    this.status,
    this.supportsDBInstanceAutomatedBackupsReplication,
  });
  factory SourceRegion.fromXml(_s.XmlElement elem) {
    return SourceRegion(
      endpoint: _s.extractXmlStringValue(elem, 'Endpoint'),
      regionName: _s.extractXmlStringValue(elem, 'RegionName'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      supportsDBInstanceAutomatedBackupsReplication: _s.extractXmlBoolValue(
          elem, 'SupportsDBInstanceAutomatedBackupsReplication'),
    );
  }
}

/// Contains the result of a successful invocation of the
/// <code>DescribeSourceRegions</code> action.
class SourceRegionMessage {
  /// An optional pagination token provided by a previous request. If this
  /// parameter is specified, the response includes only records beyond the
  /// marker, up to the value specified by <code>MaxRecords</code>.
  final String? marker;

  /// A list of <code>SourceRegion</code> instances that contains each source
  /// Amazon Web Services Region that the current Amazon Web Services Region can
  /// get a read replica or a DB snapshot from.
  final List<SourceRegion>? sourceRegions;

  SourceRegionMessage({
    this.marker,
    this.sourceRegions,
  });
  factory SourceRegionMessage.fromXml(_s.XmlElement elem) {
    return SourceRegionMessage(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      sourceRegions: _s.extractXmlChild(elem, 'SourceRegions')?.let((elem) =>
          elem.findElements('SourceRegion').map(SourceRegion.fromXml).toList()),
    );
  }
}

enum SourceType {
  dbInstance('db-instance'),
  dbParameterGroup('db-parameter-group'),
  dbSecurityGroup('db-security-group'),
  dbSnapshot('db-snapshot'),
  dbCluster('db-cluster'),
  dbClusterSnapshot('db-cluster-snapshot'),
  customEngineVersion('custom-engine-version'),
  dbProxy('db-proxy'),
  blueGreenDeployment('blue-green-deployment'),
  ;

  final String value;

  const SourceType(this.value);

  static SourceType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum SourceType'));
}

class StartActivityStreamResponse {
  /// Indicates whether or not the database activity stream will start as soon as
  /// possible, regardless of the maintenance window for the database.
  final bool? applyImmediately;

  /// Indicates whether engine-native audit fields are included in the database
  /// activity stream.
  final bool? engineNativeAuditFieldsIncluded;

  /// The name of the Amazon Kinesis data stream to be used for the database
  /// activity stream.
  final String? kinesisStreamName;

  /// The Amazon Web Services KMS key identifier for encryption of messages in the
  /// database activity stream.
  final String? kmsKeyId;

  /// The mode of the database activity stream.
  final ActivityStreamMode? mode;

  /// The status of the database activity stream.
  final ActivityStreamStatus? status;

  StartActivityStreamResponse({
    this.applyImmediately,
    this.engineNativeAuditFieldsIncluded,
    this.kinesisStreamName,
    this.kmsKeyId,
    this.mode,
    this.status,
  });
  factory StartActivityStreamResponse.fromXml(_s.XmlElement elem) {
    return StartActivityStreamResponse(
      applyImmediately: _s.extractXmlBoolValue(elem, 'ApplyImmediately'),
      engineNativeAuditFieldsIncluded:
          _s.extractXmlBoolValue(elem, 'EngineNativeAuditFieldsIncluded'),
      kinesisStreamName: _s.extractXmlStringValue(elem, 'KinesisStreamName'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      mode: _s
          .extractXmlStringValue(elem, 'Mode')
          ?.let(ActivityStreamMode.fromString),
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(ActivityStreamStatus.fromString),
    );
  }
}

class StartDBClusterResult {
  final DBCluster? dBCluster;

  StartDBClusterResult({
    this.dBCluster,
  });
  factory StartDBClusterResult.fromXml(_s.XmlElement elem) {
    return StartDBClusterResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class StartDBInstanceAutomatedBackupsReplicationResult {
  final DBInstanceAutomatedBackup? dBInstanceAutomatedBackup;

  StartDBInstanceAutomatedBackupsReplicationResult({
    this.dBInstanceAutomatedBackup,
  });
  factory StartDBInstanceAutomatedBackupsReplicationResult.fromXml(
      _s.XmlElement elem) {
    return StartDBInstanceAutomatedBackupsReplicationResult(
      dBInstanceAutomatedBackup: _s
          .extractXmlChild(elem, 'DBInstanceAutomatedBackup')
          ?.let(DBInstanceAutomatedBackup.fromXml),
    );
  }
}

class StartDBInstanceResult {
  final DBInstance? dBInstance;

  StartDBInstanceResult({
    this.dBInstance,
  });
  factory StartDBInstanceResult.fromXml(_s.XmlElement elem) {
    return StartDBInstanceResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

class StopActivityStreamResponse {
  /// The name of the Amazon Kinesis data stream used for the database activity
  /// stream.
  final String? kinesisStreamName;

  /// The Amazon Web Services KMS key identifier used for encrypting messages in
  /// the database activity stream.
  ///
  /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
  /// ARN, or alias name for the KMS key.
  final String? kmsKeyId;

  /// The status of the database activity stream.
  final ActivityStreamStatus? status;

  StopActivityStreamResponse({
    this.kinesisStreamName,
    this.kmsKeyId,
    this.status,
  });
  factory StopActivityStreamResponse.fromXml(_s.XmlElement elem) {
    return StopActivityStreamResponse(
      kinesisStreamName: _s.extractXmlStringValue(elem, 'KinesisStreamName'),
      kmsKeyId: _s.extractXmlStringValue(elem, 'KmsKeyId'),
      status: _s
          .extractXmlStringValue(elem, 'Status')
          ?.let(ActivityStreamStatus.fromString),
    );
  }
}

class StopDBClusterResult {
  final DBCluster? dBCluster;

  StopDBClusterResult({
    this.dBCluster,
  });
  factory StopDBClusterResult.fromXml(_s.XmlElement elem) {
    return StopDBClusterResult(
      dBCluster: _s.extractXmlChild(elem, 'DBCluster')?.let(DBCluster.fromXml),
    );
  }
}

class StopDBInstanceAutomatedBackupsReplicationResult {
  final DBInstanceAutomatedBackup? dBInstanceAutomatedBackup;

  StopDBInstanceAutomatedBackupsReplicationResult({
    this.dBInstanceAutomatedBackup,
  });
  factory StopDBInstanceAutomatedBackupsReplicationResult.fromXml(
      _s.XmlElement elem) {
    return StopDBInstanceAutomatedBackupsReplicationResult(
      dBInstanceAutomatedBackup: _s
          .extractXmlChild(elem, 'DBInstanceAutomatedBackup')
          ?.let(DBInstanceAutomatedBackup.fromXml),
    );
  }
}

class StopDBInstanceResult {
  final DBInstance? dBInstance;

  StopDBInstanceResult({
    this.dBInstance,
  });
  factory StopDBInstanceResult.fromXml(_s.XmlElement elem) {
    return StopDBInstanceResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

/// This data type is used as a response element for the
/// <code>DescribeDBSubnetGroups</code> operation.
class Subnet {
  final AvailabilityZone? subnetAvailabilityZone;

  /// The identifier of the subnet.
  final String? subnetIdentifier;

  /// If the subnet is associated with an Outpost, this value specifies the
  /// Outpost.
  ///
  /// For more information about RDS on Outposts, see <a
  /// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Amazon
  /// RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide.</i>
  final Outpost? subnetOutpost;

  /// The status of the subnet.
  final String? subnetStatus;

  Subnet({
    this.subnetAvailabilityZone,
    this.subnetIdentifier,
    this.subnetOutpost,
    this.subnetStatus,
  });
  factory Subnet.fromXml(_s.XmlElement elem) {
    return Subnet(
      subnetAvailabilityZone: _s
          .extractXmlChild(elem, 'SubnetAvailabilityZone')
          ?.let(AvailabilityZone.fromXml),
      subnetIdentifier: _s.extractXmlStringValue(elem, 'SubnetIdentifier'),
      subnetOutpost:
          _s.extractXmlChild(elem, 'SubnetOutpost')?.let(Outpost.fromXml),
      subnetStatus: _s.extractXmlStringValue(elem, 'SubnetStatus'),
    );
  }
}

class SwitchoverBlueGreenDeploymentResponse {
  final BlueGreenDeployment? blueGreenDeployment;

  SwitchoverBlueGreenDeploymentResponse({
    this.blueGreenDeployment,
  });
  factory SwitchoverBlueGreenDeploymentResponse.fromXml(_s.XmlElement elem) {
    return SwitchoverBlueGreenDeploymentResponse(
      blueGreenDeployment: _s
          .extractXmlChild(elem, 'BlueGreenDeployment')
          ?.let(BlueGreenDeployment.fromXml),
    );
  }
}

/// Contains the details about a blue/green deployment.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using
/// Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon
/// RDS User Guide</i> and <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html">Using
/// Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon
/// Aurora User Guide</i>.
class SwitchoverDetail {
  /// The Amazon Resource Name (ARN) of a resource in the blue environment.
  final String? sourceMember;

  /// The switchover status of a resource in a blue/green deployment.
  ///
  /// Values:
  ///
  /// <ul>
  /// <li>
  /// <code>PROVISIONING</code> - The resource is being prepared to switch over.
  /// </li>
  /// <li>
  /// <code>AVAILABLE</code> - The resource is ready to switch over.
  /// </li>
  /// <li>
  /// <code>SWITCHOVER_IN_PROGRESS</code> - The resource is being switched over.
  /// </li>
  /// <li>
  /// <code>SWITCHOVER_COMPLETED</code> - The resource has been switched over.
  /// </li>
  /// <li>
  /// <code>SWITCHOVER_FAILED</code> - The resource attempted to switch over but
  /// failed.
  /// </li>
  /// <li>
  /// <code>MISSING_SOURCE</code> - The source resource has been deleted.
  /// </li>
  /// <li>
  /// <code>MISSING_TARGET</code> - The target resource has been deleted.
  /// </li>
  /// </ul>
  final String? status;

  /// The Amazon Resource Name (ARN) of a resource in the green environment.
  final String? targetMember;

  SwitchoverDetail({
    this.sourceMember,
    this.status,
    this.targetMember,
  });
  factory SwitchoverDetail.fromXml(_s.XmlElement elem) {
    return SwitchoverDetail(
      sourceMember: _s.extractXmlStringValue(elem, 'SourceMember'),
      status: _s.extractXmlStringValue(elem, 'Status'),
      targetMember: _s.extractXmlStringValue(elem, 'TargetMember'),
    );
  }
}

class SwitchoverGlobalClusterResult {
  final GlobalCluster? globalCluster;

  SwitchoverGlobalClusterResult({
    this.globalCluster,
  });
  factory SwitchoverGlobalClusterResult.fromXml(_s.XmlElement elem) {
    return SwitchoverGlobalClusterResult(
      globalCluster:
          _s.extractXmlChild(elem, 'GlobalCluster')?.let(GlobalCluster.fromXml),
    );
  }
}

class SwitchoverReadReplicaResult {
  final DBInstance? dBInstance;

  SwitchoverReadReplicaResult({
    this.dBInstance,
  });
  factory SwitchoverReadReplicaResult.fromXml(_s.XmlElement elem) {
    return SwitchoverReadReplicaResult(
      dBInstance:
          _s.extractXmlChild(elem, 'DBInstance')?.let(DBInstance.fromXml),
    );
  }
}

/// Metadata assigned to an Amazon RDS resource consisting of a key-value pair.
///
/// For more information, see <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging
/// Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i> or <a
/// href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.html">Tagging
/// Amazon Aurora and Amazon RDS Resources</a> in the <i>Amazon Aurora User
/// Guide</i>.
class Tag {
  /// A key is the required name of the tag. The string value can be from 1 to 128
  /// Unicode characters in length and can't be prefixed with <code>aws:</code> or
  /// <code>rds:</code>. The string can only contain only the set of Unicode
  /// letters, digits, white-space, '_', '.', ':', '/', '=', '+', '-', '@' (Java
  /// regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").
  final String? key;

  /// A value is the optional value of the tag. The string value can be from 1 to
  /// 256 Unicode characters in length and can't be prefixed with
  /// <code>aws:</code> or <code>rds:</code>. The string can only contain only the
  /// set of Unicode letters, digits, white-space, '_', '.', ':', '/', '=', '+',
  /// '-', '@' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").
  final String? value;

  Tag({
    this.key,
    this.value,
  });
  factory Tag.fromXml(_s.XmlElement elem) {
    return Tag(
      key: _s.extractXmlStringValue(elem, 'Key'),
      value: _s.extractXmlStringValue(elem, 'Value'),
    );
  }

  Map<String, dynamic> toJson() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'Key': key,
      if (value != null) 'Value': value,
    };
  }

  Map<String, String> toQueryMap() {
    final key = this.key;
    final value = this.value;
    return {
      if (key != null) 'Key': key,
      if (value != null) 'Value': value,
    };
  }
}

/// <p/>
class TagListMessage {
  /// List of tags returned by the <code>ListTagsForResource</code> operation.
  final List<Tag>? tagList;

  TagListMessage({
    this.tagList,
  });
  factory TagListMessage.fromXml(_s.XmlElement elem) {
    return TagListMessage(
      tagList: _s
          .extractXmlChild(elem, 'TagList')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
    );
  }
}

/// Information about the connection health of an RDS Proxy target.
class TargetHealth {
  /// A description of the health of the RDS Proxy target. If the
  /// <code>State</code> is <code>AVAILABLE</code>, a description is not included.
  final String? description;

  /// The reason for the current health <code>State</code> of the RDS Proxy
  /// target.
  final TargetHealthReason? reason;

  /// The current state of the connection health lifecycle for the RDS Proxy
  /// target. The following is a typical lifecycle example for the states of an
  /// RDS Proxy target:
  ///
  /// <code>registering</code> &gt; <code>unavailable</code> &gt;
  /// <code>available</code> &gt; <code>unavailable</code> &gt;
  /// <code>available</code>
  final TargetState? state;

  TargetHealth({
    this.description,
    this.reason,
    this.state,
  });
  factory TargetHealth.fromXml(_s.XmlElement elem) {
    return TargetHealth(
      description: _s.extractXmlStringValue(elem, 'Description'),
      reason: _s
          .extractXmlStringValue(elem, 'Reason')
          ?.let(TargetHealthReason.fromString),
      state:
          _s.extractXmlStringValue(elem, 'State')?.let(TargetState.fromString),
    );
  }
}

enum TargetHealthReason {
  unreachable('UNREACHABLE'),
  connectionFailed('CONNECTION_FAILED'),
  authFailure('AUTH_FAILURE'),
  pendingProxyCapacity('PENDING_PROXY_CAPACITY'),
  invalidReplicationState('INVALID_REPLICATION_STATE'),
  ;

  final String value;

  const TargetHealthReason(this.value);

  static TargetHealthReason fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum TargetHealthReason'));
}

enum TargetRole {
  readWrite('READ_WRITE'),
  readOnly('READ_ONLY'),
  unknown('UNKNOWN'),
  ;

  final String value;

  const TargetRole(this.value);

  static TargetRole fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum TargetRole'));
}

enum TargetState {
  registering('REGISTERING'),
  available('AVAILABLE'),
  unavailable('UNAVAILABLE'),
  ;

  final String value;

  const TargetState(this.value);

  static TargetState fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum TargetState'));
}

enum TargetType {
  rdsInstance('RDS_INSTANCE'),
  rdsServerlessEndpoint('RDS_SERVERLESS_ENDPOINT'),
  trackedCluster('TRACKED_CLUSTER'),
  ;

  final String value;

  const TargetType(this.value);

  static TargetType fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () => throw Exception('$value is not known in enum TargetType'));
}

/// A tenant database in the DB instance. This data type is an element in the
/// response to the <code>DescribeTenantDatabases</code> action.
class TenantDatabase {
  /// The character set of the tenant database.
  final String? characterSetName;

  /// The ID of the DB instance that contains the tenant database.
  final String? dBInstanceIdentifier;

  /// The Amazon Web Services Region-unique, immutable identifier for the DB
  /// instance.
  final String? dbiResourceId;

  /// Specifies whether deletion protection is enabled for the DB instance.
  final bool? deletionProtection;

  /// The master username of the tenant database.
  final String? masterUsername;

  /// The <code>NCHAR</code> character set name of the tenant database.
  final String? ncharCharacterSetName;

  /// Information about pending changes for a tenant database.
  final TenantDatabasePendingModifiedValues? pendingModifiedValues;

  /// The status of the tenant database.
  final String? status;
  final List<Tag>? tagList;

  /// The database name of the tenant database.
  final String? tenantDBName;

  /// The Amazon Resource Name (ARN) for the tenant database.
  final String? tenantDatabaseARN;

  /// The creation time of the tenant database.
  final DateTime? tenantDatabaseCreateTime;

  /// The Amazon Web Services Region-unique, immutable identifier for the tenant
  /// database.
  final String? tenantDatabaseResourceId;

  TenantDatabase({
    this.characterSetName,
    this.dBInstanceIdentifier,
    this.dbiResourceId,
    this.deletionProtection,
    this.masterUsername,
    this.ncharCharacterSetName,
    this.pendingModifiedValues,
    this.status,
    this.tagList,
    this.tenantDBName,
    this.tenantDatabaseARN,
    this.tenantDatabaseCreateTime,
    this.tenantDatabaseResourceId,
  });
  factory TenantDatabase.fromXml(_s.XmlElement elem) {
    return TenantDatabase(
      characterSetName: _s.extractXmlStringValue(elem, 'CharacterSetName'),
      dBInstanceIdentifier:
          _s.extractXmlStringValue(elem, 'DBInstanceIdentifier'),
      dbiResourceId: _s.extractXmlStringValue(elem, 'DbiResourceId'),
      deletionProtection: _s.extractXmlBoolValue(elem, 'DeletionProtection'),
      masterUsername: _s.extractXmlStringValue(elem, 'MasterUsername'),
      ncharCharacterSetName:
          _s.extractXmlStringValue(elem, 'NcharCharacterSetName'),
      pendingModifiedValues: _s
          .extractXmlChild(elem, 'PendingModifiedValues')
          ?.let(TenantDatabasePendingModifiedValues.fromXml),
      status: _s.extractXmlStringValue(elem, 'Status'),
      tagList: _s
          .extractXmlChild(elem, 'TagList')
          ?.let((elem) => elem.findElements('Tag').map(Tag.fromXml).toList()),
      tenantDBName: _s.extractXmlStringValue(elem, 'TenantDBName'),
      tenantDatabaseARN: _s.extractXmlStringValue(elem, 'TenantDatabaseARN'),
      tenantDatabaseCreateTime:
          _s.extractXmlDateTimeValue(elem, 'TenantDatabaseCreateTime'),
      tenantDatabaseResourceId:
          _s.extractXmlStringValue(elem, 'TenantDatabaseResourceId'),
    );
  }
}

/// A response element in the <code>ModifyTenantDatabase</code> operation that
/// describes changes that will be applied. Specific changes are identified by
/// subelements.
class TenantDatabasePendingModifiedValues {
  /// The master password for the tenant database.
  final String? masterUserPassword;

  /// The name of the tenant database.
  final String? tenantDBName;

  TenantDatabasePendingModifiedValues({
    this.masterUserPassword,
    this.tenantDBName,
  });
  factory TenantDatabasePendingModifiedValues.fromXml(_s.XmlElement elem) {
    return TenantDatabasePendingModifiedValues(
      masterUserPassword: _s.extractXmlStringValue(elem, 'MasterUserPassword'),
      tenantDBName: _s.extractXmlStringValue(elem, 'TenantDBName'),
    );
  }
}

class TenantDatabasesMessage {
  /// An optional pagination token provided by a previous
  /// <code>DescribeTenantDatabases</code> request. If this parameter is
  /// specified, the response includes only records beyond the marker, up to the
  /// value specified by <code>MaxRecords</code>.
  final String? marker;

  /// An array of the tenant databases requested by the
  /// <code>DescribeTenantDatabases</code> operation.
  final List<TenantDatabase>? tenantDatabases;

  TenantDatabasesMessage({
    this.marker,
    this.tenantDatabases,
  });
  factory TenantDatabasesMessage.fromXml(_s.XmlElement elem) {
    return TenantDatabasesMessage(
      marker: _s.extractXmlStringValue(elem, 'Marker'),
      tenantDatabases: _s.extractXmlChild(elem, 'TenantDatabases')?.let(
          (elem) => elem
              .findElements('TenantDatabase')
              .map(TenantDatabase.fromXml)
              .toList()),
    );
  }
}

/// A time zone associated with a <code>DBInstance</code> or a
/// <code>DBSnapshot</code>. This data type is an element in the response to the
/// <code>DescribeDBInstances</code>, the <code>DescribeDBSnapshots</code>, and
/// the <code>DescribeDBEngineVersions</code> actions.
class Timezone {
  /// The name of the time zone.
  final String? timezoneName;

  Timezone({
    this.timezoneName,
  });
  factory Timezone.fromXml(_s.XmlElement elem) {
    return Timezone(
      timezoneName: _s.extractXmlStringValue(elem, 'TimezoneName'),
    );
  }
}

/// The version of the database engine that a DB instance can be upgraded to.
class UpgradeTarget {
  /// Indicates whether the target version is applied to any source DB instances
  /// that have <code>AutoMinorVersionUpgrade</code> set to true.
  ///
  /// This parameter is dynamic, and is set by RDS.
  final bool? autoUpgrade;

  /// The version of the database engine that a DB instance can be upgraded to.
  final String? description;

  /// The name of the upgrade target database engine.
  final String? engine;

  /// The version number of the upgrade target database engine.
  final String? engineVersion;

  /// Indicates whether upgrading to the target version requires upgrading the
  /// major version of the database engine.
  final bool? isMajorVersionUpgrade;

  /// A list of the supported DB engine modes for the target engine version.
  final List<String>? supportedEngineModes;

  /// Indicates whether you can use Babelfish for Aurora PostgreSQL with the
  /// target engine version.
  final bool? supportsBabelfish;

  /// Indicates whether you can use Aurora global databases with the target engine
  /// version.
  final bool? supportsGlobalDatabases;

  /// Indicates whether the DB engine version supports zero-ETL integrations with
  /// Amazon Redshift.
  final bool? supportsIntegrations;

  /// Indicates whether the DB engine version supports Aurora Limitless Database.
  final bool? supportsLimitlessDatabase;

  /// Indicates whether the target engine version supports forwarding write
  /// operations from reader DB instances to the writer DB instance in the DB
  /// cluster. By default, write operations aren't allowed on reader DB instances.
  ///
  /// Valid for: Aurora DB clusters only
  final bool? supportsLocalWriteForwarding;

  /// Indicates whether you can use Aurora parallel query with the target engine
  /// version.
  final bool? supportsParallelQuery;

  UpgradeTarget({
    this.autoUpgrade,
    this.description,
    this.engine,
    this.engineVersion,
    this.isMajorVersionUpgrade,
    this.supportedEngineModes,
    this.supportsBabelfish,
    this.supportsGlobalDatabases,
    this.supportsIntegrations,
    this.supportsLimitlessDatabase,
    this.supportsLocalWriteForwarding,
    this.supportsParallelQuery,
  });
  factory UpgradeTarget.fromXml(_s.XmlElement elem) {
    return UpgradeTarget(
      autoUpgrade: _s.extractXmlBoolValue(elem, 'AutoUpgrade'),
      description: _s.extractXmlStringValue(elem, 'Description'),
      engine: _s.extractXmlStringValue(elem, 'Engine'),
      engineVersion: _s.extractXmlStringValue(elem, 'EngineVersion'),
      isMajorVersionUpgrade:
          _s.extractXmlBoolValue(elem, 'IsMajorVersionUpgrade'),
      supportedEngineModes: _s
          .extractXmlChild(elem, 'SupportedEngineModes')
          ?.let((elem) => _s.extractXmlStringListValues(elem, 'member')),
      supportsBabelfish: _s.extractXmlBoolValue(elem, 'SupportsBabelfish'),
      supportsGlobalDatabases:
          _s.extractXmlBoolValue(elem, 'SupportsGlobalDatabases'),
      supportsIntegrations:
          _s.extractXmlBoolValue(elem, 'SupportsIntegrations'),
      supportsLimitlessDatabase:
          _s.extractXmlBoolValue(elem, 'SupportsLimitlessDatabase'),
      supportsLocalWriteForwarding:
          _s.extractXmlBoolValue(elem, 'SupportsLocalWriteForwarding'),
      supportsParallelQuery:
          _s.extractXmlBoolValue(elem, 'SupportsParallelQuery'),
    );
  }
}

/// Specifies the details of authentication used by a proxy to log in as a
/// specific database user.
class UserAuthConfig {
  /// The type of authentication that the proxy uses for connections from the
  /// proxy to the underlying database.
  final AuthScheme? authScheme;

  /// The type of authentication the proxy uses for connections from clients.
  final ClientPasswordAuthType? clientPasswordAuthType;

  /// A user-specified description about the authentication used by a proxy to log
  /// in as a specific database user.
  final String? description;

  /// A value that indicates whether to require or disallow Amazon Web Services
  /// Identity and Access Management (IAM) authentication for connections to the
  /// proxy. The <code>ENABLED</code> value is valid only for proxies with RDS for
  /// Microsoft SQL Server.
  final IAMAuthMode? iAMAuth;

  /// The Amazon Resource Name (ARN) representing the secret that the proxy uses
  /// to authenticate to the RDS DB instance or Aurora DB cluster. These secrets
  /// are stored within Amazon Secrets Manager.
  final String? secretArn;

  /// The name of the database user to which the proxy connects.
  final String? userName;

  UserAuthConfig({
    this.authScheme,
    this.clientPasswordAuthType,
    this.description,
    this.iAMAuth,
    this.secretArn,
    this.userName,
  });

  Map<String, dynamic> toJson() {
    final authScheme = this.authScheme;
    final clientPasswordAuthType = this.clientPasswordAuthType;
    final description = this.description;
    final iAMAuth = this.iAMAuth;
    final secretArn = this.secretArn;
    final userName = this.userName;
    return {
      if (authScheme != null) 'AuthScheme': authScheme.value,
      if (clientPasswordAuthType != null)
        'ClientPasswordAuthType': clientPasswordAuthType.value,
      if (description != null) 'Description': description,
      if (iAMAuth != null) 'IAMAuth': iAMAuth.value,
      if (secretArn != null) 'SecretArn': secretArn,
      if (userName != null) 'UserName': userName,
    };
  }

  Map<String, String> toQueryMap() {
    final authScheme = this.authScheme;
    final clientPasswordAuthType = this.clientPasswordAuthType;
    final description = this.description;
    final iAMAuth = this.iAMAuth;
    final secretArn = this.secretArn;
    final userName = this.userName;
    return {
      if (authScheme != null) 'AuthScheme': authScheme.value,
      if (clientPasswordAuthType != null)
        'ClientPasswordAuthType': clientPasswordAuthType.value,
      if (description != null) 'Description': description,
      if (iAMAuth != null) 'IAMAuth': iAMAuth.value,
      if (secretArn != null) 'SecretArn': secretArn,
      if (userName != null) 'UserName': userName,
    };
  }
}

/// Returns the details of authentication used by a proxy to log in as a
/// specific database user.
class UserAuthConfigInfo {
  /// The type of authentication that the proxy uses for connections from the
  /// proxy to the underlying database.
  final AuthScheme? authScheme;

  /// The type of authentication the proxy uses for connections from clients.
  final ClientPasswordAuthType? clientPasswordAuthType;

  /// A user-specified description about the authentication used by a proxy to log
  /// in as a specific database user.
  final String? description;

  /// Whether to require or disallow Amazon Web Services Identity and Access
  /// Management (IAM) authentication for connections to the proxy. The
  /// <code>ENABLED</code> value is valid only for proxies with RDS for Microsoft
  /// SQL Server.
  final IAMAuthMode? iAMAuth;

  /// The Amazon Resource Name (ARN) representing the secret that the proxy uses
  /// to authenticate to the RDS DB instance or Aurora DB cluster. These secrets
  /// are stored within Amazon Secrets Manager.
  final String? secretArn;

  /// The name of the database user to which the proxy connects.
  final String? userName;

  UserAuthConfigInfo({
    this.authScheme,
    this.clientPasswordAuthType,
    this.description,
    this.iAMAuth,
    this.secretArn,
    this.userName,
  });
  factory UserAuthConfigInfo.fromXml(_s.XmlElement elem) {
    return UserAuthConfigInfo(
      authScheme: _s
          .extractXmlStringValue(elem, 'AuthScheme')
          ?.let(AuthScheme.fromString),
      clientPasswordAuthType: _s
          .extractXmlStringValue(elem, 'ClientPasswordAuthType')
          ?.let(ClientPasswordAuthType.fromString),
      description: _s.extractXmlStringValue(elem, 'Description'),
      iAMAuth: _s
          .extractXmlStringValue(elem, 'IAMAuth')
          ?.let(IAMAuthMode.fromString),
      secretArn: _s.extractXmlStringValue(elem, 'SecretArn'),
      userName: _s.extractXmlStringValue(elem, 'UserName'),
    );
  }
}

/// Information about valid modifications that you can make to your DB instance.
/// Contains the result of a successful call to the
/// <code>DescribeValidDBInstanceModifications</code> action. You can use this
/// information when you call <code>ModifyDBInstance</code>.
class ValidDBInstanceModificationsMessage {
  /// Valid storage options for your DB instance.
  final List<ValidStorageOptions>? storage;

  /// Indicates whether a DB instance supports using a dedicated log volume (DLV).
  final bool? supportsDedicatedLogVolume;

  /// Valid processor features for your DB instance.
  final List<AvailableProcessorFeature>? validProcessorFeatures;

  ValidDBInstanceModificationsMessage({
    this.storage,
    this.supportsDedicatedLogVolume,
    this.validProcessorFeatures,
  });
  factory ValidDBInstanceModificationsMessage.fromXml(_s.XmlElement elem) {
    return ValidDBInstanceModificationsMessage(
      storage: _s.extractXmlChild(elem, 'Storage')?.let((elem) => elem
          .findElements('ValidStorageOptions')
          .map(ValidStorageOptions.fromXml)
          .toList()),
      supportsDedicatedLogVolume:
          _s.extractXmlBoolValue(elem, 'SupportsDedicatedLogVolume'),
      validProcessorFeatures: _s
          .extractXmlChild(elem, 'ValidProcessorFeatures')
          ?.let((elem) => elem
              .findElements('AvailableProcessorFeature')
              .map(AvailableProcessorFeature.fromXml)
              .toList()),
    );
  }
}

/// Information about valid modifications that you can make to your DB instance.
/// Contains the result of a successful call to the
/// <code>DescribeValidDBInstanceModifications</code> action.
class ValidStorageOptions {
  /// The valid range of Provisioned IOPS to gibibytes of storage multiplier. For
  /// example, 3-10, which means that provisioned IOPS can be between 3 and 10
  /// times storage.
  final List<DoubleRange>? iopsToStorageRatio;

  /// The valid range of provisioned IOPS. For example, 1000-256,000.
  final List<Range>? provisionedIops;

  /// The valid range of provisioned storage throughput. For example, 500-4,000
  /// mebibytes per second (MiBps).
  final List<Range>? provisionedStorageThroughput;

  /// The valid range of storage in gibibytes (GiB). For example, 100 to 16,384.
  final List<Range>? storageSize;

  /// The valid range of storage throughput to provisioned IOPS ratios. For
  /// example, 0-0.25.
  final List<DoubleRange>? storageThroughputToIopsRatio;

  /// The valid storage types for your DB instance. For example: gp2, gp3, io1,
  /// io2.
  final String? storageType;

  /// Indicates whether or not Amazon RDS can automatically scale storage for DB
  /// instances that use the new instance class.
  final bool? supportsStorageAutoscaling;

  ValidStorageOptions({
    this.iopsToStorageRatio,
    this.provisionedIops,
    this.provisionedStorageThroughput,
    this.storageSize,
    this.storageThroughputToIopsRatio,
    this.storageType,
    this.supportsStorageAutoscaling,
  });
  factory ValidStorageOptions.fromXml(_s.XmlElement elem) {
    return ValidStorageOptions(
      iopsToStorageRatio: _s.extractXmlChild(elem, 'IopsToStorageRatio')?.let(
          (elem) => elem
              .findElements('DoubleRange')
              .map(DoubleRange.fromXml)
              .toList()),
      provisionedIops: _s.extractXmlChild(elem, 'ProvisionedIops')?.let(
          (elem) => elem.findElements('Range').map(Range.fromXml).toList()),
      provisionedStorageThroughput: _s
          .extractXmlChild(elem, 'ProvisionedStorageThroughput')
          ?.let(
              (elem) => elem.findElements('Range').map(Range.fromXml).toList()),
      storageSize: _s.extractXmlChild(elem, 'StorageSize')?.let(
          (elem) => elem.findElements('Range').map(Range.fromXml).toList()),
      storageThroughputToIopsRatio: _s
          .extractXmlChild(elem, 'StorageThroughputToIopsRatio')
          ?.let((elem) => elem
              .findElements('DoubleRange')
              .map(DoubleRange.fromXml)
              .toList()),
      storageType: _s.extractXmlStringValue(elem, 'StorageType'),
      supportsStorageAutoscaling:
          _s.extractXmlBoolValue(elem, 'SupportsStorageAutoscaling'),
    );
  }
}

/// This data type is used as a response element for queries on VPC security
/// group membership.
class VpcSecurityGroupMembership {
  /// The membership status of the VPC security group.
  ///
  /// Currently, the only valid status is <code>active</code>.
  final String? status;

  /// The name of the VPC security group.
  final String? vpcSecurityGroupId;

  VpcSecurityGroupMembership({
    this.status,
    this.vpcSecurityGroupId,
  });
  factory VpcSecurityGroupMembership.fromXml(_s.XmlElement elem) {
    return VpcSecurityGroupMembership(
      status: _s.extractXmlStringValue(elem, 'Status'),
      vpcSecurityGroupId: _s.extractXmlStringValue(elem, 'VpcSecurityGroupId'),
    );
  }
}

enum WriteForwardingStatus {
  enabled('enabled'),
  disabled('disabled'),
  enabling('enabling'),
  disabling('disabling'),
  unknown('unknown'),
  ;

  final String value;

  const WriteForwardingStatus(this.value);

  static WriteForwardingStatus fromString(String value) => values.firstWhere(
      (e) => e.value == value,
      orElse: () =>
          throw Exception('$value is not known in enum WriteForwardingStatus'));
}

class AuthorizationAlreadyExistsFault extends _s.GenericAwsException {
  AuthorizationAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'AuthorizationAlreadyExistsFault',
            message: message);
}

class AuthorizationNotFoundFault extends _s.GenericAwsException {
  AuthorizationNotFoundFault({String? type, String? message})
      : super(type: type, code: 'AuthorizationNotFoundFault', message: message);
}

class AuthorizationQuotaExceededFault extends _s.GenericAwsException {
  AuthorizationQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'AuthorizationQuotaExceededFault',
            message: message);
}

class BackupPolicyNotFoundFault extends _s.GenericAwsException {
  BackupPolicyNotFoundFault({String? type, String? message})
      : super(type: type, code: 'BackupPolicyNotFoundFault', message: message);
}

class BlueGreenDeploymentAlreadyExistsFault extends _s.GenericAwsException {
  BlueGreenDeploymentAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'BlueGreenDeploymentAlreadyExistsFault',
            message: message);
}

class BlueGreenDeploymentNotFoundFault extends _s.GenericAwsException {
  BlueGreenDeploymentNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'BlueGreenDeploymentNotFoundFault',
            message: message);
}

class CertificateNotFoundFault extends _s.GenericAwsException {
  CertificateNotFoundFault({String? type, String? message})
      : super(type: type, code: 'CertificateNotFoundFault', message: message);
}

class CreateCustomDBEngineVersionFault extends _s.GenericAwsException {
  CreateCustomDBEngineVersionFault({String? type, String? message})
      : super(
            type: type,
            code: 'CreateCustomDBEngineVersionFault',
            message: message);
}

class CustomAvailabilityZoneNotFoundFault extends _s.GenericAwsException {
  CustomAvailabilityZoneNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'CustomAvailabilityZoneNotFoundFault',
            message: message);
}

class CustomDBEngineVersionAlreadyExistsFault extends _s.GenericAwsException {
  CustomDBEngineVersionAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'CustomDBEngineVersionAlreadyExistsFault',
            message: message);
}

class CustomDBEngineVersionNotFoundFault extends _s.GenericAwsException {
  CustomDBEngineVersionNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'CustomDBEngineVersionNotFoundFault',
            message: message);
}

class CustomDBEngineVersionQuotaExceededFault extends _s.GenericAwsException {
  CustomDBEngineVersionQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'CustomDBEngineVersionQuotaExceededFault',
            message: message);
}

class DBClusterAlreadyExistsFault extends _s.GenericAwsException {
  DBClusterAlreadyExistsFault({String? type, String? message})
      : super(
            type: type, code: 'DBClusterAlreadyExistsFault', message: message);
}

class DBClusterAutomatedBackupNotFoundFault extends _s.GenericAwsException {
  DBClusterAutomatedBackupNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterAutomatedBackupNotFoundFault',
            message: message);
}

class DBClusterAutomatedBackupQuotaExceededFault
    extends _s.GenericAwsException {
  DBClusterAutomatedBackupQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterAutomatedBackupQuotaExceededFault',
            message: message);
}

class DBClusterBacktrackNotFoundFault extends _s.GenericAwsException {
  DBClusterBacktrackNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterBacktrackNotFoundFault',
            message: message);
}

class DBClusterEndpointAlreadyExistsFault extends _s.GenericAwsException {
  DBClusterEndpointAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterEndpointAlreadyExistsFault',
            message: message);
}

class DBClusterEndpointNotFoundFault extends _s.GenericAwsException {
  DBClusterEndpointNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterEndpointNotFoundFault',
            message: message);
}

class DBClusterEndpointQuotaExceededFault extends _s.GenericAwsException {
  DBClusterEndpointQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterEndpointQuotaExceededFault',
            message: message);
}

class DBClusterNotFoundFault extends _s.GenericAwsException {
  DBClusterNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DBClusterNotFoundFault', message: message);
}

class DBClusterParameterGroupNotFoundFault extends _s.GenericAwsException {
  DBClusterParameterGroupNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterParameterGroupNotFoundFault',
            message: message);
}

class DBClusterQuotaExceededFault extends _s.GenericAwsException {
  DBClusterQuotaExceededFault({String? type, String? message})
      : super(
            type: type, code: 'DBClusterQuotaExceededFault', message: message);
}

class DBClusterRoleAlreadyExistsFault extends _s.GenericAwsException {
  DBClusterRoleAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterRoleAlreadyExistsFault',
            message: message);
}

class DBClusterRoleNotFoundFault extends _s.GenericAwsException {
  DBClusterRoleNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DBClusterRoleNotFoundFault', message: message);
}

class DBClusterRoleQuotaExceededFault extends _s.GenericAwsException {
  DBClusterRoleQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterRoleQuotaExceededFault',
            message: message);
}

class DBClusterSnapshotAlreadyExistsFault extends _s.GenericAwsException {
  DBClusterSnapshotAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterSnapshotAlreadyExistsFault',
            message: message);
}

class DBClusterSnapshotNotFoundFault extends _s.GenericAwsException {
  DBClusterSnapshotNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBClusterSnapshotNotFoundFault',
            message: message);
}

class DBInstanceAlreadyExistsFault extends _s.GenericAwsException {
  DBInstanceAlreadyExistsFault({String? type, String? message})
      : super(
            type: type, code: 'DBInstanceAlreadyExistsFault', message: message);
}

class DBInstanceAutomatedBackupNotFoundFault extends _s.GenericAwsException {
  DBInstanceAutomatedBackupNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBInstanceAutomatedBackupNotFoundFault',
            message: message);
}

class DBInstanceAutomatedBackupQuotaExceededFault
    extends _s.GenericAwsException {
  DBInstanceAutomatedBackupQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBInstanceAutomatedBackupQuotaExceededFault',
            message: message);
}

class DBInstanceNotFoundFault extends _s.GenericAwsException {
  DBInstanceNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DBInstanceNotFoundFault', message: message);
}

class DBInstanceRoleAlreadyExistsFault extends _s.GenericAwsException {
  DBInstanceRoleAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBInstanceRoleAlreadyExistsFault',
            message: message);
}

class DBInstanceRoleNotFoundFault extends _s.GenericAwsException {
  DBInstanceRoleNotFoundFault({String? type, String? message})
      : super(
            type: type, code: 'DBInstanceRoleNotFoundFault', message: message);
}

class DBInstanceRoleQuotaExceededFault extends _s.GenericAwsException {
  DBInstanceRoleQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBInstanceRoleQuotaExceededFault',
            message: message);
}

class DBLogFileNotFoundFault extends _s.GenericAwsException {
  DBLogFileNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DBLogFileNotFoundFault', message: message);
}

class DBParameterGroupAlreadyExistsFault extends _s.GenericAwsException {
  DBParameterGroupAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBParameterGroupAlreadyExistsFault',
            message: message);
}

class DBParameterGroupNotFoundFault extends _s.GenericAwsException {
  DBParameterGroupNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBParameterGroupNotFoundFault',
            message: message);
}

class DBParameterGroupQuotaExceededFault extends _s.GenericAwsException {
  DBParameterGroupQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBParameterGroupQuotaExceededFault',
            message: message);
}

class DBProxyAlreadyExistsFault extends _s.GenericAwsException {
  DBProxyAlreadyExistsFault({String? type, String? message})
      : super(type: type, code: 'DBProxyAlreadyExistsFault', message: message);
}

class DBProxyEndpointAlreadyExistsFault extends _s.GenericAwsException {
  DBProxyEndpointAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBProxyEndpointAlreadyExistsFault',
            message: message);
}

class DBProxyEndpointNotFoundFault extends _s.GenericAwsException {
  DBProxyEndpointNotFoundFault({String? type, String? message})
      : super(
            type: type, code: 'DBProxyEndpointNotFoundFault', message: message);
}

class DBProxyEndpointQuotaExceededFault extends _s.GenericAwsException {
  DBProxyEndpointQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBProxyEndpointQuotaExceededFault',
            message: message);
}

class DBProxyNotFoundFault extends _s.GenericAwsException {
  DBProxyNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DBProxyNotFoundFault', message: message);
}

class DBProxyQuotaExceededFault extends _s.GenericAwsException {
  DBProxyQuotaExceededFault({String? type, String? message})
      : super(type: type, code: 'DBProxyQuotaExceededFault', message: message);
}

class DBProxyTargetAlreadyRegisteredFault extends _s.GenericAwsException {
  DBProxyTargetAlreadyRegisteredFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBProxyTargetAlreadyRegisteredFault',
            message: message);
}

class DBProxyTargetGroupNotFoundFault extends _s.GenericAwsException {
  DBProxyTargetGroupNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBProxyTargetGroupNotFoundFault',
            message: message);
}

class DBProxyTargetNotFoundFault extends _s.GenericAwsException {
  DBProxyTargetNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DBProxyTargetNotFoundFault', message: message);
}

class DBSecurityGroupAlreadyExistsFault extends _s.GenericAwsException {
  DBSecurityGroupAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBSecurityGroupAlreadyExistsFault',
            message: message);
}

class DBSecurityGroupNotFoundFault extends _s.GenericAwsException {
  DBSecurityGroupNotFoundFault({String? type, String? message})
      : super(
            type: type, code: 'DBSecurityGroupNotFoundFault', message: message);
}

class DBSecurityGroupNotSupportedFault extends _s.GenericAwsException {
  DBSecurityGroupNotSupportedFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBSecurityGroupNotSupportedFault',
            message: message);
}

class DBSecurityGroupQuotaExceededFault extends _s.GenericAwsException {
  DBSecurityGroupQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBSecurityGroupQuotaExceededFault',
            message: message);
}

class DBShardGroupAlreadyExistsFault extends _s.GenericAwsException {
  DBShardGroupAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBShardGroupAlreadyExistsFault',
            message: message);
}

class DBShardGroupNotFoundFault extends _s.GenericAwsException {
  DBShardGroupNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DBShardGroupNotFoundFault', message: message);
}

class DBSnapshotAlreadyExistsFault extends _s.GenericAwsException {
  DBSnapshotAlreadyExistsFault({String? type, String? message})
      : super(
            type: type, code: 'DBSnapshotAlreadyExistsFault', message: message);
}

class DBSnapshotNotFoundFault extends _s.GenericAwsException {
  DBSnapshotNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DBSnapshotNotFoundFault', message: message);
}

class DBSnapshotTenantDatabaseNotFoundFault extends _s.GenericAwsException {
  DBSnapshotTenantDatabaseNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBSnapshotTenantDatabaseNotFoundFault',
            message: message);
}

class DBSubnetGroupAlreadyExistsFault extends _s.GenericAwsException {
  DBSubnetGroupAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBSubnetGroupAlreadyExistsFault',
            message: message);
}

class DBSubnetGroupDoesNotCoverEnoughAZs extends _s.GenericAwsException {
  DBSubnetGroupDoesNotCoverEnoughAZs({String? type, String? message})
      : super(
            type: type,
            code: 'DBSubnetGroupDoesNotCoverEnoughAZs',
            message: message);
}

class DBSubnetGroupNotAllowedFault extends _s.GenericAwsException {
  DBSubnetGroupNotAllowedFault({String? type, String? message})
      : super(
            type: type, code: 'DBSubnetGroupNotAllowedFault', message: message);
}

class DBSubnetGroupNotFoundFault extends _s.GenericAwsException {
  DBSubnetGroupNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DBSubnetGroupNotFoundFault', message: message);
}

class DBSubnetGroupQuotaExceededFault extends _s.GenericAwsException {
  DBSubnetGroupQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBSubnetGroupQuotaExceededFault',
            message: message);
}

class DBSubnetQuotaExceededFault extends _s.GenericAwsException {
  DBSubnetQuotaExceededFault({String? type, String? message})
      : super(type: type, code: 'DBSubnetQuotaExceededFault', message: message);
}

class DBUpgradeDependencyFailureFault extends _s.GenericAwsException {
  DBUpgradeDependencyFailureFault({String? type, String? message})
      : super(
            type: type,
            code: 'DBUpgradeDependencyFailureFault',
            message: message);
}

class DomainNotFoundFault extends _s.GenericAwsException {
  DomainNotFoundFault({String? type, String? message})
      : super(type: type, code: 'DomainNotFoundFault', message: message);
}

class Ec2ImagePropertiesNotSupportedFault extends _s.GenericAwsException {
  Ec2ImagePropertiesNotSupportedFault({String? type, String? message})
      : super(
            type: type,
            code: 'Ec2ImagePropertiesNotSupportedFault',
            message: message);
}

class EventSubscriptionQuotaExceededFault extends _s.GenericAwsException {
  EventSubscriptionQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'EventSubscriptionQuotaExceededFault',
            message: message);
}

class ExportTaskAlreadyExistsFault extends _s.GenericAwsException {
  ExportTaskAlreadyExistsFault({String? type, String? message})
      : super(
            type: type, code: 'ExportTaskAlreadyExistsFault', message: message);
}

class ExportTaskNotFoundFault extends _s.GenericAwsException {
  ExportTaskNotFoundFault({String? type, String? message})
      : super(type: type, code: 'ExportTaskNotFoundFault', message: message);
}

class GlobalClusterAlreadyExistsFault extends _s.GenericAwsException {
  GlobalClusterAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'GlobalClusterAlreadyExistsFault',
            message: message);
}

class GlobalClusterNotFoundFault extends _s.GenericAwsException {
  GlobalClusterNotFoundFault({String? type, String? message})
      : super(type: type, code: 'GlobalClusterNotFoundFault', message: message);
}

class GlobalClusterQuotaExceededFault extends _s.GenericAwsException {
  GlobalClusterQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'GlobalClusterQuotaExceededFault',
            message: message);
}

class IamRoleMissingPermissionsFault extends _s.GenericAwsException {
  IamRoleMissingPermissionsFault({String? type, String? message})
      : super(
            type: type,
            code: 'IamRoleMissingPermissionsFault',
            message: message);
}

class IamRoleNotFoundFault extends _s.GenericAwsException {
  IamRoleNotFoundFault({String? type, String? message})
      : super(type: type, code: 'IamRoleNotFoundFault', message: message);
}

class InstanceQuotaExceededFault extends _s.GenericAwsException {
  InstanceQuotaExceededFault({String? type, String? message})
      : super(type: type, code: 'InstanceQuotaExceededFault', message: message);
}

class InsufficientAvailableIPsInSubnetFault extends _s.GenericAwsException {
  InsufficientAvailableIPsInSubnetFault({String? type, String? message})
      : super(
            type: type,
            code: 'InsufficientAvailableIPsInSubnetFault',
            message: message);
}

class InsufficientDBClusterCapacityFault extends _s.GenericAwsException {
  InsufficientDBClusterCapacityFault({String? type, String? message})
      : super(
            type: type,
            code: 'InsufficientDBClusterCapacityFault',
            message: message);
}

class InsufficientDBInstanceCapacityFault extends _s.GenericAwsException {
  InsufficientDBInstanceCapacityFault({String? type, String? message})
      : super(
            type: type,
            code: 'InsufficientDBInstanceCapacityFault',
            message: message);
}

class InsufficientStorageClusterCapacityFault extends _s.GenericAwsException {
  InsufficientStorageClusterCapacityFault({String? type, String? message})
      : super(
            type: type,
            code: 'InsufficientStorageClusterCapacityFault',
            message: message);
}

class IntegrationAlreadyExistsFault extends _s.GenericAwsException {
  IntegrationAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'IntegrationAlreadyExistsFault',
            message: message);
}

class IntegrationConflictOperationFault extends _s.GenericAwsException {
  IntegrationConflictOperationFault({String? type, String? message})
      : super(
            type: type,
            code: 'IntegrationConflictOperationFault',
            message: message);
}

class IntegrationNotFoundFault extends _s.GenericAwsException {
  IntegrationNotFoundFault({String? type, String? message})
      : super(type: type, code: 'IntegrationNotFoundFault', message: message);
}

class IntegrationQuotaExceededFault extends _s.GenericAwsException {
  IntegrationQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'IntegrationQuotaExceededFault',
            message: message);
}

class InvalidBlueGreenDeploymentStateFault extends _s.GenericAwsException {
  InvalidBlueGreenDeploymentStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidBlueGreenDeploymentStateFault',
            message: message);
}

class InvalidCustomDBEngineVersionStateFault extends _s.GenericAwsException {
  InvalidCustomDBEngineVersionStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidCustomDBEngineVersionStateFault',
            message: message);
}

class InvalidDBClusterAutomatedBackupStateFault extends _s.GenericAwsException {
  InvalidDBClusterAutomatedBackupStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBClusterAutomatedBackupStateFault',
            message: message);
}

class InvalidDBClusterCapacityFault extends _s.GenericAwsException {
  InvalidDBClusterCapacityFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBClusterCapacityFault',
            message: message);
}

class InvalidDBClusterEndpointStateFault extends _s.GenericAwsException {
  InvalidDBClusterEndpointStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBClusterEndpointStateFault',
            message: message);
}

class InvalidDBClusterSnapshotStateFault extends _s.GenericAwsException {
  InvalidDBClusterSnapshotStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBClusterSnapshotStateFault',
            message: message);
}

class InvalidDBClusterStateFault extends _s.GenericAwsException {
  InvalidDBClusterStateFault({String? type, String? message})
      : super(type: type, code: 'InvalidDBClusterStateFault', message: message);
}

class InvalidDBInstanceAutomatedBackupStateFault
    extends _s.GenericAwsException {
  InvalidDBInstanceAutomatedBackupStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBInstanceAutomatedBackupStateFault',
            message: message);
}

class InvalidDBInstanceStateFault extends _s.GenericAwsException {
  InvalidDBInstanceStateFault({String? type, String? message})
      : super(
            type: type, code: 'InvalidDBInstanceStateFault', message: message);
}

class InvalidDBParameterGroupStateFault extends _s.GenericAwsException {
  InvalidDBParameterGroupStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBParameterGroupStateFault',
            message: message);
}

class InvalidDBProxyEndpointStateFault extends _s.GenericAwsException {
  InvalidDBProxyEndpointStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBProxyEndpointStateFault',
            message: message);
}

class InvalidDBProxyStateFault extends _s.GenericAwsException {
  InvalidDBProxyStateFault({String? type, String? message})
      : super(type: type, code: 'InvalidDBProxyStateFault', message: message);
}

class InvalidDBSecurityGroupStateFault extends _s.GenericAwsException {
  InvalidDBSecurityGroupStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBSecurityGroupStateFault',
            message: message);
}

class InvalidDBShardGroupStateFault extends _s.GenericAwsException {
  InvalidDBShardGroupStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBShardGroupStateFault',
            message: message);
}

class InvalidDBSnapshotStateFault extends _s.GenericAwsException {
  InvalidDBSnapshotStateFault({String? type, String? message})
      : super(
            type: type, code: 'InvalidDBSnapshotStateFault', message: message);
}

class InvalidDBSubnetGroupFault extends _s.GenericAwsException {
  InvalidDBSubnetGroupFault({String? type, String? message})
      : super(type: type, code: 'InvalidDBSubnetGroupFault', message: message);
}

class InvalidDBSubnetGroupStateFault extends _s.GenericAwsException {
  InvalidDBSubnetGroupStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidDBSubnetGroupStateFault',
            message: message);
}

class InvalidDBSubnetStateFault extends _s.GenericAwsException {
  InvalidDBSubnetStateFault({String? type, String? message})
      : super(type: type, code: 'InvalidDBSubnetStateFault', message: message);
}

class InvalidEventSubscriptionStateFault extends _s.GenericAwsException {
  InvalidEventSubscriptionStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidEventSubscriptionStateFault',
            message: message);
}

class InvalidExportOnlyFault extends _s.GenericAwsException {
  InvalidExportOnlyFault({String? type, String? message})
      : super(type: type, code: 'InvalidExportOnlyFault', message: message);
}

class InvalidExportSourceStateFault extends _s.GenericAwsException {
  InvalidExportSourceStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidExportSourceStateFault',
            message: message);
}

class InvalidExportTaskStateFault extends _s.GenericAwsException {
  InvalidExportTaskStateFault({String? type, String? message})
      : super(
            type: type, code: 'InvalidExportTaskStateFault', message: message);
}

class InvalidGlobalClusterStateFault extends _s.GenericAwsException {
  InvalidGlobalClusterStateFault({String? type, String? message})
      : super(
            type: type,
            code: 'InvalidGlobalClusterStateFault',
            message: message);
}

class InvalidIntegrationStateFault extends _s.GenericAwsException {
  InvalidIntegrationStateFault({String? type, String? message})
      : super(
            type: type, code: 'InvalidIntegrationStateFault', message: message);
}

class InvalidMaxAcuFault extends _s.GenericAwsException {
  InvalidMaxAcuFault({String? type, String? message})
      : super(type: type, code: 'InvalidMaxAcuFault', message: message);
}

class InvalidOptionGroupStateFault extends _s.GenericAwsException {
  InvalidOptionGroupStateFault({String? type, String? message})
      : super(
            type: type, code: 'InvalidOptionGroupStateFault', message: message);
}

class InvalidResourceStateFault extends _s.GenericAwsException {
  InvalidResourceStateFault({String? type, String? message})
      : super(type: type, code: 'InvalidResourceStateFault', message: message);
}

class InvalidRestoreFault extends _s.GenericAwsException {
  InvalidRestoreFault({String? type, String? message})
      : super(type: type, code: 'InvalidRestoreFault', message: message);
}

class InvalidS3BucketFault extends _s.GenericAwsException {
  InvalidS3BucketFault({String? type, String? message})
      : super(type: type, code: 'InvalidS3BucketFault', message: message);
}

class InvalidSubnet extends _s.GenericAwsException {
  InvalidSubnet({String? type, String? message})
      : super(type: type, code: 'InvalidSubnet', message: message);
}

class InvalidVPCNetworkStateFault extends _s.GenericAwsException {
  InvalidVPCNetworkStateFault({String? type, String? message})
      : super(
            type: type, code: 'InvalidVPCNetworkStateFault', message: message);
}

class KMSKeyNotAccessibleFault extends _s.GenericAwsException {
  KMSKeyNotAccessibleFault({String? type, String? message})
      : super(type: type, code: 'KMSKeyNotAccessibleFault', message: message);
}

class MaxDBShardGroupLimitReached extends _s.GenericAwsException {
  MaxDBShardGroupLimitReached({String? type, String? message})
      : super(
            type: type, code: 'MaxDBShardGroupLimitReached', message: message);
}

class NetworkTypeNotSupported extends _s.GenericAwsException {
  NetworkTypeNotSupported({String? type, String? message})
      : super(type: type, code: 'NetworkTypeNotSupported', message: message);
}

class OptionGroupAlreadyExistsFault extends _s.GenericAwsException {
  OptionGroupAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'OptionGroupAlreadyExistsFault',
            message: message);
}

class OptionGroupNotFoundFault extends _s.GenericAwsException {
  OptionGroupNotFoundFault({String? type, String? message})
      : super(type: type, code: 'OptionGroupNotFoundFault', message: message);
}

class OptionGroupQuotaExceededFault extends _s.GenericAwsException {
  OptionGroupQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'OptionGroupQuotaExceededFault',
            message: message);
}

class PointInTimeRestoreNotEnabledFault extends _s.GenericAwsException {
  PointInTimeRestoreNotEnabledFault({String? type, String? message})
      : super(
            type: type,
            code: 'PointInTimeRestoreNotEnabledFault',
            message: message);
}

class ProvisionedIopsNotAvailableInAZFault extends _s.GenericAwsException {
  ProvisionedIopsNotAvailableInAZFault({String? type, String? message})
      : super(
            type: type,
            code: 'ProvisionedIopsNotAvailableInAZFault',
            message: message);
}

class ReservedDBInstanceAlreadyExistsFault extends _s.GenericAwsException {
  ReservedDBInstanceAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'ReservedDBInstanceAlreadyExistsFault',
            message: message);
}

class ReservedDBInstanceNotFoundFault extends _s.GenericAwsException {
  ReservedDBInstanceNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'ReservedDBInstanceNotFoundFault',
            message: message);
}

class ReservedDBInstanceQuotaExceededFault extends _s.GenericAwsException {
  ReservedDBInstanceQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'ReservedDBInstanceQuotaExceededFault',
            message: message);
}

class ReservedDBInstancesOfferingNotFoundFault extends _s.GenericAwsException {
  ReservedDBInstancesOfferingNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'ReservedDBInstancesOfferingNotFoundFault',
            message: message);
}

class ResourceNotFoundFault extends _s.GenericAwsException {
  ResourceNotFoundFault({String? type, String? message})
      : super(type: type, code: 'ResourceNotFoundFault', message: message);
}

class SNSInvalidTopicFault extends _s.GenericAwsException {
  SNSInvalidTopicFault({String? type, String? message})
      : super(type: type, code: 'SNSInvalidTopicFault', message: message);
}

class SNSNoAuthorizationFault extends _s.GenericAwsException {
  SNSNoAuthorizationFault({String? type, String? message})
      : super(type: type, code: 'SNSNoAuthorizationFault', message: message);
}

class SNSTopicArnNotFoundFault extends _s.GenericAwsException {
  SNSTopicArnNotFoundFault({String? type, String? message})
      : super(type: type, code: 'SNSTopicArnNotFoundFault', message: message);
}

class SharedSnapshotQuotaExceededFault extends _s.GenericAwsException {
  SharedSnapshotQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'SharedSnapshotQuotaExceededFault',
            message: message);
}

class SnapshotQuotaExceededFault extends _s.GenericAwsException {
  SnapshotQuotaExceededFault({String? type, String? message})
      : super(type: type, code: 'SnapshotQuotaExceededFault', message: message);
}

class SourceClusterNotSupportedFault extends _s.GenericAwsException {
  SourceClusterNotSupportedFault({String? type, String? message})
      : super(
            type: type,
            code: 'SourceClusterNotSupportedFault',
            message: message);
}

class SourceDatabaseNotSupportedFault extends _s.GenericAwsException {
  SourceDatabaseNotSupportedFault({String? type, String? message})
      : super(
            type: type,
            code: 'SourceDatabaseNotSupportedFault',
            message: message);
}

class SourceNotFoundFault extends _s.GenericAwsException {
  SourceNotFoundFault({String? type, String? message})
      : super(type: type, code: 'SourceNotFoundFault', message: message);
}

class StorageQuotaExceededFault extends _s.GenericAwsException {
  StorageQuotaExceededFault({String? type, String? message})
      : super(type: type, code: 'StorageQuotaExceededFault', message: message);
}

class StorageTypeNotAvailableFault extends _s.GenericAwsException {
  StorageTypeNotAvailableFault({String? type, String? message})
      : super(
            type: type, code: 'StorageTypeNotAvailableFault', message: message);
}

class StorageTypeNotSupportedFault extends _s.GenericAwsException {
  StorageTypeNotSupportedFault({String? type, String? message})
      : super(
            type: type, code: 'StorageTypeNotSupportedFault', message: message);
}

class SubnetAlreadyInUse extends _s.GenericAwsException {
  SubnetAlreadyInUse({String? type, String? message})
      : super(type: type, code: 'SubnetAlreadyInUse', message: message);
}

class SubscriptionAlreadyExistFault extends _s.GenericAwsException {
  SubscriptionAlreadyExistFault({String? type, String? message})
      : super(
            type: type,
            code: 'SubscriptionAlreadyExistFault',
            message: message);
}

class SubscriptionCategoryNotFoundFault extends _s.GenericAwsException {
  SubscriptionCategoryNotFoundFault({String? type, String? message})
      : super(
            type: type,
            code: 'SubscriptionCategoryNotFoundFault',
            message: message);
}

class SubscriptionNotFoundFault extends _s.GenericAwsException {
  SubscriptionNotFoundFault({String? type, String? message})
      : super(type: type, code: 'SubscriptionNotFoundFault', message: message);
}

class TenantDatabaseAlreadyExistsFault extends _s.GenericAwsException {
  TenantDatabaseAlreadyExistsFault({String? type, String? message})
      : super(
            type: type,
            code: 'TenantDatabaseAlreadyExistsFault',
            message: message);
}

class TenantDatabaseNotFoundFault extends _s.GenericAwsException {
  TenantDatabaseNotFoundFault({String? type, String? message})
      : super(
            type: type, code: 'TenantDatabaseNotFoundFault', message: message);
}

class TenantDatabaseQuotaExceededFault extends _s.GenericAwsException {
  TenantDatabaseQuotaExceededFault({String? type, String? message})
      : super(
            type: type,
            code: 'TenantDatabaseQuotaExceededFault',
            message: message);
}

class UnsupportedDBEngineVersionFault extends _s.GenericAwsException {
  UnsupportedDBEngineVersionFault({String? type, String? message})
      : super(
            type: type,
            code: 'UnsupportedDBEngineVersionFault',
            message: message);
}

final _exceptionFns = <String, _s.AwsExceptionFn>{
  'AuthorizationAlreadyExistsFault': (type, message) =>
      AuthorizationAlreadyExistsFault(type: type, message: message),
  'AuthorizationNotFoundFault': (type, message) =>
      AuthorizationNotFoundFault(type: type, message: message),
  'AuthorizationQuotaExceededFault': (type, message) =>
      AuthorizationQuotaExceededFault(type: type, message: message),
  'BackupPolicyNotFoundFault': (type, message) =>
      BackupPolicyNotFoundFault(type: type, message: message),
  'BlueGreenDeploymentAlreadyExistsFault': (type, message) =>
      BlueGreenDeploymentAlreadyExistsFault(type: type, message: message),
  'BlueGreenDeploymentNotFoundFault': (type, message) =>
      BlueGreenDeploymentNotFoundFault(type: type, message: message),
  'CertificateNotFoundFault': (type, message) =>
      CertificateNotFoundFault(type: type, message: message),
  'CreateCustomDBEngineVersionFault': (type, message) =>
      CreateCustomDBEngineVersionFault(type: type, message: message),
  'CustomAvailabilityZoneNotFoundFault': (type, message) =>
      CustomAvailabilityZoneNotFoundFault(type: type, message: message),
  'CustomDBEngineVersionAlreadyExistsFault': (type, message) =>
      CustomDBEngineVersionAlreadyExistsFault(type: type, message: message),
  'CustomDBEngineVersionNotFoundFault': (type, message) =>
      CustomDBEngineVersionNotFoundFault(type: type, message: message),
  'CustomDBEngineVersionQuotaExceededFault': (type, message) =>
      CustomDBEngineVersionQuotaExceededFault(type: type, message: message),
  'DBClusterAlreadyExistsFault': (type, message) =>
      DBClusterAlreadyExistsFault(type: type, message: message),
  'DBClusterAutomatedBackupNotFoundFault': (type, message) =>
      DBClusterAutomatedBackupNotFoundFault(type: type, message: message),
  'DBClusterAutomatedBackupQuotaExceededFault': (type, message) =>
      DBClusterAutomatedBackupQuotaExceededFault(type: type, message: message),
  'DBClusterBacktrackNotFoundFault': (type, message) =>
      DBClusterBacktrackNotFoundFault(type: type, message: message),
  'DBClusterEndpointAlreadyExistsFault': (type, message) =>
      DBClusterEndpointAlreadyExistsFault(type: type, message: message),
  'DBClusterEndpointNotFoundFault': (type, message) =>
      DBClusterEndpointNotFoundFault(type: type, message: message),
  'DBClusterEndpointQuotaExceededFault': (type, message) =>
      DBClusterEndpointQuotaExceededFault(type: type, message: message),
  'DBClusterNotFoundFault': (type, message) =>
      DBClusterNotFoundFault(type: type, message: message),
  'DBClusterParameterGroupNotFoundFault': (type, message) =>
      DBClusterParameterGroupNotFoundFault(type: type, message: message),
  'DBClusterQuotaExceededFault': (type, message) =>
      DBClusterQuotaExceededFault(type: type, message: message),
  'DBClusterRoleAlreadyExistsFault': (type, message) =>
      DBClusterRoleAlreadyExistsFault(type: type, message: message),
  'DBClusterRoleNotFoundFault': (type, message) =>
      DBClusterRoleNotFoundFault(type: type, message: message),
  'DBClusterRoleQuotaExceededFault': (type, message) =>
      DBClusterRoleQuotaExceededFault(type: type, message: message),
  'DBClusterSnapshotAlreadyExistsFault': (type, message) =>
      DBClusterSnapshotAlreadyExistsFault(type: type, message: message),
  'DBClusterSnapshotNotFoundFault': (type, message) =>
      DBClusterSnapshotNotFoundFault(type: type, message: message),
  'DBInstanceAlreadyExistsFault': (type, message) =>
      DBInstanceAlreadyExistsFault(type: type, message: message),
  'DBInstanceAutomatedBackupNotFoundFault': (type, message) =>
      DBInstanceAutomatedBackupNotFoundFault(type: type, message: message),
  'DBInstanceAutomatedBackupQuotaExceededFault': (type, message) =>
      DBInstanceAutomatedBackupQuotaExceededFault(type: type, message: message),
  'DBInstanceNotFoundFault': (type, message) =>
      DBInstanceNotFoundFault(type: type, message: message),
  'DBInstanceRoleAlreadyExistsFault': (type, message) =>
      DBInstanceRoleAlreadyExistsFault(type: type, message: message),
  'DBInstanceRoleNotFoundFault': (type, message) =>
      DBInstanceRoleNotFoundFault(type: type, message: message),
  'DBInstanceRoleQuotaExceededFault': (type, message) =>
      DBInstanceRoleQuotaExceededFault(type: type, message: message),
  'DBLogFileNotFoundFault': (type, message) =>
      DBLogFileNotFoundFault(type: type, message: message),
  'DBParameterGroupAlreadyExistsFault': (type, message) =>
      DBParameterGroupAlreadyExistsFault(type: type, message: message),
  'DBParameterGroupNotFoundFault': (type, message) =>
      DBParameterGroupNotFoundFault(type: type, message: message),
  'DBParameterGroupQuotaExceededFault': (type, message) =>
      DBParameterGroupQuotaExceededFault(type: type, message: message),
  'DBProxyAlreadyExistsFault': (type, message) =>
      DBProxyAlreadyExistsFault(type: type, message: message),
  'DBProxyEndpointAlreadyExistsFault': (type, message) =>
      DBProxyEndpointAlreadyExistsFault(type: type, message: message),
  'DBProxyEndpointNotFoundFault': (type, message) =>
      DBProxyEndpointNotFoundFault(type: type, message: message),
  'DBProxyEndpointQuotaExceededFault': (type, message) =>
      DBProxyEndpointQuotaExceededFault(type: type, message: message),
  'DBProxyNotFoundFault': (type, message) =>
      DBProxyNotFoundFault(type: type, message: message),
  'DBProxyQuotaExceededFault': (type, message) =>
      DBProxyQuotaExceededFault(type: type, message: message),
  'DBProxyTargetAlreadyRegisteredFault': (type, message) =>
      DBProxyTargetAlreadyRegisteredFault(type: type, message: message),
  'DBProxyTargetGroupNotFoundFault': (type, message) =>
      DBProxyTargetGroupNotFoundFault(type: type, message: message),
  'DBProxyTargetNotFoundFault': (type, message) =>
      DBProxyTargetNotFoundFault(type: type, message: message),
  'DBSecurityGroupAlreadyExistsFault': (type, message) =>
      DBSecurityGroupAlreadyExistsFault(type: type, message: message),
  'DBSecurityGroupNotFoundFault': (type, message) =>
      DBSecurityGroupNotFoundFault(type: type, message: message),
  'DBSecurityGroupNotSupportedFault': (type, message) =>
      DBSecurityGroupNotSupportedFault(type: type, message: message),
  'DBSecurityGroupQuotaExceededFault': (type, message) =>
      DBSecurityGroupQuotaExceededFault(type: type, message: message),
  'DBShardGroupAlreadyExistsFault': (type, message) =>
      DBShardGroupAlreadyExistsFault(type: type, message: message),
  'DBShardGroupNotFoundFault': (type, message) =>
      DBShardGroupNotFoundFault(type: type, message: message),
  'DBSnapshotAlreadyExistsFault': (type, message) =>
      DBSnapshotAlreadyExistsFault(type: type, message: message),
  'DBSnapshotNotFoundFault': (type, message) =>
      DBSnapshotNotFoundFault(type: type, message: message),
  'DBSnapshotTenantDatabaseNotFoundFault': (type, message) =>
      DBSnapshotTenantDatabaseNotFoundFault(type: type, message: message),
  'DBSubnetGroupAlreadyExistsFault': (type, message) =>
      DBSubnetGroupAlreadyExistsFault(type: type, message: message),
  'DBSubnetGroupDoesNotCoverEnoughAZs': (type, message) =>
      DBSubnetGroupDoesNotCoverEnoughAZs(type: type, message: message),
  'DBSubnetGroupNotAllowedFault': (type, message) =>
      DBSubnetGroupNotAllowedFault(type: type, message: message),
  'DBSubnetGroupNotFoundFault': (type, message) =>
      DBSubnetGroupNotFoundFault(type: type, message: message),
  'DBSubnetGroupQuotaExceededFault': (type, message) =>
      DBSubnetGroupQuotaExceededFault(type: type, message: message),
  'DBSubnetQuotaExceededFault': (type, message) =>
      DBSubnetQuotaExceededFault(type: type, message: message),
  'DBUpgradeDependencyFailureFault': (type, message) =>
      DBUpgradeDependencyFailureFault(type: type, message: message),
  'DomainNotFoundFault': (type, message) =>
      DomainNotFoundFault(type: type, message: message),
  'Ec2ImagePropertiesNotSupportedFault': (type, message) =>
      Ec2ImagePropertiesNotSupportedFault(type: type, message: message),
  'EventSubscriptionQuotaExceededFault': (type, message) =>
      EventSubscriptionQuotaExceededFault(type: type, message: message),
  'ExportTaskAlreadyExistsFault': (type, message) =>
      ExportTaskAlreadyExistsFault(type: type, message: message),
  'ExportTaskNotFoundFault': (type, message) =>
      ExportTaskNotFoundFault(type: type, message: message),
  'GlobalClusterAlreadyExistsFault': (type, message) =>
      GlobalClusterAlreadyExistsFault(type: type, message: message),
  'GlobalClusterNotFoundFault': (type, message) =>
      GlobalClusterNotFoundFault(type: type, message: message),
  'GlobalClusterQuotaExceededFault': (type, message) =>
      GlobalClusterQuotaExceededFault(type: type, message: message),
  'IamRoleMissingPermissionsFault': (type, message) =>
      IamRoleMissingPermissionsFault(type: type, message: message),
  'IamRoleNotFoundFault': (type, message) =>
      IamRoleNotFoundFault(type: type, message: message),
  'InstanceQuotaExceededFault': (type, message) =>
      InstanceQuotaExceededFault(type: type, message: message),
  'InsufficientAvailableIPsInSubnetFault': (type, message) =>
      InsufficientAvailableIPsInSubnetFault(type: type, message: message),
  'InsufficientDBClusterCapacityFault': (type, message) =>
      InsufficientDBClusterCapacityFault(type: type, message: message),
  'InsufficientDBInstanceCapacityFault': (type, message) =>
      InsufficientDBInstanceCapacityFault(type: type, message: message),
  'InsufficientStorageClusterCapacityFault': (type, message) =>
      InsufficientStorageClusterCapacityFault(type: type, message: message),
  'IntegrationAlreadyExistsFault': (type, message) =>
      IntegrationAlreadyExistsFault(type: type, message: message),
  'IntegrationConflictOperationFault': (type, message) =>
      IntegrationConflictOperationFault(type: type, message: message),
  'IntegrationNotFoundFault': (type, message) =>
      IntegrationNotFoundFault(type: type, message: message),
  'IntegrationQuotaExceededFault': (type, message) =>
      IntegrationQuotaExceededFault(type: type, message: message),
  'InvalidBlueGreenDeploymentStateFault': (type, message) =>
      InvalidBlueGreenDeploymentStateFault(type: type, message: message),
  'InvalidCustomDBEngineVersionStateFault': (type, message) =>
      InvalidCustomDBEngineVersionStateFault(type: type, message: message),
  'InvalidDBClusterAutomatedBackupStateFault': (type, message) =>
      InvalidDBClusterAutomatedBackupStateFault(type: type, message: message),
  'InvalidDBClusterCapacityFault': (type, message) =>
      InvalidDBClusterCapacityFault(type: type, message: message),
  'InvalidDBClusterEndpointStateFault': (type, message) =>
      InvalidDBClusterEndpointStateFault(type: type, message: message),
  'InvalidDBClusterSnapshotStateFault': (type, message) =>
      InvalidDBClusterSnapshotStateFault(type: type, message: message),
  'InvalidDBClusterStateFault': (type, message) =>
      InvalidDBClusterStateFault(type: type, message: message),
  'InvalidDBInstanceAutomatedBackupStateFault': (type, message) =>
      InvalidDBInstanceAutomatedBackupStateFault(type: type, message: message),
  'InvalidDBInstanceStateFault': (type, message) =>
      InvalidDBInstanceStateFault(type: type, message: message),
  'InvalidDBParameterGroupStateFault': (type, message) =>
      InvalidDBParameterGroupStateFault(type: type, message: message),
  'InvalidDBProxyEndpointStateFault': (type, message) =>
      InvalidDBProxyEndpointStateFault(type: type, message: message),
  'InvalidDBProxyStateFault': (type, message) =>
      InvalidDBProxyStateFault(type: type, message: message),
  'InvalidDBSecurityGroupStateFault': (type, message) =>
      InvalidDBSecurityGroupStateFault(type: type, message: message),
  'InvalidDBShardGroupStateFault': (type, message) =>
      InvalidDBShardGroupStateFault(type: type, message: message),
  'InvalidDBSnapshotStateFault': (type, message) =>
      InvalidDBSnapshotStateFault(type: type, message: message),
  'InvalidDBSubnetGroupFault': (type, message) =>
      InvalidDBSubnetGroupFault(type: type, message: message),
  'InvalidDBSubnetGroupStateFault': (type, message) =>
      InvalidDBSubnetGroupStateFault(type: type, message: message),
  'InvalidDBSubnetStateFault': (type, message) =>
      InvalidDBSubnetStateFault(type: type, message: message),
  'InvalidEventSubscriptionStateFault': (type, message) =>
      InvalidEventSubscriptionStateFault(type: type, message: message),
  'InvalidExportOnlyFault': (type, message) =>
      InvalidExportOnlyFault(type: type, message: message),
  'InvalidExportSourceStateFault': (type, message) =>
      InvalidExportSourceStateFault(type: type, message: message),
  'InvalidExportTaskStateFault': (type, message) =>
      InvalidExportTaskStateFault(type: type, message: message),
  'InvalidGlobalClusterStateFault': (type, message) =>
      InvalidGlobalClusterStateFault(type: type, message: message),
  'InvalidIntegrationStateFault': (type, message) =>
      InvalidIntegrationStateFault(type: type, message: message),
  'InvalidMaxAcuFault': (type, message) =>
      InvalidMaxAcuFault(type: type, message: message),
  'InvalidOptionGroupStateFault': (type, message) =>
      InvalidOptionGroupStateFault(type: type, message: message),
  'InvalidResourceStateFault': (type, message) =>
      InvalidResourceStateFault(type: type, message: message),
  'InvalidRestoreFault': (type, message) =>
      InvalidRestoreFault(type: type, message: message),
  'InvalidS3BucketFault': (type, message) =>
      InvalidS3BucketFault(type: type, message: message),
  'InvalidSubnet': (type, message) =>
      InvalidSubnet(type: type, message: message),
  'InvalidVPCNetworkStateFault': (type, message) =>
      InvalidVPCNetworkStateFault(type: type, message: message),
  'KMSKeyNotAccessibleFault': (type, message) =>
      KMSKeyNotAccessibleFault(type: type, message: message),
  'MaxDBShardGroupLimitReached': (type, message) =>
      MaxDBShardGroupLimitReached(type: type, message: message),
  'NetworkTypeNotSupported': (type, message) =>
      NetworkTypeNotSupported(type: type, message: message),
  'OptionGroupAlreadyExistsFault': (type, message) =>
      OptionGroupAlreadyExistsFault(type: type, message: message),
  'OptionGroupNotFoundFault': (type, message) =>
      OptionGroupNotFoundFault(type: type, message: message),
  'OptionGroupQuotaExceededFault': (type, message) =>
      OptionGroupQuotaExceededFault(type: type, message: message),
  'PointInTimeRestoreNotEnabledFault': (type, message) =>
      PointInTimeRestoreNotEnabledFault(type: type, message: message),
  'ProvisionedIopsNotAvailableInAZFault': (type, message) =>
      ProvisionedIopsNotAvailableInAZFault(type: type, message: message),
  'ReservedDBInstanceAlreadyExistsFault': (type, message) =>
      ReservedDBInstanceAlreadyExistsFault(type: type, message: message),
  'ReservedDBInstanceNotFoundFault': (type, message) =>
      ReservedDBInstanceNotFoundFault(type: type, message: message),
  'ReservedDBInstanceQuotaExceededFault': (type, message) =>
      ReservedDBInstanceQuotaExceededFault(type: type, message: message),
  'ReservedDBInstancesOfferingNotFoundFault': (type, message) =>
      ReservedDBInstancesOfferingNotFoundFault(type: type, message: message),
  'ResourceNotFoundFault': (type, message) =>
      ResourceNotFoundFault(type: type, message: message),
  'SNSInvalidTopicFault': (type, message) =>
      SNSInvalidTopicFault(type: type, message: message),
  'SNSNoAuthorizationFault': (type, message) =>
      SNSNoAuthorizationFault(type: type, message: message),
  'SNSTopicArnNotFoundFault': (type, message) =>
      SNSTopicArnNotFoundFault(type: type, message: message),
  'SharedSnapshotQuotaExceededFault': (type, message) =>
      SharedSnapshotQuotaExceededFault(type: type, message: message),
  'SnapshotQuotaExceededFault': (type, message) =>
      SnapshotQuotaExceededFault(type: type, message: message),
  'SourceClusterNotSupportedFault': (type, message) =>
      SourceClusterNotSupportedFault(type: type, message: message),
  'SourceDatabaseNotSupportedFault': (type, message) =>
      SourceDatabaseNotSupportedFault(type: type, message: message),
  'SourceNotFoundFault': (type, message) =>
      SourceNotFoundFault(type: type, message: message),
  'StorageQuotaExceededFault': (type, message) =>
      StorageQuotaExceededFault(type: type, message: message),
  'StorageTypeNotAvailableFault': (type, message) =>
      StorageTypeNotAvailableFault(type: type, message: message),
  'StorageTypeNotSupportedFault': (type, message) =>
      StorageTypeNotSupportedFault(type: type, message: message),
  'SubnetAlreadyInUse': (type, message) =>
      SubnetAlreadyInUse(type: type, message: message),
  'SubscriptionAlreadyExistFault': (type, message) =>
      SubscriptionAlreadyExistFault(type: type, message: message),
  'SubscriptionCategoryNotFoundFault': (type, message) =>
      SubscriptionCategoryNotFoundFault(type: type, message: message),
  'SubscriptionNotFoundFault': (type, message) =>
      SubscriptionNotFoundFault(type: type, message: message),
  'TenantDatabaseAlreadyExistsFault': (type, message) =>
      TenantDatabaseAlreadyExistsFault(type: type, message: message),
  'TenantDatabaseNotFoundFault': (type, message) =>
      TenantDatabaseNotFoundFault(type: type, message: message),
  'TenantDatabaseQuotaExceededFault': (type, message) =>
      TenantDatabaseQuotaExceededFault(type: type, message: message),
  'UnsupportedDBEngineVersionFault': (type, message) =>
      UnsupportedDBEngineVersionFault(type: type, message: message),
};
